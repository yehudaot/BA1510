MPASM

CCS PCH C Compiler, Version 4.137, 5799               20-Jun-18 08:46

               Filename: C:\BA\Software_projects\PIC\1510\8.5.18_ver_1_f\BA1510_v1_f\project\BA1510.lst

               ROM used: 14054 bytes (43%)
                         Largest free fragment is 6020
               RAM used: 980 (64%) at main() level
                         1113 (72%) worst case
               Stack:    11 worst case (7 in main + 4 for interrupts)

2000 EF80 F013      00001 GOTO   2700
2008 6E04           00002 MOVWF  04
200A CFD8 F005      00003 MOVFF  FD8,05
200E CFE0 F006      00004 MOVFF  FE0,06
2012 0100           00005 MOVLB  0
2014 CFE9 F00C      00006 MOVFF  FE9,0C
2018 CFEA F007      00007 MOVFF  FEA,07
201C CFE1 F008      00008 MOVFF  FE1,08
2020 CFE2 F009      00009 MOVFF  FE2,09
2024 CFD9 F00A      00010 MOVFF  FD9,0A
2028 CFDA F00B      00011 MOVFF  FDA,0B
202C CFF3 F012      00012 MOVFF  FF3,12
2030 CFF4 F013      00013 MOVFF  FF4,13
2034 CFFA F014      00014 MOVFF  FFA,14
2038 CFF5 F015      00015 MOVFF  FF5,15
203C CFF6 F016      00016 MOVFF  FF6,16
2040 CFF7 F017      00017 MOVFF  FF7,17
2044 C000 F00E      00018 MOVFF  00,0E
2048 C001 F00F      00019 MOVFF  01,0F
204C C002 F010      00020 MOVFF  02,10
2050 C003 F011      00021 MOVFF  03,11
2054 A8F2           00022 BTFSS  FF2.4
2056 EF30 F010      00023 GOTO   2060
205A B2F2           00024 BTFSC  FF2.1
205C EF94 F018      00025 GOTO   3128
2060 AA9D           00026 BTFSS  F9D.5
2062 EF36 F010      00027 GOTO   206C
2066 BA9E           00028 BTFSC  F9E.5
2068 EF51 F013      00029 GOTO   26A2
206C A89D           00030 BTFSS  F9D.4
206E EF3C F010      00031 GOTO   2078
2072 B89E           00032 BTFSC  F9E.4
2074 EF68 F013      00033 GOTO   26D0
2078 C00E F000      00034 MOVFF  0E,00
207C C00F F001      00035 MOVFF  0F,01
2080 C010 F002      00036 MOVFF  10,02
2084 C011 F003      00037 MOVFF  11,03
2088 C00C FFE9      00038 MOVFF  0C,FE9
208C C007 FFEA      00039 MOVFF  07,FEA
2090 8E07           00040 BSF    07.7
2092 C008 FFE1      00041 MOVFF  08,FE1
2096 C009 FFE2      00042 MOVFF  09,FE2
209A C00A FFD9      00043 MOVFF  0A,FD9
209E C00B FFDA      00044 MOVFF  0B,FDA
20A2 C012 FFF3      00045 MOVFF  12,FF3
20A6 C013 FFF4      00046 MOVFF  13,FF4
20AA C014 FFFA      00047 MOVFF  14,FFA
20AE C015 FFF5      00048 MOVFF  15,FF5
20B2 C016 FFF6      00049 MOVFF  16,FF6
20B6 C017 FFF7      00050 MOVFF  17,FF7
20BA 5004           00051 MOVF   04,W
20BC C006 FFE0      00052 MOVFF  06,FE0
20C0 C005 FFD8      00053 MOVFF  05,FD8
20C4 0010           00054 RETFIE 0
                    00055 ....................  
                    00056 ....................  
                    00057 .................... #include <18F45K22.h> 
                    00058 .................... //////// Standard Header file for the PIC18F45K22 device //////////////// 
                    00059 .................... #device PIC18F45K22 
                    00719 .................... #list 
                    00720 ....................  
                    00721 .................... #device adc=10 
                    00722 .................... #device pass_strings=in_ram 
                    00723 ....................  
                    00724 .................... #define LOADER_END 0x1FFF 
                    00725 .................... #include <boot.h> 
                    00726 .................... #undef LOADER_END 
                    00727 .................... #define FLASH_SIZE getenv("FLASH_ERASE_SIZE") 
                    00728 .................... #define LOADER_END   0x1FFF 
                    00729 .................... #define LOADER_SIZE  0x3FF 
                    00730 ....................  
                    00731 .................... #ifndef _bootloader 
                    00732 .................... #build(reset=LOADER_END+1, interrupt=LOADER_END+9) 
                    00733 ....................  
                    00734 .................... /* when in operational software, keep out of the bootloader sections */ 
                    00735 .................... #org 0, 0xfff {} 
                    00736 .................... #org 0x1000, 0x1ffe {} 
                    00737 ....................  
                    00738 .................... #else 
                    00739 ....................  
                    00740 .................... /* when in the bootloader, keep out of the operational sections */ 
                    00741 .................... #org 0x2000, 0x7ffe {} 
                    00742 ....................  
                    00743 .................... #endif 
                    00744 ....................  
                    00745 ....................  
                    00746 .................... #FUSES NOWDT                   //No Watch Dog Timer 
                    00747 .................... #FUSES WDT128                  //Watch Dog Timer uses 1:128 Postscale 
                    00748 .................... #FUSES INTRC_IO                //Internal RC Osc, no CLKOUT 
                    00749 .................... #FUSES NOBROWNOUT              //No brownout reset 
                    00750 .................... #FUSES WDT_SW                  //No Watch Dog Timer, enabled in Software 
                    00751 .................... #FUSES NOLVP                   //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
                    00752 .................... #FUSES NOPUT 
                    00753 .................... #FUSES NOXINST                 //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
                    00754 ....................  
                    00755 .................... #use delay(clock=64000000) 
24A2 0E01           00756 MOVLW  01
24A4 0104           00757 MOVLB  4
24A6 5F4A           00758 SUBWF  x4A,F
24A8 E30C           00759 BNC   24C2
24AA 0E04           00760 MOVLW  04
24AC 6EEA           00761 MOVWF  FEA
24AE 0E4A           00762 MOVLW  4A
24B0 6EE9           00763 MOVWF  FE9
24B2 50EF           00764 MOVF   FEF,W
24B4 E006           00765 BZ    24C2
24B6 0E04           00766 MOVLW  04
24B8 6E00           00767 MOVWF  00
24BA 2E00           00768 DECFSZ 00,F
24BC D7FE           00769 BRA    24BA
24BE 2EEF           00770 DECFSZ FEF,F
24C0 D7FA           00771 BRA    24B6
24C2 0100           00772 MOVLB  0
24C4 0012           00773 RETURN 0
645E 0E03           00774 MOVLW  03
6460 6EEA           00775 MOVWF  FEA
6462 0EE9           00776 MOVLW  E9
6464 6EE9           00777 MOVWF  FE9
6466 50EF           00778 MOVF   FEF,W
6468 E00E           00779 BZ    6486
646A 0E14           00780 MOVLW  14
646C 6E01           00781 MOVWF  01
646E 6A00           00782 CLRF   00
6470 2E00           00783 DECFSZ 00,F
6472 D7FE           00784 BRA    6470
6474 2E01           00785 DECFSZ 01,F
6476 D7FB           00786 BRA    646E
6478 0EBF           00787 MOVLW  BF
647A 6E00           00788 MOVWF  00
647C 2E00           00789 DECFSZ 00,F
647E D7FE           00790 BRA    647C
6480 D000           00791 BRA    6482
6482 2EEF           00792 DECFSZ FEF,F
6484 D7F2           00793 BRA    646A
6486 EF65 F032      00794 GOTO   64CA (RETURN)
                    00795 .................... #use rs232(baud=921600,xmit=PIN_C6,rcv=PIN_C7,ERRORS) 
                    00796 .................... #USE TIMER(TIMER=1,TICK=1us,BITS=32,NOISR) 
                    00797 .................... #use spi(DO=PIN_A4, CLK=PIN_A3, ENABLE=PIN_A2, ENABLE_ACTIVE=0, DATA_HOLD=20, BITS=16) 
3EDA 0104           00798 MOVLB  4
3EDC 5112           00799 MOVF   x12,W
3EDE 0810           00800 SUBLW  10
3EE0 E005           00801 BZ    3EEC
3EE2 6F13           00802 MOVWF  x13
3EE4 3710           00803 RLCF   x10,F
3EE6 3711           00804 RLCF   x11,F
3EE8 2F13           00805 DECFSZ x13,F
3EEA D7FC           00806 BRA    3EE4
3EEC 9892           00807 BCF    F92.4
3EEE 9692           00808 BCF    F92.3
3EF0 9689           00809 BCF    F89.3
3EF2 9492           00810 BCF    F92.2
3EF4 9489           00811 BCF    F89.2
3EF6 C412 F413      00812 MOVFF  412,413
3EFA 8689           00813 BSF    F89.3
3EFC 0E05           00814 MOVLW  05
3EFE 6F14           00815 MOVWF  x14
3F00 2F14           00816 DECFSZ x14,F
3F02 D7FE           00817 BRA    3F00
3F04 AF11           00818 BTFSS  x11.7
3F06 9889           00819 BCF    F89.4
3F08 BF11           00820 BTFSC  x11.7
3F0A 8889           00821 BSF    F89.4
3F0C 3710           00822 RLCF   x10,F
3F0E 3711           00823 RLCF   x11,F
3F10 0E16           00824 MOVLW  16
3F12 6F14           00825 MOVWF  x14
3F14 2F14           00826 DECFSZ x14,F
3F16 D7FE           00827 BRA    3F14
3F18 9689           00828 BCF    F89.3
3F1A 0E06           00829 MOVLW  06
3F1C 6F14           00830 MOVWF  x14
3F1E 2F14           00831 DECFSZ x14,F
3F20 D7FE           00832 BRA    3F1E
3F22 2F13           00833 DECFSZ x13,F
3F24 D7EA           00834 BRA    3EFA
3F26 8489           00835 BSF    F89.2
3F28 0100           00836 MOVLB  0
3F2A EFC0 F01F      00837 GOTO   3F80 (RETURN)
                    00838 ....................  
                    00839 .................... #opt 9 
                    00840 ....................  
                    00841 .................... #use fast_io(a) 
                    00842 .................... #use fast_io(b) 
                    00843 .................... #use fast_io(c) 
                    00844 .................... #use fast_io(d) 
                    00845 .................... #use fast_io(e) 
                    00846 ....................  
                    00847 .................... #define safe_write_program_memory(address, pointer, size) \ 
                    00848 ....................   do { disable_interrupts(GLOBAL); write_program_memory(address, pointer, size); enable_interrupts(GLOBAL); delay_us(1000); } while (0) 
                    00849 ....................  
                    00850 ....................  
                    00851 ....................  
                    00852 ....................  
                    00853 .................... /////////////////////////////////////////////////////////////////////////// 
                    00854 .................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
                    00855 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    00856 .................... //// compiler.  This source code may only be distributed to other      //// 
                    00857 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    00858 .................... //// or distribution is permitted without written permission.          //// 
                    00859 .................... //// Derivative programs created using this software in object code    //// 
                    00860 .................... //// form are not restricted in any way.                               //// 
                    00861 .................... /////////////////////////////////////////////////////////////////////////// 
                    00862 ....................  
                    00863 .................... #ifndef _STDIO 
                    00864 .................... #define _STDIO 
                    00865 .................... #include <string.h> 
                    00866 .................... //////////////////////////////////////////////////////////////////////////// 
                    00867 .................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
                    00868 .................... //// This source code may only be used by licensed users of the CCS C   //// 
                    00869 .................... //// compiler.  This source code may only be distributed to other       //// 
                    00870 .................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
                    00871 .................... //// or distribution is permitted without written permission.           //// 
                    00872 .................... //// Derivative programs created using this software in object code     //// 
                    00873 .................... //// form are not restricted in any way.                                //// 
                    00874 .................... //////////////////////////////////////////////////////////////////////////// 
                    00875 ....................  
                    00876 .................... #ifndef _STRING 
                    00877 .................... #define _STRING 
                    00878 .................... #include <stddef.h> 
                    00879 .................... /////////////////////////////////////////////////////////////////////////// 
                    00880 .................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
                    00881 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    00882 .................... //// compiler.  This source code may only be distributed to other      //// 
                    00883 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    00884 .................... //// or distribution is permitted without written permission.          //// 
                    00885 .................... //// Derivative programs created using this software in object code    //// 
                    00886 .................... //// form are not restricted in any way.                               //// 
                    00887 .................... /////////////////////////////////////////////////////////////////////////// 
                    00888 ....................  
                    00889 .................... #ifndef _STDDEF 
                    00890 ....................  
                    00891 .................... #define _STDDEF 
                    00892 ....................  
                    00893 .................... #if sizeof(unsigned int8 *)==1 
                    00894 .................... #define ptrdiff_t unsigned int8 
                    00895 .................... #else 
                    00896 .................... #define ptrdiff_t unsigned int16 
                    00897 .................... #endif 
                    00898 ....................  
                    00899 .................... #if defined(__PCB__) 
                    00900 .................... #define size_t unsigned int8 
                    00901 .................... #else 
                    00902 .................... #define size_t unsigned int16 
                    00903 .................... #endif 
                    00904 .................... #define wchar_t char 
                    00905 .................... #define NULL 0 
                    00906 ....................  
                    00907 .................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
                    00908 ....................  
                    00909 .................... #endif 
                    00910 ....................  
                    00911 .................... #include <ctype.h> 
                    00912 .................... //////////////////////////////////////////////////////////////////////////// 
                    00913 .................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
                    00914 .................... //// This source code may only be used by licensed users of the CCS C   //// 
                    00915 .................... //// compiler.  This source code may only be distributed to other       //// 
                    00916 .................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
                    00917 .................... //// or distribution is permitted without written permission.           //// 
                    00918 .................... //// Derivative programs created using this software in object code     //// 
                    00919 .................... //// form are not restricted in any way.                                //// 
                    00920 .................... //////////////////////////////////////////////////////////////////////////// 
                    00921 ....................  
                    00922 .................... #ifndef _CTYPE 
                    00923 .................... #define _CTYPE 
                    00924 ....................  
                    00925 .................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
                    00926 .................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
                    00927 .................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
                    00928 .................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
                    00929 .................... #define isdigit(x)  isamong(x,"0123456789") 
                    00930 .................... #define isspace(x)  ((x)==' ') 
                    00931 .................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
                    00932 .................... #define iscntrl(x)  ((x)<' ') 
                    00933 .................... #define isprint(x)  ((x)>=' ') 
                    00934 .................... #define isgraph(x)  ((x)>' ') 
                    00935 .................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
                    00936 ....................  
                    00937 .................... #endif 
                    00938 ....................  
                    00939 ....................  
                    00940 ....................  
                    00941 ....................  
                    00942 ....................  
                    00943 .................... ////////////////////////////////////////////// 
                    00944 .................... //// Uncomment the following define to    //// 
                    00945 .................... //// allow some functions to use a        //// 
                    00946 .................... //// quicker algorithm, but use more ROM  //// 
                    00947 .................... ////                                      //// 
                    00948 .................... //// #define FASTER_BUT_MORE_ROM          //// 
                    00949 .................... ////////////////////////////////////////////// 
                    00950 ....................  
                    00951 ....................  
                    00952 ....................  
                    00953 .................... /*Copying functions*/ 
                    00954 .................... /* standard template: 
                    00955 ....................    void *memmove(void *s1, void *s2, size_t n). 
                    00956 ....................    Copies max of n characters safely (not following ending '\0') 
                    00957 ....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
                    00958 ....................  
                    00959 .................... char *memmove(void *s1,char *s2,size_t n) 
                    00960 .................... { 
                    00961 ....................    char *sc1; 
                    00962 ....................    char *sc2; 
                    00963 ....................    sc1=s1; 
                    00964 ....................    sc2=s2; 
                    00965 ....................    if(sc2<sc1 && sc1 <sc2 +n) 
                    00966 ....................       for(sc1+=n,sc2+=n;0<n;--n) 
                    00967 ....................          *--sc1=*--sc2; 
                    00968 ....................    else 
                    00969 ....................       for(;0<n;--n) 
                    00970 ....................          *sc1++=*sc2++; 
                    00971 ....................   return s1; 
                    00972 ....................   } 
                    00973 ....................  
                    00974 .................... /* Standard template: char *strcpy(char *s1, const char *s2) 
                    00975 ....................    copies the string s2 including the null character to s1. 
                    00976 ....................    This is a compiler built in to handle the different address 
                    00977 ....................    spaces */ 
                    00978 ....................  
                    00979 .................... #define strcopy strcpy 
                    00980 ....................  
                    00981 .................... /* standard template: 
                    00982 ....................    char *strncpy(char *s1, const char *s2, size_t n). 
                    00983 ....................    Copies max of n characters (not following ending '\0') 
                    00984 ....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
                    00985 ....................  
                    00986 .................... char *strncpy(char *s1, char *s2, size_t n) 
                    00987 .................... { 
                    00988 ....................   char *s; 
                    00989 ....................  
                    00990 ....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
                    00991 ....................      *s++ = *s2++; 
                    00992 ....................   for (; n > 0; n--) 
                    00993 ....................      *s++ = '\0'; 
                    00994 ....................  
                    00995 ....................   return(s1); 
                    00996 .................... } 
                    00997 .................... /***********************************************************/ 
                    00998 ....................  
                    00999 .................... /*concatenation functions*/ 
                    01000 .................... /* standard template: char *strcat(char *s1, const char *s2) 
                    01001 .................... appends s2 to s1*/ 
                    01002 ....................  
                    01003 .................... char *strcat(char *s1, char *s2) 
                    01004 .................... { 
                    01005 ....................    char *s; 
                    01006 ....................  
                    01007 ....................    for (s = s1; *s != '\0'; ++s); 
                    01008 ....................    while(*s2 != '\0') 
                    01009 ....................    { 
                    01010 ....................       *s = *s2; 
                    01011 ....................       ++s; 
                    01012 ....................       ++s2; 
                    01013 ....................    } 
                    01014 ....................  
                    01015 ....................    *s = '\0'; 
                    01016 ....................    return(s1); 
                    01017 .................... } 
                    01018 .................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
                    01019 .................... appends not more than n characters from s2 to s1*/ 
                    01020 ....................  
                    01021 .................... char *strncat(char *s1, char *s2, size_t n) 
                    01022 .................... { 
                    01023 ....................    char *s; 
                    01024 ....................  
                    01025 ....................    for (s = s1; *s != '\0'; ++s); 
                    01026 ....................    while(*s2 != '\0' && 0<n) 
                    01027 ....................    { 
                    01028 ....................       *s = *s2; 
                    01029 ....................       ++s; 
                    01030 ....................       ++s2; 
                    01031 ....................       --n; 
                    01032 ....................    } 
                    01033 ....................  
                    01034 ....................    *s = '\0'; 
                    01035 ....................    return(s1); 
                    01036 .................... } 
                    01037 ....................  
                    01038 .................... /***********************************************************/ 
                    01039 ....................  
                    01040 ....................  
                    01041 .................... /*comparison functions*/ 
                    01042 .................... /* standard template: signed int memcmp(void *s1, void *s2). 
                    01043 ....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
                    01044 ....................  
                    01045 .................... signed int8 memcmp(void * s1,char *s2,size_t n) 
                    01046 .................... { 
                    01047 .................... char *su1, *su2; 
                    01048 .................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
368A C423 F429      01049 MOVFF  423,429
368E C422 F428      01050 MOVFF  422,428
3692 C425 F42B      01051 MOVFF  425,42B
3696 C424 F42A      01052 MOVFF  424,42A
369A 0104           01053 MOVLB  4
369C 5327           01054 MOVF   x27,F
369E E103           01055 BNZ   36A6
36A0 5126           01056 MOVF   x26,W
36A2 0800           01057 SUBLW  00
36A4 E230           01058 BC    3706
                    01059 .................... { 
                    01060 ....................    if(*su1!=*su2) 
36A6 C428 FFE9      01061 MOVFF  428,FE9
36AA C429 FFEA      01062 MOVFF  429,FEA
36AE CFEF F42C      01063 MOVFF  FEF,42C
36B2 C42B F003      01064 MOVFF  42B,03
36B6 C42A FFE9      01065 MOVFF  42A,FE9
36BA C42B FFEA      01066 MOVFF  42B,FEA
36BE 50EF           01067 MOVF   FEF,W
36C0 5D2C           01068 SUBWF  x2C,W
36C2 E016           01069 BZ    36F0
                    01070 ....................       return ((*su1<*su2)?-1:+1); 
36C4 C429 F003      01071 MOVFF  429,03
36C8 C428 FFE9      01072 MOVFF  428,FE9
36CC C429 FFEA      01073 MOVFF  429,FEA
36D0 CFEF F42C      01074 MOVFF  FEF,42C
36D4 C42B F003      01075 MOVFF  42B,03
36D8 C42A FFE9      01076 MOVFF  42A,FE9
36DC C42B FFEA      01077 MOVFF  42B,FEA
36E0 50EF           01078 MOVF   FEF,W
36E2 5D2C           01079 SUBWF  x2C,W
36E4 E202           01080 BC    36EA
36E6 0EFF           01081 MOVLW  FF
36E8 D001           01082 BRA    36EC
36EA 0E01           01083 MOVLW  01
36EC 6E01           01084 MOVWF  01
36EE D00D           01085 BRA    370A
                    01086 .................... } 
36F0 2B28           01087 INCF   x28,F
36F2 B4D8           01088 BTFSC  FD8.2
36F4 2B29           01089 INCF   x29,F
36F6 2B2A           01090 INCF   x2A,F
36F8 B4D8           01091 BTFSC  FD8.2
36FA 2B2B           01092 INCF   x2B,F
36FC 5126           01093 MOVF   x26,W
36FE B4D8           01094 BTFSC  FD8.2
3700 0727           01095 DECF   x27,F
3702 0726           01096 DECF   x26,F
3704 D7CB           01097 BRA    369C
                    01098 .................... return 0; 
3706 0E00           01099 MOVLW  00
3708 6E01           01100 MOVWF  01
                    01101 .................... } 
370A 0100           01102 MOVLB  0
370C 0012           01103 RETURN 0
                    01104 ....................  
                    01105 .................... /* standard template: int strcmp(const char *s1, const char *s2). 
                    01106 ....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
                    01107 ....................  
                    01108 .................... signed int8 strcmp(char *s1, char *s2) 
                    01109 .................... { 
                    01110 ....................    for (; *s1 == *s2; s1++, s2++) 
                    01111 ....................       if (*s1 == '\0') 
                    01112 ....................          return(0); 
                    01113 ....................    return((*s1 < *s2) ? -1: 1); 
                    01114 .................... } 
                    01115 .................... /* standard template: int strcoll(const char *s1, const char *s2). 
                    01116 ....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
                    01117 ....................  
                    01118 .................... signed int8 strcoll(char *s1, char *s2) 
                    01119 .................... { 
                    01120 ....................    for (; *s1 == *s2; s1++, s2++) 
                    01121 ....................       if (*s1 == '\0') 
                    01122 ....................          return(0); 
                    01123 ....................    return((*s1 < *s2) ? -1: 1); 
                    01124 .................... } 
                    01125 ....................  
                    01126 .................... /* standard template: 
                    01127 ....................    int strncmp(const char *s1, const char *s2, size_t n). 
                    01128 ....................    Compares max of n characters (not following 0) from s1 to s2; 
                    01129 ....................    returns same as strcmp */ 
                    01130 ....................  
                    01131 .................... signed int8 strncmp(char *s1, char *s2, size_t n) 
                    01132 .................... { 
                    01133 ....................    for (; n > 0; s1++, s2++, n--) 
                    01134 ....................       if (*s1 != *s2) 
                    01135 ....................          return((*s1 <*s2) ? -1: 1); 
                    01136 ....................       else if (*s1 == '\0') 
                    01137 ....................          return(0); 
                    01138 ....................    return(0); 
                    01139 .................... } 
                    01140 .................... /* standard template: 
                    01141 ....................    int strxfrm(const char *s1, const char *s2, size_t n). 
                    01142 ....................    transforms maximum of n characters from s2 and places them into s1*/ 
                    01143 .................... size_t strxfrm(char *s1, char *s2, size_t n) 
                    01144 .................... { 
                    01145 ....................   char *s; 
                    01146 ....................   unsigned int8 n1; 
                    01147 ....................   n1=n; 
                    01148 ....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
                    01149 ....................      *s++ = *s2++; 
                    01150 ....................   for (; n > 0; n--) 
                    01151 ....................      *s++ = '\0'; 
                    01152 ....................  
                    01153 ....................   return(n1); 
                    01154 .................... } 
                    01155 ....................  
                    01156 ....................  
                    01157 ....................  
                    01158 ....................  
                    01159 ....................  
                    01160 .................... /***********************************************************/ 
                    01161 .................... /*Search functions*/ 
                    01162 .................... /* standard template: void *memchr(const char *s, int c). 
                    01163 ....................    Finds first occurrence of c in n characters of s */ 
                    01164 ....................  
                    01165 .................... char *memchr(void *s,unsigned int8 c,size_t n) 
                    01166 .................... { 
                    01167 ....................    char uc; 
                    01168 ....................    char *su; 
                    01169 ....................    uc=c; 
                    01170 ....................    for(su=s;0<n;++su,--n) 
                    01171 ....................       if(*su==uc) 
                    01172 ....................       return su; 
                    01173 ....................    return NULL; 
                    01174 .................... } 
                    01175 ....................  
                    01176 .................... /* standard template: char *strchr(const char *s, int c). 
                    01177 ....................    Finds first occurrence of c in s */ 
                    01178 ....................  
                    01179 .................... char *strchr(char *s, unsigned int8 c) 
                    01180 .................... { 
                    01181 ....................    for (; *s != c; s++) 
                    01182 ....................       if (*s == '\0') 
                    01183 ....................          return(0); 
                    01184 ....................    return(s); 
                    01185 .................... } 
                    01186 .................... /* standard template: 
                    01187 ....................    size_t strcspn(const char *s1, const char *s2). 
                    01188 ....................    Computes length of max initial segment of s1 that 
                    01189 ....................    consists entirely of characters NOT from s2*/ 
                    01190 ....................  
                    01191 .................... unsigned int8  strcspn(char *s1, char *s2) 
                    01192 .................... { 
                    01193 ....................    char *sc1, *sc2; 
                    01194 ....................  
                    01195 ....................    for (sc1 = s1; *sc1 != 0; sc1++) 
                    01196 ....................       for (sc2 = s2; *sc2 != 0; sc2++) 
                    01197 ....................          if (*sc1 == *sc2) 
                    01198 ....................             return(sc1 - s1); 
                    01199 ....................    return(sc1 - s1); 
                    01200 .................... } 
                    01201 .................... /* standard template: 
                    01202 ....................    char *strpbrk(const char *s1, const char *s2). 
                    01203 ....................    Locates first occurence of any character from s2 in s1; 
                    01204 ....................    returns s1 if s2 is empty string */ 
                    01205 ....................  
                    01206 .................... char *strpbrk(char *s1, char *s2) 
                    01207 .................... { 
                    01208 ....................    char *sc1, *sc2; 
                    01209 ....................  
                    01210 ....................    for (sc1 = s1; *sc1 != 0; sc1++) 
                    01211 ....................       for (sc2 = s2; *sc2 != 0; sc2++) 
                    01212 ....................          if (*sc1 == *sc2) 
                    01213 ....................             return(sc1); 
                    01214 ....................    return(0); 
                    01215 .................... } 
                    01216 ....................  
                    01217 ....................  
                    01218 .................... /* standard template: char *strrchr(const char *s, int c). 
                    01219 ....................    Finds last occurrence of c in s */ 
                    01220 ....................  
                    01221 .................... char *strrchr(char *s, unsigned int8 c) 
                    01222 .................... { 
                    01223 ....................    char *p; 
                    01224 ....................  
                    01225 ....................    for (p = 0; ; s++) 
                    01226 ....................    { 
                    01227 ....................       if (*s == c) 
                    01228 ....................          p = s; 
                    01229 ....................       if (*s == '\0') 
                    01230 ....................          return(p); 
                    01231 ....................    } 
                    01232 .................... } 
                    01233 .................... /* computes length of max initial segment of s1 consisting 
                    01234 ....................    entirely of characters from s2 */ 
                    01235 ....................  
                    01236 .................... unsigned int8  strspn(char *s1, char *s2) 
                    01237 .................... { 
                    01238 ....................    char *sc1, *sc2; 
                    01239 ....................  
                    01240 ....................    for (sc1 = s1; *sc1 != 0; sc1++) 
                    01241 ....................       for (sc2 = s2; ; sc2++) 
                    01242 ....................     if (*sc2 == '\0') 
                    01243 ....................        return(sc1 - s1); 
                    01244 ....................          else if (*sc1 == *sc2) 
                    01245 ....................             break; 
                    01246 ....................    return(sc1 - s1); 
                    01247 .................... } 
                    01248 .................... /* standard template: 
                    01249 ....................    char *strstr(const char *s1, const char *s2); 
                    01250 ....................    Locates first occurence of character sequence s2 in s1; 
                    01251 ....................    returns 0 if s2 is empty string 
                    01252 ....................  
                    01253 ....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
                    01254 ....................    file to use the faster algorithm */ 
                    01255 .................... char *strstr(char *s1, char *s2) 
                    01256 .................... { 
                    01257 ....................    char *s, *t; 
                    01258 ....................  
                    01259 ....................    #ifdef FASTER_BUT_MORE_ROM 
                    01260 ....................    if (*s2 == '\0') 
                    01261 ....................          return(s1); 
                    01262 ....................    #endif 
                    01263 ....................  
                    01264 ....................    while (*s1) 
                    01265 ....................    { 
                    01266 ....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
                    01267 ....................  
                    01268 ....................       if (*t == '\0') 
                    01269 ....................          return s1; 
                    01270 ....................       ++s1; 
                    01271 ....................       #ifdef FASTER_BUT_MORE_ROM 
                    01272 ....................          while(*s1 != '\0' && *s1 != *s2) 
                    01273 ....................             ++s1; 
                    01274 ....................       #endif 
                    01275 ....................    } 
                    01276 ....................    return 0; 
                    01277 .................... } 
                    01278 ....................  
                    01279 .................... /* standard template: char *strtok(char *s1, const char *s2). 
                    01280 ....................  
                    01281 ....................    Finds next token in s1 delimited by a character from separator 
                    01282 ....................    string s2 (which can be different from call to call).  First call 
                    01283 ....................    starts at beginning of s1 searching for first character NOT 
                    01284 ....................    contained in s2; returns 0 if none is found. 
                    01285 ....................    If one is found, it is the start of first token (return value). 
                    01286 ....................    Function then searches from there for a character contained in s2. 
                    01287 ....................    If none is found, current token extends to end of s1, and subsequent 
                    01288 ....................    searches for a token will return 0.  If one is found, it is 
                    01289 ....................    overwritten by '\0', which terminates current token.  Function saves 
                    01290 ....................    pointer to following character from which next search will start. 
                    01291 ....................    Each subsequent call, with 0 as first argument, starts searching 
                    01292 ....................    from saved pointer */ 
                    01293 ....................  
                    01294 .................... char *strtok(char *s1, char *s2) 
                    01295 .................... { 
                    01296 ....................    char *beg, *end; 
                    01297 ....................    static char *save; 
                    01298 ....................  
                    01299 ....................    beg = (s1)? s1: save; 
                    01300 ....................    beg += strspn(beg, s2); 
                    01301 ....................    if (*beg == '\0') 
                    01302 ....................    { 
                    01303 ....................       *save = ' '; 
                    01304 ....................       return(0); 
                    01305 ....................    } 
                    01306 ....................    end = strpbrk(beg, s2); 
                    01307 ....................    if (*end != '\0') 
                    01308 ....................    { 
                    01309 ....................       *end = '\0'; 
                    01310 ....................       end++; 
                    01311 ....................    } 
                    01312 ....................    save = end; 
                    01313 ....................    return(beg); 
                    01314 .................... } 
                    01315 ....................  
                    01316 .................... /*****************************************************************/ 
                    01317 .................... /*Miscellaneous functions*/ 
                    01318 .................... /* standard template 
                    01319 .................... maps error number in errnum to an error message string 
                    01320 .................... Returns: Pointer to string 
                    01321 .................... */ 
                    01322 .................... #ifdef _ERRNO 
                    01323 .................... char * strerror(unsigned int8 errnum) 
                    01324 .................... { 
                    01325 .................... static char s[13]; 
                    01326 .................... switch( errnum) 
                    01327 .................... { 
                    01328 .................... case 0: 
                    01329 ....................    strcpy(s,"no errors"); 
                    01330 ....................    return s; 
                    01331 .................... case EDOM : 
                    01332 ....................    strcpy(s,"domain error"); 
                    01333 ....................    return s; 
                    01334 .................... case ERANGE: 
                    01335 ....................    strcpy(s,"range error"); 
                    01336 ....................    return s; 
                    01337 .................... } 
                    01338 .................... } 
                    01339 .................... #ENDIF 
                    01340 .................... /* standard template: size_t strlen(const char *s). 
                    01341 ....................    Computes length of s1 (preceding terminating 0) */ 
                    01342 ....................  
                    01343 .................... unsigned int8 strlen(char *s) 
                    01344 .................... { 
                    01345 ....................    char *sc; 
                    01346 ....................  
                    01347 ....................    for (sc = s; *sc != 0; sc++); 
                    01348 ....................    return(sc - s); 
                    01349 .................... } 
                    01350 ....................  
                    01351 .................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
                    01352 ....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
                    01353 ....................  
                    01354 .................... signed int8 stricmp(char *s1, char *s2) 
                    01355 .................... { 
                    01356 ....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
                    01357 ....................     s1++, s2++) 
                    01358 ....................     if (*s1 == '\0') 
                    01359 ....................        return(0); 
                    01360 ....................  return((*s1 < *s2) ? -1: 1); 
                    01361 .................... } 
                    01362 ....................  
                    01363 ....................  
                    01364 .................... /* standard template: char *strlwr(char *s). 
                    01365 ....................    Replaces uppercase letters by lowercase; 
                    01366 ....................    returns pointer to new string s */ 
                    01367 ....................  
                    01368 .................... char *strlwr(char *s) 
                    01369 .................... { 
                    01370 ....................    char *p; 
                    01371 ....................  
                    01372 ....................    for (p = s; *p != '\0'; p++) 
                    01373 ....................       if (*p >= 'A' && *p <='Z') 
                    01374 ....................          *p += 'a' - 'A'; 
                    01375 ....................    return(s); 
                    01376 .................... } 
                    01377 ....................  
                    01378 .................... /* standard template: char *strupr(char *s). 
                    01379 ....................    Replaces lowercase letters by upercase; 
                    01380 ....................    returns pointer to new string s */ 
                    01381 ....................  
                    01382 .................... char *strupr(char *s) 
                    01383 .................... { 
                    01384 ....................    char *p; 
                    01385 ....................  
                    01386 ....................    for (p = s; *p != '\0'; p++) 
                    01387 ....................       if (*p >= 'a' && *p <='z') 
                    01388 ....................          *p -= 'a' - 'A'; 
                    01389 ....................    return(s); 
                    01390 .................... } 
                    01391 ....................  
                    01392 ....................  
                    01393 .................... /************************************************************/ 
                    01394 ....................  
                    01395 ....................  
                    01396 .................... #endif 
                    01397 ....................  
                    01398 .................... #ifndef getc 
                    01399 .................... #define getc getch 
                    01400 .................... #define getchar getch 
                    01401 .................... #define puts(s) {printf(s); putchar(13); putchar(10);} 
                    01402 .................... #define putc putchar 
                    01403 .................... #endif 
                    01404 .................... /* maps error number to an error message. Writes a sequence of characters to 
                    01405 .................... stderr stream thus: if s is not null then string pointed to by s follwed by 
                    01406 .................... a colon (:) and a space and the appropriate error message returned by strerror 
                    01407 .................... function with argument errno 
                    01408 ....................  
                    01409 .................... Returns: no value 
                    01410 .................... */ 
                    01411 ....................  
                    01412 .................... #ifdef _ERRNO 
                    01413 .................... void perror(char *s) 
                    01414 .................... { 
                    01415 ....................   if(s) 
                    01416 ....................   fprintf(STDERR,"%s: ",s); 
                    01417 ....................   fprintf(STDERR,"%s\r\n",strerror(errno)); 
                    01418 .................... } 
                    01419 .................... #endif 
                    01420 .................... #endif 
                    01421 ....................  
                    01422 ....................  
                    01423 .................... /////////////////////////////////////////////////////////////////////////// 
                    01424 .................... ////                                                                   //// 
                    01425 .................... ////                           stdint.h                                //// 
                    01426 .................... ////                                                                   //// 
                    01427 .................... //// Standard integer definitions.                                     //// 
                    01428 .................... ////                                                                   //// 
                    01429 .................... /////////////////////////////////////////////////////////////////////////// 
                    01430 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    01431 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    01432 .................... //// compiler.  This source code may only be distributed to other      //// 
                    01433 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    01434 .................... //// or distribution is permitted without written permission.          //// 
                    01435 .................... //// Derivative programs created using this software in object code    //// 
                    01436 .................... //// form are not restricted in any way.                               //// 
                    01437 .................... /////////////////////////////////////////////////////////////////////////// 
                    01438 ....................  
                    01439 .................... #ifndef _STDINT 
                    01440 ....................  
                    01441 .................... #define _STDINT 
                    01442 ....................  
                    01443 .................... //////////// exact width 
                    01444 ....................  
                    01445 .................... typedef signed int8 int8_t; 
                    01446 .................... typedef unsigned int8 uint8_t; 
                    01447 .................... typedef signed int16 int16_t; 
                    01448 .................... typedef unsigned int16 uint16_t; 
                    01449 .................... typedef signed int32 int32_t; 
                    01450 .................... typedef unsigned int32 uint32_t; 
                    01451 ....................  
                    01452 .................... #if defined(__PCD__) 
                    01453 .................... //typedef signed int24 int24_t; 
                    01454 .................... //typedef unsigned int24 uint24_t; 
                    01455 .................... typedef signed int64 int64_t; 
                    01456 .................... typedef unsigned int64 uint64_t; 
                    01457 .................... #endif 
                    01458 ....................  
                    01459 .................... #define INT8_MAX  (128) 
                    01460 .................... #define INT8_MIN  (-127) 
                    01461 .................... #define UINT8_MAX (255) 
                    01462 ....................  
                    01463 .................... #define INT16_MAX  (32767) 
                    01464 .................... #define INT16_MIN  (-32768) 
                    01465 .................... #define UINT16_MAX (65535) 
                    01466 ....................  
                    01467 .................... #define INT32_MAX  (2147483647) 
                    01468 .................... #define INT32_MIN  (-2147483648) 
                    01469 .................... #define UINT32_MAX (4294967295) 
                    01470 ....................  
                    01471 .................... #if defined(__PCD__) 
                    01472 .................... //#define INT24_MAX  (8388607) 
                    01473 .................... //#define INT24_MIN  (-8388608) 
                    01474 .................... //#define UINT24_MAX (16777215) 
                    01475 ....................  
                    01476 .................... #define INT64_MAX  (9223372036854775807) 
                    01477 .................... #define INT64_MIN  (-9223372036854775808) 
                    01478 .................... #define UINT64_MAX (18446744073709551615) 
                    01479 .................... #endif 
                    01480 ....................  
                    01481 .................... ///////// minimum width 
                    01482 ....................  
                    01483 .................... typedef signed int8 int_least8_t; 
                    01484 .................... typedef unsigned int8 uint_least8_t; 
                    01485 .................... typedef signed int16 int_least16_t; 
                    01486 .................... typedef unsigned int16 uint_least16_t; 
                    01487 .................... typedef signed int32 int_least32_t; 
                    01488 .................... typedef unsigned int32 uint_least32_t; 
                    01489 ....................  
                    01490 .................... #if defined(__PCD__) 
                    01491 .................... //typedef signed int24 int_least24_t; 
                    01492 .................... //typedef unsigned int24 uint_least24_t; 
                    01493 .................... typedef signed int64 int_least64_t; 
                    01494 .................... typedef unsigned int64 uint_least64_t; 
                    01495 .................... #endif 
                    01496 ....................  
                    01497 .................... #define INT_LEAST8_MAX  (128) 
                    01498 .................... #define INT_LEAST8_MIN  (-127) 
                    01499 .................... #define UINT_LEAST8_MAX (255) 
                    01500 ....................  
                    01501 .................... #define INT_LEAST16_MAX  (32767) 
                    01502 .................... #define INT_LEAST16_MIN  (-32768) 
                    01503 .................... #define UINT_LEAST16_MAX (65535) 
                    01504 ....................  
                    01505 .................... #define INT_LEAST32_MAX  (2147483647) 
                    01506 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    01507 .................... #define UINT_LEAST32_MAX (4294967295) 
                    01508 ....................  
                    01509 .................... #if defined(__PCD__) 
                    01510 .................... //#define INT_LEAST24_MAX  (8388607) 
                    01511 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    01512 .................... //#define UINT_LEAST24_MAX (16777215) 
                    01513 ....................  
                    01514 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    01515 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    01516 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    01517 .................... #endif 
                    01518 ....................  
                    01519 .................... ///////// fastest width 
                    01520 ....................  
                    01521 .................... #if defined(__PCD__) 
                    01522 .................... typedef signed int16 int_fast8_t; 
                    01523 .................... typedef unsigned int16 uint_fast8_t; 
                    01524 .................... #define INT_FAST8_MAX  (32767) 
                    01525 .................... #define INT_FAST8_MIN  (-32768) 
                    01526 .................... #define UINT_FAST8_MAX (65535) 
                    01527 .................... typedef signed int16 int_fast16_t; 
                    01528 .................... typedef unsigned int16 uint_fast16_t; 
                    01529 .................... //typedef signed int24 int_fast24_t; 
                    01530 .................... //typedef unsigned int24 uint_fast24_t; 
                    01531 .................... typedef signed int64 int_fast64_t; 
                    01532 .................... typedef unsigned int64 uint_fast64_t; 
                    01533 .................... #else 
                    01534 .................... typedef signed int8 int_fast8_t; 
                    01535 .................... typedef unsigned int8 uint_fast8_t; 
                    01536 .................... #define INT_FAST8_MAX  (128) 
                    01537 .................... #define INT_FAST8_MIN  (-127) 
                    01538 .................... #define UINT_FAST8_MAX (255) 
                    01539 .................... typedef signed int16 int_fast16_t; 
                    01540 .................... typedef unsigned int16 uint_fast16_t; 
                    01541 .................... #endif 
                    01542 ....................  
                    01543 .................... typedef signed int32 int_fast32_t; 
                    01544 .................... typedef unsigned int32 uint_fast32_t; 
                    01545 ....................  
                    01546 .................... #define INT_FAST16_MAX  (32767) 
                    01547 .................... #define INT_FAST16_MIN  (-32768) 
                    01548 .................... #define UINT_FAST16_MAX (65535) 
                    01549 ....................  
                    01550 .................... #define INT_FAST32_MAX  (2147483647) 
                    01551 .................... #define INT_FAST32_MIN  (-2147483648) 
                    01552 .................... #define UINT_FAST32_MAX (4294967295) 
                    01553 ....................  
                    01554 .................... #if defined(__PCD__) 
                    01555 .................... //#define INT_FAST24_MAX  (8388607) 
                    01556 .................... //#define INT_FAST24_MIN  (-8388608) 
                    01557 .................... //#define UINT_FAST24_MAX (16777215) 
                    01558 ....................  
                    01559 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    01560 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    01561 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    01562 .................... #endif 
                    01563 ....................  
                    01564 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    01565 ....................  
                    01566 .................... /// TODO 
                    01567 ....................  
                    01568 .................... /// intptr_t uintptr_t 
                    01569 ....................  
                    01570 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    01571 ....................  
                    01572 ....................  
                    01573 .................... /////////// greatest width (OPTIONAL) 
                    01574 ....................  
                    01575 .................... /// TODO 
                    01576 ....................  
                    01577 .................... /// intmax_t uintmax_t 
                    01578 ....................  
                    01579 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    01580 ....................  
                    01581 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    01582 ....................  
                    01583 ....................  
                    01584 .................... #endif 
                    01585 ....................  
                    01586 ....................  
                    01587 .................... //////////////////////////////////////////////////////////////////////////// 
                    01588 .................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
                    01589 .................... //// This source code may only be used by licensed users of the CCS C   //// 
                    01590 .................... //// compiler.  This source code may only be distributed to other       //// 
                    01591 .................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
                    01592 .................... //// or distribution is permitted without written permission.           //// 
                    01593 .................... //// Derivative programs created using this software in object code     //// 
                    01594 .................... //// form are not restricted in any way.                                //// 
                    01595 .................... //////////////////////////////////////////////////////////////////////////// 
                    01596 ....................  
                    01597 .................... #ifndef _CTYPE 
                    01598 .................... #define _CTYPE 
                    01599 ....................  
                    01600 .................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
                    01601 .................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
                    01602 .................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
                    01603 .................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
                    01604 .................... #define isdigit(x)  isamong(x,"0123456789") 
                    01605 .................... #define isspace(x)  ((x)==' ') 
                    01606 .................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
                    01607 .................... #define iscntrl(x)  ((x)<' ') 
                    01608 .................... #define isprint(x)  ((x)>=' ') 
                    01609 .................... #define isgraph(x)  ((x)>' ') 
                    01610 .................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
                    01611 ....................  
                    01612 .................... #endif 
                    01613 ....................  
                    01614 ....................  
                    01615 ....................  
                    01616 ....................  
                    01617 .................... /* 
                    01618 ....................  * comm.h 
                    01619 ....................  * 
                    01620 ....................  *  Created on: Mar 23, 2017 
                    01621 ....................  *      Author: asaf 
                    01622 ....................  */ 
                    01623 ....................  
                    01624 .................... #ifndef COMM_H_ 
                    01625 .................... #define COMM_H_ 
                    01626 ....................  
                    01627 .................... #include <stdint.h> 
                    01628 .................... /////////////////////////////////////////////////////////////////////////// 
                    01629 .................... ////                                                                   //// 
                    01630 .................... ////                           stdint.h                                //// 
                    01631 .................... ////                                                                   //// 
                    01632 .................... //// Standard integer definitions.                                     //// 
                    01633 .................... ////                                                                   //// 
                    01634 .................... /////////////////////////////////////////////////////////////////////////// 
                    01635 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    01636 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    01637 .................... //// compiler.  This source code may only be distributed to other      //// 
                    01638 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    01639 .................... //// or distribution is permitted without written permission.          //// 
                    01640 .................... //// Derivative programs created using this software in object code    //// 
                    01641 .................... //// form are not restricted in any way.                               //// 
                    01642 .................... /////////////////////////////////////////////////////////////////////////// 
                    01643 ....................  
                    01644 .................... #ifndef _STDINT 
                    01645 ....................  
                    01646 .................... #define _STDINT 
                    01647 ....................  
                    01648 .................... //////////// exact width 
                    01649 ....................  
                    01650 .................... typedef signed int8 int8_t; 
                    01651 .................... typedef unsigned int8 uint8_t; 
                    01652 .................... typedef signed int16 int16_t; 
                    01653 .................... typedef unsigned int16 uint16_t; 
                    01654 .................... typedef signed int32 int32_t; 
                    01655 .................... typedef unsigned int32 uint32_t; 
                    01656 ....................  
                    01657 .................... #if defined(__PCD__) 
                    01658 .................... //typedef signed int24 int24_t; 
                    01659 .................... //typedef unsigned int24 uint24_t; 
                    01660 .................... typedef signed int64 int64_t; 
                    01661 .................... typedef unsigned int64 uint64_t; 
                    01662 .................... #endif 
                    01663 ....................  
                    01664 .................... #define INT8_MAX  (128) 
                    01665 .................... #define INT8_MIN  (-127) 
                    01666 .................... #define UINT8_MAX (255) 
                    01667 ....................  
                    01668 .................... #define INT16_MAX  (32767) 
                    01669 .................... #define INT16_MIN  (-32768) 
                    01670 .................... #define UINT16_MAX (65535) 
                    01671 ....................  
                    01672 .................... #define INT32_MAX  (2147483647) 
                    01673 .................... #define INT32_MIN  (-2147483648) 
                    01674 .................... #define UINT32_MAX (4294967295) 
                    01675 ....................  
                    01676 .................... #if defined(__PCD__) 
                    01677 .................... //#define INT24_MAX  (8388607) 
                    01678 .................... //#define INT24_MIN  (-8388608) 
                    01679 .................... //#define UINT24_MAX (16777215) 
                    01680 ....................  
                    01681 .................... #define INT64_MAX  (9223372036854775807) 
                    01682 .................... #define INT64_MIN  (-9223372036854775808) 
                    01683 .................... #define UINT64_MAX (18446744073709551615) 
                    01684 .................... #endif 
                    01685 ....................  
                    01686 .................... ///////// minimum width 
                    01687 ....................  
                    01688 .................... typedef signed int8 int_least8_t; 
                    01689 .................... typedef unsigned int8 uint_least8_t; 
                    01690 .................... typedef signed int16 int_least16_t; 
                    01691 .................... typedef unsigned int16 uint_least16_t; 
                    01692 .................... typedef signed int32 int_least32_t; 
                    01693 .................... typedef unsigned int32 uint_least32_t; 
                    01694 ....................  
                    01695 .................... #if defined(__PCD__) 
                    01696 .................... //typedef signed int24 int_least24_t; 
                    01697 .................... //typedef unsigned int24 uint_least24_t; 
                    01698 .................... typedef signed int64 int_least64_t; 
                    01699 .................... typedef unsigned int64 uint_least64_t; 
                    01700 .................... #endif 
                    01701 ....................  
                    01702 .................... #define INT_LEAST8_MAX  (128) 
                    01703 .................... #define INT_LEAST8_MIN  (-127) 
                    01704 .................... #define UINT_LEAST8_MAX (255) 
                    01705 ....................  
                    01706 .................... #define INT_LEAST16_MAX  (32767) 
                    01707 .................... #define INT_LEAST16_MIN  (-32768) 
                    01708 .................... #define UINT_LEAST16_MAX (65535) 
                    01709 ....................  
                    01710 .................... #define INT_LEAST32_MAX  (2147483647) 
                    01711 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    01712 .................... #define UINT_LEAST32_MAX (4294967295) 
                    01713 ....................  
                    01714 .................... #if defined(__PCD__) 
                    01715 .................... //#define INT_LEAST24_MAX  (8388607) 
                    01716 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    01717 .................... //#define UINT_LEAST24_MAX (16777215) 
                    01718 ....................  
                    01719 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    01720 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    01721 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    01722 .................... #endif 
                    01723 ....................  
                    01724 .................... ///////// fastest width 
                    01725 ....................  
                    01726 .................... #if defined(__PCD__) 
                    01727 .................... typedef signed int16 int_fast8_t; 
                    01728 .................... typedef unsigned int16 uint_fast8_t; 
                    01729 .................... #define INT_FAST8_MAX  (32767) 
                    01730 .................... #define INT_FAST8_MIN  (-32768) 
                    01731 .................... #define UINT_FAST8_MAX (65535) 
                    01732 .................... typedef signed int16 int_fast16_t; 
                    01733 .................... typedef unsigned int16 uint_fast16_t; 
                    01734 .................... //typedef signed int24 int_fast24_t; 
                    01735 .................... //typedef unsigned int24 uint_fast24_t; 
                    01736 .................... typedef signed int64 int_fast64_t; 
                    01737 .................... typedef unsigned int64 uint_fast64_t; 
                    01738 .................... #else 
                    01739 .................... typedef signed int8 int_fast8_t; 
                    01740 .................... typedef unsigned int8 uint_fast8_t; 
                    01741 .................... #define INT_FAST8_MAX  (128) 
                    01742 .................... #define INT_FAST8_MIN  (-127) 
                    01743 .................... #define UINT_FAST8_MAX (255) 
                    01744 .................... typedef signed int16 int_fast16_t; 
                    01745 .................... typedef unsigned int16 uint_fast16_t; 
                    01746 .................... #endif 
                    01747 ....................  
                    01748 .................... typedef signed int32 int_fast32_t; 
                    01749 .................... typedef unsigned int32 uint_fast32_t; 
                    01750 ....................  
                    01751 .................... #define INT_FAST16_MAX  (32767) 
                    01752 .................... #define INT_FAST16_MIN  (-32768) 
                    01753 .................... #define UINT_FAST16_MAX (65535) 
                    01754 ....................  
                    01755 .................... #define INT_FAST32_MAX  (2147483647) 
                    01756 .................... #define INT_FAST32_MIN  (-2147483648) 
                    01757 .................... #define UINT_FAST32_MAX (4294967295) 
                    01758 ....................  
                    01759 .................... #if defined(__PCD__) 
                    01760 .................... //#define INT_FAST24_MAX  (8388607) 
                    01761 .................... //#define INT_FAST24_MIN  (-8388608) 
                    01762 .................... //#define UINT_FAST24_MAX (16777215) 
                    01763 ....................  
                    01764 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    01765 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    01766 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    01767 .................... #endif 
                    01768 ....................  
                    01769 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    01770 ....................  
                    01771 .................... /// TODO 
                    01772 ....................  
                    01773 .................... /// intptr_t uintptr_t 
                    01774 ....................  
                    01775 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    01776 ....................  
                    01777 ....................  
                    01778 .................... /////////// greatest width (OPTIONAL) 
                    01779 ....................  
                    01780 .................... /// TODO 
                    01781 ....................  
                    01782 .................... /// intmax_t uintmax_t 
                    01783 ....................  
                    01784 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    01785 ....................  
                    01786 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    01787 ....................  
                    01788 ....................  
                    01789 .................... #endif 
                    01790 ....................  
                    01791 .................... #include <stdbool.h> 
                    01792 .................... /////////////////////////////////////////////////////////////////////////// 
                    01793 .................... ////                                                                   //// 
                    01794 .................... ////                          stdbool.h                                //// 
                    01795 .................... ////                                                                   //// 
                    01796 .................... //// Standard boolean definitions                                      //// 
                    01797 .................... ////                                                                   //// 
                    01798 .................... /////////////////////////////////////////////////////////////////////////// 
                    01799 .................... ////        (C) Copyright 1996,2012 Custom Computer Services           //// 
                    01800 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    01801 .................... //// compiler.  This source code may only be distributed to other      //// 
                    01802 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    01803 .................... //// or distribution is permitted without written permission.          //// 
                    01804 .................... //// Derivative programs created using this software in object code    //// 
                    01805 .................... //// form are not restricted in any way.                               //// 
                    01806 .................... /////////////////////////////////////////////////////////////////////////// 
                    01807 ....................  
                    01808 .................... #ifndef __STDBOOL_H__ 
                    01809 .................... #define __STDBOOL_H__ 
                    01810 ....................  
                    01811 .................... //remove TRUE and FALSE added by CCS's device .h file 
                    01812 .................... #if defined(TRUE) 
                    01813 .................... #undef TRUE 
                    01814 .................... #endif 
                    01815 .................... #if defined(FALSE) 
                    01816 .................... #undef FALSE 
                    01817 .................... #endif 
                    01818 ....................  
                    01819 .................... typedef int1   bool; 
                    01820 .................... #define true   1 
                    01821 .................... #define false  0 
                    01822 .................... #define __bool_true_false_are_defined  1 
                    01823 ....................  
                    01824 .................... #endif 
                    01825 ....................  
                    01826 ....................  
                    01827 .................... #define MSG_MAX_MESSAGE_LEN 80 
                    01828 ....................  
                    01829 .................... #ifndef MIN 
                    01830 .................... #define MIN(x,y) ((x)<(y)?(x):(y)) 
                    01831 .................... #endif 
                    01832 .................... #ifndef MAX 
                    01833 .................... #define	MAX(a,b) (((a)>(b))?(a):(b)) 
                    01834 .................... #endif 
                    01835 ....................  
                    01836 .................... #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0])) 
                    01837 .................... #define MAX_INDEX_IN_ARRAY(x) (ARRAY_SIZE(x)-1) 
                    01838 ....................  
                    01839 .................... void comm_init(); 
                    01840 .................... bool comm_receive_message(void* buffer, uint16_t* size); 
                    01841 .................... void comm_send_message(void* buffer, uint16_t size); 
                    01842 ....................  
                    01843 ....................  
                    01844 ....................  
                    01845 .................... #endif /* COMM_H_ */ 
                    01846 ....................  
                    01847 ....................  
                    01848 .................... /* 
                    01849 ....................  * gpio.h 
                    01850 ....................  * 
                    01851 ....................  *  Created on: Mar 8, 2017 
                    01852 ....................  *      Author: asafe 
                    01853 ....................  */ 
                    01854 ....................  
                    01855 .................... #ifndef INCLUDE_GPIO_H_ 
                    01856 .................... #define INCLUDE_GPIO_H_ 
                    01857 ....................  
                    01858 .................... #include <stdint.h> 
                    01859 .................... /////////////////////////////////////////////////////////////////////////// 
                    01860 .................... ////                                                                   //// 
                    01861 .................... ////                           stdint.h                                //// 
                    01862 .................... ////                                                                   //// 
                    01863 .................... //// Standard integer definitions.                                     //// 
                    01864 .................... ////                                                                   //// 
                    01865 .................... /////////////////////////////////////////////////////////////////////////// 
                    01866 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    01867 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    01868 .................... //// compiler.  This source code may only be distributed to other      //// 
                    01869 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    01870 .................... //// or distribution is permitted without written permission.          //// 
                    01871 .................... //// Derivative programs created using this software in object code    //// 
                    01872 .................... //// form are not restricted in any way.                               //// 
                    01873 .................... /////////////////////////////////////////////////////////////////////////// 
                    01874 ....................  
                    01875 .................... #ifndef _STDINT 
                    01876 ....................  
                    01877 .................... #define _STDINT 
                    01878 ....................  
                    01879 .................... //////////// exact width 
                    01880 ....................  
                    01881 .................... typedef signed int8 int8_t; 
                    01882 .................... typedef unsigned int8 uint8_t; 
                    01883 .................... typedef signed int16 int16_t; 
                    01884 .................... typedef unsigned int16 uint16_t; 
                    01885 .................... typedef signed int32 int32_t; 
                    01886 .................... typedef unsigned int32 uint32_t; 
                    01887 ....................  
                    01888 .................... #if defined(__PCD__) 
                    01889 .................... //typedef signed int24 int24_t; 
                    01890 .................... //typedef unsigned int24 uint24_t; 
                    01891 .................... typedef signed int64 int64_t; 
                    01892 .................... typedef unsigned int64 uint64_t; 
                    01893 .................... #endif 
                    01894 ....................  
                    01895 .................... #define INT8_MAX  (128) 
                    01896 .................... #define INT8_MIN  (-127) 
                    01897 .................... #define UINT8_MAX (255) 
                    01898 ....................  
                    01899 .................... #define INT16_MAX  (32767) 
                    01900 .................... #define INT16_MIN  (-32768) 
                    01901 .................... #define UINT16_MAX (65535) 
                    01902 ....................  
                    01903 .................... #define INT32_MAX  (2147483647) 
                    01904 .................... #define INT32_MIN  (-2147483648) 
                    01905 .................... #define UINT32_MAX (4294967295) 
                    01906 ....................  
                    01907 .................... #if defined(__PCD__) 
                    01908 .................... //#define INT24_MAX  (8388607) 
                    01909 .................... //#define INT24_MIN  (-8388608) 
                    01910 .................... //#define UINT24_MAX (16777215) 
                    01911 ....................  
                    01912 .................... #define INT64_MAX  (9223372036854775807) 
                    01913 .................... #define INT64_MIN  (-9223372036854775808) 
                    01914 .................... #define UINT64_MAX (18446744073709551615) 
                    01915 .................... #endif 
                    01916 ....................  
                    01917 .................... ///////// minimum width 
                    01918 ....................  
                    01919 .................... typedef signed int8 int_least8_t; 
                    01920 .................... typedef unsigned int8 uint_least8_t; 
                    01921 .................... typedef signed int16 int_least16_t; 
                    01922 .................... typedef unsigned int16 uint_least16_t; 
                    01923 .................... typedef signed int32 int_least32_t; 
                    01924 .................... typedef unsigned int32 uint_least32_t; 
                    01925 ....................  
                    01926 .................... #if defined(__PCD__) 
                    01927 .................... //typedef signed int24 int_least24_t; 
                    01928 .................... //typedef unsigned int24 uint_least24_t; 
                    01929 .................... typedef signed int64 int_least64_t; 
                    01930 .................... typedef unsigned int64 uint_least64_t; 
                    01931 .................... #endif 
                    01932 ....................  
                    01933 .................... #define INT_LEAST8_MAX  (128) 
                    01934 .................... #define INT_LEAST8_MIN  (-127) 
                    01935 .................... #define UINT_LEAST8_MAX (255) 
                    01936 ....................  
                    01937 .................... #define INT_LEAST16_MAX  (32767) 
                    01938 .................... #define INT_LEAST16_MIN  (-32768) 
                    01939 .................... #define UINT_LEAST16_MAX (65535) 
                    01940 ....................  
                    01941 .................... #define INT_LEAST32_MAX  (2147483647) 
                    01942 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    01943 .................... #define UINT_LEAST32_MAX (4294967295) 
                    01944 ....................  
                    01945 .................... #if defined(__PCD__) 
                    01946 .................... //#define INT_LEAST24_MAX  (8388607) 
                    01947 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    01948 .................... //#define UINT_LEAST24_MAX (16777215) 
                    01949 ....................  
                    01950 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    01951 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    01952 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    01953 .................... #endif 
                    01954 ....................  
                    01955 .................... ///////// fastest width 
                    01956 ....................  
                    01957 .................... #if defined(__PCD__) 
                    01958 .................... typedef signed int16 int_fast8_t; 
                    01959 .................... typedef unsigned int16 uint_fast8_t; 
                    01960 .................... #define INT_FAST8_MAX  (32767) 
                    01961 .................... #define INT_FAST8_MIN  (-32768) 
                    01962 .................... #define UINT_FAST8_MAX (65535) 
                    01963 .................... typedef signed int16 int_fast16_t; 
                    01964 .................... typedef unsigned int16 uint_fast16_t; 
                    01965 .................... //typedef signed int24 int_fast24_t; 
                    01966 .................... //typedef unsigned int24 uint_fast24_t; 
                    01967 .................... typedef signed int64 int_fast64_t; 
                    01968 .................... typedef unsigned int64 uint_fast64_t; 
                    01969 .................... #else 
                    01970 .................... typedef signed int8 int_fast8_t; 
                    01971 .................... typedef unsigned int8 uint_fast8_t; 
                    01972 .................... #define INT_FAST8_MAX  (128) 
                    01973 .................... #define INT_FAST8_MIN  (-127) 
                    01974 .................... #define UINT_FAST8_MAX (255) 
                    01975 .................... typedef signed int16 int_fast16_t; 
                    01976 .................... typedef unsigned int16 uint_fast16_t; 
                    01977 .................... #endif 
                    01978 ....................  
                    01979 .................... typedef signed int32 int_fast32_t; 
                    01980 .................... typedef unsigned int32 uint_fast32_t; 
                    01981 ....................  
                    01982 .................... #define INT_FAST16_MAX  (32767) 
                    01983 .................... #define INT_FAST16_MIN  (-32768) 
                    01984 .................... #define UINT_FAST16_MAX (65535) 
                    01985 ....................  
                    01986 .................... #define INT_FAST32_MAX  (2147483647) 
                    01987 .................... #define INT_FAST32_MIN  (-2147483648) 
                    01988 .................... #define UINT_FAST32_MAX (4294967295) 
                    01989 ....................  
                    01990 .................... #if defined(__PCD__) 
                    01991 .................... //#define INT_FAST24_MAX  (8388607) 
                    01992 .................... //#define INT_FAST24_MIN  (-8388608) 
                    01993 .................... //#define UINT_FAST24_MAX (16777215) 
                    01994 ....................  
                    01995 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    01996 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    01997 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    01998 .................... #endif 
                    01999 ....................  
                    02000 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    02001 ....................  
                    02002 .................... /// TODO 
                    02003 ....................  
                    02004 .................... /// intptr_t uintptr_t 
                    02005 ....................  
                    02006 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    02007 ....................  
                    02008 ....................  
                    02009 .................... /////////// greatest width (OPTIONAL) 
                    02010 ....................  
                    02011 .................... /// TODO 
                    02012 ....................  
                    02013 .................... /// intmax_t uintmax_t 
                    02014 ....................  
                    02015 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    02016 ....................  
                    02017 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    02018 ....................  
                    02019 ....................  
                    02020 .................... #endif 
                    02021 ....................  
                    02022 .................... #include "gpio.h" 
                    02023 .................... /* 
                    02024 ....................  * gpio.h 
                    02025 ....................  * 
                    02026 ....................  *  Created on: Mar 8, 2017 
                    02027 ....................  *      Author: asafe 
                    02028 ....................  */ 
                    02029 ....................  
                    02030 .................... #ifndef INCLUDE_GPIO_H_ 
                    02031 .................... #define INCLUDE_GPIO_H_ 
                    02032 ....................  
                    02033 .................... #include <stdint.h> 
                    02034 .................... #include "gpio.h" 
                    02035 ....................  
                    02036 .................... enum { 
                    02037 ....................     GPIO_DIR_IN     = 0, 
                    02038 ....................     GPIO_DIR_OUT    = 1, 
                    02039 ....................     GPIO_ANALOG     = 2, 
                    02040 ....................  
                    02041 ....................     GPIO_VALUE_LOW = 0, 
                    02042 ....................     GPIO_VALUE_HIGH = 1, 
                    02043 .................... }; 
                    02044 ....................  
                    02045 .................... typedef struct gpio_st { 
                    02046 ....................     uint32_t pin; 
                    02047 ....................     int dir; 
                    02048 ....................     char *gpio_name; 
                    02049 .................... } st_gpio; 
                    02050 ....................  
                    02051 .................... /* this is the deceleration that a developer will use to access a specific GPIO */ 
                    02052 .................... /* this list should be identical in order to the <Bold> st_gpio gpios [] </Bold> list in gpio.c */ 
                    02053 ....................  
                    02054 .................... enum { 
                    02055 ....................     GPIO_DAC_CLK        = 0, 
                    02056 ....................     GPIO_DAC_CS         = 1, 
                    02057 ....................     GPIO_DAC_DATA_OUT   = 2, 
                    02058 ....................     GPIO_DAC_LDAC       = 3, 
                    02059 ....................  
                    02060 ....................     GPIO_LED            = 4, 
                    02061 ....................  
                    02062 ....................     GPIO_PA1_ISENSE     = 5, 
                    02063 ....................     GPIO_PA2_ISENSE     = 6, 
                    02064 ....................     GPIO_FFWR           = 7, 
                    02065 ....................     GPIO_RREV           = 8, 
                    02066 ....................     GPIO_RF_INDET       = 9, 
                    02067 ....................     GPIO_TMP            = 10, 
                    02068 ....................     GPIO_PREAMP_DET     = 11, 
                    02069 ....................  
                    02070 ....................     GPIO_ANT_SEL        = 12, 
                    02071 ....................     GPIO_ANT_SELN       = 13, 
                    02072 ....................     GPIO_TX_RX_SEL      = 14, 
                    02073 ....................     GPIO_TX_RX_ENV      = 15, 
                    02074 ....................     GPIO_TX_RX_ENVM     = 16, 
                    02075 ....................  
                    02076 ....................     GPIO_5V_EN          = 17, 
                    02077 ....................  
                    02078 .................... }; 
                    02079 ....................  
                    02080 .................... /* Inputs */ 
                    02081 .................... enum { 
                    02082 ....................  
                    02083 .................... }; 
                    02084 ....................  
                    02085 ....................  
                    02086 .................... void gpio_init(); 
                    02087 .................... int gpio_toggle(int gpio); 
                    02088 .................... #INLINE 
                    02089 .................... void gpio_set(int gpio); 
                    02090 .................... void gpio_clear(int gpio); 
                    02091 .................... #INLINE 
                    02092 .................... void gpio_set_value(int gpio, int value); 
                    02093 .................... int gpio_get(int gpio); 
                    02094 .................... #INLINE 
                    02095 .................... uint32_t gpio_get_analog(int gpio); 
                    02096 ....................  
                    02097 .................... #endif /* INCLUDE_GPIO_H_ */ 
                    02098 ....................  
                    02099 ....................  
                    02100 .................... enum { 
                    02101 ....................     GPIO_DIR_IN     = 0, 
                    02102 ....................     GPIO_DIR_OUT    = 1, 
                    02103 ....................     GPIO_ANALOG     = 2, 
                    02104 ....................  
                    02105 ....................     GPIO_VALUE_LOW = 0, 
                    02106 ....................     GPIO_VALUE_HIGH = 1, 
                    02107 .................... }; 
                    02108 ....................  
                    02109 .................... typedef struct gpio_st { 
                    02110 ....................     uint32_t pin; 
                    02111 ....................     int dir; 
                    02112 ....................     char *gpio_name; 
                    02113 .................... } st_gpio; 
                    02114 ....................  
                    02115 .................... /* this is the deceleration that a developer will use to access a specific GPIO */ 
                    02116 .................... /* this list should be identical in order to the <Bold> st_gpio gpios [] </Bold> list in gpio.c */ 
                    02117 ....................  
                    02118 .................... enum { 
                    02119 ....................     GPIO_DAC_CLK        = 0, 
                    02120 ....................     GPIO_DAC_CS         = 1, 
                    02121 ....................     GPIO_DAC_DATA_OUT   = 2, 
                    02122 ....................     GPIO_DAC_LDAC       = 3, 
                    02123 ....................  
                    02124 ....................     GPIO_LED            = 4, 
                    02125 ....................  
                    02126 ....................     GPIO_PA1_ISENSE     = 5, 
                    02127 ....................     GPIO_PA2_ISENSE     = 6, 
                    02128 ....................     GPIO_FFWR           = 7, 
                    02129 ....................     GPIO_RREV           = 8, 
                    02130 ....................     GPIO_RF_INDET       = 9, 
                    02131 ....................     GPIO_TMP            = 10, 
                    02132 ....................     GPIO_PREAMP_DET     = 11, 
                    02133 ....................  
                    02134 ....................     GPIO_ANT_SEL        = 12, 
                    02135 ....................     GPIO_ANT_SELN       = 13, 
                    02136 ....................     GPIO_TX_RX_SEL      = 14, 
                    02137 ....................     GPIO_TX_RX_ENV      = 15, 
                    02138 ....................     GPIO_TX_RX_ENVM     = 16, 
                    02139 ....................  
                    02140 ....................     GPIO_5V_EN          = 17, 
                    02141 ....................  
                    02142 .................... }; 
                    02143 ....................  
                    02144 .................... /* Inputs */ 
                    02145 .................... enum { 
                    02146 ....................  
                    02147 .................... }; 
                    02148 ....................  
                    02149 ....................  
                    02150 .................... void gpio_init(); 
                    02151 .................... int gpio_toggle(int gpio); 
                    02152 .................... #INLINE 
                    02153 .................... void gpio_set(int gpio); 
                    02154 .................... void gpio_clear(int gpio); 
                    02155 .................... #INLINE 
                    02156 .................... void gpio_set_value(int gpio, int value); 
                    02157 .................... int gpio_get(int gpio); 
                    02158 .................... #INLINE 
                    02159 .................... uint32_t gpio_get_analog(int gpio); 
                    02160 ....................  
                    02161 .................... #endif /* INCLUDE_GPIO_H_ */ 
                    02162 ....................  
                    02163 ....................  
                    02164 .................... #ifndef MAIN_H_ 
                    02165 .................... #define MAIN_H_ 
                    02166 ....................  
                    02167 .................... #define MAIN_ADDRESS 0x2700 
                    02168 ....................  
                    02169 .................... #define ATOMIC_SET(var, val)    do { \ 
                    02170 ....................                                       disable_interrupts(GLOBAL); \ 
                    02171 ....................                                       var = val; \ 
                    02172 ....................                                       enable_interrupts(GLOBAL); \ 
                    02173 ....................                                 } while(0); 
                    02174 ....................  
                    02175 .................... #endif /* MAIN_H_ */ 
                    02176 ....................  
                    02177 ....................  
                    02178 .................... /* 
                    02179 ....................  * message.h 
                    02180 ....................  * 
                    02181 ....................  *  Created on: Mar 23, 2017 
                    02182 ....................  *      Author: asaf 
                    02183 ....................  */ 
                    02184 ....................  
                    02185 .................... #ifndef MESSAGE_H_ 
                    02186 .................... #define MESSAGE_H_ 
                    02187 ....................  
                    02188 .................... #include <stdint.h> 
                    02189 .................... /////////////////////////////////////////////////////////////////////////// 
                    02190 .................... ////                                                                   //// 
                    02191 .................... ////                           stdint.h                                //// 
                    02192 .................... ////                                                                   //// 
                    02193 .................... //// Standard integer definitions.                                     //// 
                    02194 .................... ////                                                                   //// 
                    02195 .................... /////////////////////////////////////////////////////////////////////////// 
                    02196 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    02197 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    02198 .................... //// compiler.  This source code may only be distributed to other      //// 
                    02199 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    02200 .................... //// or distribution is permitted without written permission.          //// 
                    02201 .................... //// Derivative programs created using this software in object code    //// 
                    02202 .................... //// form are not restricted in any way.                               //// 
                    02203 .................... /////////////////////////////////////////////////////////////////////////// 
                    02204 ....................  
                    02205 .................... #ifndef _STDINT 
                    02206 ....................  
                    02207 .................... #define _STDINT 
                    02208 ....................  
                    02209 .................... //////////// exact width 
                    02210 ....................  
                    02211 .................... typedef signed int8 int8_t; 
                    02212 .................... typedef unsigned int8 uint8_t; 
                    02213 .................... typedef signed int16 int16_t; 
                    02214 .................... typedef unsigned int16 uint16_t; 
                    02215 .................... typedef signed int32 int32_t; 
                    02216 .................... typedef unsigned int32 uint32_t; 
                    02217 ....................  
                    02218 .................... #if defined(__PCD__) 
                    02219 .................... //typedef signed int24 int24_t; 
                    02220 .................... //typedef unsigned int24 uint24_t; 
                    02221 .................... typedef signed int64 int64_t; 
                    02222 .................... typedef unsigned int64 uint64_t; 
                    02223 .................... #endif 
                    02224 ....................  
                    02225 .................... #define INT8_MAX  (128) 
                    02226 .................... #define INT8_MIN  (-127) 
                    02227 .................... #define UINT8_MAX (255) 
                    02228 ....................  
                    02229 .................... #define INT16_MAX  (32767) 
                    02230 .................... #define INT16_MIN  (-32768) 
                    02231 .................... #define UINT16_MAX (65535) 
                    02232 ....................  
                    02233 .................... #define INT32_MAX  (2147483647) 
                    02234 .................... #define INT32_MIN  (-2147483648) 
                    02235 .................... #define UINT32_MAX (4294967295) 
                    02236 ....................  
                    02237 .................... #if defined(__PCD__) 
                    02238 .................... //#define INT24_MAX  (8388607) 
                    02239 .................... //#define INT24_MIN  (-8388608) 
                    02240 .................... //#define UINT24_MAX (16777215) 
                    02241 ....................  
                    02242 .................... #define INT64_MAX  (9223372036854775807) 
                    02243 .................... #define INT64_MIN  (-9223372036854775808) 
                    02244 .................... #define UINT64_MAX (18446744073709551615) 
                    02245 .................... #endif 
                    02246 ....................  
                    02247 .................... ///////// minimum width 
                    02248 ....................  
                    02249 .................... typedef signed int8 int_least8_t; 
                    02250 .................... typedef unsigned int8 uint_least8_t; 
                    02251 .................... typedef signed int16 int_least16_t; 
                    02252 .................... typedef unsigned int16 uint_least16_t; 
                    02253 .................... typedef signed int32 int_least32_t; 
                    02254 .................... typedef unsigned int32 uint_least32_t; 
                    02255 ....................  
                    02256 .................... #if defined(__PCD__) 
                    02257 .................... //typedef signed int24 int_least24_t; 
                    02258 .................... //typedef unsigned int24 uint_least24_t; 
                    02259 .................... typedef signed int64 int_least64_t; 
                    02260 .................... typedef unsigned int64 uint_least64_t; 
                    02261 .................... #endif 
                    02262 ....................  
                    02263 .................... #define INT_LEAST8_MAX  (128) 
                    02264 .................... #define INT_LEAST8_MIN  (-127) 
                    02265 .................... #define UINT_LEAST8_MAX (255) 
                    02266 ....................  
                    02267 .................... #define INT_LEAST16_MAX  (32767) 
                    02268 .................... #define INT_LEAST16_MIN  (-32768) 
                    02269 .................... #define UINT_LEAST16_MAX (65535) 
                    02270 ....................  
                    02271 .................... #define INT_LEAST32_MAX  (2147483647) 
                    02272 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    02273 .................... #define UINT_LEAST32_MAX (4294967295) 
                    02274 ....................  
                    02275 .................... #if defined(__PCD__) 
                    02276 .................... //#define INT_LEAST24_MAX  (8388607) 
                    02277 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    02278 .................... //#define UINT_LEAST24_MAX (16777215) 
                    02279 ....................  
                    02280 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    02281 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    02282 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    02283 .................... #endif 
                    02284 ....................  
                    02285 .................... ///////// fastest width 
                    02286 ....................  
                    02287 .................... #if defined(__PCD__) 
                    02288 .................... typedef signed int16 int_fast8_t; 
                    02289 .................... typedef unsigned int16 uint_fast8_t; 
                    02290 .................... #define INT_FAST8_MAX  (32767) 
                    02291 .................... #define INT_FAST8_MIN  (-32768) 
                    02292 .................... #define UINT_FAST8_MAX (65535) 
                    02293 .................... typedef signed int16 int_fast16_t; 
                    02294 .................... typedef unsigned int16 uint_fast16_t; 
                    02295 .................... //typedef signed int24 int_fast24_t; 
                    02296 .................... //typedef unsigned int24 uint_fast24_t; 
                    02297 .................... typedef signed int64 int_fast64_t; 
                    02298 .................... typedef unsigned int64 uint_fast64_t; 
                    02299 .................... #else 
                    02300 .................... typedef signed int8 int_fast8_t; 
                    02301 .................... typedef unsigned int8 uint_fast8_t; 
                    02302 .................... #define INT_FAST8_MAX  (128) 
                    02303 .................... #define INT_FAST8_MIN  (-127) 
                    02304 .................... #define UINT_FAST8_MAX (255) 
                    02305 .................... typedef signed int16 int_fast16_t; 
                    02306 .................... typedef unsigned int16 uint_fast16_t; 
                    02307 .................... #endif 
                    02308 ....................  
                    02309 .................... typedef signed int32 int_fast32_t; 
                    02310 .................... typedef unsigned int32 uint_fast32_t; 
                    02311 ....................  
                    02312 .................... #define INT_FAST16_MAX  (32767) 
                    02313 .................... #define INT_FAST16_MIN  (-32768) 
                    02314 .................... #define UINT_FAST16_MAX (65535) 
                    02315 ....................  
                    02316 .................... #define INT_FAST32_MAX  (2147483647) 
                    02317 .................... #define INT_FAST32_MIN  (-2147483648) 
                    02318 .................... #define UINT_FAST32_MAX (4294967295) 
                    02319 ....................  
                    02320 .................... #if defined(__PCD__) 
                    02321 .................... //#define INT_FAST24_MAX  (8388607) 
                    02322 .................... //#define INT_FAST24_MIN  (-8388608) 
                    02323 .................... //#define UINT_FAST24_MAX (16777215) 
                    02324 ....................  
                    02325 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    02326 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    02327 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    02328 .................... #endif 
                    02329 ....................  
                    02330 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    02331 ....................  
                    02332 .................... /// TODO 
                    02333 ....................  
                    02334 .................... /// intptr_t uintptr_t 
                    02335 ....................  
                    02336 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    02337 ....................  
                    02338 ....................  
                    02339 .................... /////////// greatest width (OPTIONAL) 
                    02340 ....................  
                    02341 .................... /// TODO 
                    02342 ....................  
                    02343 .................... /// intmax_t uintmax_t 
                    02344 ....................  
                    02345 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    02346 ....................  
                    02347 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    02348 ....................  
                    02349 ....................  
                    02350 .................... #endif 
                    02351 ....................  
                    02352 .................... #include "calibration.h" 
                    02353 .................... #ifndef CALIBRATION_H_ 
                    02354 .................... #define CALIBRATION_H_ 
                    02355 ....................  
                    02356 .................... #include <stdint.h> 
                    02357 .................... /////////////////////////////////////////////////////////////////////////// 
                    02358 .................... ////                                                                   //// 
                    02359 .................... ////                           stdint.h                                //// 
                    02360 .................... ////                                                                   //// 
                    02361 .................... //// Standard integer definitions.                                     //// 
                    02362 .................... ////                                                                   //// 
                    02363 .................... /////////////////////////////////////////////////////////////////////////// 
                    02364 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    02365 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    02366 .................... //// compiler.  This source code may only be distributed to other      //// 
                    02367 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    02368 .................... //// or distribution is permitted without written permission.          //// 
                    02369 .................... //// Derivative programs created using this software in object code    //// 
                    02370 .................... //// form are not restricted in any way.                               //// 
                    02371 .................... /////////////////////////////////////////////////////////////////////////// 
                    02372 ....................  
                    02373 .................... #ifndef _STDINT 
                    02374 ....................  
                    02375 .................... #define _STDINT 
                    02376 ....................  
                    02377 .................... //////////// exact width 
                    02378 ....................  
                    02379 .................... typedef signed int8 int8_t; 
                    02380 .................... typedef unsigned int8 uint8_t; 
                    02381 .................... typedef signed int16 int16_t; 
                    02382 .................... typedef unsigned int16 uint16_t; 
                    02383 .................... typedef signed int32 int32_t; 
                    02384 .................... typedef unsigned int32 uint32_t; 
                    02385 ....................  
                    02386 .................... #if defined(__PCD__) 
                    02387 .................... //typedef signed int24 int24_t; 
                    02388 .................... //typedef unsigned int24 uint24_t; 
                    02389 .................... typedef signed int64 int64_t; 
                    02390 .................... typedef unsigned int64 uint64_t; 
                    02391 .................... #endif 
                    02392 ....................  
                    02393 .................... #define INT8_MAX  (128) 
                    02394 .................... #define INT8_MIN  (-127) 
                    02395 .................... #define UINT8_MAX (255) 
                    02396 ....................  
                    02397 .................... #define INT16_MAX  (32767) 
                    02398 .................... #define INT16_MIN  (-32768) 
                    02399 .................... #define UINT16_MAX (65535) 
                    02400 ....................  
                    02401 .................... #define INT32_MAX  (2147483647) 
                    02402 .................... #define INT32_MIN  (-2147483648) 
                    02403 .................... #define UINT32_MAX (4294967295) 
                    02404 ....................  
                    02405 .................... #if defined(__PCD__) 
                    02406 .................... //#define INT24_MAX  (8388607) 
                    02407 .................... //#define INT24_MIN  (-8388608) 
                    02408 .................... //#define UINT24_MAX (16777215) 
                    02409 ....................  
                    02410 .................... #define INT64_MAX  (9223372036854775807) 
                    02411 .................... #define INT64_MIN  (-9223372036854775808) 
                    02412 .................... #define UINT64_MAX (18446744073709551615) 
                    02413 .................... #endif 
                    02414 ....................  
                    02415 .................... ///////// minimum width 
                    02416 ....................  
                    02417 .................... typedef signed int8 int_least8_t; 
                    02418 .................... typedef unsigned int8 uint_least8_t; 
                    02419 .................... typedef signed int16 int_least16_t; 
                    02420 .................... typedef unsigned int16 uint_least16_t; 
                    02421 .................... typedef signed int32 int_least32_t; 
                    02422 .................... typedef unsigned int32 uint_least32_t; 
                    02423 ....................  
                    02424 .................... #if defined(__PCD__) 
                    02425 .................... //typedef signed int24 int_least24_t; 
                    02426 .................... //typedef unsigned int24 uint_least24_t; 
                    02427 .................... typedef signed int64 int_least64_t; 
                    02428 .................... typedef unsigned int64 uint_least64_t; 
                    02429 .................... #endif 
                    02430 ....................  
                    02431 .................... #define INT_LEAST8_MAX  (128) 
                    02432 .................... #define INT_LEAST8_MIN  (-127) 
                    02433 .................... #define UINT_LEAST8_MAX (255) 
                    02434 ....................  
                    02435 .................... #define INT_LEAST16_MAX  (32767) 
                    02436 .................... #define INT_LEAST16_MIN  (-32768) 
                    02437 .................... #define UINT_LEAST16_MAX (65535) 
                    02438 ....................  
                    02439 .................... #define INT_LEAST32_MAX  (2147483647) 
                    02440 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    02441 .................... #define UINT_LEAST32_MAX (4294967295) 
                    02442 ....................  
                    02443 .................... #if defined(__PCD__) 
                    02444 .................... //#define INT_LEAST24_MAX  (8388607) 
                    02445 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    02446 .................... //#define UINT_LEAST24_MAX (16777215) 
                    02447 ....................  
                    02448 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    02449 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    02450 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    02451 .................... #endif 
                    02452 ....................  
                    02453 .................... ///////// fastest width 
                    02454 ....................  
                    02455 .................... #if defined(__PCD__) 
                    02456 .................... typedef signed int16 int_fast8_t; 
                    02457 .................... typedef unsigned int16 uint_fast8_t; 
                    02458 .................... #define INT_FAST8_MAX  (32767) 
                    02459 .................... #define INT_FAST8_MIN  (-32768) 
                    02460 .................... #define UINT_FAST8_MAX (65535) 
                    02461 .................... typedef signed int16 int_fast16_t; 
                    02462 .................... typedef unsigned int16 uint_fast16_t; 
                    02463 .................... //typedef signed int24 int_fast24_t; 
                    02464 .................... //typedef unsigned int24 uint_fast24_t; 
                    02465 .................... typedef signed int64 int_fast64_t; 
                    02466 .................... typedef unsigned int64 uint_fast64_t; 
                    02467 .................... #else 
                    02468 .................... typedef signed int8 int_fast8_t; 
                    02469 .................... typedef unsigned int8 uint_fast8_t; 
                    02470 .................... #define INT_FAST8_MAX  (128) 
                    02471 .................... #define INT_FAST8_MIN  (-127) 
                    02472 .................... #define UINT_FAST8_MAX (255) 
                    02473 .................... typedef signed int16 int_fast16_t; 
                    02474 .................... typedef unsigned int16 uint_fast16_t; 
                    02475 .................... #endif 
                    02476 ....................  
                    02477 .................... typedef signed int32 int_fast32_t; 
                    02478 .................... typedef unsigned int32 uint_fast32_t; 
                    02479 ....................  
                    02480 .................... #define INT_FAST16_MAX  (32767) 
                    02481 .................... #define INT_FAST16_MIN  (-32768) 
                    02482 .................... #define UINT_FAST16_MAX (65535) 
                    02483 ....................  
                    02484 .................... #define INT_FAST32_MAX  (2147483647) 
                    02485 .................... #define INT_FAST32_MIN  (-2147483648) 
                    02486 .................... #define UINT_FAST32_MAX (4294967295) 
                    02487 ....................  
                    02488 .................... #if defined(__PCD__) 
                    02489 .................... //#define INT_FAST24_MAX  (8388607) 
                    02490 .................... //#define INT_FAST24_MIN  (-8388608) 
                    02491 .................... //#define UINT_FAST24_MAX (16777215) 
                    02492 ....................  
                    02493 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    02494 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    02495 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    02496 .................... #endif 
                    02497 ....................  
                    02498 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    02499 ....................  
                    02500 .................... /// TODO 
                    02501 ....................  
                    02502 .................... /// intptr_t uintptr_t 
                    02503 ....................  
                    02504 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    02505 ....................  
                    02506 ....................  
                    02507 .................... /////////// greatest width (OPTIONAL) 
                    02508 ....................  
                    02509 .................... /// TODO 
                    02510 ....................  
                    02511 .................... /// intmax_t uintmax_t 
                    02512 ....................  
                    02513 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    02514 ....................  
                    02515 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    02516 ....................  
                    02517 ....................  
                    02518 .................... #endif 
                    02519 ....................  
                    02520 .................... #include <stdbool.h> 
                    02521 .................... /////////////////////////////////////////////////////////////////////////// 
                    02522 .................... ////                                                                   //// 
                    02523 .................... ////                          stdbool.h                                //// 
                    02524 .................... ////                                                                   //// 
                    02525 .................... //// Standard boolean definitions                                      //// 
                    02526 .................... ////                                                                   //// 
                    02527 .................... /////////////////////////////////////////////////////////////////////////// 
                    02528 .................... ////        (C) Copyright 1996,2012 Custom Computer Services           //// 
                    02529 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    02530 .................... //// compiler.  This source code may only be distributed to other      //// 
                    02531 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    02532 .................... //// or distribution is permitted without written permission.          //// 
                    02533 .................... //// Derivative programs created using this software in object code    //// 
                    02534 .................... //// form are not restricted in any way.                               //// 
                    02535 .................... /////////////////////////////////////////////////////////////////////////// 
                    02536 ....................  
                    02537 .................... #ifndef __STDBOOL_H__ 
                    02538 .................... #define __STDBOOL_H__ 
                    02539 ....................  
                    02540 .................... //remove TRUE and FALSE added by CCS's device .h file 
                    02541 .................... #if defined(TRUE) 
                    02542 .................... #undef TRUE 
                    02543 .................... #endif 
                    02544 .................... #if defined(FALSE) 
                    02545 .................... #undef FALSE 
                    02546 .................... #endif 
                    02547 ....................  
                    02548 .................... typedef int1   bool; 
                    02549 .................... #define true   1 
                    02550 .................... #define false  0 
                    02551 .................... #define __bool_true_false_are_defined  1 
                    02552 ....................  
                    02553 .................... #endif 
                    02554 ....................  
                    02555 ....................  
                    02556 .................... #define CALIBRATION_AREA_START 0x4000 
                    02557 .................... #define CALIBRATION_AREA_END 0x4FFF 
                    02558 ....................  
                    02559 .................... typedef enum { 
                    02560 ....................   CALIBRATION_TABLE_PARAMS = 0, 
                    02561 ....................   CALIBRATION_TABLE_PA_GAINS_1 = 1, 
                    02562 ....................   CALIBRATION_TABLE_PA_GAINS_2 = 2, 
                    02563 ....................   CALIBRATION_TABLE_MAX = 3 
                    02564 .................... } calibration_table_id_t; 
                    02565 ....................  
                    02566 .................... typedef enum { 
                    02567 ....................   PARAM_CAL_TBL_VERSION = 0, 
                    02568 ....................   PARAM_SERIAL_NUM = 1, 
                    02569 ....................   PARAM_TEMP_MULT = 2, 
                    02570 ....................   PARAM_FWD_MULT = 3, 
                    02571 ....................   PARAM_REV_TRESH = 4, 
                    02572 ....................   PARAM_INP_PWR_MULT = 5, 
                    02573 ....................   PARAM_PWR_CURRENT_MULT = 6, 
                    02574 ....................   PARAM_PRE_AMP_MULT = 7, 
                    02575 ....................   PARAM_ISENSE_PA1_MULT = 8, 
                    02576 ....................   PARAM_ISENSE_PA2_MULT = 9, 
                    02577 ....................   PARAM_BOOT_WAIT_TIME_USEC = 10, 
                    02578 ....................   PARAM_TX_ON_TIMING_USEC = 11, 
                    02579 ....................   PARAM_TX_OFF_TIMING_USEC = 12, 
                    02580 ....................   PARAM_PA_ON_TIMING_USEC = 13, 
                    02581 ....................   PARAM_PA_OFF_TIMING_USEC = 14, 
                    02582 ....................   PARAM_ANT_SEL_TIMING_USEC = 15, 
                    02583 ....................   PARAM_FWD_SAMP_TIMING_USEC = 16, 
                    02584 ....................   PARAM_REV_SAMP_TIMING_USEC = 17, 
                    02585 ....................   PARAM_INP_PWR_SAMP_TIMING_USEC = 18, 
                    02586 .................... } calibration_param_t; 
                    02587 ....................  
                    02588 .................... #define CALIBRATION_TABLE_INDEX_MAX 32 
                    02589 ....................  
                    02590 .................... void get_calibration_table_data(calibration_table_id_t table_id, void* table_data); 
                    02591 .................... void set_calibration_table_data(calibration_table_id_t table_id, void* table_data); 
                    02592 .................... #INLINE 
                    02593 .................... uint16_t get_calibration_param(calibration_table_id_t table, uint8_t index); 
                    02594 .................... void set_calibration_param(calibration_table_id_t table, uint8_t index, uint16_t value); 
                    02595 ....................  
                    02596 .................... #endif /* CALIBRATION_H_ */ 
                    02597 ....................  
                    02598 ....................  
                    02599 .................... enum { 
                    02600 ....................   NUM_ADC_SAMPLES = 4, 
                    02601 .................... }; 
                    02602 ....................  
                    02603 .................... enum { 
                    02604 ....................   OP_CONTROL_MESSAGE = 0x00, 
                    02605 ....................   OP_VERSION_REQUEST_MESSAGE = 0x02, 
                    02606 ....................   OP_CHANGE_MODE_MESSAGE = 0x03, 
                    02607 ....................   OP_SET_CALIBRATION_TABLE_MESSAGE = 0x04, 
                    02608 ....................   OP_GET_CALIBRATION_TABLE_MESSAGE = 0x05, 
                    02609 ....................   OP_SET_DATA_LINE_MESSAGE = 0x06, 
                    02610 ....................   OP_GET_DATA_LINE_MESSAGE = 0x07, 
                    02611 ....................   OP_FINISH_UPDATE_PROCESS_MESSAGE = 0x08, 
                    02612 ....................   OP_BIT_STATUS_REQUEST_MESSAGE = 0x09, 
                    02613 .................... }; 
                    02614 ....................  
                    02615 .................... enum { 
                    02616 ....................   OP_ACK_RESPONSE = 0x80, 
                    02617 ....................   OP_SF_STATUS_RESPONSE = 0x81, 
                    02618 ....................   OP_VERSION_RESPONSE = 0x82, 
                    02619 ....................   OP_GET_CALIBRATION_TABLE_RESPONSE = 0x85, 
                    02620 ....................   OP_SET_DATA_LINE_RESPONSE = 0x86, 
                    02621 ....................   OP_GET_DATA_LINE_RESPONSE = 0x87, 
                    02622 ....................   OP_BIT_STATUS_RESPONSE = 0x89, 
                    02623 .................... }; 
                    02624 ....................  
                    02625 .................... typedef enum { 
                    02626 ....................   MODE_OPERATIONAL = 0, 
                    02627 ....................   MODE_TECHNICIAN = 1, 
                    02628 ....................   MODE_MAINTENANCE = 2, 
                    02629 .................... } software_mode_t; 
                    02630 ....................  
                    02631 .................... enum { 
                    02632 ....................   CALIBRATION_TABLE_TEMP = 0, 
                    02633 ....................   CALIBRATION_TABLE_FWD = 1, 
                    02634 ....................   CALIBRATION_TABLE_REV = 2, 
                    02635 ....................   CALIBRATION_TABLE_INP = 3, 
                    02636 ....................   CALIBRATION_TABLE_CURRENT = 4, 
                    02637 ....................   CALIBRATION_TABLE_PA_BIAS = 5, 
                    02638 ....................   CALIBRATION_TABLE_TIMING = 6, 
                    02639 ....................   CALIBRATION_TABLE_GENERAL = 7, 
                    02640 .................... }; 
                    02641 ....................  
                    02642 .................... enum { 
                    02643 ....................   PROGRAMMING_STATUS_OK = 0, 
                    02644 ....................   PROGRAMMING_STATUS_ERROR = 1, 
                    02645 .................... }; 
                    02646 ....................  
                    02647 .................... typedef struct message_t { 
                    02648 ....................   uint8_t opcode; 
                    02649 ....................   uint8_t payload[]; /* this will include the payload and the crc */ 
                    02650 .................... } message_t; 
                    02651 ....................  
                    02652 .................... typedef struct generic_response_t { 
                    02653 ....................   uint8_t opcode; 
                    02654 .................... } generic_response_t; 
                    02655 ....................  
                    02656 .................... /* message payloads*/ 
                    02657 ....................  
                    02658 .................... typedef struct control_bits_t { 
                    02659 ....................   uint8_t tx_on : 1; 
                    02660 ....................   uint8_t pa_gain : 3; 
                    02661 ....................   uint8_t tx_ant : 1; 
                    02662 ....................   uint8_t amplifier_operation_frequency : 1; 
                    02663 ....................   uint8_t reset : 1; 
                    02664 ....................   uint8_t dont_change : 1; 
                    02665 .................... } control_bits_t; 
                    02666 ....................  
                    02667 .................... typedef struct control_message_payload_t { 
                    02668 ....................   control_bits_t bits; 
                    02669 ....................   uint16_t control_identifier; 
                    02670 .................... } control_message_payload_t; 
                    02671 ....................  
                    02672 .................... typedef struct change_mode_message_payload_t { 
                    02673 ....................   uint8_t mode; 
                    02674 .................... } change_mode_message_payload_t; 
                    02675 ....................  
                    02676 ....................  
                    02677 .................... typedef struct set_calibration_table_message_payload_t { 
                    02678 ....................   uint8_t table_id; 
                    02679 ....................   uint16_t params[CALIBRATION_TABLE_INDEX_MAX]; 
                    02680 .................... } set_calibration_table_message_payload_t; 
                    02681 ....................  
                    02682 .................... typedef struct get_calibration_table_message_payload_t { 
                    02683 ....................   uint8_t table_id; 
                    02684 .................... } get_calibration_table_message_payload_t; 
                    02685 ....................  
                    02686 .................... typedef struct set_data_line_payload_t { 
                    02687 ....................   uint32_t address; 
                    02688 ....................   uint8_t data[64]; 
                    02689 .................... } set_data_line_payload_t; 
                    02690 ....................  
                    02691 .................... typedef struct get_data_line_payload_t { 
                    02692 ....................   uint32_t address; 
                    02693 .................... } get_data_line_payload_t; 
                    02694 ....................  
                    02695 .................... /* responses */ 
                    02696 ....................  
                    02697 .................... typedef struct ack_response_t { 
                    02698 ....................   generic_response_t generic; 
                    02699 .................... } ack_response_t; 
                    02700 ....................  
                    02701 .................... typedef struct sf_status_response_t { 
                    02702 ....................   generic_response_t generic; 
                    02703 ....................   control_bits_t last_control_bits; 
                    02704 ....................   uint16_t tti_counter; 
                    02705 ....................   uint16_t control_identifier; 
                    02706 ....................   uint16_t fwd_power_values[NUM_ADC_SAMPLES]; 
                    02707 .................... //  uint16_t reverse_power_values[NUM_ADC_SAMPLES];		//yehuda move rev power to bit status 
                    02708 ....................   uint16_t input_power_values[NUM_ADC_SAMPLES]; 
                    02709 ....................   //uint16_t pre_amp_power_values[NUM_ADC_SAMPLES];		//yehuda move pre amp to bit status 
                    02710 ....................   uint16_t temperature; 
                    02711 ....................   uint16_t power_amplifier_current; 
                    02712 ....................   uint8_t reverse_power_status;							//Difference between forword power and reverse power compared to general calibration rev tresh param 
                    02713 .................... } sf_status_response_t; 
                    02714 ....................  
                    02715 .................... typedef struct bit_status_response_t { 
                    02716 ....................   generic_response_t generic; 
                    02717 ....................   control_bits_t last_control_bits; 
                    02718 ....................   uint16_t tti_counter; 
                    02719 ....................   uint8_t mode; 
                    02720 ....................   uint16_t pre_amp_power_values[NUM_ADC_SAMPLES]; 		//yehuda add pre amp to bit status 
                    02721 ....................   uint16_t reverse_power_values[NUM_ADC_SAMPLES];		//yehuda add rev power to bit status 
                    02722 .................... } bit_status_response_t; 
                    02723 ....................  
                    02724 .................... typedef struct version_response_t { 
                    02725 ....................   generic_response_t generic; 
                    02726 ....................   uint8_t day; 
                    02727 ....................   uint8_t month; 
                    02728 ....................   uint16_t year; 
                    02729 ....................   uint8_t major; 
                    02730 ....................   uint8_t minor; 
                    02731 ....................   uint16_t serial_number; 
                    02732 .................... } version_response_t; 
                    02733 ....................  
                    02734 .................... typedef struct calibration_table_response_t { 
                    02735 ....................   generic_response_t generic; 
                    02736 ....................   uint8_t table_id; 
                    02737 ....................   uint16_t params[CALIBRATION_TABLE_INDEX_MAX]; 
                    02738 .................... } calibration_table_response_t; 
                    02739 ....................  
                    02740 .................... typedef struct set_data_line_response_t { 
                    02741 ....................   generic_response_t generic; 
                    02742 ....................   uint32_t address; 
                    02743 ....................   uint8_t status; 
                    02744 .................... } set_data_line_response_t; 
                    02745 ....................  
                    02746 .................... typedef struct get_data_line_response_t { 
                    02747 ....................   generic_response_t generic; 
                    02748 ....................   uint32_t address; 
                    02749 ....................   uint8_t data[64]; 
                    02750 .................... } get_data_line_response_t; 
                    02751 ....................  
                    02752 .................... #endif /* MESSAGE_H_ */ 
                    02753 ....................  
                    02754 ....................  
                    02755 .................... /* 
                    02756 ....................  * message_handlers.h 
                    02757 ....................  * 
                    02758 ....................  *  Created on: Mar 26, 2017 
                    02759 ....................  *      Author: asaf 
                    02760 ....................  */ 
                    02761 ....................  
                    02762 .................... #ifndef MESSAGE_HANDLERS_H_ 
                    02763 .................... #define MESSAGE_HANDLERS_H_ 
                    02764 ....................  
                    02765 .................... void init_message_handlers(); 
                    02766 .................... void process_message(uint8_t* message, uint16_t length); 
                    02767 .................... #INLINE 
                    02768 .................... void perform_last_control_message(); 
                    02769 .................... void control_handle_timer(); 
                    02770 .................... void samp_if_needed(); 
                    02771 ....................  
                    02772 .................... #endif /* MESSAGE_HANDLERS_H_ */ 
                    02773 ....................  
                    02774 ....................  
                    02775 .................... /* 
                    02776 ....................  * ad5312.h 
                    02777 ....................  * 
                    02778 ....................  *  Created on: Oct 13, 2016 
                    02779 ....................  *      Author: asaf 
                    02780 ....................  */ 
                    02781 ....................  
                    02782 .................... #ifndef AD5312_H_ 
                    02783 .................... #define AD5312_H_ 
                    02784 ....................  
                    02785 .................... enum { 
                    02786 .................... 	DAC_SELECT_BIT = 15, 
                    02787 .................... 	REF_BUF_BIT = 14, 
                    02788 .................... 	PD1_BIT = 13, 
                    02789 .................... 	PD2_BIT = 12, 
                    02790 .................... 	PD_ARR_START_BIT = PD2_BIT, 
                    02791 .................... }; 
                    02792 ....................  
                    02793 .................... enum { 
                    02794 .................... 	DAC_A = 0, 
                    02795 .................... 	DAC_B = 1, 
                    02796 .................... }; 
                    02797 ....................  
                    02798 .................... enum { 
                    02799 .................... 	REF_UNBUFFERED = 0, 
                    02800 .................... 	REF_BUFFERED = 1, 
                    02801 .................... }; 
                    02802 ....................  
                    02803 .................... /* Power Down Modes */ 
                    02804 .................... enum { 
                    02805 .................... 	PD_NORMAL = 0, 
                    02806 .................... 	PD_1K_TO_GND = 1, 
                    02807 .................... 	PD_100K_TO_GND = 2, 
                    02808 .................... 	PD_HIGH_IMPEDANCE_OUTPUT = 3, 
                    02809 .................... }; 
                    02810 ....................  
                    02811 .................... enum { 
                    02812 .................... 	VREF_FULL_SCALE = 5000, /* mV */ 
                    02813 .................... 	DAC_PRECISION = 1024 , /* bits */ 
                    02814 .................... }; 
                    02815 ....................  
                    02816 .................... #INLINE 
                    02817 .................... void ad5312_setVout(int dac, uint16_t mV); 
                    02818 .................... void ad5312_init(); 
                    02819 .................... #INLINE 
                    02820 .................... void ad5312_latch(); 
                    02821 ....................  
                    02822 .................... #endif /* AD5312_H_ */ 
                    02823 ....................  
                    02824 ....................  
                    02825 .................... #ifndef INCLUDE_TIMER_H_ 
                    02826 .................... #define INCLUDE_TIMER_H_ 
                    02827 ....................  
                    02828 .................... #include <stdint.h> 
                    02829 .................... /////////////////////////////////////////////////////////////////////////// 
                    02830 .................... ////                                                                   //// 
                    02831 .................... ////                           stdint.h                                //// 
                    02832 .................... ////                                                                   //// 
                    02833 .................... //// Standard integer definitions.                                     //// 
                    02834 .................... ////                                                                   //// 
                    02835 .................... /////////////////////////////////////////////////////////////////////////// 
                    02836 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    02837 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    02838 .................... //// compiler.  This source code may only be distributed to other      //// 
                    02839 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    02840 .................... //// or distribution is permitted without written permission.          //// 
                    02841 .................... //// Derivative programs created using this software in object code    //// 
                    02842 .................... //// form are not restricted in any way.                               //// 
                    02843 .................... /////////////////////////////////////////////////////////////////////////// 
                    02844 ....................  
                    02845 .................... #ifndef _STDINT 
                    02846 ....................  
                    02847 .................... #define _STDINT 
                    02848 ....................  
                    02849 .................... //////////// exact width 
                    02850 ....................  
                    02851 .................... typedef signed int8 int8_t; 
                    02852 .................... typedef unsigned int8 uint8_t; 
                    02853 .................... typedef signed int16 int16_t; 
                    02854 .................... typedef unsigned int16 uint16_t; 
                    02855 .................... typedef signed int32 int32_t; 
                    02856 .................... typedef unsigned int32 uint32_t; 
                    02857 ....................  
                    02858 .................... #if defined(__PCD__) 
                    02859 .................... //typedef signed int24 int24_t; 
                    02860 .................... //typedef unsigned int24 uint24_t; 
                    02861 .................... typedef signed int64 int64_t; 
                    02862 .................... typedef unsigned int64 uint64_t; 
                    02863 .................... #endif 
                    02864 ....................  
                    02865 .................... #define INT8_MAX  (128) 
                    02866 .................... #define INT8_MIN  (-127) 
                    02867 .................... #define UINT8_MAX (255) 
                    02868 ....................  
                    02869 .................... #define INT16_MAX  (32767) 
                    02870 .................... #define INT16_MIN  (-32768) 
                    02871 .................... #define UINT16_MAX (65535) 
                    02872 ....................  
                    02873 .................... #define INT32_MAX  (2147483647) 
                    02874 .................... #define INT32_MIN  (-2147483648) 
                    02875 .................... #define UINT32_MAX (4294967295) 
                    02876 ....................  
                    02877 .................... #if defined(__PCD__) 
                    02878 .................... //#define INT24_MAX  (8388607) 
                    02879 .................... //#define INT24_MIN  (-8388608) 
                    02880 .................... //#define UINT24_MAX (16777215) 
                    02881 ....................  
                    02882 .................... #define INT64_MAX  (9223372036854775807) 
                    02883 .................... #define INT64_MIN  (-9223372036854775808) 
                    02884 .................... #define UINT64_MAX (18446744073709551615) 
                    02885 .................... #endif 
                    02886 ....................  
                    02887 .................... ///////// minimum width 
                    02888 ....................  
                    02889 .................... typedef signed int8 int_least8_t; 
                    02890 .................... typedef unsigned int8 uint_least8_t; 
                    02891 .................... typedef signed int16 int_least16_t; 
                    02892 .................... typedef unsigned int16 uint_least16_t; 
                    02893 .................... typedef signed int32 int_least32_t; 
                    02894 .................... typedef unsigned int32 uint_least32_t; 
                    02895 ....................  
                    02896 .................... #if defined(__PCD__) 
                    02897 .................... //typedef signed int24 int_least24_t; 
                    02898 .................... //typedef unsigned int24 uint_least24_t; 
                    02899 .................... typedef signed int64 int_least64_t; 
                    02900 .................... typedef unsigned int64 uint_least64_t; 
                    02901 .................... #endif 
                    02902 ....................  
                    02903 .................... #define INT_LEAST8_MAX  (128) 
                    02904 .................... #define INT_LEAST8_MIN  (-127) 
                    02905 .................... #define UINT_LEAST8_MAX (255) 
                    02906 ....................  
                    02907 .................... #define INT_LEAST16_MAX  (32767) 
                    02908 .................... #define INT_LEAST16_MIN  (-32768) 
                    02909 .................... #define UINT_LEAST16_MAX (65535) 
                    02910 ....................  
                    02911 .................... #define INT_LEAST32_MAX  (2147483647) 
                    02912 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    02913 .................... #define UINT_LEAST32_MAX (4294967295) 
                    02914 ....................  
                    02915 .................... #if defined(__PCD__) 
                    02916 .................... //#define INT_LEAST24_MAX  (8388607) 
                    02917 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    02918 .................... //#define UINT_LEAST24_MAX (16777215) 
                    02919 ....................  
                    02920 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    02921 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    02922 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    02923 .................... #endif 
                    02924 ....................  
                    02925 .................... ///////// fastest width 
                    02926 ....................  
                    02927 .................... #if defined(__PCD__) 
                    02928 .................... typedef signed int16 int_fast8_t; 
                    02929 .................... typedef unsigned int16 uint_fast8_t; 
                    02930 .................... #define INT_FAST8_MAX  (32767) 
                    02931 .................... #define INT_FAST8_MIN  (-32768) 
                    02932 .................... #define UINT_FAST8_MAX (65535) 
                    02933 .................... typedef signed int16 int_fast16_t; 
                    02934 .................... typedef unsigned int16 uint_fast16_t; 
                    02935 .................... //typedef signed int24 int_fast24_t; 
                    02936 .................... //typedef unsigned int24 uint_fast24_t; 
                    02937 .................... typedef signed int64 int_fast64_t; 
                    02938 .................... typedef unsigned int64 uint_fast64_t; 
                    02939 .................... #else 
                    02940 .................... typedef signed int8 int_fast8_t; 
                    02941 .................... typedef unsigned int8 uint_fast8_t; 
                    02942 .................... #define INT_FAST8_MAX  (128) 
                    02943 .................... #define INT_FAST8_MIN  (-127) 
                    02944 .................... #define UINT_FAST8_MAX (255) 
                    02945 .................... typedef signed int16 int_fast16_t; 
                    02946 .................... typedef unsigned int16 uint_fast16_t; 
                    02947 .................... #endif 
                    02948 ....................  
                    02949 .................... typedef signed int32 int_fast32_t; 
                    02950 .................... typedef unsigned int32 uint_fast32_t; 
                    02951 ....................  
                    02952 .................... #define INT_FAST16_MAX  (32767) 
                    02953 .................... #define INT_FAST16_MIN  (-32768) 
                    02954 .................... #define UINT_FAST16_MAX (65535) 
                    02955 ....................  
                    02956 .................... #define INT_FAST32_MAX  (2147483647) 
                    02957 .................... #define INT_FAST32_MIN  (-2147483648) 
                    02958 .................... #define UINT_FAST32_MAX (4294967295) 
                    02959 ....................  
                    02960 .................... #if defined(__PCD__) 
                    02961 .................... //#define INT_FAST24_MAX  (8388607) 
                    02962 .................... //#define INT_FAST24_MIN  (-8388608) 
                    02963 .................... //#define UINT_FAST24_MAX (16777215) 
                    02964 ....................  
                    02965 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    02966 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    02967 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    02968 .................... #endif 
                    02969 ....................  
                    02970 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    02971 ....................  
                    02972 .................... /// TODO 
                    02973 ....................  
                    02974 .................... /// intptr_t uintptr_t 
                    02975 ....................  
                    02976 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    02977 ....................  
                    02978 ....................  
                    02979 .................... /////////// greatest width (OPTIONAL) 
                    02980 ....................  
                    02981 .................... /// TODO 
                    02982 ....................  
                    02983 .................... /// intmax_t uintmax_t 
                    02984 ....................  
                    02985 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    02986 ....................  
                    02987 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    02988 ....................  
                    02989 ....................  
                    02990 .................... #endif 
                    02991 ....................  
                    02992 .................... #include <stdbool.h> 
                    02993 .................... /////////////////////////////////////////////////////////////////////////// 
                    02994 .................... ////                                                                   //// 
                    02995 .................... ////                          stdbool.h                                //// 
                    02996 .................... ////                                                                   //// 
                    02997 .................... //// Standard boolean definitions                                      //// 
                    02998 .................... ////                                                                   //// 
                    02999 .................... /////////////////////////////////////////////////////////////////////////// 
                    03000 .................... ////        (C) Copyright 1996,2012 Custom Computer Services           //// 
                    03001 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    03002 .................... //// compiler.  This source code may only be distributed to other      //// 
                    03003 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    03004 .................... //// or distribution is permitted without written permission.          //// 
                    03005 .................... //// Derivative programs created using this software in object code    //// 
                    03006 .................... //// form are not restricted in any way.                               //// 
                    03007 .................... /////////////////////////////////////////////////////////////////////////// 
                    03008 ....................  
                    03009 .................... #ifndef __STDBOOL_H__ 
                    03010 .................... #define __STDBOOL_H__ 
                    03011 ....................  
                    03012 .................... //remove TRUE and FALSE added by CCS's device .h file 
                    03013 .................... #if defined(TRUE) 
                    03014 .................... #undef TRUE 
                    03015 .................... #endif 
                    03016 .................... #if defined(FALSE) 
                    03017 .................... #undef FALSE 
                    03018 .................... #endif 
                    03019 ....................  
                    03020 .................... typedef int1   bool; 
                    03021 .................... #define true   1 
                    03022 .................... #define false  0 
                    03023 .................... #define __bool_true_false_are_defined  1 
                    03024 ....................  
                    03025 .................... #endif 
                    03026 ....................  
                    03027 ....................  
                    03028 .................... typedef void (*timer_func)(void* arg); 
                    03029 ....................  
                    03030 .................... typedef struct { 
                    03031 ....................   //bool triggred; 
                    03032 ....................   uint32_t expTime; 
                    03033 ....................   void *arg; 
                    03034 ....................   timer_func func; 
                    03035 .................... } timer_task_t; 
                    03036 ....................  
                    03037 .................... #INLINE 
                    03038 .................... uint32_t timer_get_us_count(); 
                    03039 .................... bool timer_registerTask(uint32_t expTime, timer_func func, void *arg); 
                    03040 .................... void timer_yield(); 
                    03041 ....................  
                    03042 .................... #endif /* INCLUDE_TIMER_H_ */ 
                    03043 ....................  
                    03044 ....................  
                    03045 ....................  
                    03046 .................... /* 
                    03047 ....................  * uart.h 
                    03048 ....................  * 
                    03049 ....................  *  Created on: Mar 23, 2017 
                    03050 ....................  *      Author: asaf 
                    03051 ....................  */ 
                    03052 ....................  
                    03053 .................... #ifndef UART_H_ 
                    03054 .................... #define UART_H_ 
                    03055 ....................  
                    03056 .................... #include <stdint.h> 
                    03057 .................... /////////////////////////////////////////////////////////////////////////// 
                    03058 .................... ////                                                                   //// 
                    03059 .................... ////                           stdint.h                                //// 
                    03060 .................... ////                                                                   //// 
                    03061 .................... //// Standard integer definitions.                                     //// 
                    03062 .................... ////                                                                   //// 
                    03063 .................... /////////////////////////////////////////////////////////////////////////// 
                    03064 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    03065 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    03066 .................... //// compiler.  This source code may only be distributed to other      //// 
                    03067 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    03068 .................... //// or distribution is permitted without written permission.          //// 
                    03069 .................... //// Derivative programs created using this software in object code    //// 
                    03070 .................... //// form are not restricted in any way.                               //// 
                    03071 .................... /////////////////////////////////////////////////////////////////////////// 
                    03072 ....................  
                    03073 .................... #ifndef _STDINT 
                    03074 ....................  
                    03075 .................... #define _STDINT 
                    03076 ....................  
                    03077 .................... //////////// exact width 
                    03078 ....................  
                    03079 .................... typedef signed int8 int8_t; 
                    03080 .................... typedef unsigned int8 uint8_t; 
                    03081 .................... typedef signed int16 int16_t; 
                    03082 .................... typedef unsigned int16 uint16_t; 
                    03083 .................... typedef signed int32 int32_t; 
                    03084 .................... typedef unsigned int32 uint32_t; 
                    03085 ....................  
                    03086 .................... #if defined(__PCD__) 
                    03087 .................... //typedef signed int24 int24_t; 
                    03088 .................... //typedef unsigned int24 uint24_t; 
                    03089 .................... typedef signed int64 int64_t; 
                    03090 .................... typedef unsigned int64 uint64_t; 
                    03091 .................... #endif 
                    03092 ....................  
                    03093 .................... #define INT8_MAX  (128) 
                    03094 .................... #define INT8_MIN  (-127) 
                    03095 .................... #define UINT8_MAX (255) 
                    03096 ....................  
                    03097 .................... #define INT16_MAX  (32767) 
                    03098 .................... #define INT16_MIN  (-32768) 
                    03099 .................... #define UINT16_MAX (65535) 
                    03100 ....................  
                    03101 .................... #define INT32_MAX  (2147483647) 
                    03102 .................... #define INT32_MIN  (-2147483648) 
                    03103 .................... #define UINT32_MAX (4294967295) 
                    03104 ....................  
                    03105 .................... #if defined(__PCD__) 
                    03106 .................... //#define INT24_MAX  (8388607) 
                    03107 .................... //#define INT24_MIN  (-8388608) 
                    03108 .................... //#define UINT24_MAX (16777215) 
                    03109 ....................  
                    03110 .................... #define INT64_MAX  (9223372036854775807) 
                    03111 .................... #define INT64_MIN  (-9223372036854775808) 
                    03112 .................... #define UINT64_MAX (18446744073709551615) 
                    03113 .................... #endif 
                    03114 ....................  
                    03115 .................... ///////// minimum width 
                    03116 ....................  
                    03117 .................... typedef signed int8 int_least8_t; 
                    03118 .................... typedef unsigned int8 uint_least8_t; 
                    03119 .................... typedef signed int16 int_least16_t; 
                    03120 .................... typedef unsigned int16 uint_least16_t; 
                    03121 .................... typedef signed int32 int_least32_t; 
                    03122 .................... typedef unsigned int32 uint_least32_t; 
                    03123 ....................  
                    03124 .................... #if defined(__PCD__) 
                    03125 .................... //typedef signed int24 int_least24_t; 
                    03126 .................... //typedef unsigned int24 uint_least24_t; 
                    03127 .................... typedef signed int64 int_least64_t; 
                    03128 .................... typedef unsigned int64 uint_least64_t; 
                    03129 .................... #endif 
                    03130 ....................  
                    03131 .................... #define INT_LEAST8_MAX  (128) 
                    03132 .................... #define INT_LEAST8_MIN  (-127) 
                    03133 .................... #define UINT_LEAST8_MAX (255) 
                    03134 ....................  
                    03135 .................... #define INT_LEAST16_MAX  (32767) 
                    03136 .................... #define INT_LEAST16_MIN  (-32768) 
                    03137 .................... #define UINT_LEAST16_MAX (65535) 
                    03138 ....................  
                    03139 .................... #define INT_LEAST32_MAX  (2147483647) 
                    03140 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    03141 .................... #define UINT_LEAST32_MAX (4294967295) 
                    03142 ....................  
                    03143 .................... #if defined(__PCD__) 
                    03144 .................... //#define INT_LEAST24_MAX  (8388607) 
                    03145 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    03146 .................... //#define UINT_LEAST24_MAX (16777215) 
                    03147 ....................  
                    03148 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    03149 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    03150 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    03151 .................... #endif 
                    03152 ....................  
                    03153 .................... ///////// fastest width 
                    03154 ....................  
                    03155 .................... #if defined(__PCD__) 
                    03156 .................... typedef signed int16 int_fast8_t; 
                    03157 .................... typedef unsigned int16 uint_fast8_t; 
                    03158 .................... #define INT_FAST8_MAX  (32767) 
                    03159 .................... #define INT_FAST8_MIN  (-32768) 
                    03160 .................... #define UINT_FAST8_MAX (65535) 
                    03161 .................... typedef signed int16 int_fast16_t; 
                    03162 .................... typedef unsigned int16 uint_fast16_t; 
                    03163 .................... //typedef signed int24 int_fast24_t; 
                    03164 .................... //typedef unsigned int24 uint_fast24_t; 
                    03165 .................... typedef signed int64 int_fast64_t; 
                    03166 .................... typedef unsigned int64 uint_fast64_t; 
                    03167 .................... #else 
                    03168 .................... typedef signed int8 int_fast8_t; 
                    03169 .................... typedef unsigned int8 uint_fast8_t; 
                    03170 .................... #define INT_FAST8_MAX  (128) 
                    03171 .................... #define INT_FAST8_MIN  (-127) 
                    03172 .................... #define UINT_FAST8_MAX (255) 
                    03173 .................... typedef signed int16 int_fast16_t; 
                    03174 .................... typedef unsigned int16 uint_fast16_t; 
                    03175 .................... #endif 
                    03176 ....................  
                    03177 .................... typedef signed int32 int_fast32_t; 
                    03178 .................... typedef unsigned int32 uint_fast32_t; 
                    03179 ....................  
                    03180 .................... #define INT_FAST16_MAX  (32767) 
                    03181 .................... #define INT_FAST16_MIN  (-32768) 
                    03182 .................... #define UINT_FAST16_MAX (65535) 
                    03183 ....................  
                    03184 .................... #define INT_FAST32_MAX  (2147483647) 
                    03185 .................... #define INT_FAST32_MIN  (-2147483648) 
                    03186 .................... #define UINT_FAST32_MAX (4294967295) 
                    03187 ....................  
                    03188 .................... #if defined(__PCD__) 
                    03189 .................... //#define INT_FAST24_MAX  (8388607) 
                    03190 .................... //#define INT_FAST24_MIN  (-8388608) 
                    03191 .................... //#define UINT_FAST24_MAX (16777215) 
                    03192 ....................  
                    03193 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    03194 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    03195 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    03196 .................... #endif 
                    03197 ....................  
                    03198 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    03199 ....................  
                    03200 .................... /// TODO 
                    03201 ....................  
                    03202 .................... /// intptr_t uintptr_t 
                    03203 ....................  
                    03204 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    03205 ....................  
                    03206 ....................  
                    03207 .................... /////////// greatest width (OPTIONAL) 
                    03208 ....................  
                    03209 .................... /// TODO 
                    03210 ....................  
                    03211 .................... /// intmax_t uintmax_t 
                    03212 ....................  
                    03213 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    03214 ....................  
                    03215 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    03216 ....................  
                    03217 ....................  
                    03218 .................... #endif 
                    03219 ....................  
                    03220 .................... #include <stddef.h> 
                    03221 .................... /////////////////////////////////////////////////////////////////////////// 
                    03222 .................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
                    03223 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    03224 .................... //// compiler.  This source code may only be distributed to other      //// 
                    03225 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    03226 .................... //// or distribution is permitted without written permission.          //// 
                    03227 .................... //// Derivative programs created using this software in object code    //// 
                    03228 .................... //// form are not restricted in any way.                               //// 
                    03229 .................... /////////////////////////////////////////////////////////////////////////// 
                    03230 ....................  
                    03231 .................... #ifndef _STDDEF 
                    03232 ....................  
                    03233 .................... #define _STDDEF 
                    03234 ....................  
                    03235 .................... #if sizeof(unsigned int8 *)==1 
                    03236 .................... #define ptrdiff_t unsigned int8 
                    03237 .................... #else 
                    03238 .................... #define ptrdiff_t unsigned int16 
                    03239 .................... #endif 
                    03240 ....................  
                    03241 .................... #if defined(__PCB__) 
                    03242 .................... #define size_t unsigned int8 
                    03243 .................... #else 
                    03244 .................... #define size_t unsigned int16 
                    03245 .................... #endif 
                    03246 .................... #define wchar_t char 
                    03247 .................... #define NULL 0 
                    03248 ....................  
                    03249 .................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
                    03250 ....................  
                    03251 .................... #endif 
                    03252 ....................  
                    03253 ....................  
                    03254 .................... void uart_init(); 
                    03255 .................... void uart_disable(); 
                    03256 .................... uint8_t uart_get_byte_blocking(); 
                    03257 .................... uint8_t uart_get_byte_nonblocking(uint8_t *dst); 
                    03258 .................... void uart_send(void* buffer, uint8_t size); 
                    03259 .................... void uart_clear_errors(); 
                    03260 ....................  
                    03261 .................... #endif /* UART_H_ */ 
                    03262 ....................  
                    03263 ....................  
                    03264 ....................  
                    03265 ....................  
3770 0103           03266 MOVLB  3
3772 91D5           03267 BCF    xD5.0
3774 6A19           03268 CLRF   19
3776 BEF2           03269 BTFSC  FF2.7
3778 8E19           03270 BSF    19.7
377A 9EF2           03271 BCF    FF2.7
                    03272 ....................  
                    03273 ....................  
                    03274 ....................  
                    03275 ....................  
377C 6AF8           03276 CLRF   FF8
377E 6AF7           03277 CLRF   FF7
3780 6AF6           03278 CLRF   FF6
3782 0E03           03279 MOVLW  03
3784 6EEA           03280 MOVWF  FEA
3786 0ED6           03281 MOVLW  D6
3788 6EE9           03282 MOVWF  FE9
378A 0104           03283 MOVLB  4
378C 6B4F           03284 CLRF   x4F
378E 0E40           03285 MOVLW  40
3790 6F4E           03286 MOVWF  x4E
3792 0100           03287 MOVLB  0
3794 EC42 F012      03288 CALL   2484
3798 BE19           03289 BTFSC  19.7
379A 8EF2           03290 BSF    FF2.7
                    03291 ....................  
                    03292 ....................  
379C 0104           03293 MOVLB  4
379E 6916           03294 SETF   x16
37A0 6917           03295 SETF   x17
37A2 6918           03296 SETF   x18
37A4 6919           03297 SETF   x19
                    03298 ....................  
37A6 0E80           03299 MOVLW  80
37A8 6F1A           03300 MOVWF  x1A
37AA 0EEF           03301 MOVLW  EF
37AC 6F1B           03302 MOVWF  x1B
37AE 0E13           03303 MOVLW  13
37B0 6F1C           03304 MOVWF  x1C
37B2 0EF0           03305 MOVLW  F0
37B4 6F1D           03306 MOVWF  x1D
                    03307 ....................  
                    03308 ....................  
37B6 0E03           03309 MOVLW  03
37B8 6F23           03310 MOVWF  x23
37BA 0ED6           03311 MOVLW  D6
37BC 6F22           03312 MOVWF  x22
37BE 0E04           03313 MOVLW  04
37C0 6F25           03314 MOVWF  x25
37C2 0E16           03315 MOVLW  16
37C4 6F24           03316 MOVWF  x24
37C6 6B27           03317 CLRF   x27
37C8 0E04           03318 MOVLW  04
37CA 6F26           03319 MOVWF  x26
37CC 0100           03320 MOVLB  0
37CE DF5D           03321 RCALL  368A
37D0 5201           03322 MOVF   01,F
37D2 E110           03323 BNZ   37F4
                    03324 ....................  
37D4 0103           03325 MOVLB  3
37D6 81D5           03326 BSF    xD5.0
                    03327 ....................  
                    03328 ....................  
                    03329 ....................  
                    03330 ....................  
37D8 0E03           03331 MOVLW  03
37DA 6EEA           03332 MOVWF  FEA
37DC 0ED6           03333 MOVLW  D6
37DE 6EE9           03334 MOVWF  FE9
37E0 0E04           03335 MOVLW  04
37E2 6EE2           03336 MOVWF  FE2
37E4 0E1A           03337 MOVLW  1A
37E6 6EE1           03338 MOVWF  FE1
37E8 0E04           03339 MOVLW  04
37EA 6E01           03340 MOVWF  01
37EC CFE6 FFEE      03341 MOVFF  FE6,FEE
37F0 2E01           03342 DECFSZ 01,F
37F2 D7FC           03343 BRA    37EC
                    03344 ....................  
                    03345 ....................  
                    03346 ....................  
37F4 0E04           03347 MOVLW  04
37F6 0104           03348 MOVLB  4
37F8 6F1E           03349 MOVWF  x1E
37FA 0EEF           03350 MOVLW  EF
37FC 6F1F           03351 MOVWF  x1F
37FE 0E10           03352 MOVLW  10
3800 6F20           03353 MOVWF  x20
3802 0EF0           03354 MOVLW  F0
3804 6F21           03355 MOVWF  x21
                    03356 ....................  
                    03357 ....................  
3806 0E03           03358 MOVLW  03
3808 6F23           03359 MOVWF  x23
380A 0EDE           03360 MOVLW  DE
380C 6F22           03361 MOVWF  x22
380E 0E04           03362 MOVLW  04
3810 6F25           03363 MOVWF  x25
3812 0E1E           03364 MOVLW  1E
3814 6F24           03365 MOVWF  x24
3816 6B27           03366 CLRF   x27
3818 0E04           03367 MOVLW  04
381A 6F26           03368 MOVWF  x26
381C 0100           03369 MOVLB  0
381E DF35           03370 RCALL  368A
3820 5201           03371 MOVF   01,F
3822 E010           03372 BZ    3844
                    03373 ....................  
3824 0103           03374 MOVLB  3
3826 81D5           03375 BSF    xD5.0
                    03376 ....................  
3828 0E03           03377 MOVLW  03
382A 6EEA           03378 MOVWF  FEA
382C 0EDE           03379 MOVLW  DE
382E 6EE9           03380 MOVWF  FE9
3830 0E04           03381 MOVLW  04
3832 6EE2           03382 MOVWF  FE2
3834 0E1E           03383 MOVLW  1E
3836 6EE1           03384 MOVWF  FE1
3838 0E04           03385 MOVLW  04
383A 6E01           03386 MOVWF  01
383C CFE6 FFEE      03387 MOVFF  FE6,FEE
3840 2E01           03388 DECFSZ 01,F
3842 D7FC           03389 BRA    383C
                    03390 ....................  
                    03391 ....................  
                    03392 ....................  
3844 0103           03393 MOVLB  3
3846 A1D5           03394 BTFSS  xD5.0
3848 D00D           03395 BRA    3864
                    03396 ....................  
384A 6AF8           03397 CLRF   FF8
384C 6AF7           03398 CLRF   FF7
384E 6AF6           03399 CLRF   FF6
3850 0E03           03400 MOVLW  03
3852 6EEA           03401 MOVWF  FEA
3854 0ED6           03402 MOVLW  D6
3856 6EE9           03403 MOVWF  FE9
3858 0E40           03404 MOVLW  40
385A 0104           03405 MOVLB  4
385C 6F22           03406 MOVWF  x22
385E 0100           03407 MOVLB  0
3860 DF66           03408 RCALL  372E
3862 0103           03409 MOVLB  3
                    03410 ....................  
3864 0100           03411 MOVLB  0
3866 EF98 F016      03412 GOTO   2D30 (RETURN)
                    03413 ....................  
                    03414 ....................  
                    03415 ....................  
                    03416 ....................  
2700 6AF8           03417 CLRF   FF8
2702 9ED0           03418 BCF    FD0.7
2704 8E07           03419 BSF    07.7
2706 6AEA           03420 CLRF   FEA
2708 6AE9           03421 CLRF   FE9
270A 0E70           03422 MOVLW  70
270C 6ED3           03423 MOVWF  FD3
270E 8C9B           03424 BSF    F9B.6
2710 9E9B           03425 BCF    F9B.7
2712 6A1A           03426 CLRF   1A
2714 86B8           03427 BSF    FB8.3
2716 0E10           03428 MOVLW  10
2718 6EAF           03429 MOVWF  FAF
271A 0E00           03430 MOVLW  00
271C 6EB0           03431 MOVWF  FB0
271E 0EA6           03432 MOVLW  A6
2720 6EAC           03433 MOVWF  FAC
2722 0E90           03434 MOVLW  90
2724 6EAB           03435 MOVWF  FAB
2726 6A1E           03436 CLRF   1E
2728 6A1D           03437 CLRF   1D
272A 6A1C           03438 CLRF   1C
272C 6A1B           03439 CLRF   1B
272E 0E35           03440 MOVLW  35
2730 6ECD           03441 MOVWF  FCD
2732 6ACC           03442 CLRF   FCC
2734 6ACF           03443 CLRF   FCF
2736 6ACE           03444 CLRF   FCE
2738 909E           03445 BCF    F9E.0
273A 9892           03446 BCF    F92.4
273C 9692           03447 BCF    F92.3
273E 9689           03448 BCF    F89.3
2740 9492           03449 BCF    F92.2
2742 9489           03450 BCF    F89.2
2744 0E70           03451 MOVLW  70
2746 6ED3           03452 MOVWF  FD3
2748 8C9B           03453 BSF    F9B.6
274A 9E9B           03454 BCF    F9B.7
274C 0101           03455 MOVLB  1
274E 6B53           03456 CLRF   x53
2750 6B52           03457 CLRF   x52
2752 6B55           03458 CLRF   x55
2754 6B54           03459 CLRF   x54
2756 6B57           03460 CLRF   x57
2758 6B56           03461 CLRF   x56
275A 6ED3           03462 MOVWF  FD3
275C 8C9B           03463 BSF    F9B.6
275E 9E9B           03464 BCF    F9B.7
2760 0102           03465 MOVLB  2
2762 6963           03466 SETF   x63
2764 6962           03467 SETF   x62
2766 6961           03468 SETF   x61
2768 6960           03469 SETF   x60
276A 6ED3           03470 MOVWF  FD3
276C 8C9B           03471 BSF    F9B.6
276E 9E9B           03472 BCF    F9B.7
2770 50C1           03473 MOVF   FC1,W
2772 0BF0           03474 ANDLW  F0
2774 6EC1           03475 MOVWF  FC1
2776 0E00           03476 MOVLW  00
2778 010F           03477 MOVLB  F
277A 6F38           03478 MOVWF  x38
277C 6F3C           03479 MOVWF  x3C
277E 6F39           03480 MOVWF  x39
2780 6F3A           03481 MOVWF  x3A
2782 6F3B           03482 MOVWF  x3B
2784 0101           03483 MOVLB  1
2786 6B88           03484 CLRF   x88
2788 6A77           03485 CLRF   F77
278A 6A78           03486 CLRF   F78
278C 6A79           03487 CLRF   F79
278E 6A1F           03488 CLRF   1F
2790 6A20           03489 CLRF   20
2792 6A21           03490 CLRF   21
2794 6A22           03491 CLRF   22
2796 6A23           03492 CLRF   23
2798 6A24           03493 CLRF   24
279A 6A25           03494 CLRF   25
279C 6A26           03495 CLRF   26
279E 6A27           03496 CLRF   27
27A0 6A28           03497 CLRF   28
27A2 6A29           03498 CLRF   29
27A4 6A2A           03499 CLRF   2A
27A6 6A2B           03500 CLRF   2B
27A8 6A2C           03501 CLRF   2C
27AA 6A2D           03502 CLRF   2D
27AC 6A2E           03503 CLRF   2E
27AE 6A2F           03504 CLRF   2F
27B0 6A30           03505 CLRF   30
27B2 6A31           03506 CLRF   31
27B4 6A32           03507 CLRF   32
27B6 6A33           03508 CLRF   33
27B8 6A34           03509 CLRF   34
27BA 6A35           03510 CLRF   35
27BC 6A36           03511 CLRF   36
27BE 6A37           03512 CLRF   37
27C0 6A38           03513 CLRF   38
27C2 6A39           03514 CLRF   39
27C4 6A3A           03515 CLRF   3A
27C6 6A3B           03516 CLRF   3B
27C8 6A3C           03517 CLRF   3C
27CA 6A3D           03518 CLRF   3D
27CC 6A3E           03519 CLRF   3E
27CE 6A3F           03520 CLRF   3F
27D0 6A40           03521 CLRF   40
27D2 6A41           03522 CLRF   41
27D4 6A42           03523 CLRF   42
27D6 6A43           03524 CLRF   43
27D8 6A44           03525 CLRF   44
27DA 6A45           03526 CLRF   45
27DC 6A46           03527 CLRF   46
27DE 6A47           03528 CLRF   47
27E0 6A48           03529 CLRF   48
27E2 6A49           03530 CLRF   49
27E4 6A4A           03531 CLRF   4A
27E6 6A4B           03532 CLRF   4B
27E8 6A4C           03533 CLRF   4C
27EA 6A4D           03534 CLRF   4D
27EC 6A4E           03535 CLRF   4E
27EE 6A4F           03536 CLRF   4F
27F0 6A50           03537 CLRF   50
27F2 6A51           03538 CLRF   51
27F4 6A52           03539 CLRF   52
27F6 6A53           03540 CLRF   53
27F8 6A54           03541 CLRF   54
27FA 6A55           03542 CLRF   55
27FC 6A56           03543 CLRF   56
27FE 6A57           03544 CLRF   57
2800 6A58           03545 CLRF   58
2802 6A59           03546 CLRF   59
2804 6A5A           03547 CLRF   5A
2806 6A5B           03548 CLRF   5B
2808 6A5C           03549 CLRF   5C
280A 6A5D           03550 CLRF   5D
280C 6A5E           03551 CLRF   5E
280E 6A5F           03552 CLRF   5F
2810 0100           03553 MOVLB  0
2812 6B60           03554 CLRF   x60
2814 6B61           03555 CLRF   x61
2816 6B62           03556 CLRF   x62
2818 6B63           03557 CLRF   x63
281A 6B64           03558 CLRF   x64
281C 6B65           03559 CLRF   x65
281E 6B66           03560 CLRF   x66
2820 6B67           03561 CLRF   x67
2822 6B68           03562 CLRF   x68
2824 6B69           03563 CLRF   x69
2826 6B6A           03564 CLRF   x6A
2828 6B6B           03565 CLRF   x6B
282A 6B6C           03566 CLRF   x6C
282C 6B6D           03567 CLRF   x6D
282E 6B6E           03568 CLRF   x6E
2830 6B6F           03569 CLRF   x6F
2832 6B70           03570 CLRF   x70
2834 6A1F           03571 CLRF   1F
2836 6A20           03572 CLRF   20
2838 6B71           03573 CLRF   x71
283A 6B72           03574 CLRF   x72
283C 6B73           03575 CLRF   x73
283E 6B74           03576 CLRF   x74
2840 6B75           03577 CLRF   x75
2842 6B76           03578 CLRF   x76
2844 6B77           03579 CLRF   x77
2846 6B78           03580 CLRF   x78
2848 6B79           03581 CLRF   x79
284A 6B7A           03582 CLRF   x7A
284C 6B7B           03583 CLRF   x7B
284E 6B7C           03584 CLRF   x7C
2850 6B7D           03585 CLRF   x7D
2852 6B7E           03586 CLRF   x7E
2854 6B7F           03587 CLRF   x7F
2856 6B80           03588 CLRF   x80
2858 6B81           03589 CLRF   x81
285A 6B82           03590 CLRF   x82
285C 6B83           03591 CLRF   x83
285E 6B84           03592 CLRF   x84
2860 6B85           03593 CLRF   x85
2862 6B86           03594 CLRF   x86
2864 6B87           03595 CLRF   x87
2866 6B88           03596 CLRF   x88
2868 6B89           03597 CLRF   x89
286A 6B8A           03598 CLRF   x8A
286C 6B8B           03599 CLRF   x8B
286E 6B8C           03600 CLRF   x8C
2870 6B8D           03601 CLRF   x8D
2872 6B8E           03602 CLRF   x8E
2874 6B8F           03603 CLRF   x8F
2876 6B90           03604 CLRF   x90
2878 6B91           03605 CLRF   x91
287A 6B92           03606 CLRF   x92
287C 6B93           03607 CLRF   x93
287E 6B94           03608 CLRF   x94
2880 6B95           03609 CLRF   x95
2882 6B96           03610 CLRF   x96
2884 6B97           03611 CLRF   x97
2886 6B98           03612 CLRF   x98
2888 6B99           03613 CLRF   x99
288A 6B9A           03614 CLRF   x9A
288C 6B9B           03615 CLRF   x9B
288E 6B9C           03616 CLRF   x9C
2890 6B9D           03617 CLRF   x9D
2892 6B9E           03618 CLRF   x9E
2894 6B9F           03619 CLRF   x9F
2896 6BA0           03620 CLRF   xA0
2898 6BA1           03621 CLRF   xA1
289A 6BA2           03622 CLRF   xA2
289C 6BA3           03623 CLRF   xA3
289E 6BA4           03624 CLRF   xA4
28A0 6BA5           03625 CLRF   xA5
28A2 6BA6           03626 CLRF   xA6
28A4 6BA7           03627 CLRF   xA7
28A6 6BA8           03628 CLRF   xA8
28A8 6BA9           03629 CLRF   xA9
28AA 6BAA           03630 CLRF   xAA
28AC 6BAB           03631 CLRF   xAB
28AE 6BAC           03632 CLRF   xAC
28B0 6BAD           03633 CLRF   xAD
28B2 6BAE           03634 CLRF   xAE
28B4 6BAF           03635 CLRF   xAF
28B6 6BB0           03636 CLRF   xB0
28B8 6BB1           03637 CLRF   xB1
28BA 6BB2           03638 CLRF   xB2
28BC 6BB3           03639 CLRF   xB3
28BE 6BB4           03640 CLRF   xB4
28C0 6BB5           03641 CLRF   xB5
28C2 6BB6           03642 CLRF   xB6
28C4 6BB7           03643 CLRF   xB7
28C6 6BB8           03644 CLRF   xB8
28C8 6BB9           03645 CLRF   xB9
28CA 6BBA           03646 CLRF   xBA
28CC 6BBB           03647 CLRF   xBB
28CE 6BBC           03648 CLRF   xBC
28D0 6BBD           03649 CLRF   xBD
28D2 6BBE           03650 CLRF   xBE
28D4 6BBF           03651 CLRF   xBF
28D6 6BC0           03652 CLRF   xC0
28D8 6BC1           03653 CLRF   xC1
28DA 6BC2           03654 CLRF   xC2
28DC 6BC3           03655 CLRF   xC3
28DE 6BC4           03656 CLRF   xC4
28E0 6BC5           03657 CLRF   xC5
28E2 6BC6           03658 CLRF   xC6
28E4 6BC7           03659 CLRF   xC7
28E6 6BC8           03660 CLRF   xC8
28E8 6BC9           03661 CLRF   xC9
28EA 6BCA           03662 CLRF   xCA
28EC 6BCB           03663 CLRF   xCB
28EE 6BCC           03664 CLRF   xCC
28F0 6BCD           03665 CLRF   xCD
28F2 6BCE           03666 CLRF   xCE
28F4 6BCF           03667 CLRF   xCF
28F6 6BD0           03668 CLRF   xD0
28F8 6BD1           03669 CLRF   xD1
28FA 6BD2           03670 CLRF   xD2
28FC 6BD3           03671 CLRF   xD3
28FE 6BD4           03672 CLRF   xD4
2900 6BD5           03673 CLRF   xD5
2902 6BD6           03674 CLRF   xD6
2904 6BD7           03675 CLRF   xD7
2906 6BD8           03676 CLRF   xD8
2908 6BD9           03677 CLRF   xD9
290A 6BDA           03678 CLRF   xDA
290C 6BDB           03679 CLRF   xDB
290E 6BDC           03680 CLRF   xDC
2910 6BDD           03681 CLRF   xDD
2912 6BDE           03682 CLRF   xDE
2914 6BDF           03683 CLRF   xDF
2916 6BE0           03684 CLRF   xE0
2918 6BE1           03685 CLRF   xE1
291A 6BE2           03686 CLRF   xE2
291C 6BE3           03687 CLRF   xE3
291E 6BE4           03688 CLRF   xE4
2920 6BE5           03689 CLRF   xE5
2922 6BE6           03690 CLRF   xE6
2924 6BE7           03691 CLRF   xE7
2926 6BE8           03692 CLRF   xE8
2928 6BE9           03693 CLRF   xE9
292A 6BEA           03694 CLRF   xEA
292C 6BEB           03695 CLRF   xEB
292E 6BEC           03696 CLRF   xEC
2930 6BED           03697 CLRF   xED
2932 6BEE           03698 CLRF   xEE
2934 6BEF           03699 CLRF   xEF
2936 6BF0           03700 CLRF   xF0
2938 6BF1           03701 CLRF   xF1
293A 6BF2           03702 CLRF   xF2
293C 6BF3           03703 CLRF   xF3
293E 6BF4           03704 CLRF   xF4
2940 6BF5           03705 CLRF   xF5
2942 6BF6           03706 CLRF   xF6
2944 6BF7           03707 CLRF   xF7
2946 6BF8           03708 CLRF   xF8
2948 6BF9           03709 CLRF   xF9
294A 6BFA           03710 CLRF   xFA
294C 6BFB           03711 CLRF   xFB
294E 6BFC           03712 CLRF   xFC
2950 6BFD           03713 CLRF   xFD
2952 6BFE           03714 CLRF   xFE
2954 6BFF           03715 CLRF   xFF
2956 0101           03716 MOVLB  1
2958 6B00           03717 CLRF   x00
295A 6B01           03718 CLRF   x01
295C 6B02           03719 CLRF   x02
295E 6B03           03720 CLRF   x03
2960 6B04           03721 CLRF   x04
2962 6B05           03722 CLRF   x05
2964 6B06           03723 CLRF   x06
2966 6B07           03724 CLRF   x07
2968 6B08           03725 CLRF   x08
296A 6B09           03726 CLRF   x09
296C 6B0A           03727 CLRF   x0A
296E 6B0B           03728 CLRF   x0B
2970 6B0C           03729 CLRF   x0C
2972 6B0D           03730 CLRF   x0D
2974 6B0E           03731 CLRF   x0E
2976 6B0F           03732 CLRF   x0F
2978 6B10           03733 CLRF   x10
297A 6B11           03734 CLRF   x11
297C 6B12           03735 CLRF   x12
297E 6B13           03736 CLRF   x13
2980 6B14           03737 CLRF   x14
2982 6B15           03738 CLRF   x15
2984 6B1C           03739 CLRF   x1C
2986 6B1D           03740 CLRF   x1D
2988 6B1E           03741 CLRF   x1E
298A 6B1F           03742 CLRF   x1F
298C 6B20           03743 CLRF   x20
298E 6B21           03744 CLRF   x21
2990 6B22           03745 CLRF   x22
2992 6B23           03746 CLRF   x23
2994 6B24           03747 CLRF   x24
2996 6B25           03748 CLRF   x25
2998 6B26           03749 CLRF   x26
299A 6B27           03750 CLRF   x27
299C 6B28           03751 CLRF   x28
299E 6B29           03752 CLRF   x29
29A0 6B2A           03753 CLRF   x2A
29A2 6B2B           03754 CLRF   x2B
29A4 6B2C           03755 CLRF   x2C
29A6 6B2D           03756 CLRF   x2D
29A8 6B2E           03757 CLRF   x2E
29AA 6B2F           03758 CLRF   x2F
29AC 6B30           03759 CLRF   x30
29AE 6B31           03760 CLRF   x31
29B0 6B32           03761 CLRF   x32
29B2 6B33           03762 CLRF   x33
29B4 6B34           03763 CLRF   x34
29B6 6B35           03764 CLRF   x35
29B8 6B36           03765 CLRF   x36
29BA 6B37           03766 CLRF   x37
29BC 6B38           03767 CLRF   x38
29BE 6B39           03768 CLRF   x39
29C0 6B3A           03769 CLRF   x3A
29C2 6B3B           03770 CLRF   x3B
29C4 6B3C           03771 CLRF   x3C
29C6 6B3D           03772 CLRF   x3D
29C8 6B3E           03773 CLRF   x3E
29CA 6B3F           03774 CLRF   x3F
29CC 6B40           03775 CLRF   x40
29CE 6B41           03776 CLRF   x41
29D0 6B42           03777 CLRF   x42
29D2 6B43           03778 CLRF   x43
29D4 6B44           03779 CLRF   x44
29D6 6B45           03780 CLRF   x45
29D8 6B46           03781 CLRF   x46
29DA 6B47           03782 CLRF   x47
29DC 6B48           03783 CLRF   x48
29DE 6B49           03784 CLRF   x49
29E0 6B4A           03785 CLRF   x4A
29E2 6B4B           03786 CLRF   x4B
29E4 6B4C           03787 CLRF   x4C
29E6 6B4D           03788 CLRF   x4D
29E8 6B4E           03789 CLRF   x4E
29EA 6B4F           03790 CLRF   x4F
29EC 6B50           03791 CLRF   x50
29EE 6B51           03792 CLRF   x51
29F0 6B58           03793 CLRF   x58
29F2 0E58           03794 MOVLW  58
29F4 6F5A           03795 MOVWF  x5A
29F6 0EEC           03796 MOVLW  EC
29F8 6F59           03797 MOVWF  x59
29FA 0E09           03798 MOVLW  09
29FC 6F5B           03799 MOVWF  x5B
29FE 0E61           03800 MOVLW  61
2A00 6F5D           03801 MOVWF  x5D
2A02 0E90           03802 MOVLW  90
2A04 6F5C           03803 MOVWF  x5C
2A06 0E02           03804 MOVLW  02
2A08 6F5E           03805 MOVWF  x5E
2A0A 0E63           03806 MOVLW  63
2A0C 6F60           03807 MOVWF  x60
2A0E 0E52           03808 MOVLW  52
2A10 6F5F           03809 MOVWF  x5F
2A12 0E03           03810 MOVLW  03
2A14 6F61           03811 MOVWF  x61
2A16 0E64           03812 MOVLW  64
2A18 6F63           03813 MOVWF  x63
2A1A 0E1C           03814 MOVLW  1C
2A1C 6F62           03815 MOVWF  x62
2A1E 0E04           03816 MOVLW  04
2A20 6F64           03817 MOVWF  x64
2A22 0E64           03818 MOVLW  64
2A24 6F66           03819 MOVWF  x66
2A26 0ECE           03820 MOVLW  CE
2A28 6F65           03821 MOVWF  x65
2A2A 0E05           03822 MOVLW  05
2A2C 6F67           03823 MOVWF  x67
2A2E 0E65           03824 MOVLW  65
2A30 6F69           03825 MOVWF  x69
2A32 0E64           03826 MOVLW  64
2A34 6F68           03827 MOVWF  x68
2A36 0E06           03828 MOVLW  06
2A38 6F6A           03829 MOVWF  x6A
2A3A 0E66           03830 MOVLW  66
2A3C 6F6C           03831 MOVWF  x6C
2A3E 0E50           03832 MOVLW  50
2A40 6F6B           03833 MOVWF  x6B
2A42 0E07           03834 MOVLW  07
2A44 6F6D           03835 MOVWF  x6D
2A46 0E66           03836 MOVLW  66
2A48 6F6F           03837 MOVWF  x6F
2A4A 0E54           03838 MOVLW  54
2A4C 6F6E           03839 MOVWF  x6E
2A4E 0102           03840 MOVLB  2
2A50 6B64           03841 CLRF   x64
2A52 6B65           03842 CLRF   x65
2A54 6B66           03843 CLRF   x66
2A56 6B67           03844 CLRF   x67
2A58 6B68           03845 CLRF   x68
2A5A 6B69           03846 CLRF   x69
2A5C 6B6A           03847 CLRF   x6A
2A5E 6B6B           03848 CLRF   x6B
2A60 6B6C           03849 CLRF   x6C
2A62 6B6D           03850 CLRF   x6D
2A64 6B6E           03851 CLRF   x6E
2A66 6B6F           03852 CLRF   x6F
2A68 6B70           03853 CLRF   x70
2A6A 6B71           03854 CLRF   x71
2A6C 6B72           03855 CLRF   x72
2A6E 6B73           03856 CLRF   x73
2A70 6B74           03857 CLRF   x74
2A72 6B75           03858 CLRF   x75
2A74 6B76           03859 CLRF   x76
2A76 6B77           03860 CLRF   x77
2A78 6B78           03861 CLRF   x78
2A7A 6B79           03862 CLRF   x79
2A7C 6B7A           03863 CLRF   x7A
2A7E 6B7B           03864 CLRF   x7B
2A80 6B7C           03865 CLRF   x7C
2A82 6B7D           03866 CLRF   x7D
2A84 6B7E           03867 CLRF   x7E
2A86 6B7F           03868 CLRF   x7F
2A88 6B80           03869 CLRF   x80
2A8A 6B81           03870 CLRF   x81
2A8C 6B82           03871 CLRF   x82
2A8E 6B83           03872 CLRF   x83
2A90 6B84           03873 CLRF   x84
2A92 6B85           03874 CLRF   x85
2A94 6B86           03875 CLRF   x86
2A96 6B87           03876 CLRF   x87
2A98 6B88           03877 CLRF   x88
2A9A 6B89           03878 CLRF   x89
2A9C 6B8A           03879 CLRF   x8A
2A9E 6B8B           03880 CLRF   x8B
2AA0 6B8C           03881 CLRF   x8C
2AA2 6B8D           03882 CLRF   x8D
2AA4 6B8E           03883 CLRF   x8E
2AA6 6B8F           03884 CLRF   x8F
2AA8 6B90           03885 CLRF   x90
2AAA 6B91           03886 CLRF   x91
2AAC 6B92           03887 CLRF   x92
2AAE 6B93           03888 CLRF   x93
2AB0 6B94           03889 CLRF   x94
2AB2 6B95           03890 CLRF   x95
2AB4 6B96           03891 CLRF   x96
2AB6 6B97           03892 CLRF   x97
2AB8 6B98           03893 CLRF   x98
2ABA 6B99           03894 CLRF   x99
2ABC 6B9A           03895 CLRF   x9A
2ABE 6B9B           03896 CLRF   x9B
2AC0 6B9C           03897 CLRF   x9C
2AC2 6B9D           03898 CLRF   x9D
2AC4 6B9E           03899 CLRF   x9E
2AC6 6B9F           03900 CLRF   x9F
2AC8 6BA0           03901 CLRF   xA0
2ACA 6BA1           03902 CLRF   xA1
2ACC 6BA2           03903 CLRF   xA2
2ACE 6BA3           03904 CLRF   xA3
2AD0 6BA4           03905 CLRF   xA4
2AD2 6BA5           03906 CLRF   xA5
2AD4 6BA6           03907 CLRF   xA6
2AD6 6BA7           03908 CLRF   xA7
2AD8 6BA8           03909 CLRF   xA8
2ADA 6BA9           03910 CLRF   xA9
2ADC 6BAA           03911 CLRF   xAA
2ADE 6BAB           03912 CLRF   xAB
2AE0 6BAC           03913 CLRF   xAC
2AE2 6BAD           03914 CLRF   xAD
2AE4 6BAE           03915 CLRF   xAE
2AE6 6BAF           03916 CLRF   xAF
2AE8 6BB0           03917 CLRF   xB0
2AEA 6BB1           03918 CLRF   xB1
2AEC 6BB2           03919 CLRF   xB2
2AEE 6BB3           03920 CLRF   xB3
2AF0 6BB4           03921 CLRF   xB4
2AF2 6BB5           03922 CLRF   xB5
2AF4 6BB6           03923 CLRF   xB6
2AF6 6BB7           03924 CLRF   xB7
2AF8 6BB8           03925 CLRF   xB8
2AFA 6BB9           03926 CLRF   xB9
2AFC 6BBA           03927 CLRF   xBA
2AFE 6BBB           03928 CLRF   xBB
2B00 6BBC           03929 CLRF   xBC
2B02 6BBD           03930 CLRF   xBD
2B04 6BBE           03931 CLRF   xBE
2B06 6BBF           03932 CLRF   xBF
2B08 6BC0           03933 CLRF   xC0
2B0A 6BC1           03934 CLRF   xC1
2B0C 6BC2           03935 CLRF   xC2
2B0E 6BC3           03936 CLRF   xC3
2B10 6BC4           03937 CLRF   xC4
2B12 6BC5           03938 CLRF   xC5
2B14 6BC6           03939 CLRF   xC6
2B16 6BC7           03940 CLRF   xC7
2B18 6BC8           03941 CLRF   xC8
2B1A 6BC9           03942 CLRF   xC9
2B1C 6BCA           03943 CLRF   xCA
2B1E 6BCB           03944 CLRF   xCB
2B20 6BCC           03945 CLRF   xCC
2B22 6BCD           03946 CLRF   xCD
2B24 6BCE           03947 CLRF   xCE
2B26 6BCF           03948 CLRF   xCF
2B28 6BD0           03949 CLRF   xD0
2B2A 6BD1           03950 CLRF   xD1
2B2C 6BD2           03951 CLRF   xD2
2B2E 6BD3           03952 CLRF   xD3
2B30 6BD4           03953 CLRF   xD4
2B32 6BD5           03954 CLRF   xD5
2B34 6BD6           03955 CLRF   xD6
2B36 6BD7           03956 CLRF   xD7
2B38 6BD8           03957 CLRF   xD8
2B3A 6BD9           03958 CLRF   xD9
2B3C 6BDA           03959 CLRF   xDA
2B3E 6BDB           03960 CLRF   xDB
2B40 6BDC           03961 CLRF   xDC
2B42 6BDD           03962 CLRF   xDD
2B44 6BDE           03963 CLRF   xDE
2B46 6BDF           03964 CLRF   xDF
2B48 6BE0           03965 CLRF   xE0
2B4A 6BE1           03966 CLRF   xE1
2B4C 6BE2           03967 CLRF   xE2
2B4E 6BE3           03968 CLRF   xE3
2B50 6BE4           03969 CLRF   xE4
2B52 6BE5           03970 CLRF   xE5
2B54 6BE6           03971 CLRF   xE6
2B56 6BE7           03972 CLRF   xE7
2B58 6BE8           03973 CLRF   xE8
2B5A 6BE9           03974 CLRF   xE9
2B5C 6BEA           03975 CLRF   xEA
2B5E 6BEB           03976 CLRF   xEB
2B60 6BEC           03977 CLRF   xEC
2B62 6BED           03978 CLRF   xED
2B64 6BEE           03979 CLRF   xEE
2B66 6BEF           03980 CLRF   xEF
2B68 6BF0           03981 CLRF   xF0
2B6A 6BF1           03982 CLRF   xF1
2B6C 6BF2           03983 CLRF   xF2
2B6E 6BF3           03984 CLRF   xF3
2B70 6BF4           03985 CLRF   xF4
2B72 6BF5           03986 CLRF   xF5
2B74 6BF6           03987 CLRF   xF6
2B76 6BF7           03988 CLRF   xF7
2B78 6BF8           03989 CLRF   xF8
2B7A 6BF9           03990 CLRF   xF9
2B7C 6BFA           03991 CLRF   xFA
2B7E 6BFB           03992 CLRF   xFB
2B80 6BFC           03993 CLRF   xFC
2B82 6BFD           03994 CLRF   xFD
2B84 6BFE           03995 CLRF   xFE
2B86 6BFF           03996 CLRF   xFF
2B88 0103           03997 MOVLB  3
2B8A 6B00           03998 CLRF   x00
2B8C 6B01           03999 CLRF   x01
2B8E 6B02           04000 CLRF   x02
2B90 6B03           04001 CLRF   x03
2B92 6B04           04002 CLRF   x04
2B94 6B05           04003 CLRF   x05
2B96 6B06           04004 CLRF   x06
2B98 6B07           04005 CLRF   x07
2B9A 6B08           04006 CLRF   x08
2B9C 6B09           04007 CLRF   x09
2B9E 6B0A           04008 CLRF   x0A
2BA0 6B0B           04009 CLRF   x0B
2BA2 6B0C           04010 CLRF   x0C
2BA4 6B0D           04011 CLRF   x0D
2BA6 6B0E           04012 CLRF   x0E
2BA8 6B0F           04013 CLRF   x0F
2BAA 6B10           04014 CLRF   x10
2BAC 6B11           04015 CLRF   x11
2BAE 6B12           04016 CLRF   x12
2BB0 6B13           04017 CLRF   x13
2BB2 6B14           04018 CLRF   x14
2BB4 6B15           04019 CLRF   x15
2BB6 6B16           04020 CLRF   x16
2BB8 6B17           04021 CLRF   x17
2BBA 6B18           04022 CLRF   x18
2BBC 6B19           04023 CLRF   x19
2BBE 6B1A           04024 CLRF   x1A
2BC0 6B1B           04025 CLRF   x1B
2BC2 6B1C           04026 CLRF   x1C
2BC4 6B1D           04027 CLRF   x1D
2BC6 6B1E           04028 CLRF   x1E
2BC8 6B1F           04029 CLRF   x1F
2BCA 6B20           04030 CLRF   x20
2BCC 6B21           04031 CLRF   x21
2BCE 6B22           04032 CLRF   x22
2BD0 6B23           04033 CLRF   x23
2BD2 6B24           04034 CLRF   x24
2BD4 6B25           04035 CLRF   x25
2BD6 6B26           04036 CLRF   x26
2BD8 6B27           04037 CLRF   x27
2BDA 6B28           04038 CLRF   x28
2BDC 6B29           04039 CLRF   x29
2BDE 6B2A           04040 CLRF   x2A
2BE0 6B2B           04041 CLRF   x2B
2BE2 6B2C           04042 CLRF   x2C
2BE4 6B2D           04043 CLRF   x2D
2BE6 6B2E           04044 CLRF   x2E
2BE8 6B2F           04045 CLRF   x2F
2BEA 6B30           04046 CLRF   x30
2BEC 6B31           04047 CLRF   x31
2BEE 6B32           04048 CLRF   x32
2BF0 6B33           04049 CLRF   x33
2BF2 6B34           04050 CLRF   x34
2BF4 6B35           04051 CLRF   x35
2BF6 6B36           04052 CLRF   x36
2BF8 6B37           04053 CLRF   x37
2BFA 6B38           04054 CLRF   x38
2BFC 6B39           04055 CLRF   x39
2BFE 6B3A           04056 CLRF   x3A
2C00 6B3B           04057 CLRF   x3B
2C02 6B3C           04058 CLRF   x3C
2C04 6B3D           04059 CLRF   x3D
2C06 6B3E           04060 CLRF   x3E
2C08 6B3F           04061 CLRF   x3F
2C0A 6B40           04062 CLRF   x40
2C0C 6B41           04063 CLRF   x41
2C0E 6B42           04064 CLRF   x42
2C10 6B43           04065 CLRF   x43
2C12 6B44           04066 CLRF   x44
2C14 6B45           04067 CLRF   x45
2C16 6B46           04068 CLRF   x46
2C18 6B47           04069 CLRF   x47
2C1A 6B48           04070 CLRF   x48
2C1C 6B49           04071 CLRF   x49
2C1E 6B4A           04072 CLRF   x4A
2C20 6B4B           04073 CLRF   x4B
2C22 6B4C           04074 CLRF   x4C
2C24 6B4D           04075 CLRF   x4D
2C26 6B4E           04076 CLRF   x4E
2C28 6B4F           04077 CLRF   x4F
2C2A 6B50           04078 CLRF   x50
2C2C 6B51           04079 CLRF   x51
2C2E 6B52           04080 CLRF   x52
2C30 6B53           04081 CLRF   x53
2C32 6B54           04082 CLRF   x54
2C34 6B55           04083 CLRF   x55
2C36 6B56           04084 CLRF   x56
2C38 6B57           04085 CLRF   x57
2C3A 6B58           04086 CLRF   x58
2C3C 6B59           04087 CLRF   x59
2C3E 6B5A           04088 CLRF   x5A
2C40 6B5B           04089 CLRF   x5B
2C42 6B5C           04090 CLRF   x5C
2C44 6B5D           04091 CLRF   x5D
2C46 6B5E           04092 CLRF   x5E
2C48 6B5F           04093 CLRF   x5F
2C4A 6B60           04094 CLRF   x60
2C4C 6B61           04095 CLRF   x61
2C4E 6B62           04096 CLRF   x62
2C50 6B63           04097 CLRF   x63
2C52 6B64           04098 CLRF   x64
2C54 6B65           04099 CLRF   x65
2C56 6B66           04100 CLRF   x66
2C58 6B67           04101 CLRF   x67
2C5A 6B68           04102 CLRF   x68
2C5C 6B69           04103 CLRF   x69
2C5E 6B6A           04104 CLRF   x6A
2C60 6B6B           04105 CLRF   x6B
2C62 6B6C           04106 CLRF   x6C
2C64 6B6D           04107 CLRF   x6D
2C66 6B6E           04108 CLRF   x6E
2C68 6B6F           04109 CLRF   x6F
2C6A 6B70           04110 CLRF   x70
2C6C 6B71           04111 CLRF   x71
2C6E 6B72           04112 CLRF   x72
2C70 6B73           04113 CLRF   x73
2C72 6B74           04114 CLRF   x74
2C74 6B75           04115 CLRF   x75
2C76 6B76           04116 CLRF   x76
2C78 6B77           04117 CLRF   x77
2C7A 6B78           04118 CLRF   x78
2C7C 6B79           04119 CLRF   x79
2C7E 6B7A           04120 CLRF   x7A
2C80 6B7B           04121 CLRF   x7B
2C82 6B7C           04122 CLRF   x7C
2C84 6B7D           04123 CLRF   x7D
2C86 6B7E           04124 CLRF   x7E
2C88 6B7F           04125 CLRF   x7F
2C8A 6B80           04126 CLRF   x80
2C8C 6B81           04127 CLRF   x81
2C8E 6B82           04128 CLRF   x82
2C90 6B83           04129 CLRF   x83
2C92 6B84           04130 CLRF   x84
2C94 6B85           04131 CLRF   x85
2C96 6B86           04132 CLRF   x86
2C98 6B87           04133 CLRF   x87
2C9A 6B88           04134 CLRF   x88
2C9C 6B89           04135 CLRF   x89
2C9E 6B8A           04136 CLRF   x8A
2CA0 6B8B           04137 CLRF   x8B
2CA2 6B8C           04138 CLRF   x8C
2CA4 6B8D           04139 CLRF   x8D
2CA6 6B8E           04140 CLRF   x8E
2CA8 6B8F           04141 CLRF   x8F
2CAA 6B90           04142 CLRF   x90
2CAC 6B91           04143 CLRF   x91
2CAE 6B92           04144 CLRF   x92
2CB0 6B93           04145 CLRF   x93
2CB2 6B94           04146 CLRF   x94
2CB4 6B95           04147 CLRF   x95
2CB6 6B96           04148 CLRF   x96
2CB8 6B97           04149 CLRF   x97
2CBA 6B98           04150 CLRF   x98
2CBC 6B99           04151 CLRF   x99
2CBE 6B9A           04152 CLRF   x9A
2CC0 6B9B           04153 CLRF   x9B
2CC2 6B9C           04154 CLRF   x9C
2CC4 6B9D           04155 CLRF   x9D
2CC6 6B9E           04156 CLRF   x9E
2CC8 6B9F           04157 CLRF   x9F
2CCA 6BA0           04158 CLRF   xA0
2CCC 6BA1           04159 CLRF   xA1
2CCE 6BA2           04160 CLRF   xA2
2CD0 6BA3           04161 CLRF   xA3
2CD2 6BA4           04162 CLRF   xA4
2CD4 6BA5           04163 CLRF   xA5
2CD6 6BA6           04164 CLRF   xA6
2CD8 6BA7           04165 CLRF   xA7
2CDA 6BA8           04166 CLRF   xA8
2CDC 6BA9           04167 CLRF   xA9
2CDE 6BAA           04168 CLRF   xAA
2CE0 6BAB           04169 CLRF   xAB
2CE2 6BAC           04170 CLRF   xAC
2CE4 6BAD           04171 CLRF   xAD
2CE6 6BAE           04172 CLRF   xAE
2CE8 6BAF           04173 CLRF   xAF
2CEA 6BB0           04174 CLRF   xB0
2CEC 6BB1           04175 CLRF   xB1
2CEE 6BB2           04176 CLRF   xB2
2CF0 6BB3           04177 CLRF   xB3
2CF2 6BB4           04178 CLRF   xB4
2CF4 6BB5           04179 CLRF   xB5
2CF6 6BB6           04180 CLRF   xB6
2CF8 6BB7           04181 CLRF   xB7
2CFA 6BB8           04182 CLRF   xB8
2CFC 6BB9           04183 CLRF   xB9
2CFE 6BBA           04184 CLRF   xBA
2D00 6BBB           04185 CLRF   xBB
2D02 6BBC           04186 CLRF   xBC
2D04 6BBD           04187 CLRF   xBD
2D06 6BBE           04188 CLRF   xBE
2D08 6BBF           04189 CLRF   xBF
2D0A 6BC0           04190 CLRF   xC0
2D0C 6BC1           04191 CLRF   xC1
2D0E 6BC2           04192 CLRF   xC2
2D10 6BC3           04193 CLRF   xC3
2D12 6BC4           04194 CLRF   xC4
2D14 6BC5           04195 CLRF   xC5
2D16 6BC6           04196 CLRF   xC6
2D18 6BC7           04197 CLRF   xC7
2D1A 6BC8           04198 CLRF   xC8
2D1C 6BC9           04199 CLRF   xC9
2D1E 6BCA           04200 CLRF   xCA
2D20 6BCB           04201 CLRF   xCB
2D22 6BCC           04202 CLRF   xCC
2D24 6BCD           04203 CLRF   xCD
2D26 6BCE           04204 CLRF   xCE
2D28 6BCF           04205 CLRF   xCF
                    04206 ....................  
2D2A 0100           04207 MOVLB  0
2D2C EFB8 F01B      04208 GOTO   3770
                    04209 ....................  
2D30 EF3E F01C      04210 GOTO   387C
                    04211 ....................  
2D34 EF41 F01C      04212 GOTO   3882
                    04213 ....................  
2D38 EF75 F01C      04214 GOTO   38EA
                    04215 ....................  
2D3C 0EC0           04216 MOVLW  C0
2D3E 12F2           04217 IORWF  FF2,F
                    04218 ....................  
                    04219 ....................  
                    04220 ....................  
2D40 0E04           04221 MOVLW  04
2D42 0104           04222 MOVLB  4
2D44 6F4B           04223 MOVWF  x4B
                    04224 ....................  
                    04225 ....................  
                    04226 ....................  
2D9A 0E11           04227 MOVLW  11
2D9C 0104           04228 MOVLB  4
2D9E 6F4B           04229 MOVWF  x4B
                    04230 ....................  
2DF4 EF00 F028      04231 GOTO   5000
                    04232 ....................  
                    04233 ....................  
                    04234 ....................  
                    04235 ....................  
2DF8 0103           04236 MOVLB  3
2DFA 6BD6           04237 CLRF   xD6
2DFC 0E21           04238 MOVLW  21
2DFE 6FD5           04239 MOVWF  xD5
2E00 0E03           04240 MOVLW  03
2E02 6FD8           04241 MOVWF  xD8
2E04 0ED2           04242 MOVLW  D2
2E06 6FD7           04243 MOVWF  xD7
2E08 0100           04244 MOVLB  0
2E0A EFBE F029      04245 GOTO   537C
2E0E 0103           04246 MOVLB  3
2E10 91D4           04247 BCF    xD4.0
2E12 B001           04248 BTFSC  01.0
2E14 81D4           04249 BSF    xD4.0
                    04250 ....................  
2E16 A1D4           04251 BTFSS  xD4.0
2E18 D00B           04252 BRA    2E30
                    04253 ....................  
2E1A 6BD6           04254 CLRF   xD6
2E1C 0E21           04255 MOVLW  21
2E1E 6FD5           04256 MOVWF  xD5
2E20 C3D3 F3D8      04257 MOVFF  3D3,3D8
2E24 C3D2 F3D7      04258 MOVFF  3D2,3D7
2E28 0100           04259 MOVLB  0
2E2A EF94 F033      04260 GOTO   6728
2E2E 0103           04261 MOVLB  3
                    04262 ....................  
                    04263 ....................  
2E30 D7E4           04264 BRA    2DFA
                    04265 ....................  
                    04266 ....................  
                    04267 ....................  
                    04268 .................... #include <18F45K22.h> 
2E32 D7FF           04269 BRA    2E32
                    04270 .................... //////// Standard Header file for the PIC18F45K22 device //////////////// 
                    04271 .................... #device PIC18F45K22 
                    05008 .................... #list 
                    05009 ....................  
                    05010 .................... #device adc=10 
                    05011 .................... #device pass_strings=in_ram 
                    05012 ....................  
                    05013 .................... #define LOADER_END 0x1FFF 
                    05014 .................... #include <boot.h> 
                    05015 .................... #undef LOADER_END 
                    05016 .................... #define FLASH_SIZE getenv("FLASH_ERASE_SIZE") 
                    05017 .................... #define LOADER_END   0x1FFF 
                    05018 .................... #define LOADER_SIZE  0x3FF 
                    05019 ....................  
                    05020 .................... #ifndef _bootloader 
                    05021 .................... #build(reset=LOADER_END+1, interrupt=LOADER_END+9) 
                    05022 ....................  
                    05023 .................... /* when in operational software, keep out of the bootloader sections */ 
                    05024 .................... #org 0, 0xfff {} 
                    05025 .................... #org 0x1000, 0x1ffe {} 
                    05026 ....................  
                    05027 .................... #else 
                    05028 ....................  
                    05029 .................... /* when in the bootloader, keep out of the operational sections */ 
                    05030 .................... #org 0x2000, 0x7ffe {} 
                    05031 ....................  
                    05032 .................... #endif 
                    05033 ....................  
                    05034 ....................  
                    05035 .................... #FUSES NOWDT                   //No Watch Dog Timer 
                    05036 .................... #FUSES WDT128                  //Watch Dog Timer uses 1:128 Postscale 
                    05037 .................... #FUSES INTRC_IO                //Internal RC Osc, no CLKOUT 
                    05038 .................... #FUSES NOBROWNOUT              //No brownout reset 
                    05039 .................... #FUSES WDT_SW                  //No Watch Dog Timer, enabled in Software 
                    05040 .................... #FUSES NOLVP                   //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
                    05041 .................... #FUSES NOPUT 
                    05042 .................... #FUSES NOXINST                 //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
                    05043 ....................  
                    05044 .................... #use delay(clock=64000000) 
                    05045 .................... #use rs232(baud=921600,xmit=PIN_C6,rcv=PIN_C7,ERRORS) 
                    05046 .................... #USE TIMER(TIMER=1,TICK=1us,BITS=32,NOISR) 
                    05047 .................... #use spi(DO=PIN_A4, CLK=PIN_A3, ENABLE=PIN_A2, ENABLE_ACTIVE=0, DATA_HOLD=20, BITS=16) 
                    05048 ....................  
                    05049 .................... #opt 9 
                    05050 ....................  
                    05051 .................... #use fast_io(a) 
                    05052 .................... #use fast_io(b) 
                    05053 .................... #use fast_io(c) 
                    05054 .................... #use fast_io(d) 
                    05055 .................... #use fast_io(e) 
                    05056 ....................  
                    05057 .................... #define safe_write_program_memory(address, pointer, size) \ 
                    05058 ....................   do { disable_interrupts(GLOBAL); write_program_memory(address, pointer, size); enable_interrupts(GLOBAL); delay_us(1000); } while (0) 
                    05059 ....................  
                    05060 ....................  
                    05061 ....................  
                    05062 .................... /////////////////////////////////////////////////////////////////////////// 
                    05063 .................... ////                                                                   //// 
                    05064 .................... ////                           stdint.h                                //// 
                    05065 .................... ////                                                                   //// 
                    05066 .................... //// Standard integer definitions.                                     //// 
                    05067 .................... ////                                                                   //// 
                    05068 .................... /////////////////////////////////////////////////////////////////////////// 
                    05069 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    05070 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    05071 .................... //// compiler.  This source code may only be distributed to other      //// 
                    05072 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    05073 .................... //// or distribution is permitted without written permission.          //// 
                    05074 .................... //// Derivative programs created using this software in object code    //// 
                    05075 .................... //// form are not restricted in any way.                               //// 
                    05076 .................... /////////////////////////////////////////////////////////////////////////// 
                    05077 ....................  
                    05078 .................... #ifndef _STDINT 
                    05079 ....................  
                    05080 .................... #define _STDINT 
                    05081 ....................  
                    05082 .................... //////////// exact width 
                    05083 ....................  
                    05084 .................... typedef signed int8 int8_t; 
                    05085 .................... typedef unsigned int8 uint8_t; 
                    05086 .................... typedef signed int16 int16_t; 
                    05087 .................... typedef unsigned int16 uint16_t; 
                    05088 .................... typedef signed int32 int32_t; 
                    05089 .................... typedef unsigned int32 uint32_t; 
                    05090 ....................  
                    05091 .................... #if defined(__PCD__) 
                    05092 .................... //typedef signed int24 int24_t; 
                    05093 .................... //typedef unsigned int24 uint24_t; 
                    05094 .................... typedef signed int64 int64_t; 
                    05095 .................... typedef unsigned int64 uint64_t; 
                    05096 .................... #endif 
                    05097 ....................  
                    05098 .................... #define INT8_MAX  (128) 
                    05099 .................... #define INT8_MIN  (-127) 
                    05100 .................... #define UINT8_MAX (255) 
                    05101 ....................  
                    05102 .................... #define INT16_MAX  (32767) 
                    05103 .................... #define INT16_MIN  (-32768) 
                    05104 .................... #define UINT16_MAX (65535) 
                    05105 ....................  
                    05106 .................... #define INT32_MAX  (2147483647) 
                    05107 .................... #define INT32_MIN  (-2147483648) 
                    05108 .................... #define UINT32_MAX (4294967295) 
                    05109 ....................  
                    05110 .................... #if defined(__PCD__) 
                    05111 .................... //#define INT24_MAX  (8388607) 
                    05112 .................... //#define INT24_MIN  (-8388608) 
                    05113 .................... //#define UINT24_MAX (16777215) 
                    05114 ....................  
                    05115 .................... #define INT64_MAX  (9223372036854775807) 
                    05116 .................... #define INT64_MIN  (-9223372036854775808) 
                    05117 .................... #define UINT64_MAX (18446744073709551615) 
                    05118 .................... #endif 
                    05119 ....................  
                    05120 .................... ///////// minimum width 
                    05121 ....................  
                    05122 .................... typedef signed int8 int_least8_t; 
                    05123 .................... typedef unsigned int8 uint_least8_t; 
                    05124 .................... typedef signed int16 int_least16_t; 
                    05125 .................... typedef unsigned int16 uint_least16_t; 
                    05126 .................... typedef signed int32 int_least32_t; 
                    05127 .................... typedef unsigned int32 uint_least32_t; 
                    05128 ....................  
                    05129 .................... #if defined(__PCD__) 
                    05130 .................... //typedef signed int24 int_least24_t; 
                    05131 .................... //typedef unsigned int24 uint_least24_t; 
                    05132 .................... typedef signed int64 int_least64_t; 
                    05133 .................... typedef unsigned int64 uint_least64_t; 
                    05134 .................... #endif 
                    05135 ....................  
                    05136 .................... #define INT_LEAST8_MAX  (128) 
                    05137 .................... #define INT_LEAST8_MIN  (-127) 
                    05138 .................... #define UINT_LEAST8_MAX (255) 
                    05139 ....................  
                    05140 .................... #define INT_LEAST16_MAX  (32767) 
                    05141 .................... #define INT_LEAST16_MIN  (-32768) 
                    05142 .................... #define UINT_LEAST16_MAX (65535) 
                    05143 ....................  
                    05144 .................... #define INT_LEAST32_MAX  (2147483647) 
                    05145 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    05146 .................... #define UINT_LEAST32_MAX (4294967295) 
                    05147 ....................  
                    05148 .................... #if defined(__PCD__) 
                    05149 .................... //#define INT_LEAST24_MAX  (8388607) 
                    05150 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    05151 .................... //#define UINT_LEAST24_MAX (16777215) 
                    05152 ....................  
                    05153 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    05154 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    05155 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    05156 .................... #endif 
                    05157 ....................  
                    05158 .................... ///////// fastest width 
                    05159 ....................  
                    05160 .................... #if defined(__PCD__) 
                    05161 .................... typedef signed int16 int_fast8_t; 
                    05162 .................... typedef unsigned int16 uint_fast8_t; 
                    05163 .................... #define INT_FAST8_MAX  (32767) 
                    05164 .................... #define INT_FAST8_MIN  (-32768) 
                    05165 .................... #define UINT_FAST8_MAX (65535) 
                    05166 .................... typedef signed int16 int_fast16_t; 
                    05167 .................... typedef unsigned int16 uint_fast16_t; 
                    05168 .................... //typedef signed int24 int_fast24_t; 
                    05169 .................... //typedef unsigned int24 uint_fast24_t; 
                    05170 .................... typedef signed int64 int_fast64_t; 
                    05171 .................... typedef unsigned int64 uint_fast64_t; 
                    05172 .................... #else 
                    05173 .................... typedef signed int8 int_fast8_t; 
                    05174 .................... typedef unsigned int8 uint_fast8_t; 
                    05175 .................... #define INT_FAST8_MAX  (128) 
                    05176 .................... #define INT_FAST8_MIN  (-127) 
                    05177 .................... #define UINT_FAST8_MAX (255) 
                    05178 .................... typedef signed int16 int_fast16_t; 
                    05179 .................... typedef unsigned int16 uint_fast16_t; 
                    05180 .................... #endif 
                    05181 ....................  
                    05182 .................... typedef signed int32 int_fast32_t; 
                    05183 .................... typedef unsigned int32 uint_fast32_t; 
                    05184 ....................  
                    05185 .................... #define INT_FAST16_MAX  (32767) 
                    05186 .................... #define INT_FAST16_MIN  (-32768) 
                    05187 .................... #define UINT_FAST16_MAX (65535) 
                    05188 ....................  
                    05189 .................... #define INT_FAST32_MAX  (2147483647) 
                    05190 .................... #define INT_FAST32_MIN  (-2147483648) 
                    05191 .................... #define UINT_FAST32_MAX (4294967295) 
                    05192 ....................  
                    05193 .................... #if defined(__PCD__) 
                    05194 .................... //#define INT_FAST24_MAX  (8388607) 
                    05195 .................... //#define INT_FAST24_MIN  (-8388608) 
                    05196 .................... //#define UINT_FAST24_MAX (16777215) 
                    05197 ....................  
                    05198 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    05199 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    05200 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    05201 .................... #endif 
                    05202 ....................  
                    05203 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    05204 ....................  
                    05205 .................... /// TODO 
                    05206 ....................  
                    05207 .................... /// intptr_t uintptr_t 
                    05208 ....................  
                    05209 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    05210 ....................  
                    05211 ....................  
                    05212 .................... /////////// greatest width (OPTIONAL) 
                    05213 ....................  
                    05214 .................... /// TODO 
                    05215 ....................  
                    05216 .................... /// intmax_t uintmax_t 
                    05217 ....................  
                    05218 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    05219 ....................  
                    05220 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    05221 ....................  
                    05222 ....................  
                    05223 .................... #endif 
                    05224 ....................  
                    05225 ....................  
                    05226 .................... #ifndef __CRC8__ 
                    05227 .................... #define __CRC8__ 
                    05228 ....................  
                    05229 .................... #include <stdint.h> 
                    05230 .................... /////////////////////////////////////////////////////////////////////////// 
                    05231 .................... ////                                                                   //// 
                    05232 .................... ////                           stdint.h                                //// 
                    05233 .................... ////                                                                   //// 
                    05234 .................... //// Standard integer definitions.                                     //// 
                    05235 .................... ////                                                                   //// 
                    05236 .................... /////////////////////////////////////////////////////////////////////////// 
                    05237 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    05238 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    05239 .................... //// compiler.  This source code may only be distributed to other      //// 
                    05240 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    05241 .................... //// or distribution is permitted without written permission.          //// 
                    05242 .................... //// Derivative programs created using this software in object code    //// 
                    05243 .................... //// form are not restricted in any way.                               //// 
                    05244 .................... /////////////////////////////////////////////////////////////////////////// 
                    05245 ....................  
                    05246 .................... #ifndef _STDINT 
                    05247 ....................  
                    05248 .................... #define _STDINT 
                    05249 ....................  
                    05250 .................... //////////// exact width 
                    05251 ....................  
                    05252 .................... typedef signed int8 int8_t; 
                    05253 .................... typedef unsigned int8 uint8_t; 
                    05254 .................... typedef signed int16 int16_t; 
                    05255 .................... typedef unsigned int16 uint16_t; 
                    05256 .................... typedef signed int32 int32_t; 
                    05257 .................... typedef unsigned int32 uint32_t; 
                    05258 ....................  
                    05259 .................... #if defined(__PCD__) 
                    05260 .................... //typedef signed int24 int24_t; 
                    05261 .................... //typedef unsigned int24 uint24_t; 
                    05262 .................... typedef signed int64 int64_t; 
                    05263 .................... typedef unsigned int64 uint64_t; 
                    05264 .................... #endif 
                    05265 ....................  
                    05266 .................... #define INT8_MAX  (128) 
                    05267 .................... #define INT8_MIN  (-127) 
                    05268 .................... #define UINT8_MAX (255) 
                    05269 ....................  
                    05270 .................... #define INT16_MAX  (32767) 
                    05271 .................... #define INT16_MIN  (-32768) 
                    05272 .................... #define UINT16_MAX (65535) 
                    05273 ....................  
                    05274 .................... #define INT32_MAX  (2147483647) 
                    05275 .................... #define INT32_MIN  (-2147483648) 
                    05276 .................... #define UINT32_MAX (4294967295) 
                    05277 ....................  
                    05278 .................... #if defined(__PCD__) 
                    05279 .................... //#define INT24_MAX  (8388607) 
                    05280 .................... //#define INT24_MIN  (-8388608) 
                    05281 .................... //#define UINT24_MAX (16777215) 
                    05282 ....................  
                    05283 .................... #define INT64_MAX  (9223372036854775807) 
                    05284 .................... #define INT64_MIN  (-9223372036854775808) 
                    05285 .................... #define UINT64_MAX (18446744073709551615) 
                    05286 .................... #endif 
                    05287 ....................  
                    05288 .................... ///////// minimum width 
                    05289 ....................  
                    05290 .................... typedef signed int8 int_least8_t; 
                    05291 .................... typedef unsigned int8 uint_least8_t; 
                    05292 .................... typedef signed int16 int_least16_t; 
                    05293 .................... typedef unsigned int16 uint_least16_t; 
                    05294 .................... typedef signed int32 int_least32_t; 
                    05295 .................... typedef unsigned int32 uint_least32_t; 
                    05296 ....................  
                    05297 .................... #if defined(__PCD__) 
                    05298 .................... //typedef signed int24 int_least24_t; 
                    05299 .................... //typedef unsigned int24 uint_least24_t; 
                    05300 .................... typedef signed int64 int_least64_t; 
                    05301 .................... typedef unsigned int64 uint_least64_t; 
                    05302 .................... #endif 
                    05303 ....................  
                    05304 .................... #define INT_LEAST8_MAX  (128) 
                    05305 .................... #define INT_LEAST8_MIN  (-127) 
                    05306 .................... #define UINT_LEAST8_MAX (255) 
                    05307 ....................  
                    05308 .................... #define INT_LEAST16_MAX  (32767) 
                    05309 .................... #define INT_LEAST16_MIN  (-32768) 
                    05310 .................... #define UINT_LEAST16_MAX (65535) 
                    05311 ....................  
                    05312 .................... #define INT_LEAST32_MAX  (2147483647) 
                    05313 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    05314 .................... #define UINT_LEAST32_MAX (4294967295) 
                    05315 ....................  
                    05316 .................... #if defined(__PCD__) 
                    05317 .................... //#define INT_LEAST24_MAX  (8388607) 
                    05318 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    05319 .................... //#define UINT_LEAST24_MAX (16777215) 
                    05320 ....................  
                    05321 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    05322 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    05323 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    05324 .................... #endif 
                    05325 ....................  
                    05326 .................... ///////// fastest width 
                    05327 ....................  
                    05328 .................... #if defined(__PCD__) 
                    05329 .................... typedef signed int16 int_fast8_t; 
                    05330 .................... typedef unsigned int16 uint_fast8_t; 
                    05331 .................... #define INT_FAST8_MAX  (32767) 
                    05332 .................... #define INT_FAST8_MIN  (-32768) 
                    05333 .................... #define UINT_FAST8_MAX (65535) 
                    05334 .................... typedef signed int16 int_fast16_t; 
                    05335 .................... typedef unsigned int16 uint_fast16_t; 
                    05336 .................... //typedef signed int24 int_fast24_t; 
                    05337 .................... //typedef unsigned int24 uint_fast24_t; 
                    05338 .................... typedef signed int64 int_fast64_t; 
                    05339 .................... typedef unsigned int64 uint_fast64_t; 
                    05340 .................... #else 
                    05341 .................... typedef signed int8 int_fast8_t; 
                    05342 .................... typedef unsigned int8 uint_fast8_t; 
                    05343 .................... #define INT_FAST8_MAX  (128) 
                    05344 .................... #define INT_FAST8_MIN  (-127) 
                    05345 .................... #define UINT_FAST8_MAX (255) 
                    05346 .................... typedef signed int16 int_fast16_t; 
                    05347 .................... typedef unsigned int16 uint_fast16_t; 
                    05348 .................... #endif 
                    05349 ....................  
                    05350 .................... typedef signed int32 int_fast32_t; 
                    05351 .................... typedef unsigned int32 uint_fast32_t; 
                    05352 ....................  
                    05353 .................... #define INT_FAST16_MAX  (32767) 
                    05354 .................... #define INT_FAST16_MIN  (-32768) 
                    05355 .................... #define UINT_FAST16_MAX (65535) 
                    05356 ....................  
                    05357 .................... #define INT_FAST32_MAX  (2147483647) 
                    05358 .................... #define INT_FAST32_MIN  (-2147483648) 
                    05359 .................... #define UINT_FAST32_MAX (4294967295) 
                    05360 ....................  
                    05361 .................... #if defined(__PCD__) 
                    05362 .................... //#define INT_FAST24_MAX  (8388607) 
                    05363 .................... //#define INT_FAST24_MIN  (-8388608) 
                    05364 .................... //#define UINT_FAST24_MAX (16777215) 
                    05365 ....................  
                    05366 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    05367 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    05368 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    05369 .................... #endif 
                    05370 ....................  
                    05371 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    05372 ....................  
                    05373 .................... /// TODO 
                    05374 ....................  
                    05375 .................... /// intptr_t uintptr_t 
                    05376 ....................  
                    05377 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    05378 ....................  
                    05379 ....................  
                    05380 .................... /////////// greatest width (OPTIONAL) 
                    05381 ....................  
                    05382 .................... /// TODO 
                    05383 ....................  
                    05384 .................... /// intmax_t uintmax_t 
                    05385 ....................  
                    05386 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    05387 ....................  
                    05388 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    05389 ....................  
                    05390 ....................  
                    05391 .................... #endif 
                    05392 ....................  
                    05393 ....................  
                    05394 .................... uint8_t crc8(uint8_t* buffer, uint16_t size); 
                    05395 ....................  
                    05396 .................... #endif 
                    05397 ....................  
                    05398 ....................  
                    05399 ....................  
                    05400 ....................  
                    05401 ....................  
                    05402 ....................  
                    05403 ....................  
                    05404 ....................  
                    05405 ....................  
                    05406 ....................  
                    05407 ....................  
                    05408 ....................  
                    05409 ....................  
                    05410 ....................  
                    05411 ....................  
                    05412 ....................  
                    05413 ....................  
                    05414 ....................  
                    05415 ....................  
                    05416 ....................  
                    05417 ....................  
                    05418 ....................  
                    05419 ....................  
                    05420 ....................  
                    05421 ....................  
                    05422 ....................  
                    05423 ....................  
                    05424 ....................  
                    05425 ....................  
                    05426 ....................  
                    05427 ....................  
                    05428 ....................  
                    05429 ....................  
                    05430 ....................  
                    05431 ....................  
                    05432 ....................  
                    05433 ....................  
                    05434 ....................  
                    05435 ....................  
52B6 0104           05436 MOVLB  4
52B8 6B38           05437 CLRF   x38
                    05438 ....................  
                    05439 ....................  
                    05440 ....................  
52BA C437 F003      05441 MOVFF  437,03
52BE 5136           05442 MOVF   x36,W
52C0 B4D8           05443 BTFSC  FD8.2
52C2 0737           05444 DECF   x37,F
52C4 0736           05445 DECF   x36,F
52C6 6F3A           05446 MOVWF  x3A
52C8 C003 F43B      05447 MOVFF  03,43B
52CC 533A           05448 MOVF   x3A,F
52CE E102           05449 BNZ   52D4
52D0 533B           05450 MOVF   x3B,F
52D2 E015           05451 BZ    52FE
                    05452 ....................  
52D4 C435 F003      05453 MOVFF  435,03
52D8 5134           05454 MOVF   x34,W
52DA 2B34           05455 INCF   x34,F
52DC B4D8           05456 BTFSC  FD8.2
52DE 2B35           05457 INCF   x35,F
52E0 6EE9           05458 MOVWF  FE9
52E2 C003 FFEA      05459 MOVFF  03,FEA
52E6 50EF           05460 MOVF   FEF,W
52E8 1938           05461 XORWF  x38,W
52EA 6F39           05462 MOVWF  x39
                    05463 ....................  
52EC 6A03           05464 CLRF   03
52EE 5139           05465 MOVF   x39,W
52F0 0100           05466 MOVLB  0
52F2 EC63 F010      05467 CALL   20C6
52F6 CFE8 F438      05468 MOVFF  FE8,438
                    05469 ....................  
52FA 0104           05470 MOVLB  4
52FC D7DE           05471 BRA    52BA
                    05472 ....................  
52FE C438 F001      05473 MOVFF  438,01
                    05474 ....................  
5302 0100           05475 MOVLB  0
5304 0012           05476 RETURN 0
                    05477 ....................  
                    05478 ....................  
                    05479 ....................  
                    05480 ....................  
                    05481 ....................  
                    05482 ....................  
                    05483 ....................  
                    05484 ....................  
                    05485 ....................  
                    05486 .................... #include <18F45K22.h> 
                    05487 .................... //////// Standard Header file for the PIC18F45K22 device //////////////// 
                    05488 .................... #device PIC18F45K22 
                    06195 .................... #list 
                    06196 ....................  
                    06197 .................... #device adc=10 
                    06198 .................... #device pass_strings=in_ram 
                    06199 ....................  
                    06200 .................... #define LOADER_END 0x1FFF 
                    06201 .................... #include <boot.h> 
                    06202 .................... #undef LOADER_END 
                    06203 .................... #define FLASH_SIZE getenv("FLASH_ERASE_SIZE") 
                    06204 .................... #define LOADER_END   0x1FFF 
                    06205 .................... #define LOADER_SIZE  0x3FF 
                    06206 ....................  
                    06207 .................... #ifndef _bootloader 
                    06208 .................... #build(reset=LOADER_END+1, interrupt=LOADER_END+9) 
                    06209 ....................  
                    06210 .................... /* when in operational software, keep out of the bootloader sections */ 
                    06211 .................... #org 0, 0xfff {} 
                    06212 .................... #org 0x1000, 0x1ffe {} 
                    06213 ....................  
                    06214 .................... #else 
                    06215 ....................  
                    06216 .................... /* when in the bootloader, keep out of the operational sections */ 
                    06217 .................... #org 0x2000, 0x7ffe {} 
                    06218 ....................  
                    06219 .................... #endif 
                    06220 ....................  
                    06221 ....................  
                    06222 .................... #FUSES NOWDT                   //No Watch Dog Timer 
                    06223 .................... #FUSES WDT128                  //Watch Dog Timer uses 1:128 Postscale 
                    06224 .................... #FUSES INTRC_IO                //Internal RC Osc, no CLKOUT 
                    06225 .................... #FUSES NOBROWNOUT              //No brownout reset 
                    06226 .................... #FUSES WDT_SW                  //No Watch Dog Timer, enabled in Software 
                    06227 .................... #FUSES NOLVP                   //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
                    06228 .................... #FUSES NOPUT 
                    06229 .................... #FUSES NOXINST                 //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
                    06230 ....................  
                    06231 .................... #use delay(clock=64000000) 
                    06232 .................... #use rs232(baud=921600,xmit=PIN_C6,rcv=PIN_C7,ERRORS) 
                    06233 .................... #USE TIMER(TIMER=1,TICK=1us,BITS=32,NOISR) 
                    06234 .................... #use spi(DO=PIN_A4, CLK=PIN_A3, ENABLE=PIN_A2, ENABLE_ACTIVE=0, DATA_HOLD=20, BITS=16) 
                    06235 ....................  
                    06236 .................... #opt 9 
                    06237 ....................  
                    06238 .................... #use fast_io(a) 
                    06239 .................... #use fast_io(b) 
                    06240 .................... #use fast_io(c) 
                    06241 .................... #use fast_io(d) 
                    06242 .................... #use fast_io(e) 
                    06243 ....................  
                    06244 .................... #define safe_write_program_memory(address, pointer, size) \ 
                    06245 ....................   do { disable_interrupts(GLOBAL); write_program_memory(address, pointer, size); enable_interrupts(GLOBAL); delay_us(1000); } while (0) 
                    06246 ....................  
                    06247 ....................  
                    06248 ....................  
                    06249 ....................  
                    06250 .................... /////////////////////////////////////////////////////////////////////////// 
                    06251 .................... ////                                                                   //// 
                    06252 .................... ////                           stdint.h                                //// 
                    06253 .................... ////                                                                   //// 
                    06254 .................... //// Standard integer definitions.                                     //// 
                    06255 .................... ////                                                                   //// 
                    06256 .................... /////////////////////////////////////////////////////////////////////////// 
                    06257 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    06258 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    06259 .................... //// compiler.  This source code may only be distributed to other      //// 
                    06260 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    06261 .................... //// or distribution is permitted without written permission.          //// 
                    06262 .................... //// Derivative programs created using this software in object code    //// 
                    06263 .................... //// form are not restricted in any way.                               //// 
                    06264 .................... /////////////////////////////////////////////////////////////////////////// 
                    06265 ....................  
                    06266 .................... #ifndef _STDINT 
                    06267 ....................  
                    06268 .................... #define _STDINT 
                    06269 ....................  
                    06270 .................... //////////// exact width 
                    06271 ....................  
                    06272 .................... typedef signed int8 int8_t; 
                    06273 .................... typedef unsigned int8 uint8_t; 
                    06274 .................... typedef signed int16 int16_t; 
                    06275 .................... typedef unsigned int16 uint16_t; 
                    06276 .................... typedef signed int32 int32_t; 
                    06277 .................... typedef unsigned int32 uint32_t; 
                    06278 ....................  
                    06279 .................... #if defined(__PCD__) 
                    06280 .................... //typedef signed int24 int24_t; 
                    06281 .................... //typedef unsigned int24 uint24_t; 
                    06282 .................... typedef signed int64 int64_t; 
                    06283 .................... typedef unsigned int64 uint64_t; 
                    06284 .................... #endif 
                    06285 ....................  
                    06286 .................... #define INT8_MAX  (128) 
                    06287 .................... #define INT8_MIN  (-127) 
                    06288 .................... #define UINT8_MAX (255) 
                    06289 ....................  
                    06290 .................... #define INT16_MAX  (32767) 
                    06291 .................... #define INT16_MIN  (-32768) 
                    06292 .................... #define UINT16_MAX (65535) 
                    06293 ....................  
                    06294 .................... #define INT32_MAX  (2147483647) 
                    06295 .................... #define INT32_MIN  (-2147483648) 
                    06296 .................... #define UINT32_MAX (4294967295) 
                    06297 ....................  
                    06298 .................... #if defined(__PCD__) 
                    06299 .................... //#define INT24_MAX  (8388607) 
                    06300 .................... //#define INT24_MIN  (-8388608) 
                    06301 .................... //#define UINT24_MAX (16777215) 
                    06302 ....................  
                    06303 .................... #define INT64_MAX  (9223372036854775807) 
                    06304 .................... #define INT64_MIN  (-9223372036854775808) 
                    06305 .................... #define UINT64_MAX (18446744073709551615) 
                    06306 .................... #endif 
                    06307 ....................  
                    06308 .................... ///////// minimum width 
                    06309 ....................  
                    06310 .................... typedef signed int8 int_least8_t; 
                    06311 .................... typedef unsigned int8 uint_least8_t; 
                    06312 .................... typedef signed int16 int_least16_t; 
                    06313 .................... typedef unsigned int16 uint_least16_t; 
                    06314 .................... typedef signed int32 int_least32_t; 
                    06315 .................... typedef unsigned int32 uint_least32_t; 
                    06316 ....................  
                    06317 .................... #if defined(__PCD__) 
                    06318 .................... //typedef signed int24 int_least24_t; 
                    06319 .................... //typedef unsigned int24 uint_least24_t; 
                    06320 .................... typedef signed int64 int_least64_t; 
                    06321 .................... typedef unsigned int64 uint_least64_t; 
                    06322 .................... #endif 
                    06323 ....................  
                    06324 .................... #define INT_LEAST8_MAX  (128) 
                    06325 .................... #define INT_LEAST8_MIN  (-127) 
                    06326 .................... #define UINT_LEAST8_MAX (255) 
                    06327 ....................  
                    06328 .................... #define INT_LEAST16_MAX  (32767) 
                    06329 .................... #define INT_LEAST16_MIN  (-32768) 
                    06330 .................... #define UINT_LEAST16_MAX (65535) 
                    06331 ....................  
                    06332 .................... #define INT_LEAST32_MAX  (2147483647) 
                    06333 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    06334 .................... #define UINT_LEAST32_MAX (4294967295) 
                    06335 ....................  
                    06336 .................... #if defined(__PCD__) 
                    06337 .................... //#define INT_LEAST24_MAX  (8388607) 
                    06338 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    06339 .................... //#define UINT_LEAST24_MAX (16777215) 
                    06340 ....................  
                    06341 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    06342 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    06343 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    06344 .................... #endif 
                    06345 ....................  
                    06346 .................... ///////// fastest width 
                    06347 ....................  
                    06348 .................... #if defined(__PCD__) 
                    06349 .................... typedef signed int16 int_fast8_t; 
                    06350 .................... typedef unsigned int16 uint_fast8_t; 
                    06351 .................... #define INT_FAST8_MAX  (32767) 
                    06352 .................... #define INT_FAST8_MIN  (-32768) 
                    06353 .................... #define UINT_FAST8_MAX (65535) 
                    06354 .................... typedef signed int16 int_fast16_t; 
                    06355 .................... typedef unsigned int16 uint_fast16_t; 
                    06356 .................... //typedef signed int24 int_fast24_t; 
                    06357 .................... //typedef unsigned int24 uint_fast24_t; 
                    06358 .................... typedef signed int64 int_fast64_t; 
                    06359 .................... typedef unsigned int64 uint_fast64_t; 
                    06360 .................... #else 
                    06361 .................... typedef signed int8 int_fast8_t; 
                    06362 .................... typedef unsigned int8 uint_fast8_t; 
                    06363 .................... #define INT_FAST8_MAX  (128) 
                    06364 .................... #define INT_FAST8_MIN  (-127) 
                    06365 .................... #define UINT_FAST8_MAX (255) 
                    06366 .................... typedef signed int16 int_fast16_t; 
                    06367 .................... typedef unsigned int16 uint_fast16_t; 
                    06368 .................... #endif 
                    06369 ....................  
                    06370 .................... typedef signed int32 int_fast32_t; 
                    06371 .................... typedef unsigned int32 uint_fast32_t; 
                    06372 ....................  
                    06373 .................... #define INT_FAST16_MAX  (32767) 
                    06374 .................... #define INT_FAST16_MIN  (-32768) 
                    06375 .................... #define UINT_FAST16_MAX (65535) 
                    06376 ....................  
                    06377 .................... #define INT_FAST32_MAX  (2147483647) 
                    06378 .................... #define INT_FAST32_MIN  (-2147483648) 
                    06379 .................... #define UINT_FAST32_MAX (4294967295) 
                    06380 ....................  
                    06381 .................... #if defined(__PCD__) 
                    06382 .................... //#define INT_FAST24_MAX  (8388607) 
                    06383 .................... //#define INT_FAST24_MIN  (-8388608) 
                    06384 .................... //#define UINT_FAST24_MAX (16777215) 
                    06385 ....................  
                    06386 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    06387 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    06388 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    06389 .................... #endif 
                    06390 ....................  
                    06391 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    06392 ....................  
                    06393 .................... /// TODO 
                    06394 ....................  
                    06395 .................... /// intptr_t uintptr_t 
                    06396 ....................  
                    06397 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    06398 ....................  
                    06399 ....................  
                    06400 .................... /////////// greatest width (OPTIONAL) 
                    06401 ....................  
                    06402 .................... /// TODO 
                    06403 ....................  
                    06404 .................... /// intmax_t uintmax_t 
                    06405 ....................  
                    06406 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    06407 ....................  
                    06408 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    06409 ....................  
                    06410 ....................  
                    06411 .................... #endif 
                    06412 ....................  
                    06413 ....................  
                    06414 ....................  
                    06415 .................... /* 
                    06416 ....................  * gpio.h 
                    06417 ....................  * 
                    06418 ....................  *  Created on: Mar 8, 2017 
                    06419 ....................  *      Author: asafe 
                    06420 ....................  */ 
                    06421 ....................  
                    06422 .................... #ifndef INCLUDE_GPIO_H_ 
                    06423 .................... #define INCLUDE_GPIO_H_ 
                    06424 ....................  
                    06425 .................... #include <stdint.h> 
                    06426 .................... /////////////////////////////////////////////////////////////////////////// 
                    06427 .................... ////                                                                   //// 
                    06428 .................... ////                           stdint.h                                //// 
                    06429 .................... ////                                                                   //// 
                    06430 .................... //// Standard integer definitions.                                     //// 
                    06431 .................... ////                                                                   //// 
                    06432 .................... /////////////////////////////////////////////////////////////////////////// 
                    06433 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    06434 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    06435 .................... //// compiler.  This source code may only be distributed to other      //// 
                    06436 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    06437 .................... //// or distribution is permitted without written permission.          //// 
                    06438 .................... //// Derivative programs created using this software in object code    //// 
                    06439 .................... //// form are not restricted in any way.                               //// 
                    06440 .................... /////////////////////////////////////////////////////////////////////////// 
                    06441 ....................  
                    06442 .................... #ifndef _STDINT 
                    06443 ....................  
                    06444 .................... #define _STDINT 
                    06445 ....................  
                    06446 .................... //////////// exact width 
                    06447 ....................  
                    06448 .................... typedef signed int8 int8_t; 
                    06449 .................... typedef unsigned int8 uint8_t; 
                    06450 .................... typedef signed int16 int16_t; 
                    06451 .................... typedef unsigned int16 uint16_t; 
                    06452 .................... typedef signed int32 int32_t; 
                    06453 .................... typedef unsigned int32 uint32_t; 
                    06454 ....................  
                    06455 .................... #if defined(__PCD__) 
                    06456 .................... //typedef signed int24 int24_t; 
                    06457 .................... //typedef unsigned int24 uint24_t; 
                    06458 .................... typedef signed int64 int64_t; 
                    06459 .................... typedef unsigned int64 uint64_t; 
                    06460 .................... #endif 
                    06461 ....................  
                    06462 .................... #define INT8_MAX  (128) 
                    06463 .................... #define INT8_MIN  (-127) 
                    06464 .................... #define UINT8_MAX (255) 
                    06465 ....................  
                    06466 .................... #define INT16_MAX  (32767) 
                    06467 .................... #define INT16_MIN  (-32768) 
                    06468 .................... #define UINT16_MAX (65535) 
                    06469 ....................  
                    06470 .................... #define INT32_MAX  (2147483647) 
                    06471 .................... #define INT32_MIN  (-2147483648) 
                    06472 .................... #define UINT32_MAX (4294967295) 
                    06473 ....................  
                    06474 .................... #if defined(__PCD__) 
                    06475 .................... //#define INT24_MAX  (8388607) 
                    06476 .................... //#define INT24_MIN  (-8388608) 
                    06477 .................... //#define UINT24_MAX (16777215) 
                    06478 ....................  
                    06479 .................... #define INT64_MAX  (9223372036854775807) 
                    06480 .................... #define INT64_MIN  (-9223372036854775808) 
                    06481 .................... #define UINT64_MAX (18446744073709551615) 
                    06482 .................... #endif 
                    06483 ....................  
                    06484 .................... ///////// minimum width 
                    06485 ....................  
                    06486 .................... typedef signed int8 int_least8_t; 
                    06487 .................... typedef unsigned int8 uint_least8_t; 
                    06488 .................... typedef signed int16 int_least16_t; 
                    06489 .................... typedef unsigned int16 uint_least16_t; 
                    06490 .................... typedef signed int32 int_least32_t; 
                    06491 .................... typedef unsigned int32 uint_least32_t; 
                    06492 ....................  
                    06493 .................... #if defined(__PCD__) 
                    06494 .................... //typedef signed int24 int_least24_t; 
                    06495 .................... //typedef unsigned int24 uint_least24_t; 
                    06496 .................... typedef signed int64 int_least64_t; 
                    06497 .................... typedef unsigned int64 uint_least64_t; 
                    06498 .................... #endif 
                    06499 ....................  
                    06500 .................... #define INT_LEAST8_MAX  (128) 
                    06501 .................... #define INT_LEAST8_MIN  (-127) 
                    06502 .................... #define UINT_LEAST8_MAX (255) 
                    06503 ....................  
                    06504 .................... #define INT_LEAST16_MAX  (32767) 
                    06505 .................... #define INT_LEAST16_MIN  (-32768) 
                    06506 .................... #define UINT_LEAST16_MAX (65535) 
                    06507 ....................  
                    06508 .................... #define INT_LEAST32_MAX  (2147483647) 
                    06509 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    06510 .................... #define UINT_LEAST32_MAX (4294967295) 
                    06511 ....................  
                    06512 .................... #if defined(__PCD__) 
                    06513 .................... //#define INT_LEAST24_MAX  (8388607) 
                    06514 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    06515 .................... //#define UINT_LEAST24_MAX (16777215) 
                    06516 ....................  
                    06517 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    06518 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    06519 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    06520 .................... #endif 
                    06521 ....................  
                    06522 .................... ///////// fastest width 
                    06523 ....................  
                    06524 .................... #if defined(__PCD__) 
                    06525 .................... typedef signed int16 int_fast8_t; 
                    06526 .................... typedef unsigned int16 uint_fast8_t; 
                    06527 .................... #define INT_FAST8_MAX  (32767) 
                    06528 .................... #define INT_FAST8_MIN  (-32768) 
                    06529 .................... #define UINT_FAST8_MAX (65535) 
                    06530 .................... typedef signed int16 int_fast16_t; 
                    06531 .................... typedef unsigned int16 uint_fast16_t; 
                    06532 .................... //typedef signed int24 int_fast24_t; 
                    06533 .................... //typedef unsigned int24 uint_fast24_t; 
                    06534 .................... typedef signed int64 int_fast64_t; 
                    06535 .................... typedef unsigned int64 uint_fast64_t; 
                    06536 .................... #else 
                    06537 .................... typedef signed int8 int_fast8_t; 
                    06538 .................... typedef unsigned int8 uint_fast8_t; 
                    06539 .................... #define INT_FAST8_MAX  (128) 
                    06540 .................... #define INT_FAST8_MIN  (-127) 
                    06541 .................... #define UINT_FAST8_MAX (255) 
                    06542 .................... typedef signed int16 int_fast16_t; 
                    06543 .................... typedef unsigned int16 uint_fast16_t; 
                    06544 .................... #endif 
                    06545 ....................  
                    06546 .................... typedef signed int32 int_fast32_t; 
                    06547 .................... typedef unsigned int32 uint_fast32_t; 
                    06548 ....................  
                    06549 .................... #define INT_FAST16_MAX  (32767) 
                    06550 .................... #define INT_FAST16_MIN  (-32768) 
                    06551 .................... #define UINT_FAST16_MAX (65535) 
                    06552 ....................  
                    06553 .................... #define INT_FAST32_MAX  (2147483647) 
                    06554 .................... #define INT_FAST32_MIN  (-2147483648) 
                    06555 .................... #define UINT_FAST32_MAX (4294967295) 
                    06556 ....................  
                    06557 .................... #if defined(__PCD__) 
                    06558 .................... //#define INT_FAST24_MAX  (8388607) 
                    06559 .................... //#define INT_FAST24_MIN  (-8388608) 
                    06560 .................... //#define UINT_FAST24_MAX (16777215) 
                    06561 ....................  
                    06562 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    06563 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    06564 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    06565 .................... #endif 
                    06566 ....................  
                    06567 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    06568 ....................  
                    06569 .................... /// TODO 
                    06570 ....................  
                    06571 .................... /// intptr_t uintptr_t 
                    06572 ....................  
                    06573 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    06574 ....................  
                    06575 ....................  
                    06576 .................... /////////// greatest width (OPTIONAL) 
                    06577 ....................  
                    06578 .................... /// TODO 
                    06579 ....................  
                    06580 .................... /// intmax_t uintmax_t 
                    06581 ....................  
                    06582 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    06583 ....................  
                    06584 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    06585 ....................  
                    06586 ....................  
                    06587 .................... #endif 
                    06588 ....................  
                    06589 .................... #include "gpio.h" 
                    06590 .................... /* 
                    06591 ....................  * gpio.h 
                    06592 ....................  * 
                    06593 ....................  *  Created on: Mar 8, 2017 
                    06594 ....................  *      Author: asafe 
                    06595 ....................  */ 
                    06596 ....................  
                    06597 .................... #ifndef INCLUDE_GPIO_H_ 
                    06598 .................... #define INCLUDE_GPIO_H_ 
                    06599 ....................  
                    06600 .................... #include <stdint.h> 
                    06601 .................... #include "gpio.h" 
                    06602 ....................  
                    06603 .................... enum { 
                    06604 ....................     GPIO_DIR_IN     = 0, 
                    06605 ....................     GPIO_DIR_OUT    = 1, 
                    06606 ....................     GPIO_ANALOG     = 2, 
                    06607 ....................  
                    06608 ....................     GPIO_VALUE_LOW = 0, 
                    06609 ....................     GPIO_VALUE_HIGH = 1, 
                    06610 .................... }; 
                    06611 ....................  
                    06612 .................... typedef struct gpio_st { 
                    06613 ....................     uint32_t pin; 
                    06614 ....................     int dir; 
                    06615 ....................     char *gpio_name; 
                    06616 .................... } st_gpio; 
                    06617 ....................  
                    06618 .................... /* this is the deceleration that a developer will use to access a specific GPIO */ 
                    06619 .................... /* this list should be identical in order to the <Bold> st_gpio gpios [] </Bold> list in gpio.c */ 
                    06620 ....................  
                    06621 .................... enum { 
                    06622 ....................     GPIO_DAC_CLK        = 0, 
                    06623 ....................     GPIO_DAC_CS         = 1, 
                    06624 ....................     GPIO_DAC_DATA_OUT   = 2, 
                    06625 ....................     GPIO_DAC_LDAC       = 3, 
                    06626 ....................  
                    06627 ....................     GPIO_LED            = 4, 
                    06628 ....................  
                    06629 ....................     GPIO_PA1_ISENSE     = 5, 
                    06630 ....................     GPIO_PA2_ISENSE     = 6, 
                    06631 ....................     GPIO_FFWR           = 7, 
                    06632 ....................     GPIO_RREV           = 8, 
                    06633 ....................     GPIO_RF_INDET       = 9, 
                    06634 ....................     GPIO_TMP            = 10, 
                    06635 ....................     GPIO_PREAMP_DET     = 11, 
                    06636 ....................  
                    06637 ....................     GPIO_ANT_SEL        = 12, 
                    06638 ....................     GPIO_ANT_SELN       = 13, 
                    06639 ....................     GPIO_TX_RX_SEL      = 14, 
                    06640 ....................     GPIO_TX_RX_ENV      = 15, 
                    06641 ....................     GPIO_TX_RX_ENVM     = 16, 
                    06642 ....................  
                    06643 ....................     GPIO_5V_EN          = 17, 
                    06644 ....................  
                    06645 .................... }; 
                    06646 ....................  
                    06647 .................... /* Inputs */ 
                    06648 .................... enum { 
                    06649 ....................  
                    06650 .................... }; 
                    06651 ....................  
                    06652 ....................  
                    06653 .................... void gpio_init(); 
                    06654 .................... int gpio_toggle(int gpio); 
                    06655 .................... #INLINE 
                    06656 .................... void gpio_set(int gpio); 
                    06657 .................... void gpio_clear(int gpio); 
                    06658 .................... #INLINE 
                    06659 .................... void gpio_set_value(int gpio, int value); 
                    06660 .................... int gpio_get(int gpio); 
                    06661 .................... #INLINE 
                    06662 .................... uint32_t gpio_get_analog(int gpio); 
                    06663 ....................  
                    06664 .................... #endif /* INCLUDE_GPIO_H_ */ 
                    06665 ....................  
                    06666 ....................  
                    06667 .................... enum { 
                    06668 ....................     GPIO_DIR_IN     = 0, 
                    06669 ....................     GPIO_DIR_OUT    = 1, 
                    06670 ....................     GPIO_ANALOG     = 2, 
                    06671 ....................  
                    06672 ....................     GPIO_VALUE_LOW = 0, 
                    06673 ....................     GPIO_VALUE_HIGH = 1, 
                    06674 .................... }; 
                    06675 ....................  
                    06676 .................... typedef struct gpio_st { 
                    06677 ....................     uint32_t pin; 
                    06678 ....................     int dir; 
                    06679 ....................     char *gpio_name; 
                    06680 .................... } st_gpio; 
                    06681 ....................  
                    06682 .................... /* this is the deceleration that a developer will use to access a specific GPIO */ 
                    06683 .................... /* this list should be identical in order to the <Bold> st_gpio gpios [] </Bold> list in gpio.c */ 
                    06684 ....................  
                    06685 .................... enum { 
                    06686 ....................     GPIO_DAC_CLK        = 0, 
                    06687 ....................     GPIO_DAC_CS         = 1, 
                    06688 ....................     GPIO_DAC_DATA_OUT   = 2, 
                    06689 ....................     GPIO_DAC_LDAC       = 3, 
                    06690 ....................  
                    06691 ....................     GPIO_LED            = 4, 
                    06692 ....................  
                    06693 ....................     GPIO_PA1_ISENSE     = 5, 
                    06694 ....................     GPIO_PA2_ISENSE     = 6, 
                    06695 ....................     GPIO_FFWR           = 7, 
                    06696 ....................     GPIO_RREV           = 8, 
                    06697 ....................     GPIO_RF_INDET       = 9, 
                    06698 ....................     GPIO_TMP            = 10, 
                    06699 ....................     GPIO_PREAMP_DET     = 11, 
                    06700 ....................  
                    06701 ....................     GPIO_ANT_SEL        = 12, 
                    06702 ....................     GPIO_ANT_SELN       = 13, 
                    06703 ....................     GPIO_TX_RX_SEL      = 14, 
                    06704 ....................     GPIO_TX_RX_ENV      = 15, 
                    06705 ....................     GPIO_TX_RX_ENVM     = 16, 
                    06706 ....................  
                    06707 ....................     GPIO_5V_EN          = 17, 
                    06708 ....................  
                    06709 .................... }; 
                    06710 ....................  
                    06711 .................... /* Inputs */ 
                    06712 .................... enum { 
                    06713 ....................  
                    06714 .................... }; 
                    06715 ....................  
                    06716 ....................  
                    06717 .................... void gpio_init(); 
                    06718 .................... int gpio_toggle(int gpio); 
                    06719 .................... #INLINE 
                    06720 .................... void gpio_set(int gpio); 
                    06721 .................... void gpio_clear(int gpio); 
                    06722 .................... #INLINE 
                    06723 .................... void gpio_set_value(int gpio, int value); 
                    06724 .................... int gpio_get(int gpio); 
                    06725 .................... #INLINE 
                    06726 .................... uint32_t gpio_get_analog(int gpio); 
                    06727 ....................  
                    06728 .................... #endif /* INCLUDE_GPIO_H_ */ 
                    06729 ....................  
                    06730 ....................  
                    06731 .................... /* 
                    06732 ....................  * comm.h 
                    06733 ....................  * 
                    06734 ....................  *  Created on: Mar 23, 2017 
                    06735 ....................  *      Author: asaf 
                    06736 ....................  */ 
                    06737 ....................  
                    06738 .................... #ifndef COMM_H_ 
                    06739 .................... #define COMM_H_ 
                    06740 ....................  
                    06741 .................... #include <stdint.h> 
                    06742 .................... /////////////////////////////////////////////////////////////////////////// 
                    06743 .................... ////                                                                   //// 
                    06744 .................... ////                           stdint.h                                //// 
                    06745 .................... ////                                                                   //// 
                    06746 .................... //// Standard integer definitions.                                     //// 
                    06747 .................... ////                                                                   //// 
                    06748 .................... /////////////////////////////////////////////////////////////////////////// 
                    06749 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    06750 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    06751 .................... //// compiler.  This source code may only be distributed to other      //// 
                    06752 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    06753 .................... //// or distribution is permitted without written permission.          //// 
                    06754 .................... //// Derivative programs created using this software in object code    //// 
                    06755 .................... //// form are not restricted in any way.                               //// 
                    06756 .................... /////////////////////////////////////////////////////////////////////////// 
                    06757 ....................  
                    06758 .................... #ifndef _STDINT 
                    06759 ....................  
                    06760 .................... #define _STDINT 
                    06761 ....................  
                    06762 .................... //////////// exact width 
                    06763 ....................  
                    06764 .................... typedef signed int8 int8_t; 
                    06765 .................... typedef unsigned int8 uint8_t; 
                    06766 .................... typedef signed int16 int16_t; 
                    06767 .................... typedef unsigned int16 uint16_t; 
                    06768 .................... typedef signed int32 int32_t; 
                    06769 .................... typedef unsigned int32 uint32_t; 
                    06770 ....................  
                    06771 .................... #if defined(__PCD__) 
                    06772 .................... //typedef signed int24 int24_t; 
                    06773 .................... //typedef unsigned int24 uint24_t; 
                    06774 .................... typedef signed int64 int64_t; 
                    06775 .................... typedef unsigned int64 uint64_t; 
                    06776 .................... #endif 
                    06777 ....................  
                    06778 .................... #define INT8_MAX  (128) 
                    06779 .................... #define INT8_MIN  (-127) 
                    06780 .................... #define UINT8_MAX (255) 
                    06781 ....................  
                    06782 .................... #define INT16_MAX  (32767) 
                    06783 .................... #define INT16_MIN  (-32768) 
                    06784 .................... #define UINT16_MAX (65535) 
                    06785 ....................  
                    06786 .................... #define INT32_MAX  (2147483647) 
                    06787 .................... #define INT32_MIN  (-2147483648) 
                    06788 .................... #define UINT32_MAX (4294967295) 
                    06789 ....................  
                    06790 .................... #if defined(__PCD__) 
                    06791 .................... //#define INT24_MAX  (8388607) 
                    06792 .................... //#define INT24_MIN  (-8388608) 
                    06793 .................... //#define UINT24_MAX (16777215) 
                    06794 ....................  
                    06795 .................... #define INT64_MAX  (9223372036854775807) 
                    06796 .................... #define INT64_MIN  (-9223372036854775808) 
                    06797 .................... #define UINT64_MAX (18446744073709551615) 
                    06798 .................... #endif 
                    06799 ....................  
                    06800 .................... ///////// minimum width 
                    06801 ....................  
                    06802 .................... typedef signed int8 int_least8_t; 
                    06803 .................... typedef unsigned int8 uint_least8_t; 
                    06804 .................... typedef signed int16 int_least16_t; 
                    06805 .................... typedef unsigned int16 uint_least16_t; 
                    06806 .................... typedef signed int32 int_least32_t; 
                    06807 .................... typedef unsigned int32 uint_least32_t; 
                    06808 ....................  
                    06809 .................... #if defined(__PCD__) 
                    06810 .................... //typedef signed int24 int_least24_t; 
                    06811 .................... //typedef unsigned int24 uint_least24_t; 
                    06812 .................... typedef signed int64 int_least64_t; 
                    06813 .................... typedef unsigned int64 uint_least64_t; 
                    06814 .................... #endif 
                    06815 ....................  
                    06816 .................... #define INT_LEAST8_MAX  (128) 
                    06817 .................... #define INT_LEAST8_MIN  (-127) 
                    06818 .................... #define UINT_LEAST8_MAX (255) 
                    06819 ....................  
                    06820 .................... #define INT_LEAST16_MAX  (32767) 
                    06821 .................... #define INT_LEAST16_MIN  (-32768) 
                    06822 .................... #define UINT_LEAST16_MAX (65535) 
                    06823 ....................  
                    06824 .................... #define INT_LEAST32_MAX  (2147483647) 
                    06825 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    06826 .................... #define UINT_LEAST32_MAX (4294967295) 
                    06827 ....................  
                    06828 .................... #if defined(__PCD__) 
                    06829 .................... //#define INT_LEAST24_MAX  (8388607) 
                    06830 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    06831 .................... //#define UINT_LEAST24_MAX (16777215) 
                    06832 ....................  
                    06833 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    06834 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    06835 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    06836 .................... #endif 
                    06837 ....................  
                    06838 .................... ///////// fastest width 
                    06839 ....................  
                    06840 .................... #if defined(__PCD__) 
                    06841 .................... typedef signed int16 int_fast8_t; 
                    06842 .................... typedef unsigned int16 uint_fast8_t; 
                    06843 .................... #define INT_FAST8_MAX  (32767) 
                    06844 .................... #define INT_FAST8_MIN  (-32768) 
                    06845 .................... #define UINT_FAST8_MAX (65535) 
                    06846 .................... typedef signed int16 int_fast16_t; 
                    06847 .................... typedef unsigned int16 uint_fast16_t; 
                    06848 .................... //typedef signed int24 int_fast24_t; 
                    06849 .................... //typedef unsigned int24 uint_fast24_t; 
                    06850 .................... typedef signed int64 int_fast64_t; 
                    06851 .................... typedef unsigned int64 uint_fast64_t; 
                    06852 .................... #else 
                    06853 .................... typedef signed int8 int_fast8_t; 
                    06854 .................... typedef unsigned int8 uint_fast8_t; 
                    06855 .................... #define INT_FAST8_MAX  (128) 
                    06856 .................... #define INT_FAST8_MIN  (-127) 
                    06857 .................... #define UINT_FAST8_MAX (255) 
                    06858 .................... typedef signed int16 int_fast16_t; 
                    06859 .................... typedef unsigned int16 uint_fast16_t; 
                    06860 .................... #endif 
                    06861 ....................  
                    06862 .................... typedef signed int32 int_fast32_t; 
                    06863 .................... typedef unsigned int32 uint_fast32_t; 
                    06864 ....................  
                    06865 .................... #define INT_FAST16_MAX  (32767) 
                    06866 .................... #define INT_FAST16_MIN  (-32768) 
                    06867 .................... #define UINT_FAST16_MAX (65535) 
                    06868 ....................  
                    06869 .................... #define INT_FAST32_MAX  (2147483647) 
                    06870 .................... #define INT_FAST32_MIN  (-2147483648) 
                    06871 .................... #define UINT_FAST32_MAX (4294967295) 
                    06872 ....................  
                    06873 .................... #if defined(__PCD__) 
                    06874 .................... //#define INT_FAST24_MAX  (8388607) 
                    06875 .................... //#define INT_FAST24_MIN  (-8388608) 
                    06876 .................... //#define UINT_FAST24_MAX (16777215) 
                    06877 ....................  
                    06878 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    06879 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    06880 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    06881 .................... #endif 
                    06882 ....................  
                    06883 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    06884 ....................  
                    06885 .................... /// TODO 
                    06886 ....................  
                    06887 .................... /// intptr_t uintptr_t 
                    06888 ....................  
                    06889 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    06890 ....................  
                    06891 ....................  
                    06892 .................... /////////// greatest width (OPTIONAL) 
                    06893 ....................  
                    06894 .................... /// TODO 
                    06895 ....................  
                    06896 .................... /// intmax_t uintmax_t 
                    06897 ....................  
                    06898 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    06899 ....................  
                    06900 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    06901 ....................  
                    06902 ....................  
                    06903 .................... #endif 
                    06904 ....................  
                    06905 .................... #include <stdbool.h> 
                    06906 .................... /////////////////////////////////////////////////////////////////////////// 
                    06907 .................... ////                                                                   //// 
                    06908 .................... ////                          stdbool.h                                //// 
                    06909 .................... ////                                                                   //// 
                    06910 .................... //// Standard boolean definitions                                      //// 
                    06911 .................... ////                                                                   //// 
                    06912 .................... /////////////////////////////////////////////////////////////////////////// 
                    06913 .................... ////        (C) Copyright 1996,2012 Custom Computer Services           //// 
                    06914 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    06915 .................... //// compiler.  This source code may only be distributed to other      //// 
                    06916 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    06917 .................... //// or distribution is permitted without written permission.          //// 
                    06918 .................... //// Derivative programs created using this software in object code    //// 
                    06919 .................... //// form are not restricted in any way.                               //// 
                    06920 .................... /////////////////////////////////////////////////////////////////////////// 
                    06921 ....................  
                    06922 .................... #ifndef __STDBOOL_H__ 
                    06923 .................... #define __STDBOOL_H__ 
                    06924 ....................  
                    06925 .................... //remove TRUE and FALSE added by CCS's device .h file 
                    06926 .................... #if defined(TRUE) 
                    06927 .................... #undef TRUE 
                    06928 .................... #endif 
                    06929 .................... #if defined(FALSE) 
                    06930 .................... #undef FALSE 
                    06931 .................... #endif 
                    06932 ....................  
                    06933 .................... typedef int1   bool; 
                    06934 .................... #define true   1 
                    06935 .................... #define false  0 
                    06936 .................... #define __bool_true_false_are_defined  1 
                    06937 ....................  
                    06938 .................... #endif 
                    06939 ....................  
                    06940 ....................  
                    06941 .................... #define MSG_MAX_MESSAGE_LEN 80 
                    06942 ....................  
                    06943 .................... #ifndef MIN 
                    06944 .................... #define MIN(x,y) ((x)<(y)?(x):(y)) 
                    06945 .................... #endif 
                    06946 .................... #ifndef MAX 
                    06947 .................... #define	MAX(a,b) (((a)>(b))?(a):(b)) 
                    06948 .................... #endif 
                    06949 ....................  
                    06950 .................... #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0])) 
                    06951 .................... #define MAX_INDEX_IN_ARRAY(x) (ARRAY_SIZE(x)-1) 
                    06952 ....................  
                    06953 .................... void comm_init(); 
                    06954 .................... bool comm_receive_message(void* buffer, uint16_t* size); 
                    06955 .................... void comm_send_message(void* buffer, uint16_t size); 
                    06956 ....................  
                    06957 ....................  
                    06958 ....................  
                    06959 .................... #endif /* COMM_H_ */ 
                    06960 ....................  
                    06961 ....................  
                    06962 ....................  
                    06963 ....................  
                    06964 ....................  
                    06965 ....................  
                    06966 ....................  
                    06967 ....................  
                    06968 ....................  
                    06969 ....................  
                    06970 ....................  
                    06971 ....................  
                    06972 ....................  
                    06973 ....................  
                    06974 ....................  
                    06975 ....................  
                    06976 ....................  
                    06977 ....................  
                    06978 ....................  
                    06979 ....................  
                    06980 ....................  
                    06981 ....................  
                    06982 ....................  
                    06983 ....................  
                    06984 ....................  
                    06985 ....................  
                    06986 ....................  
                    06987 ....................  
                    06988 ....................  
3882 0E20           06989 MOVLW  20
3884 6E92           06990 MOVWF  F92
                    06991 ....................  
3886 0E0F           06992 MOVLW  0F
3888 6E93           06993 MOVWF  F93
                    06994 ....................  
388A 0EA0           06995 MOVLW  A0
388C 6E94           06996 MOVWF  F94
                    06997 ....................  
388E 0E00           06998 MOVLW  00
3890 6E95           06999 MOVWF  F95
                    07000 ....................  
3892 8096           07001 BSF    F96.0
3894 8296           07002 BSF    F96.1
3896 8496           07003 BSF    F96.2
3898 9696           07004 BCF    F96.3
                    07005 ....................  
                    07006 ....................  
389A 6A89           07007 CLRF   F89
                    07008 ....................  
389C 6A8A           07009 CLRF   F8A
                    07010 ....................  
389E 6A8C           07011 CLRF   F8C
                    07012 ....................  
38A0 6A8D           07013 CLRF   F8D
                    07014 ....................  
                    07015 ....................  
38A2 50C1           07016 MOVF   FC1,W
38A4 0BF0           07017 ANDLW  F0
38A6 6EC1           07018 MOVWF  FC1
38A8 0E20           07019 MOVLW  20
38AA 010F           07020 MOVLB  F
38AC 6F38           07021 MOVWF  x38
38AE 0E07           07022 MOVLW  07
38B0 6F3C           07023 MOVWF  x3C
38B2 0E0C           07024 MOVLW  0C
38B4 6F39           07025 MOVWF  x39
38B6 0E20           07026 MOVLW  20
38B8 6F3A           07027 MOVWF  x3A
38BA 0E00           07028 MOVLW  00
38BC 6F3B           07029 MOVWF  x3B
                    07030 ....................  
38BE 50C0           07031 MOVF   FC0,W
38C0 0BC0           07032 ANDLW  C0
38C2 0925           07033 IORLW  25
38C4 6EC0           07034 MOVWF  FC0
38C6 8EC0           07035 BSF    FC0.7
38C8 80C2           07036 BSF    FC2.0
                    07037 ....................  
38CA 0100           07038 MOVLB  0
38CC EF9C F016      07039 GOTO   2D38 (RETURN)
                    07040 ....................  
                    07041 ....................  
                    07042 ....................  
                    07043 ....................  
                    07044 ....................  
                    07045 ....................  
                    07046 ....................  
                    07047 ....................  
                    07048 ....................  
231A 514B           07049 MOVF   x4B,W
231C 0D07           07050 MULLW  07
231E 50F3           07051 MOVF   FF3,W
2320 6B4D           07052 CLRF   x4D
2322 6F4C           07053 MOVWF  x4C
2324 C44D F003      07054 MOVFF  44D,03
2328 514C           07055 MOVF   x4C,W
232A 0100           07056 MOVLB  0
232C DF54           07057 RCALL  21D6
232E 6E00           07058 MOVWF  00
2330 0009           07059 TBLRD*+
2332 CFF5 F001      07060 MOVFF  FF5,01
2336 0009           07061 TBLRD*+
2338 CFF5 F002      07062 MOVFF  FF5,02
233C 0009           07063 TBLRD*+
233E CFF5 F003      07064 MOVFF  FF5,03
2342 C003 F451      07065 MOVFF  03,451
2346 C002 F450      07066 MOVFF  02,450
234A C001 F44F      07067 MOVFF  01,44F
234E CFE8 F44E      07068 MOVFF  FE8,44E
2352 CFE8 F452      07069 MOVFF  FE8,452
2356 0E01           07070 MOVLW  01
2358 0104           07071 MOVLB  4
235A 6F53           07072 MOVWF  x53
235C 0E0F           07073 MOVLW  0F
235E 6F55           07074 MOVWF  x55
2360 0E89           07075 MOVLW  89
2362 6F54           07076 MOVWF  x54
2364 0100           07077 MOVLB  0
2366 DF87           07078 RCALL  2276
2368 0000           07079 NOP   
238A 514B           07080 MOVF   x4B,W
238C 0D07           07081 MULLW  07
238E 50F3           07082 MOVF   FF3,W
2390 6B4D           07083 CLRF   x4D
2392 6F4C           07084 MOVWF  x4C
2394 C44D F003      07085 MOVFF  44D,03
2398 514C           07086 MOVF   x4C,W
239A 0100           07087 MOVLB  0
239C DF1C           07088 RCALL  21D6
239E 6E00           07089 MOVWF  00
23A0 0009           07090 TBLRD*+
23A2 CFF5 F001      07091 MOVFF  FF5,01
23A6 0009           07092 TBLRD*+
23A8 CFF5 F002      07093 MOVFF  FF5,02
23AC 0009           07094 TBLRD*+
23AE CFF5 F003      07095 MOVFF  FF5,03
23B2 C003 F451      07096 MOVFF  03,451
23B6 C002 F450      07097 MOVFF  02,450
23BA C001 F44F      07098 MOVFF  01,44F
23BE CFE8 F44E      07099 MOVFF  FE8,44E
23C2 CFE8 F452      07100 MOVFF  FE8,452
23C6 0E01           07101 MOVLW  01
23C8 0104           07102 MOVLB  4
23CA 6F53           07103 MOVWF  x53
23CC 0E0F           07104 MOVLW  0F
23CE 6F55           07105 MOVWF  x55
23D0 0E89           07106 MOVLW  89
23D2 6F54           07107 MOVWF  x54
23D4 0100           07108 MOVLB  0
23D6 DF4F           07109 RCALL  2276
23D8 0000           07110 NOP   
2406 514B           07111 MOVF   x4B,W
2408 0D07           07112 MULLW  07
240A 50F3           07113 MOVF   FF3,W
240C 6B4D           07114 CLRF   x4D
240E 6F4C           07115 MOVWF  x4C
2410 C44D F003      07116 MOVFF  44D,03
2414 514C           07117 MOVF   x4C,W
2416 0100           07118 MOVLB  0
2418 DEDE           07119 RCALL  21D6
241A 6E00           07120 MOVWF  00
241C 0009           07121 TBLRD*+
241E CFF5 F001      07122 MOVFF  FF5,01
2422 0009           07123 TBLRD*+
2424 CFF5 F002      07124 MOVFF  FF5,02
2428 0009           07125 TBLRD*+
242A CFF5 F003      07126 MOVFF  FF5,03
242E C003 F451      07127 MOVFF  03,451
2432 C002 F450      07128 MOVFF  02,450
2436 C001 F44F      07129 MOVFF  01,44F
243A CFE8 F44E      07130 MOVFF  FE8,44E
243E CFE8 F452      07131 MOVFF  FE8,452
2442 0E01           07132 MOVLW  01
2444 0104           07133 MOVLB  4
2446 6F53           07134 MOVWF  x53
2448 0E0F           07135 MOVLW  0F
244A 6F55           07136 MOVWF  x55
244C 0E89           07137 MOVLW  89
244E 6F54           07138 MOVWF  x54
2450 0100           07139 MOVLB  0
2452 DF11           07140 RCALL  2276
2454 0000           07141 NOP   
2D46 514B           07142 MOVF   x4B,W
2D48 0D07           07143 MULLW  07
2D4A 50F3           07144 MOVF   FF3,W
2D4C 6B4D           07145 CLRF   x4D
2D4E 6F4C           07146 MOVWF  x4C
2D50 C44D F003      07147 MOVFF  44D,03
2D54 514C           07148 MOVF   x4C,W
2D56 0100           07149 MOVLB  0
2D58 ECEB F010      07150 CALL   21D6
2D5C 6E00           07151 MOVWF  00
2D5E 0009           07152 TBLRD*+
2D60 CFF5 F001      07153 MOVFF  FF5,01
2D64 0009           07154 TBLRD*+
2D66 CFF5 F002      07155 MOVFF  FF5,02
2D6A 0009           07156 TBLRD*+
2D6C CFF5 F003      07157 MOVFF  FF5,03
2D70 C003 F451      07158 MOVFF  03,451
2D74 C002 F450      07159 MOVFF  02,450
2D78 C001 F44F      07160 MOVFF  01,44F
2D7C CFE8 F44E      07161 MOVFF  FE8,44E
2D80 CFE8 F452      07162 MOVFF  FE8,452
2D84 0E01           07163 MOVLW  01
2D86 0104           07164 MOVLB  4
2D88 6F53           07165 MOVWF  x53
2D8A 0E0F           07166 MOVLW  0F
2D8C 6F55           07167 MOVWF  x55
2D8E 0E89           07168 MOVLW  89
2D90 6F54           07169 MOVWF  x54
2D92 0100           07170 MOVLB  0
2D94 EC3B F011      07171 CALL   2276
2D98 0000           07172 NOP   
2DA0 514B           07173 MOVF   x4B,W
2DA2 0D07           07174 MULLW  07
2DA4 50F3           07175 MOVF   FF3,W
2DA6 6B4D           07176 CLRF   x4D
2DA8 6F4C           07177 MOVWF  x4C
2DAA C44D F003      07178 MOVFF  44D,03
2DAE 514C           07179 MOVF   x4C,W
2DB0 0100           07180 MOVLB  0
2DB2 ECEB F010      07181 CALL   21D6
2DB6 6E00           07182 MOVWF  00
2DB8 0009           07183 TBLRD*+
2DBA CFF5 F001      07184 MOVFF  FF5,01
2DBE 0009           07185 TBLRD*+
2DC0 CFF5 F002      07186 MOVFF  FF5,02
2DC4 0009           07187 TBLRD*+
2DC6 CFF5 F003      07188 MOVFF  FF5,03
2DCA C003 F451      07189 MOVFF  03,451
2DCE C002 F450      07190 MOVFF  02,450
2DD2 C001 F44F      07191 MOVFF  01,44F
2DD6 CFE8 F44E      07192 MOVFF  FE8,44E
2DDA CFE8 F452      07193 MOVFF  FE8,452
2DDE 0E01           07194 MOVLW  01
2DE0 0104           07195 MOVLB  4
2DE2 6F53           07196 MOVWF  x53
2DE4 0E0F           07197 MOVLW  0F
2DE6 6F55           07198 MOVWF  x55
2DE8 0E89           07199 MOVLW  89
2DEA 6F54           07200 MOVWF  x54
2DEC 0100           07201 MOVLB  0
2DEE EC3B F011      07202 CALL   2276
2DF2 0000           07203 NOP   
3156 514B           07204 MOVF   x4B,W
3158 0D07           07205 MULLW  07
315A 50F3           07206 MOVF   FF3,W
315C 6B4D           07207 CLRF   x4D
315E 6F4C           07208 MOVWF  x4C
3160 C44D F003      07209 MOVFF  44D,03
3164 514C           07210 MOVF   x4C,W
3166 0100           07211 MOVLB  0
3168 ECEB F010      07212 CALL   21D6
316C 6E00           07213 MOVWF  00
316E 0009           07214 TBLRD*+
3170 CFF5 F001      07215 MOVFF  FF5,01
3174 0009           07216 TBLRD*+
3176 CFF5 F002      07217 MOVFF  FF5,02
317A 0009           07218 TBLRD*+
317C CFF5 F003      07219 MOVFF  FF5,03
3180 C003 F451      07220 MOVFF  03,451
3184 C002 F450      07221 MOVFF  02,450
3188 C001 F44F      07222 MOVFF  01,44F
318C CFE8 F44E      07223 MOVFF  FE8,44E
3190 CFE8 F452      07224 MOVFF  FE8,452
3194 0E01           07225 MOVLW  01
3196 0104           07226 MOVLB  4
3198 6F53           07227 MOVWF  x53
319A 0E0F           07228 MOVLW  0F
319C 6F55           07229 MOVWF  x55
319E 0E89           07230 MOVLW  89
31A0 6F54           07231 MOVWF  x54
31A2 0100           07232 MOVLB  0
31A4 EC3B F011      07233 CALL   2276
31A8 0000           07234 NOP   
31D8 514B           07235 MOVF   x4B,W
31DA 0D07           07236 MULLW  07
31DC 50F3           07237 MOVF   FF3,W
31DE 6B4D           07238 CLRF   x4D
31E0 6F4C           07239 MOVWF  x4C
31E2 C44D F003      07240 MOVFF  44D,03
31E6 514C           07241 MOVF   x4C,W
31E8 0100           07242 MOVLB  0
31EA ECEB F010      07243 CALL   21D6
31EE 6E00           07244 MOVWF  00
31F0 0009           07245 TBLRD*+
31F2 CFF5 F001      07246 MOVFF  FF5,01
31F6 0009           07247 TBLRD*+
31F8 CFF5 F002      07248 MOVFF  FF5,02
31FC 0009           07249 TBLRD*+
31FE CFF5 F003      07250 MOVFF  FF5,03
3202 C003 F451      07251 MOVFF  03,451
3206 C002 F450      07252 MOVFF  02,450
320A C001 F44F      07253 MOVFF  01,44F
320E CFE8 F44E      07254 MOVFF  FE8,44E
3212 CFE8 F452      07255 MOVFF  FE8,452
3216 0E01           07256 MOVLW  01
3218 0104           07257 MOVLB  4
321A 6F53           07258 MOVWF  x53
321C 0E0F           07259 MOVLW  0F
321E 6F55           07260 MOVWF  x55
3220 0E89           07261 MOVLW  89
3222 6F54           07262 MOVWF  x54
3224 0100           07263 MOVLB  0
3226 EC3B F011      07264 CALL   2276
322A 0000           07265 NOP   
3290 514B           07266 MOVF   x4B,W
3292 0D07           07267 MULLW  07
3294 50F3           07268 MOVF   FF3,W
3296 6B4D           07269 CLRF   x4D
3298 6F4C           07270 MOVWF  x4C
329A C44D F003      07271 MOVFF  44D,03
329E 514C           07272 MOVF   x4C,W
32A0 0100           07273 MOVLB  0
32A2 ECEB F010      07274 CALL   21D6
32A6 6E00           07275 MOVWF  00
32A8 0009           07276 TBLRD*+
32AA CFF5 F001      07277 MOVFF  FF5,01
32AE 0009           07278 TBLRD*+
32B0 CFF5 F002      07279 MOVFF  FF5,02
32B4 0009           07280 TBLRD*+
32B6 CFF5 F003      07281 MOVFF  FF5,03
32BA C003 F451      07282 MOVFF  03,451
32BE C002 F450      07283 MOVFF  02,450
32C2 C001 F44F      07284 MOVFF  01,44F
32C6 CFE8 F44E      07285 MOVFF  FE8,44E
32CA CFE8 F452      07286 MOVFF  FE8,452
32CE 0E01           07287 MOVLW  01
32D0 0104           07288 MOVLB  4
32D2 6F53           07289 MOVWF  x53
32D4 0E0F           07290 MOVLW  0F
32D6 6F55           07291 MOVWF  x55
32D8 0E89           07292 MOVLW  89
32DA 6F54           07293 MOVWF  x54
32DC 0100           07294 MOVLB  0
32DE EC3B F011      07295 CALL   2276
32E2 0000           07296 NOP   
3970 514B           07297 MOVF   x4B,W
3972 0D07           07298 MULLW  07
3974 50F3           07299 MOVF   FF3,W
3976 6B4D           07300 CLRF   x4D
3978 6F4C           07301 MOVWF  x4C
397A C44D F003      07302 MOVFF  44D,03
397E 514C           07303 MOVF   x4C,W
3980 0100           07304 MOVLB  0
3982 ECEB F010      07305 CALL   21D6
3986 6E00           07306 MOVWF  00
3988 0009           07307 TBLRD*+
398A CFF5 F001      07308 MOVFF  FF5,01
398E 0009           07309 TBLRD*+
3990 CFF5 F002      07310 MOVFF  FF5,02
3994 0009           07311 TBLRD*+
3996 CFF5 F003      07312 MOVFF  FF5,03
399A C003 F451      07313 MOVFF  03,451
399E C002 F450      07314 MOVFF  02,450
39A2 C001 F44F      07315 MOVFF  01,44F
39A6 CFE8 F44E      07316 MOVFF  FE8,44E
39AA CFE8 F452      07317 MOVFF  FE8,452
39AE 0E01           07318 MOVLW  01
39B0 0104           07319 MOVLB  4
39B2 6F53           07320 MOVWF  x53
39B4 0E0F           07321 MOVLW  0F
39B6 6F55           07322 MOVWF  x55
39B8 0E89           07323 MOVLW  89
39BA 6F54           07324 MOVWF  x54
39BC 0100           07325 MOVLB  0
39BE EC3B F011      07326 CALL   2276
39C2 0000           07327 NOP   
39F2 514B           07328 MOVF   x4B,W
39F4 0D07           07329 MULLW  07
39F6 50F3           07330 MOVF   FF3,W
39F8 6B4D           07331 CLRF   x4D
39FA 6F4C           07332 MOVWF  x4C
39FC C44D F003      07333 MOVFF  44D,03
3A00 514C           07334 MOVF   x4C,W
3A02 0100           07335 MOVLB  0
3A04 ECEB F010      07336 CALL   21D6
3A08 6E00           07337 MOVWF  00
3A0A 0009           07338 TBLRD*+
3A0C CFF5 F001      07339 MOVFF  FF5,01
3A10 0009           07340 TBLRD*+
3A12 CFF5 F002      07341 MOVFF  FF5,02
3A16 0009           07342 TBLRD*+
3A18 CFF5 F003      07343 MOVFF  FF5,03
3A1C C003 F451      07344 MOVFF  03,451
3A20 C002 F450      07345 MOVFF  02,450
3A24 C001 F44F      07346 MOVFF  01,44F
3A28 CFE8 F44E      07347 MOVFF  FE8,44E
3A2C CFE8 F452      07348 MOVFF  FE8,452
3A30 0E01           07349 MOVLW  01
3A32 0104           07350 MOVLB  4
3A34 6F53           07351 MOVWF  x53
3A36 0E0F           07352 MOVLW  0F
3A38 6F55           07353 MOVWF  x55
3A3A 0E89           07354 MOVLW  89
3A3C 6F54           07355 MOVWF  x54
3A3E 0100           07356 MOVLB  0
3A40 EC3B F011      07357 CALL   2276
3A44 0000           07358 NOP   
3AAA 514B           07359 MOVF   x4B,W
3AAC 0D07           07360 MULLW  07
3AAE 50F3           07361 MOVF   FF3,W
3AB0 6B4D           07362 CLRF   x4D
3AB2 6F4C           07363 MOVWF  x4C
3AB4 C44D F003      07364 MOVFF  44D,03
3AB8 514C           07365 MOVF   x4C,W
3ABA 0100           07366 MOVLB  0
3ABC ECEB F010      07367 CALL   21D6
3AC0 6E00           07368 MOVWF  00
3AC2 0009           07369 TBLRD*+
3AC4 CFF5 F001      07370 MOVFF  FF5,01
3AC8 0009           07371 TBLRD*+
3ACA CFF5 F002      07372 MOVFF  FF5,02
3ACE 0009           07373 TBLRD*+
3AD0 CFF5 F003      07374 MOVFF  FF5,03
3AD4 C003 F451      07375 MOVFF  03,451
3AD8 C002 F450      07376 MOVFF  02,450
3ADC C001 F44F      07377 MOVFF  01,44F
3AE0 CFE8 F44E      07378 MOVFF  FE8,44E
3AE4 CFE8 F452      07379 MOVFF  FE8,452
3AE8 0E01           07380 MOVLW  01
3AEA 0104           07381 MOVLB  4
3AEC 6F53           07382 MOVWF  x53
3AEE 0E0F           07383 MOVLW  0F
3AF0 6F55           07384 MOVWF  x55
3AF2 0E89           07385 MOVLW  89
3AF4 6F54           07386 MOVWF  x54
3AF6 0100           07387 MOVLB  0
3AF8 EC3B F011      07388 CALL   2276
3AFC 0000           07389 NOP   
500C 514B           07390 MOVF   x4B,W
500E 0D07           07391 MULLW  07
5010 50F3           07392 MOVF   FF3,W
5012 6B4D           07393 CLRF   x4D
5014 6F4C           07394 MOVWF  x4C
5016 C44D F003      07395 MOVFF  44D,03
501A 514C           07396 MOVF   x4C,W
501C 0100           07397 MOVLB  0
501E ECEB F010      07398 CALL   21D6
5022 6E00           07399 MOVWF  00
5024 0009           07400 TBLRD*+
5026 CFF5 F001      07401 MOVFF  FF5,01
502A 0009           07402 TBLRD*+
502C CFF5 F002      07403 MOVFF  FF5,02
5030 0009           07404 TBLRD*+
5032 CFF5 F003      07405 MOVFF  FF5,03
5036 C003 F451      07406 MOVFF  03,451
503A C002 F450      07407 MOVFF  02,450
503E C001 F44F      07408 MOVFF  01,44F
5042 CFE8 F44E      07409 MOVFF  FE8,44E
5046 CFE8 F452      07410 MOVFF  FE8,452
504A 0E01           07411 MOVLW  01
504C 0104           07412 MOVLB  4
504E 6F53           07413 MOVWF  x53
5050 0E0F           07414 MOVLW  0F
5052 6F55           07415 MOVWF  x55
5054 0E89           07416 MOVLW  89
5056 6F54           07417 MOVWF  x54
5058 0100           07418 MOVLB  0
505A EC3B F011      07419 CALL   2276
505E 0000           07420 NOP   
51A8 514B           07421 MOVF   x4B,W
51AA 0D07           07422 MULLW  07
51AC 50F3           07423 MOVF   FF3,W
51AE 6B4D           07424 CLRF   x4D
51B0 6F4C           07425 MOVWF  x4C
51B2 C44D F003      07426 MOVFF  44D,03
51B6 514C           07427 MOVF   x4C,W
51B8 0100           07428 MOVLB  0
51BA ECEB F010      07429 CALL   21D6
51BE 6E00           07430 MOVWF  00
51C0 0009           07431 TBLRD*+
51C2 CFF5 F001      07432 MOVFF  FF5,01
51C6 0009           07433 TBLRD*+
51C8 CFF5 F002      07434 MOVFF  FF5,02
51CC 0009           07435 TBLRD*+
51CE CFF5 F003      07436 MOVFF  FF5,03
51D2 C003 F451      07437 MOVFF  03,451
51D6 C002 F450      07438 MOVFF  02,450
51DA C001 F44F      07439 MOVFF  01,44F
51DE CFE8 F44E      07440 MOVFF  FE8,44E
51E2 CFE8 F452      07441 MOVFF  FE8,452
51E6 0E01           07442 MOVLW  01
51E8 0104           07443 MOVLB  4
51EA 6F53           07444 MOVWF  x53
51EC 0E0F           07445 MOVLW  0F
51EE 6F55           07446 MOVWF  x55
51F0 0E89           07447 MOVLW  89
51F2 6F54           07448 MOVWF  x54
51F4 0100           07449 MOVLB  0
51F6 EC3B F011      07450 CALL   2276
51FA 0000           07451 NOP   
5B70 514B           07452 MOVF   x4B,W
5B72 0D07           07453 MULLW  07
5B74 50F3           07454 MOVF   FF3,W
5B76 6B4D           07455 CLRF   x4D
5B78 6F4C           07456 MOVWF  x4C
5B7A C44D F003      07457 MOVFF  44D,03
5B7E 514C           07458 MOVF   x4C,W
5B80 0100           07459 MOVLB  0
5B82 ECEB F010      07460 CALL   21D6
5B86 6E00           07461 MOVWF  00
5B88 0009           07462 TBLRD*+
5B8A CFF5 F001      07463 MOVFF  FF5,01
5B8E 0009           07464 TBLRD*+
5B90 CFF5 F002      07465 MOVFF  FF5,02
5B94 0009           07466 TBLRD*+
5B96 CFF5 F003      07467 MOVFF  FF5,03
5B9A C003 F451      07468 MOVFF  03,451
5B9E C002 F450      07469 MOVFF  02,450
5BA2 C001 F44F      07470 MOVFF  01,44F
5BA6 CFE8 F44E      07471 MOVFF  FE8,44E
5BAA CFE8 F452      07472 MOVFF  FE8,452
5BAE 0E01           07473 MOVLW  01
5BB0 0104           07474 MOVLB  4
5BB2 6F53           07475 MOVWF  x53
5BB4 0E0F           07476 MOVLW  0F
5BB6 6F55           07477 MOVWF  x55
5BB8 0E89           07478 MOVLW  89
5BBA 6F54           07479 MOVWF  x54
5BBC 0100           07480 MOVLB  0
5BBE EC3B F011      07481 CALL   2276
5BC2 0000           07482 NOP   
5BF2 514B           07483 MOVF   x4B,W
5BF4 0D07           07484 MULLW  07
5BF6 50F3           07485 MOVF   FF3,W
5BF8 6B4D           07486 CLRF   x4D
5BFA 6F4C           07487 MOVWF  x4C
5BFC C44D F003      07488 MOVFF  44D,03
5C00 514C           07489 MOVF   x4C,W
5C02 0100           07490 MOVLB  0
5C04 ECEB F010      07491 CALL   21D6
5C08 6E00           07492 MOVWF  00
5C0A 0009           07493 TBLRD*+
5C0C CFF5 F001      07494 MOVFF  FF5,01
5C10 0009           07495 TBLRD*+
5C12 CFF5 F002      07496 MOVFF  FF5,02
5C16 0009           07497 TBLRD*+
5C18 CFF5 F003      07498 MOVFF  FF5,03
5C1C C003 F451      07499 MOVFF  03,451
5C20 C002 F450      07500 MOVFF  02,450
5C24 C001 F44F      07501 MOVFF  01,44F
5C28 CFE8 F44E      07502 MOVFF  FE8,44E
5C2C CFE8 F452      07503 MOVFF  FE8,452
5C30 0E01           07504 MOVLW  01
5C32 0104           07505 MOVLB  4
5C34 6F53           07506 MOVWF  x53
5C36 0E0F           07507 MOVLW  0F
5C38 6F55           07508 MOVWF  x55
5C3A 0E89           07509 MOVLW  89
5C3C 6F54           07510 MOVWF  x54
5C3E 0100           07511 MOVLB  0
5C40 EC3B F011      07512 CALL   2276
5C44 0000           07513 NOP   
5CAA 514B           07514 MOVF   x4B,W
5CAC 0D07           07515 MULLW  07
5CAE 50F3           07516 MOVF   FF3,W
5CB0 6B4D           07517 CLRF   x4D
5CB2 6F4C           07518 MOVWF  x4C
5CB4 C44D F003      07519 MOVFF  44D,03
5CB8 514C           07520 MOVF   x4C,W
5CBA 0100           07521 MOVLB  0
5CBC ECEB F010      07522 CALL   21D6
5CC0 6E00           07523 MOVWF  00
5CC2 0009           07524 TBLRD*+
5CC4 CFF5 F001      07525 MOVFF  FF5,01
5CC8 0009           07526 TBLRD*+
5CCA CFF5 F002      07527 MOVFF  FF5,02
5CCE 0009           07528 TBLRD*+
5CD0 CFF5 F003      07529 MOVFF  FF5,03
5CD4 C003 F451      07530 MOVFF  03,451
5CD8 C002 F450      07531 MOVFF  02,450
5CDC C001 F44F      07532 MOVFF  01,44F
5CE0 CFE8 F44E      07533 MOVFF  FE8,44E
5CE4 CFE8 F452      07534 MOVFF  FE8,452
5CE8 0E01           07535 MOVLW  01
5CEA 0104           07536 MOVLB  4
5CEC 6F53           07537 MOVWF  x53
5CEE 0E0F           07538 MOVLW  0F
5CF0 6F55           07539 MOVWF  x55
5CF2 0E89           07540 MOVLW  89
5CF4 6F54           07541 MOVWF  x54
5CF6 0100           07542 MOVLB  0
5CF8 EC3B F011      07543 CALL   2276
5CFC 0000           07544 NOP   
6132 514B           07545 MOVF   x4B,W
6134 0D07           07546 MULLW  07
6136 50F3           07547 MOVF   FF3,W
6138 6B4D           07548 CLRF   x4D
613A 6F4C           07549 MOVWF  x4C
613C C44D F003      07550 MOVFF  44D,03
6140 514C           07551 MOVF   x4C,W
6142 0100           07552 MOVLB  0
6144 ECEB F010      07553 CALL   21D6
6148 6E00           07554 MOVWF  00
614A 0009           07555 TBLRD*+
614C CFF5 F001      07556 MOVFF  FF5,01
6150 0009           07557 TBLRD*+
6152 CFF5 F002      07558 MOVFF  FF5,02
6156 0009           07559 TBLRD*+
6158 CFF5 F003      07560 MOVFF  FF5,03
615C C003 F451      07561 MOVFF  03,451
6160 C002 F450      07562 MOVFF  02,450
6164 C001 F44F      07563 MOVFF  01,44F
6168 CFE8 F44E      07564 MOVFF  FE8,44E
616C CFE8 F452      07565 MOVFF  FE8,452
6170 0E01           07566 MOVLW  01
6172 0104           07567 MOVLB  4
6174 6F53           07568 MOVWF  x53
6176 0E0F           07569 MOVLW  0F
6178 6F55           07570 MOVWF  x55
617A 0E89           07571 MOVLW  89
617C 6F54           07572 MOVWF  x54
617E 0100           07573 MOVLB  0
6180 EC3B F011      07574 CALL   2276
6184 0000           07575 NOP   
                    07576 ....................  
                    07577 ....................  
                    07578 ....................  
                    07579 ....................  
22B8 0104           07580 MOVLB  4
22BA 514B           07581 MOVF   x4B,W
22BC 0D07           07582 MULLW  07
22BE 50F3           07583 MOVF   FF3,W
22C0 6B4D           07584 CLRF   x4D
22C2 6F4C           07585 MOVWF  x4C
22C4 C44D F003      07586 MOVFF  44D,03
22C8 514C           07587 MOVF   x4C,W
22CA 0100           07588 MOVLB  0
22CC DF84           07589 RCALL  21D6
22CE 6E00           07590 MOVWF  00
22D0 0009           07591 TBLRD*+
22D2 CFF5 F001      07592 MOVFF  FF5,01
22D6 0009           07593 TBLRD*+
22D8 CFF5 F002      07594 MOVFF  FF5,02
22DC 0009           07595 TBLRD*+
22DE CFF5 F003      07596 MOVFF  FF5,03
22E2 C003 F451      07597 MOVFF  03,451
22E6 C002 F450      07598 MOVFF  02,450
22EA C001 F44F      07599 MOVFF  01,44F
22EE CFE8 F44E      07600 MOVFF  FE8,44E
22F2 CFE8 F452      07601 MOVFF  FE8,452
22F6 0104           07602 MOVLB  4
22F8 6B53           07603 CLRF   x53
22FA 0E0F           07604 MOVLW  0F
22FC 6F55           07605 MOVWF  x55
22FE 0E89           07606 MOVLW  89
2300 6F54           07607 MOVWF  x54
2302 0100           07608 MOVLB  0
2304 DFB8           07609 RCALL  2276
                    07610 ....................  
2306 0012           07611 RETURN 0
                    07612 ....................  
                    07613 ....................  
                    07614 ....................  
                    07615 ....................  
2312 534A           07616 MOVF   x4A,F
2314 E02C           07617 BZ    236E
2382 534A           07618 MOVF   x4A,F
2384 E02C           07619 BZ    23DE
23FE 534A           07620 MOVF   x4A,F
2400 E02C           07621 BZ    245A
314E 534A           07622 MOVF   x4A,F
3150 E02E           07623 BZ    31AE
31D0 534A           07624 MOVF   x4A,F
31D2 E02E           07625 BZ    3230
3968 534A           07626 MOVF   x4A,F
396A E02E           07627 BZ    39C8
39EA 534A           07628 MOVF   x4A,F
39EC E02E           07629 BZ    3A4A
5B68 534A           07630 MOVF   x4A,F
5B6A E02E           07631 BZ    5BC8
5BEA 534A           07632 MOVF   x4A,F
5BEC E02E           07633 BZ    5C4A
                    07634 ....................  
2316 C449 F44B      07635 MOVFF  449,44B
2386 C449 F44B      07636 MOVFF  449,44B
2402 C449 F44B      07637 MOVFF  449,44B
3152 C449 F44B      07638 MOVFF  449,44B
31D4 C449 F44B      07639 MOVFF  449,44B
396C C449 F44B      07640 MOVFF  449,44B
39EE C449 F44B      07641 MOVFF  449,44B
5B6C C449 F44B      07642 MOVFF  449,44B
5BEE C449 F44B      07643 MOVFF  449,44B
                    07644 ....................  
236A D005           07645 BRA    2376
236C 0104           07646 MOVLB  4
23DA D005           07647 BRA    23E6
23DC 0104           07648 MOVLB  4
2456 D005           07649 BRA    2462
2458 0104           07650 MOVLB  4
31AA D006           07651 BRA    31B8
31AC 0104           07652 MOVLB  4
322C D006           07653 BRA    323A
322E 0104           07654 MOVLB  4
39C4 D006           07655 BRA    39D2
39C6 0104           07656 MOVLB  4
3A46 D006           07657 BRA    3A54
3A48 0104           07658 MOVLB  4
5BC4 D006           07659 BRA    5BD2
5BC6 0104           07660 MOVLB  4
5C46 D006           07661 BRA    5C54
5C48 0104           07662 MOVLB  4
                    07663 ....................  
236E C449 F44B      07664 MOVFF  449,44B
2372 0100           07665 MOVLB  0
2374 DFA1           07666 RCALL  22B8
2376 0000           07667 NOP   
23DE C449 F44B      07668 MOVFF  449,44B
23E2 0100           07669 MOVLB  0
23E4 DF69           07670 RCALL  22B8
23E6 0000           07671 NOP   
245A C449 F44B      07672 MOVFF  449,44B
245E 0100           07673 MOVLB  0
2460 DF2B           07674 RCALL  22B8
2462 0000           07675 NOP   
31AE C449 F44B      07676 MOVFF  449,44B
31B2 0100           07677 MOVLB  0
31B4 EC5C F011      07678 CALL   22B8
31B8 0000           07679 NOP   
3230 C449 F44B      07680 MOVFF  449,44B
3234 0100           07681 MOVLB  0
3236 EC5C F011      07682 CALL   22B8
323A 0000           07683 NOP   
39C8 C449 F44B      07684 MOVFF  449,44B
39CC 0100           07685 MOVLB  0
39CE EC5C F011      07686 CALL   22B8
39D2 0000           07687 NOP   
3A4A C449 F44B      07688 MOVFF  449,44B
3A4E 0100           07689 MOVLB  0
3A50 EC5C F011      07690 CALL   22B8
3A54 0000           07691 NOP   
5BC8 C449 F44B      07692 MOVFF  449,44B
5BCC 0100           07693 MOVLB  0
5BCE EC5C F011      07694 CALL   22B8
5BD2 0000           07695 NOP   
5C4A C449 F44B      07696 MOVFF  449,44B
5C4E 0100           07697 MOVLB  0
5C50 EC5C F011      07698 CALL   22B8
5C54 0000           07699 NOP   
                    07700 ....................  
                    07701 ....................  
                    07702 ....................  
                    07703 ....................  
                    07704 ....................  
                    07705 ....................  
                    07706 ....................  
                    07707 ....................  
                    07708 ....................  
                    07709 ....................  
24E2 514A           07710 MOVF   x4A,W
24E4 0D07           07711 MULLW  07
24E6 50F3           07712 MOVF   FF3,W
24E8 6B4D           07713 CLRF   x4D
24EA 6F4C           07714 MOVWF  x4C
24EC C44D F003      07715 MOVFF  44D,03
24F0 514C           07716 MOVF   x4C,W
24F2 0100           07717 MOVLB  0
24F4 DE70           07718 RCALL  21D6
24F6 6E00           07719 MOVWF  00
24F8 0009           07720 TBLRD*+
24FA CFF5 F001      07721 MOVFF  FF5,01
24FE 0009           07722 TBLRD*+
2500 CFF5 F002      07723 MOVFF  FF5,02
2504 0009           07724 TBLRD*+
2506 CFF5 F003      07725 MOVFF  FF5,03
250A C001 F44F      07726 MOVFF  01,44F
250E CFE8 F44E      07727 MOVFF  FE8,44E
2512 0104           07728 MOVLB  4
2514 3400           07729 RLCF   00,W
2516 6E00           07730 MOVWF  00
2518 3401           07731 RLCF   01,W
251A 6E01           07732 MOVWF  01
251C 3402           07733 RLCF   02,W
251E 6E01           07734 MOVWF  01
2520 3403           07735 RLCF   03,W
2522 6E01           07736 MOVWF  01
2524 3600           07737 RLCF   00,F
2526 3601           07738 RLCF   01,F
2528 3601           07739 RLCF   01,F
252A 3601           07740 RLCF   01,F
252C 0EFC           07741 MOVLW  FC
252E 1600           07742 ANDWF  00,F
2530 50C2           07743 MOVF   FC2,W
2532 0B83           07744 ANDLW  83
2534 1000           07745 IORWF  00,W
2536 6EC2           07746 MOVWF  FC2
2590 514A           07747 MOVF   x4A,W
2592 0D07           07748 MULLW  07
2594 50F3           07749 MOVF   FF3,W
2596 6B4D           07750 CLRF   x4D
2598 6F4C           07751 MOVWF  x4C
259A C44D F003      07752 MOVFF  44D,03
259E 514C           07753 MOVF   x4C,W
25A0 0100           07754 MOVLB  0
25A2 DE19           07755 RCALL  21D6
25A4 6E00           07756 MOVWF  00
25A6 0009           07757 TBLRD*+
25A8 CFF5 F001      07758 MOVFF  FF5,01
25AC 0009           07759 TBLRD*+
25AE CFF5 F002      07760 MOVFF  FF5,02
25B2 0009           07761 TBLRD*+
25B4 CFF5 F003      07762 MOVFF  FF5,03
25B8 C001 F44F      07763 MOVFF  01,44F
25BC CFE8 F44E      07764 MOVFF  FE8,44E
25C0 0104           07765 MOVLB  4
25C2 3400           07766 RLCF   00,W
25C4 6E00           07767 MOVWF  00
25C6 3401           07768 RLCF   01,W
25C8 6E01           07769 MOVWF  01
25CA 3402           07770 RLCF   02,W
25CC 6E01           07771 MOVWF  01
25CE 3403           07772 RLCF   03,W
25D0 6E01           07773 MOVWF  01
25D2 3600           07774 RLCF   00,F
25D4 3601           07775 RLCF   01,F
25D6 3601           07776 RLCF   01,F
25D8 3601           07777 RLCF   01,F
25DA 0EFC           07778 MOVLW  FC
25DC 1600           07779 ANDWF  00,F
25DE 50C2           07780 MOVF   FC2,W
25E0 0B83           07781 ANDLW  83
25E2 1000           07782 IORWF  00,W
25E4 6EC2           07783 MOVWF  FC2
2F72 514A           07784 MOVF   x4A,W
2F74 0D07           07785 MULLW  07
2F76 50F3           07786 MOVF   FF3,W
2F78 6B4D           07787 CLRF   x4D
2F7A 6F4C           07788 MOVWF  x4C
2F7C C44D F003      07789 MOVFF  44D,03
2F80 514C           07790 MOVF   x4C,W
2F82 0100           07791 MOVLB  0
2F84 ECEB F010      07792 CALL   21D6
2F88 6E00           07793 MOVWF  00
2F8A 0009           07794 TBLRD*+
2F8C CFF5 F001      07795 MOVFF  FF5,01
2F90 0009           07796 TBLRD*+
2F92 CFF5 F002      07797 MOVFF  FF5,02
2F96 0009           07798 TBLRD*+
2F98 CFF5 F003      07799 MOVFF  FF5,03
2F9C C001 F44F      07800 MOVFF  01,44F
2FA0 CFE8 F44E      07801 MOVFF  FE8,44E
2FA4 0104           07802 MOVLB  4
2FA6 3400           07803 RLCF   00,W
2FA8 6E00           07804 MOVWF  00
2FAA 3401           07805 RLCF   01,W
2FAC 6E01           07806 MOVWF  01
2FAE 3402           07807 RLCF   02,W
2FB0 6E01           07808 MOVWF  01
2FB2 3403           07809 RLCF   03,W
2FB4 6E01           07810 MOVWF  01
2FB6 3600           07811 RLCF   00,F
2FB8 3601           07812 RLCF   01,F
2FBA 3601           07813 RLCF   01,F
2FBC 3601           07814 RLCF   01,F
2FBE 0EFC           07815 MOVLW  FC
2FC0 1600           07816 ANDWF  00,F
2FC2 50C2           07817 MOVF   FC2,W
2FC4 0B83           07818 ANDLW  83
2FC6 1000           07819 IORWF  00,W
2FC8 6EC2           07820 MOVWF  FC2
3446 514A           07821 MOVF   x4A,W
3448 0D07           07822 MULLW  07
344A 50F3           07823 MOVF   FF3,W
344C 6B4D           07824 CLRF   x4D
344E 6F4C           07825 MOVWF  x4C
3450 C44D F003      07826 MOVFF  44D,03
3454 514C           07827 MOVF   x4C,W
3456 0100           07828 MOVLB  0
3458 ECEB F010      07829 CALL   21D6
345C 6E00           07830 MOVWF  00
345E 0009           07831 TBLRD*+
3460 CFF5 F001      07832 MOVFF  FF5,01
3464 0009           07833 TBLRD*+
3466 CFF5 F002      07834 MOVFF  FF5,02
346A 0009           07835 TBLRD*+
346C CFF5 F003      07836 MOVFF  FF5,03
3470 C001 F44F      07837 MOVFF  01,44F
3474 CFE8 F44E      07838 MOVFF  FE8,44E
3478 0104           07839 MOVLB  4
347A 3400           07840 RLCF   00,W
347C 6E00           07841 MOVWF  00
347E 3401           07842 RLCF   01,W
3480 6E01           07843 MOVWF  01
3482 3402           07844 RLCF   02,W
3484 6E01           07845 MOVWF  01
3486 3403           07846 RLCF   03,W
3488 6E01           07847 MOVWF  01
348A 3600           07848 RLCF   00,F
348C 3601           07849 RLCF   01,F
348E 3601           07850 RLCF   01,F
3490 3601           07851 RLCF   01,F
3492 0EFC           07852 MOVLW  FC
3494 1600           07853 ANDWF  00,F
3496 50C2           07854 MOVF   FC2,W
3498 0B83           07855 ANDLW  83
349A 1000           07856 IORWF  00,W
349C 6EC2           07857 MOVWF  FC2
3540 514A           07858 MOVF   x4A,W
3542 0D07           07859 MULLW  07
3544 50F3           07860 MOVF   FF3,W
3546 6B4D           07861 CLRF   x4D
3548 6F4C           07862 MOVWF  x4C
354A C44D F003      07863 MOVFF  44D,03
354E 514C           07864 MOVF   x4C,W
3550 0100           07865 MOVLB  0
3552 ECEB F010      07866 CALL   21D6
3556 6E00           07867 MOVWF  00
3558 0009           07868 TBLRD*+
355A CFF5 F001      07869 MOVFF  FF5,01
355E 0009           07870 TBLRD*+
3560 CFF5 F002      07871 MOVFF  FF5,02
3564 0009           07872 TBLRD*+
3566 CFF5 F003      07873 MOVFF  FF5,03
356A C001 F44F      07874 MOVFF  01,44F
356E CFE8 F44E      07875 MOVFF  FE8,44E
3572 0104           07876 MOVLB  4
3574 3400           07877 RLCF   00,W
3576 6E00           07878 MOVWF  00
3578 3401           07879 RLCF   01,W
357A 6E01           07880 MOVWF  01
357C 3402           07881 RLCF   02,W
357E 6E01           07882 MOVWF  01
3580 3403           07883 RLCF   03,W
3582 6E01           07884 MOVWF  01
3584 3600           07885 RLCF   00,F
3586 3601           07886 RLCF   01,F
3588 3601           07887 RLCF   01,F
358A 3601           07888 RLCF   01,F
358C 0EFC           07889 MOVLW  FC
358E 1600           07890 ANDWF  00,F
3590 50C2           07891 MOVF   FC2,W
3592 0B83           07892 ANDLW  83
3594 1000           07893 IORWF  00,W
3596 6EC2           07894 MOVWF  FC2
35CC 514A           07895 MOVF   x4A,W
35CE 0D07           07896 MULLW  07
35D0 50F3           07897 MOVF   FF3,W
35D2 6B4D           07898 CLRF   x4D
35D4 6F4C           07899 MOVWF  x4C
35D6 C44D F003      07900 MOVFF  44D,03
35DA 514C           07901 MOVF   x4C,W
35DC 0100           07902 MOVLB  0
35DE ECEB F010      07903 CALL   21D6
35E2 6E00           07904 MOVWF  00
35E4 0009           07905 TBLRD*+
35E6 CFF5 F001      07906 MOVFF  FF5,01
35EA 0009           07907 TBLRD*+
35EC CFF5 F002      07908 MOVFF  FF5,02
35F0 0009           07909 TBLRD*+
35F2 CFF5 F003      07910 MOVFF  FF5,03
35F6 C001 F44F      07911 MOVFF  01,44F
35FA CFE8 F44E      07912 MOVFF  FE8,44E
35FE 0104           07913 MOVLB  4
3600 3400           07914 RLCF   00,W
3602 6E00           07915 MOVWF  00
3604 3401           07916 RLCF   01,W
3606 6E01           07917 MOVWF  01
3608 3402           07918 RLCF   02,W
360A 6E01           07919 MOVWF  01
360C 3403           07920 RLCF   03,W
360E 6E01           07921 MOVWF  01
3610 3600           07922 RLCF   00,F
3612 3601           07923 RLCF   01,F
3614 3601           07924 RLCF   01,F
3616 3601           07925 RLCF   01,F
3618 0EFC           07926 MOVLW  FC
361A 1600           07927 ANDWF  00,F
361C 50C2           07928 MOVF   FC2,W
361E 0B83           07929 ANDLW  83
3620 1000           07930 IORWF  00,W
3622 6EC2           07931 MOVWF  FC2
3C62 514A           07932 MOVF   x4A,W
3C64 0D07           07933 MULLW  07
3C66 50F3           07934 MOVF   FF3,W
3C68 6B4D           07935 CLRF   x4D
3C6A 6F4C           07936 MOVWF  x4C
3C6C C44D F003      07937 MOVFF  44D,03
3C70 514C           07938 MOVF   x4C,W
3C72 0100           07939 MOVLB  0
3C74 ECEB F010      07940 CALL   21D6
3C78 6E00           07941 MOVWF  00
3C7A 0009           07942 TBLRD*+
3C7C CFF5 F001      07943 MOVFF  FF5,01
3C80 0009           07944 TBLRD*+
3C82 CFF5 F002      07945 MOVFF  FF5,02
3C86 0009           07946 TBLRD*+
3C88 CFF5 F003      07947 MOVFF  FF5,03
3C8C C001 F44F      07948 MOVFF  01,44F
3C90 CFE8 F44E      07949 MOVFF  FE8,44E
3C94 0104           07950 MOVLB  4
3C96 3400           07951 RLCF   00,W
3C98 6E00           07952 MOVWF  00
3C9A 3401           07953 RLCF   01,W
3C9C 6E01           07954 MOVWF  01
3C9E 3402           07955 RLCF   02,W
3CA0 6E01           07956 MOVWF  01
3CA2 3403           07957 RLCF   03,W
3CA4 6E01           07958 MOVWF  01
3CA6 3600           07959 RLCF   00,F
3CA8 3601           07960 RLCF   01,F
3CAA 3601           07961 RLCF   01,F
3CAC 3601           07962 RLCF   01,F
3CAE 0EFC           07963 MOVLW  FC
3CB0 1600           07964 ANDWF  00,F
3CB2 50C2           07965 MOVF   FC2,W
3CB4 0B83           07966 ANDLW  83
3CB6 1000           07967 IORWF  00,W
3CB8 6EC2           07968 MOVWF  FC2
3D5E 514A           07969 MOVF   x4A,W
3D60 0D07           07970 MULLW  07
3D62 50F3           07971 MOVF   FF3,W
3D64 6B4D           07972 CLRF   x4D
3D66 6F4C           07973 MOVWF  x4C
3D68 C44D F003      07974 MOVFF  44D,03
3D6C 514C           07975 MOVF   x4C,W
3D6E 0100           07976 MOVLB  0
3D70 ECEB F010      07977 CALL   21D6
3D74 6E00           07978 MOVWF  00
3D76 0009           07979 TBLRD*+
3D78 CFF5 F001      07980 MOVFF  FF5,01
3D7C 0009           07981 TBLRD*+
3D7E CFF5 F002      07982 MOVFF  FF5,02
3D82 0009           07983 TBLRD*+
3D84 CFF5 F003      07984 MOVFF  FF5,03
3D88 C001 F44F      07985 MOVFF  01,44F
3D8C CFE8 F44E      07986 MOVFF  FE8,44E
3D90 0104           07987 MOVLB  4
3D92 3400           07988 RLCF   00,W
3D94 6E00           07989 MOVWF  00
3D96 3401           07990 RLCF   01,W
3D98 6E01           07991 MOVWF  01
3D9A 3402           07992 RLCF   02,W
3D9C 6E01           07993 MOVWF  01
3D9E 3403           07994 RLCF   03,W
3DA0 6E01           07995 MOVWF  01
3DA2 3600           07996 RLCF   00,F
3DA4 3601           07997 RLCF   01,F
3DA6 3601           07998 RLCF   01,F
3DA8 3601           07999 RLCF   01,F
3DAA 0EFC           08000 MOVLW  FC
3DAC 1600           08001 ANDWF  00,F
3DAE 50C2           08002 MOVF   FC2,W
3DB0 0B83           08003 ANDLW  83
3DB2 1000           08004 IORWF  00,W
3DB4 6EC2           08005 MOVWF  FC2
3DEA 514A           08006 MOVF   x4A,W
3DEC 0D07           08007 MULLW  07
3DEE 50F3           08008 MOVF   FF3,W
3DF0 6B4D           08009 CLRF   x4D
3DF2 6F4C           08010 MOVWF  x4C
3DF4 C44D F003      08011 MOVFF  44D,03
3DF8 514C           08012 MOVF   x4C,W
3DFA 0100           08013 MOVLB  0
3DFC ECEB F010      08014 CALL   21D6
3E00 6E00           08015 MOVWF  00
3E02 0009           08016 TBLRD*+
3E04 CFF5 F001      08017 MOVFF  FF5,01
3E08 0009           08018 TBLRD*+
3E0A CFF5 F002      08019 MOVFF  FF5,02
3E0E 0009           08020 TBLRD*+
3E10 CFF5 F003      08021 MOVFF  FF5,03
3E14 C001 F44F      08022 MOVFF  01,44F
3E18 CFE8 F44E      08023 MOVFF  FE8,44E
3E1C 0104           08024 MOVLB  4
3E1E 3400           08025 RLCF   00,W
3E20 6E00           08026 MOVWF  00
3E22 3401           08027 RLCF   01,W
3E24 6E01           08028 MOVWF  01
3E26 3402           08029 RLCF   02,W
3E28 6E01           08030 MOVWF  01
3E2A 3403           08031 RLCF   03,W
3E2C 6E01           08032 MOVWF  01
3E2E 3600           08033 RLCF   00,F
3E30 3601           08034 RLCF   01,F
3E32 3601           08035 RLCF   01,F
3E34 3601           08036 RLCF   01,F
3E36 0EFC           08037 MOVLW  FC
3E38 1600           08038 ANDWF  00,F
3E3A 50C2           08039 MOVF   FC2,W
3E3C 0B83           08040 ANDLW  83
3E3E 1000           08041 IORWF  00,W
3E40 6EC2           08042 MOVWF  FC2
5E62 514A           08043 MOVF   x4A,W
5E64 0D07           08044 MULLW  07
5E66 50F3           08045 MOVF   FF3,W
5E68 6B4D           08046 CLRF   x4D
5E6A 6F4C           08047 MOVWF  x4C
5E6C C44D F003      08048 MOVFF  44D,03
5E70 514C           08049 MOVF   x4C,W
5E72 0100           08050 MOVLB  0
5E74 ECEB F010      08051 CALL   21D6
5E78 6E00           08052 MOVWF  00
5E7A 0009           08053 TBLRD*+
5E7C CFF5 F001      08054 MOVFF  FF5,01
5E80 0009           08055 TBLRD*+
5E82 CFF5 F002      08056 MOVFF  FF5,02
5E86 0009           08057 TBLRD*+
5E88 CFF5 F003      08058 MOVFF  FF5,03
5E8C C001 F44F      08059 MOVFF  01,44F
5E90 CFE8 F44E      08060 MOVFF  FE8,44E
5E94 0104           08061 MOVLB  4
5E96 3400           08062 RLCF   00,W
5E98 6E00           08063 MOVWF  00
5E9A 3401           08064 RLCF   01,W
5E9C 6E01           08065 MOVWF  01
5E9E 3402           08066 RLCF   02,W
5EA0 6E01           08067 MOVWF  01
5EA2 3403           08068 RLCF   03,W
5EA4 6E01           08069 MOVWF  01
5EA6 3600           08070 RLCF   00,F
5EA8 3601           08071 RLCF   01,F
5EAA 3601           08072 RLCF   01,F
5EAC 3601           08073 RLCF   01,F
5EAE 0EFC           08074 MOVLW  FC
5EB0 1600           08075 ANDWF  00,F
5EB2 50C2           08076 MOVF   FC2,W
5EB4 0B83           08077 ANDLW  83
5EB6 1000           08078 IORWF  00,W
5EB8 6EC2           08079 MOVWF  FC2
5F5E 514A           08080 MOVF   x4A,W
5F60 0D07           08081 MULLW  07
5F62 50F3           08082 MOVF   FF3,W
5F64 6B4D           08083 CLRF   x4D
5F66 6F4C           08084 MOVWF  x4C
5F68 C44D F003      08085 MOVFF  44D,03
5F6C 514C           08086 MOVF   x4C,W
5F6E 0100           08087 MOVLB  0
5F70 ECEB F010      08088 CALL   21D6
5F74 6E00           08089 MOVWF  00
5F76 0009           08090 TBLRD*+
5F78 CFF5 F001      08091 MOVFF  FF5,01
5F7C 0009           08092 TBLRD*+
5F7E CFF5 F002      08093 MOVFF  FF5,02
5F82 0009           08094 TBLRD*+
5F84 CFF5 F003      08095 MOVFF  FF5,03
5F88 C001 F44F      08096 MOVFF  01,44F
5F8C CFE8 F44E      08097 MOVFF  FE8,44E
5F90 0104           08098 MOVLB  4
5F92 3400           08099 RLCF   00,W
5F94 6E00           08100 MOVWF  00
5F96 3401           08101 RLCF   01,W
5F98 6E01           08102 MOVWF  01
5F9A 3402           08103 RLCF   02,W
5F9C 6E01           08104 MOVWF  01
5F9E 3403           08105 RLCF   03,W
5FA0 6E01           08106 MOVWF  01
5FA2 3600           08107 RLCF   00,F
5FA4 3601           08108 RLCF   01,F
5FA6 3601           08109 RLCF   01,F
5FA8 3601           08110 RLCF   01,F
5FAA 0EFC           08111 MOVLW  FC
5FAC 1600           08112 ANDWF  00,F
5FAE 50C2           08113 MOVF   FC2,W
5FB0 0B83           08114 ANDLW  83
5FB2 1000           08115 IORWF  00,W
5FB4 6EC2           08116 MOVWF  FC2
5FEA 514A           08117 MOVF   x4A,W
5FEC 0D07           08118 MULLW  07
5FEE 50F3           08119 MOVF   FF3,W
5FF0 6B4D           08120 CLRF   x4D
5FF2 6F4C           08121 MOVWF  x4C
5FF4 C44D F003      08122 MOVFF  44D,03
5FF8 514C           08123 MOVF   x4C,W
5FFA 0100           08124 MOVLB  0
5FFC ECEB F010      08125 CALL   21D6
6000 6E00           08126 MOVWF  00
6002 0009           08127 TBLRD*+
6004 CFF5 F001      08128 MOVFF  FF5,01
6008 0009           08129 TBLRD*+
600A CFF5 F002      08130 MOVFF  FF5,02
600E 0009           08131 TBLRD*+
6010 CFF5 F003      08132 MOVFF  FF5,03
6014 C001 F44F      08133 MOVFF  01,44F
6018 CFE8 F44E      08134 MOVFF  FE8,44E
601C 0104           08135 MOVLB  4
601E 3400           08136 RLCF   00,W
6020 6E00           08137 MOVWF  00
6022 3401           08138 RLCF   01,W
6024 6E01           08139 MOVWF  01
6026 3402           08140 RLCF   02,W
6028 6E01           08141 MOVWF  01
602A 3403           08142 RLCF   03,W
602C 6E01           08143 MOVWF  01
602E 3600           08144 RLCF   00,F
6030 3601           08145 RLCF   01,F
6032 3601           08146 RLCF   01,F
6034 3601           08147 RLCF   01,F
6036 0EFC           08148 MOVLW  FC
6038 1600           08149 ANDWF  00,F
603A 50C2           08150 MOVF   FC2,W
603C 0B83           08151 ANDLW  83
603E 1000           08152 IORWF  00,W
6040 6EC2           08153 MOVWF  FC2
61F6 514A           08154 MOVF   x4A,W
61F8 0D07           08155 MULLW  07
61FA 50F3           08156 MOVF   FF3,W
61FC 6B4D           08157 CLRF   x4D
61FE 6F4C           08158 MOVWF  x4C
6200 C44D F003      08159 MOVFF  44D,03
6204 514C           08160 MOVF   x4C,W
6206 0100           08161 MOVLB  0
6208 ECEB F010      08162 CALL   21D6
620C 6E00           08163 MOVWF  00
620E 0009           08164 TBLRD*+
6210 CFF5 F001      08165 MOVFF  FF5,01
6214 0009           08166 TBLRD*+
6216 CFF5 F002      08167 MOVFF  FF5,02
621A 0009           08168 TBLRD*+
621C CFF5 F003      08169 MOVFF  FF5,03
6220 C001 F44F      08170 MOVFF  01,44F
6224 CFE8 F44E      08171 MOVFF  FE8,44E
6228 0104           08172 MOVLB  4
622A 3400           08173 RLCF   00,W
622C 6E00           08174 MOVWF  00
622E 3401           08175 RLCF   01,W
6230 6E01           08176 MOVWF  01
6232 3402           08177 RLCF   02,W
6234 6E01           08178 MOVWF  01
6236 3403           08179 RLCF   03,W
6238 6E01           08180 MOVWF  01
623A 3600           08181 RLCF   00,F
623C 3601           08182 RLCF   01,F
623E 3601           08183 RLCF   01,F
6240 3601           08184 RLCF   01,F
6242 0EFC           08185 MOVLW  FC
6244 1600           08186 ANDWF  00,F
6246 50C2           08187 MOVF   FC2,W
6248 0B83           08188 ANDLW  83
624A 1000           08189 IORWF  00,W
624C 6EC2           08190 MOVWF  FC2
62A4 514A           08191 MOVF   x4A,W
62A6 0D07           08192 MULLW  07
62A8 50F3           08193 MOVF   FF3,W
62AA 6B4D           08194 CLRF   x4D
62AC 6F4C           08195 MOVWF  x4C
62AE C44D F003      08196 MOVFF  44D,03
62B2 514C           08197 MOVF   x4C,W
62B4 0100           08198 MOVLB  0
62B6 ECEB F010      08199 CALL   21D6
62BA 6E00           08200 MOVWF  00
62BC 0009           08201 TBLRD*+
62BE CFF5 F001      08202 MOVFF  FF5,01
62C2 0009           08203 TBLRD*+
62C4 CFF5 F002      08204 MOVFF  FF5,02
62C8 0009           08205 TBLRD*+
62CA CFF5 F003      08206 MOVFF  FF5,03
62CE C001 F44F      08207 MOVFF  01,44F
62D2 CFE8 F44E      08208 MOVFF  FE8,44E
62D6 0104           08209 MOVLB  4
62D8 3400           08210 RLCF   00,W
62DA 6E00           08211 MOVWF  00
62DC 3401           08212 RLCF   01,W
62DE 6E01           08213 MOVWF  01
62E0 3402           08214 RLCF   02,W
62E2 6E01           08215 MOVWF  01
62E4 3403           08216 RLCF   03,W
62E6 6E01           08217 MOVWF  01
62E8 3600           08218 RLCF   00,F
62EA 3601           08219 RLCF   01,F
62EC 3601           08220 RLCF   01,F
62EE 3601           08221 RLCF   01,F
62F0 0EFC           08222 MOVLW  FC
62F2 1600           08223 ANDWF  00,F
62F4 50C2           08224 MOVF   FC2,W
62F6 0B83           08225 ANDLW  83
62F8 1000           08226 IORWF  00,W
62FA 6EC2           08227 MOVWF  FC2
                    08228 ....................  
                    08229 ....................  
2538 82C2           08230 BSF    FC2.1
25E6 82C2           08231 BSF    FC2.1
2FCA 82C2           08232 BSF    FC2.1
349E 82C2           08233 BSF    FC2.1
3598 82C2           08234 BSF    FC2.1
3624 82C2           08235 BSF    FC2.1
3CBA 82C2           08236 BSF    FC2.1
3DB6 82C2           08237 BSF    FC2.1
3E42 82C2           08238 BSF    FC2.1
5EBA 82C2           08239 BSF    FC2.1
5FB6 82C2           08240 BSF    FC2.1
6042 82C2           08241 BSF    FC2.1
624E 82C2           08242 BSF    FC2.1
62FC 82C2           08243 BSF    FC2.1
                    08244 ....................  
253A 914B           08245 BCF    x4B.0
253C A2C2           08246 BTFSS  FC2.1
253E 814B           08247 BSF    x4B.0
25E8 914B           08248 BCF    x4B.0
25EA A2C2           08249 BTFSS  FC2.1
25EC 814B           08250 BSF    x4B.0
2FCC 914B           08251 BCF    x4B.0
2FCE A2C2           08252 BTFSS  FC2.1
2FD0 814B           08253 BSF    x4B.0
34A0 914B           08254 BCF    x4B.0
34A2 A2C2           08255 BTFSS  FC2.1
34A4 814B           08256 BSF    x4B.0
359A 914B           08257 BCF    x4B.0
359C A2C2           08258 BTFSS  FC2.1
359E 814B           08259 BSF    x4B.0
3626 914B           08260 BCF    x4B.0
3628 A2C2           08261 BTFSS  FC2.1
362A 814B           08262 BSF    x4B.0
3CBC 914B           08263 BCF    x4B.0
3CBE A2C2           08264 BTFSS  FC2.1
3CC0 814B           08265 BSF    x4B.0
3DB8 914B           08266 BCF    x4B.0
3DBA A2C2           08267 BTFSS  FC2.1
3DBC 814B           08268 BSF    x4B.0
3E44 914B           08269 BCF    x4B.0
3E46 A2C2           08270 BTFSS  FC2.1
3E48 814B           08271 BSF    x4B.0
5EBC 914B           08272 BCF    x4B.0
5EBE A2C2           08273 BTFSS  FC2.1
5EC0 814B           08274 BSF    x4B.0
5FB8 914B           08275 BCF    x4B.0
5FBA A2C2           08276 BTFSS  FC2.1
5FBC 814B           08277 BSF    x4B.0
6044 914B           08278 BCF    x4B.0
6046 A2C2           08279 BTFSS  FC2.1
6048 814B           08280 BSF    x4B.0
6250 914B           08281 BCF    x4B.0
6252 A2C2           08282 BTFSS  FC2.1
6254 814B           08283 BSF    x4B.0
62FE 914B           08284 BCF    x4B.0
6300 A2C2           08285 BTFSS  FC2.1
6302 814B           08286 BSF    x4B.0
                    08287 ....................  
2540 B14B           08288 BTFSC  x4B.0
2542 D004           08289 BRA    254C
25EE B14B           08290 BTFSC  x4B.0
25F0 D004           08291 BRA    25FA
2FD2 B14B           08292 BTFSC  x4B.0
2FD4 D004           08293 BRA    2FDE
34A6 B14B           08294 BTFSC  x4B.0
34A8 D004           08295 BRA    34B2
35A0 B14B           08296 BTFSC  x4B.0
35A2 D004           08297 BRA    35AC
362C B14B           08298 BTFSC  x4B.0
362E D004           08299 BRA    3638
3CC2 B14B           08300 BTFSC  x4B.0
3CC4 D004           08301 BRA    3CCE
3DBE B14B           08302 BTFSC  x4B.0
3DC0 D004           08303 BRA    3DCA
3E4A B14B           08304 BTFSC  x4B.0
3E4C D004           08305 BRA    3E56
5EC2 B14B           08306 BTFSC  x4B.0
5EC4 D004           08307 BRA    5ECE
5FBE B14B           08308 BTFSC  x4B.0
5FC0 D004           08309 BRA    5FCA
604A B14B           08310 BTFSC  x4B.0
604C D004           08311 BRA    6056
6256 B14B           08312 BTFSC  x4B.0
6258 D004           08313 BRA    6262
6304 B14B           08314 BTFSC  x4B.0
6306 D004           08315 BRA    6310
                    08316 ....................  
2544 914B           08317 BCF    x4B.0
2546 A2C2           08318 BTFSS  FC2.1
2548 814B           08319 BSF    x4B.0
25F2 914B           08320 BCF    x4B.0
25F4 A2C2           08321 BTFSS  FC2.1
25F6 814B           08322 BSF    x4B.0
2FD6 914B           08323 BCF    x4B.0
2FD8 A2C2           08324 BTFSS  FC2.1
2FDA 814B           08325 BSF    x4B.0
34AA 914B           08326 BCF    x4B.0
34AC A2C2           08327 BTFSS  FC2.1
34AE 814B           08328 BSF    x4B.0
35A4 914B           08329 BCF    x4B.0
35A6 A2C2           08330 BTFSS  FC2.1
35A8 814B           08331 BSF    x4B.0
3630 914B           08332 BCF    x4B.0
3632 A2C2           08333 BTFSS  FC2.1
3634 814B           08334 BSF    x4B.0
3CC6 914B           08335 BCF    x4B.0
3CC8 A2C2           08336 BTFSS  FC2.1
3CCA 814B           08337 BSF    x4B.0
3DC2 914B           08338 BCF    x4B.0
3DC4 A2C2           08339 BTFSS  FC2.1
3DC6 814B           08340 BSF    x4B.0
3E4E 914B           08341 BCF    x4B.0
3E50 A2C2           08342 BTFSS  FC2.1
3E52 814B           08343 BSF    x4B.0
5EC6 914B           08344 BCF    x4B.0
5EC8 A2C2           08345 BTFSS  FC2.1
5ECA 814B           08346 BSF    x4B.0
5FC2 914B           08347 BCF    x4B.0
5FC4 A2C2           08348 BTFSS  FC2.1
5FC6 814B           08349 BSF    x4B.0
604E 914B           08350 BCF    x4B.0
6050 A2C2           08351 BTFSS  FC2.1
6052 814B           08352 BSF    x4B.0
625A 914B           08353 BCF    x4B.0
625C A2C2           08354 BTFSS  FC2.1
625E 814B           08355 BSF    x4B.0
6308 914B           08356 BCF    x4B.0
630A A2C2           08357 BTFSS  FC2.1
630C 814B           08358 BSF    x4B.0
                    08359 ....................  
254A D7FA           08360 BRA    2540
25F8 D7FA           08361 BRA    25EE
2FDC D7FA           08362 BRA    2FD2
34B0 D7FA           08363 BRA    34A6
35AA D7FA           08364 BRA    35A0
3636 D7FA           08365 BRA    362C
3CCC D7FA           08366 BRA    3CC2
3DC8 D7FA           08367 BRA    3DBE
3E54 D7FA           08368 BRA    3E4A
5ECC D7FA           08369 BRA    5EC2
5FC8 D7FA           08370 BRA    5FBE
6054 D7FA           08371 BRA    604A
6260 D7FA           08372 BRA    6256
630E D7FA           08373 BRA    6304
                    08374 ....................  
254C B2C2           08375 BTFSC  FC2.1
254E D7FE           08376 BRA    254C
2550 CFC4 F003      08377 MOVFF  FC4,03
2554 CFC3 F000      08378 MOVFF  FC3,00
2558 CFC4 F001      08379 MOVFF  FC4,01
255C 6A02           08380 CLRF   02
255E 6A03           08381 CLRF   03
25FA B2C2           08382 BTFSC  FC2.1
25FC D7FE           08383 BRA    25FA
25FE CFC4 F003      08384 MOVFF  FC4,03
2602 CFC3 F000      08385 MOVFF  FC3,00
2606 CFC4 F001      08386 MOVFF  FC4,01
260A 6A02           08387 CLRF   02
260C 6A03           08388 CLRF   03
2FDE B2C2           08389 BTFSC  FC2.1
2FE0 D7FE           08390 BRA    2FDE
2FE2 CFC4 F003      08391 MOVFF  FC4,03
2FE6 CFC3 F000      08392 MOVFF  FC3,00
2FEA CFC4 F001      08393 MOVFF  FC4,01
2FEE 6A02           08394 CLRF   02
2FF0 6A03           08395 CLRF   03
34B2 B2C2           08396 BTFSC  FC2.1
34B4 D7FE           08397 BRA    34B2
34B6 CFC4 F003      08398 MOVFF  FC4,03
34BA CFC3 F000      08399 MOVFF  FC3,00
34BE CFC4 F001      08400 MOVFF  FC4,01
34C2 6A02           08401 CLRF   02
34C4 6A03           08402 CLRF   03
35AC B2C2           08403 BTFSC  FC2.1
35AE D7FE           08404 BRA    35AC
35B0 CFC4 F003      08405 MOVFF  FC4,03
35B4 CFC3 F000      08406 MOVFF  FC3,00
35B8 CFC4 F001      08407 MOVFF  FC4,01
35BC 6A02           08408 CLRF   02
35BE 6A03           08409 CLRF   03
3638 B2C2           08410 BTFSC  FC2.1
363A D7FE           08411 BRA    3638
363C CFC4 F003      08412 MOVFF  FC4,03
3640 CFC3 F000      08413 MOVFF  FC3,00
3644 CFC4 F001      08414 MOVFF  FC4,01
3648 6A02           08415 CLRF   02
364A 6A03           08416 CLRF   03
3CCE B2C2           08417 BTFSC  FC2.1
3CD0 D7FE           08418 BRA    3CCE
3CD2 CFC4 F003      08419 MOVFF  FC4,03
3CD6 CFC3 F000      08420 MOVFF  FC3,00
3CDA CFC4 F001      08421 MOVFF  FC4,01
3CDE 6A02           08422 CLRF   02
3CE0 6A03           08423 CLRF   03
3DCA B2C2           08424 BTFSC  FC2.1
3DCC D7FE           08425 BRA    3DCA
3DCE CFC4 F003      08426 MOVFF  FC4,03
3DD2 CFC3 F000      08427 MOVFF  FC3,00
3DD6 CFC4 F001      08428 MOVFF  FC4,01
3DDA 6A02           08429 CLRF   02
3DDC 6A03           08430 CLRF   03
3E56 B2C2           08431 BTFSC  FC2.1
3E58 D7FE           08432 BRA    3E56
3E5A CFC4 F003      08433 MOVFF  FC4,03
3E5E CFC3 F000      08434 MOVFF  FC3,00
3E62 CFC4 F001      08435 MOVFF  FC4,01
3E66 6A02           08436 CLRF   02
3E68 6A03           08437 CLRF   03
5ECE B2C2           08438 BTFSC  FC2.1
5ED0 D7FE           08439 BRA    5ECE
5ED2 CFC4 F003      08440 MOVFF  FC4,03
5ED6 CFC3 F000      08441 MOVFF  FC3,00
5EDA CFC4 F001      08442 MOVFF  FC4,01
5EDE 6A02           08443 CLRF   02
5EE0 6A03           08444 CLRF   03
5FCA B2C2           08445 BTFSC  FC2.1
5FCC D7FE           08446 BRA    5FCA
5FCE CFC4 F003      08447 MOVFF  FC4,03
5FD2 CFC3 F000      08448 MOVFF  FC3,00
5FD6 CFC4 F001      08449 MOVFF  FC4,01
5FDA 6A02           08450 CLRF   02
5FDC 6A03           08451 CLRF   03
6056 B2C2           08452 BTFSC  FC2.1
6058 D7FE           08453 BRA    6056
605A CFC4 F003      08454 MOVFF  FC4,03
605E CFC3 F000      08455 MOVFF  FC3,00
6062 CFC4 F001      08456 MOVFF  FC4,01
6066 6A02           08457 CLRF   02
6068 6A03           08458 CLRF   03
6262 B2C2           08459 BTFSC  FC2.1
6264 D7FE           08460 BRA    6262
6266 CFC4 F003      08461 MOVFF  FC4,03
626A CFC3 F000      08462 MOVFF  FC3,00
626E CFC4 F001      08463 MOVFF  FC4,01
6272 6A02           08464 CLRF   02
6274 6A03           08465 CLRF   03
6310 B2C2           08466 BTFSC  FC2.1
6312 D7FE           08467 BRA    6310
6314 CFC4 F003      08468 MOVFF  FC4,03
6318 CFC3 F000      08469 MOVFF  FC3,00
631C CFC4 F001      08470 MOVFF  FC4,01
6320 6A02           08471 CLRF   02
6322 6A03           08472 CLRF   03
                    08473 ....................  
                    08474 ....................  
                    08475 ....................  
                    08476 ....................  
                    08477 ....................  
                    08478 ....................  
                    08479 ....................  
                    08480 ....................  
                    08481 ....................  
                    08482 ....................  
                    08483 ....................  
                    08484 .................... #include <18F45K22.h> 
                    08485 .................... //////// Standard Header file for the PIC18F45K22 device //////////////// 
                    08486 .................... #device PIC18F45K22 
                    09087 .................... #list 
                    09088 ....................  
                    09089 .................... #device adc=10 
                    09090 .................... #device pass_strings=in_ram 
                    09091 ....................  
                    09092 .................... #define LOADER_END 0x1FFF 
                    09093 .................... #include <boot.h> 
                    09094 .................... #undef LOADER_END 
                    09095 .................... #define FLASH_SIZE getenv("FLASH_ERASE_SIZE") 
                    09096 .................... #define LOADER_END   0x1FFF 
                    09097 .................... #define LOADER_SIZE  0x3FF 
                    09098 ....................  
                    09099 .................... #ifndef _bootloader 
                    09100 .................... #build(reset=LOADER_END+1, interrupt=LOADER_END+9) 
                    09101 ....................  
                    09102 .................... /* when in operational software, keep out of the bootloader sections */ 
                    09103 .................... #org 0, 0xfff {} 
                    09104 .................... #org 0x1000, 0x1ffe {} 
                    09105 ....................  
                    09106 .................... #else 
                    09107 ....................  
                    09108 .................... /* when in the bootloader, keep out of the operational sections */ 
                    09109 .................... #org 0x2000, 0x7ffe {} 
                    09110 ....................  
                    09111 .................... #endif 
                    09112 ....................  
                    09113 ....................  
                    09114 .................... #FUSES NOWDT                   //No Watch Dog Timer 
                    09115 .................... #FUSES WDT128                  //Watch Dog Timer uses 1:128 Postscale 
                    09116 .................... #FUSES INTRC_IO                //Internal RC Osc, no CLKOUT 
                    09117 .................... #FUSES NOBROWNOUT              //No brownout reset 
                    09118 .................... #FUSES WDT_SW                  //No Watch Dog Timer, enabled in Software 
                    09119 .................... #FUSES NOLVP                   //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
                    09120 .................... #FUSES NOPUT 
                    09121 .................... #FUSES NOXINST                 //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
                    09122 ....................  
                    09123 .................... #use delay(clock=64000000) 
                    09124 .................... #use rs232(baud=921600,xmit=PIN_C6,rcv=PIN_C7,ERRORS) 
                    09125 .................... #USE TIMER(TIMER=1,TICK=1us,BITS=32,NOISR) 
                    09126 .................... #use spi(DO=PIN_A4, CLK=PIN_A3, ENABLE=PIN_A2, ENABLE_ACTIVE=0, DATA_HOLD=20, BITS=16) 
                    09127 ....................  
                    09128 .................... #opt 9 
                    09129 ....................  
                    09130 .................... #use fast_io(a) 
                    09131 .................... #use fast_io(b) 
                    09132 .................... #use fast_io(c) 
                    09133 .................... #use fast_io(d) 
                    09134 .................... #use fast_io(e) 
                    09135 ....................  
                    09136 .................... #define safe_write_program_memory(address, pointer, size) \ 
                    09137 ....................   do { disable_interrupts(GLOBAL); write_program_memory(address, pointer, size); enable_interrupts(GLOBAL); delay_us(1000); } while (0) 
                    09138 ....................  
                    09139 ....................  
                    09140 ....................  
                    09141 ....................  
                    09142 .................... //////////////////////////////////////////////////////////////////////////// 
                    09143 .................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
                    09144 .................... //// This source code may only be used by licensed users of the CCS C   //// 
                    09145 .................... //// compiler.  This source code may only be distributed to other       //// 
                    09146 .................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
                    09147 .................... //// or distribution is permitted without written permission.           //// 
                    09148 .................... //// Derivative programs created using this software in object code     //// 
                    09149 .................... //// form are not restricted in any way.                                //// 
                    09150 .................... //////////////////////////////////////////////////////////////////////////// 
                    09151 ....................  
                    09152 .................... #ifndef _STRING 
                    09153 .................... #define _STRING 
                    09154 .................... #include <stddef.h> 
                    09155 .................... /////////////////////////////////////////////////////////////////////////// 
                    09156 .................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
                    09157 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    09158 .................... //// compiler.  This source code may only be distributed to other      //// 
                    09159 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    09160 .................... //// or distribution is permitted without written permission.          //// 
                    09161 .................... //// Derivative programs created using this software in object code    //// 
                    09162 .................... //// form are not restricted in any way.                               //// 
                    09163 .................... /////////////////////////////////////////////////////////////////////////// 
                    09164 ....................  
                    09165 .................... #ifndef _STDDEF 
                    09166 ....................  
                    09167 .................... #define _STDDEF 
                    09168 ....................  
                    09169 .................... #if sizeof(unsigned int8 *)==1 
                    09170 .................... #define ptrdiff_t unsigned int8 
                    09171 .................... #else 
                    09172 .................... #define ptrdiff_t unsigned int16 
                    09173 .................... #endif 
                    09174 ....................  
                    09175 .................... #if defined(__PCB__) 
                    09176 .................... #define size_t unsigned int8 
                    09177 .................... #else 
                    09178 .................... #define size_t unsigned int16 
                    09179 .................... #endif 
                    09180 .................... #define wchar_t char 
                    09181 .................... #define NULL 0 
                    09182 ....................  
                    09183 .................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
                    09184 ....................  
                    09185 .................... #endif 
                    09186 ....................  
                    09187 .................... #include <ctype.h> 
                    09188 .................... //////////////////////////////////////////////////////////////////////////// 
                    09189 .................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
                    09190 .................... //// This source code may only be used by licensed users of the CCS C   //// 
                    09191 .................... //// compiler.  This source code may only be distributed to other       //// 
                    09192 .................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
                    09193 .................... //// or distribution is permitted without written permission.           //// 
                    09194 .................... //// Derivative programs created using this software in object code     //// 
                    09195 .................... //// form are not restricted in any way.                                //// 
                    09196 .................... //////////////////////////////////////////////////////////////////////////// 
                    09197 ....................  
                    09198 .................... #ifndef _CTYPE 
                    09199 .................... #define _CTYPE 
                    09200 ....................  
                    09201 .................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
                    09202 .................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
                    09203 .................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
                    09204 .................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
                    09205 .................... #define isdigit(x)  isamong(x,"0123456789") 
                    09206 .................... #define isspace(x)  ((x)==' ') 
                    09207 .................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
                    09208 .................... #define iscntrl(x)  ((x)<' ') 
                    09209 .................... #define isprint(x)  ((x)>=' ') 
                    09210 .................... #define isgraph(x)  ((x)>' ') 
                    09211 .................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
                    09212 ....................  
                    09213 .................... #endif 
                    09214 ....................  
                    09215 ....................  
                    09216 ....................  
                    09217 ....................  
                    09218 ....................  
                    09219 .................... ////////////////////////////////////////////// 
                    09220 .................... //// Uncomment the following define to    //// 
                    09221 .................... //// allow some functions to use a        //// 
                    09222 .................... //// quicker algorithm, but use more ROM  //// 
                    09223 .................... ////                                      //// 
                    09224 .................... //// #define FASTER_BUT_MORE_ROM          //// 
                    09225 .................... ////////////////////////////////////////////// 
                    09226 ....................  
                    09227 ....................  
                    09228 ....................  
                    09229 .................... /*Copying functions*/ 
                    09230 .................... /* standard template: 
                    09231 ....................    void *memmove(void *s1, void *s2, size_t n). 
                    09232 ....................    Copies max of n characters safely (not following ending '\0') 
                    09233 ....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
                    09234 ....................  
                    09235 .................... char *memmove(void *s1,char *s2,size_t n) 
                    09236 .................... { 
                    09237 ....................    char *sc1; 
                    09238 ....................    char *sc2; 
                    09239 ....................    sc1=s1; 
                    09240 ....................    sc2=s2; 
                    09241 ....................    if(sc2<sc1 && sc1 <sc2 +n) 
                    09242 ....................       for(sc1+=n,sc2+=n;0<n;--n) 
                    09243 ....................          *--sc1=*--sc2; 
                    09244 ....................    else 
                    09245 ....................       for(;0<n;--n) 
                    09246 ....................          *sc1++=*sc2++; 
                    09247 ....................   return s1; 
                    09248 ....................   } 
                    09249 ....................  
                    09250 .................... /* Standard template: char *strcpy(char *s1, const char *s2) 
                    09251 ....................    copies the string s2 including the null character to s1. 
                    09252 ....................    This is a compiler built in to handle the different address 
                    09253 ....................    spaces */ 
                    09254 ....................  
                    09255 .................... #define strcopy strcpy 
                    09256 ....................  
                    09257 .................... /* standard template: 
                    09258 ....................    char *strncpy(char *s1, const char *s2, size_t n). 
                    09259 ....................    Copies max of n characters (not following ending '\0') 
                    09260 ....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
                    09261 ....................  
                    09262 .................... char *strncpy(char *s1, char *s2, size_t n) 
                    09263 .................... { 
                    09264 ....................   char *s; 
                    09265 ....................  
                    09266 ....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
                    09267 ....................      *s++ = *s2++; 
                    09268 ....................   for (; n > 0; n--) 
                    09269 ....................      *s++ = '\0'; 
                    09270 ....................  
                    09271 ....................   return(s1); 
                    09272 .................... } 
                    09273 .................... /***********************************************************/ 
                    09274 ....................  
                    09275 .................... /*concatenation functions*/ 
                    09276 .................... /* standard template: char *strcat(char *s1, const char *s2) 
                    09277 .................... appends s2 to s1*/ 
                    09278 ....................  
                    09279 .................... char *strcat(char *s1, char *s2) 
                    09280 .................... { 
                    09281 ....................    char *s; 
                    09282 ....................  
                    09283 ....................    for (s = s1; *s != '\0'; ++s); 
                    09284 ....................    while(*s2 != '\0') 
                    09285 ....................    { 
                    09286 ....................       *s = *s2; 
                    09287 ....................       ++s; 
                    09288 ....................       ++s2; 
                    09289 ....................    } 
                    09290 ....................  
                    09291 ....................    *s = '\0'; 
                    09292 ....................    return(s1); 
                    09293 .................... } 
                    09294 .................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
                    09295 .................... appends not more than n characters from s2 to s1*/ 
                    09296 ....................  
                    09297 .................... char *strncat(char *s1, char *s2, size_t n) 
                    09298 .................... { 
                    09299 ....................    char *s; 
                    09300 ....................  
                    09301 ....................    for (s = s1; *s != '\0'; ++s); 
                    09302 ....................    while(*s2 != '\0' && 0<n) 
                    09303 ....................    { 
                    09304 ....................       *s = *s2; 
                    09305 ....................       ++s; 
                    09306 ....................       ++s2; 
                    09307 ....................       --n; 
                    09308 ....................    } 
                    09309 ....................  
                    09310 ....................    *s = '\0'; 
                    09311 ....................    return(s1); 
                    09312 .................... } 
                    09313 ....................  
                    09314 .................... /***********************************************************/ 
                    09315 ....................  
                    09316 ....................  
                    09317 .................... /*comparison functions*/ 
                    09318 .................... /* standard template: signed int memcmp(void *s1, void *s2). 
                    09319 ....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
                    09320 ....................  
                    09321 .................... signed int8 memcmp(void * s1,char *s2,size_t n) 
                    09322 .................... { 
                    09323 .................... char *su1, *su2; 
                    09324 .................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
                    09325 .................... { 
                    09326 ....................    if(*su1!=*su2) 
                    09327 ....................       return ((*su1<*su2)?-1:+1); 
                    09328 .................... } 
                    09329 .................... return 0; 
                    09330 .................... } 
                    09331 ....................  
                    09332 .................... /* standard template: int strcmp(const char *s1, const char *s2). 
                    09333 ....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
                    09334 ....................  
                    09335 .................... signed int8 strcmp(char *s1, char *s2) 
                    09336 .................... { 
                    09337 ....................    for (; *s1 == *s2; s1++, s2++) 
                    09338 ....................       if (*s1 == '\0') 
                    09339 ....................          return(0); 
                    09340 ....................    return((*s1 < *s2) ? -1: 1); 
                    09341 .................... } 
                    09342 .................... /* standard template: int strcoll(const char *s1, const char *s2). 
                    09343 ....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
                    09344 ....................  
                    09345 .................... signed int8 strcoll(char *s1, char *s2) 
                    09346 .................... { 
                    09347 ....................    for (; *s1 == *s2; s1++, s2++) 
                    09348 ....................       if (*s1 == '\0') 
                    09349 ....................          return(0); 
                    09350 ....................    return((*s1 < *s2) ? -1: 1); 
                    09351 .................... } 
                    09352 ....................  
                    09353 .................... /* standard template: 
                    09354 ....................    int strncmp(const char *s1, const char *s2, size_t n). 
                    09355 ....................    Compares max of n characters (not following 0) from s1 to s2; 
                    09356 ....................    returns same as strcmp */ 
                    09357 ....................  
                    09358 .................... signed int8 strncmp(char *s1, char *s2, size_t n) 
                    09359 .................... { 
                    09360 ....................    for (; n > 0; s1++, s2++, n--) 
                    09361 ....................       if (*s1 != *s2) 
                    09362 ....................          return((*s1 <*s2) ? -1: 1); 
                    09363 ....................       else if (*s1 == '\0') 
                    09364 ....................          return(0); 
                    09365 ....................    return(0); 
                    09366 .................... } 
                    09367 .................... /* standard template: 
                    09368 ....................    int strxfrm(const char *s1, const char *s2, size_t n). 
                    09369 ....................    transforms maximum of n characters from s2 and places them into s1*/ 
                    09370 .................... size_t strxfrm(char *s1, char *s2, size_t n) 
                    09371 .................... { 
                    09372 ....................   char *s; 
                    09373 ....................   unsigned int8 n1; 
                    09374 ....................   n1=n; 
                    09375 ....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
                    09376 ....................      *s++ = *s2++; 
                    09377 ....................   for (; n > 0; n--) 
                    09378 ....................      *s++ = '\0'; 
                    09379 ....................  
                    09380 ....................   return(n1); 
                    09381 .................... } 
                    09382 ....................  
                    09383 ....................  
                    09384 ....................  
                    09385 ....................  
                    09386 ....................  
                    09387 .................... /***********************************************************/ 
                    09388 .................... /*Search functions*/ 
                    09389 .................... /* standard template: void *memchr(const char *s, int c). 
                    09390 ....................    Finds first occurrence of c in n characters of s */ 
                    09391 ....................  
                    09392 .................... char *memchr(void *s,unsigned int8 c,size_t n) 
                    09393 .................... { 
                    09394 ....................    char uc; 
                    09395 ....................    char *su; 
                    09396 ....................    uc=c; 
                    09397 ....................    for(su=s;0<n;++su,--n) 
                    09398 ....................       if(*su==uc) 
                    09399 ....................       return su; 
                    09400 ....................    return NULL; 
                    09401 .................... } 
                    09402 ....................  
                    09403 .................... /* standard template: char *strchr(const char *s, int c). 
                    09404 ....................    Finds first occurrence of c in s */ 
                    09405 ....................  
                    09406 .................... char *strchr(char *s, unsigned int8 c) 
                    09407 .................... { 
                    09408 ....................    for (; *s != c; s++) 
                    09409 ....................       if (*s == '\0') 
                    09410 ....................          return(0); 
                    09411 ....................    return(s); 
                    09412 .................... } 
                    09413 .................... /* standard template: 
                    09414 ....................    size_t strcspn(const char *s1, const char *s2). 
                    09415 ....................    Computes length of max initial segment of s1 that 
                    09416 ....................    consists entirely of characters NOT from s2*/ 
                    09417 ....................  
                    09418 .................... unsigned int8  strcspn(char *s1, char *s2) 
                    09419 .................... { 
                    09420 ....................    char *sc1, *sc2; 
                    09421 ....................  
                    09422 ....................    for (sc1 = s1; *sc1 != 0; sc1++) 
                    09423 ....................       for (sc2 = s2; *sc2 != 0; sc2++) 
                    09424 ....................          if (*sc1 == *sc2) 
                    09425 ....................             return(sc1 - s1); 
                    09426 ....................    return(sc1 - s1); 
                    09427 .................... } 
                    09428 .................... /* standard template: 
                    09429 ....................    char *strpbrk(const char *s1, const char *s2). 
                    09430 ....................    Locates first occurence of any character from s2 in s1; 
                    09431 ....................    returns s1 if s2 is empty string */ 
                    09432 ....................  
                    09433 .................... char *strpbrk(char *s1, char *s2) 
                    09434 .................... { 
                    09435 ....................    char *sc1, *sc2; 
                    09436 ....................  
                    09437 ....................    for (sc1 = s1; *sc1 != 0; sc1++) 
                    09438 ....................       for (sc2 = s2; *sc2 != 0; sc2++) 
                    09439 ....................          if (*sc1 == *sc2) 
                    09440 ....................             return(sc1); 
                    09441 ....................    return(0); 
                    09442 .................... } 
                    09443 ....................  
                    09444 ....................  
                    09445 .................... /* standard template: char *strrchr(const char *s, int c). 
                    09446 ....................    Finds last occurrence of c in s */ 
                    09447 ....................  
                    09448 .................... char *strrchr(char *s, unsigned int8 c) 
                    09449 .................... { 
                    09450 ....................    char *p; 
                    09451 ....................  
                    09452 ....................    for (p = 0; ; s++) 
                    09453 ....................    { 
                    09454 ....................       if (*s == c) 
                    09455 ....................          p = s; 
                    09456 ....................       if (*s == '\0') 
                    09457 ....................          return(p); 
                    09458 ....................    } 
                    09459 .................... } 
                    09460 .................... /* computes length of max initial segment of s1 consisting 
                    09461 ....................    entirely of characters from s2 */ 
                    09462 ....................  
                    09463 .................... unsigned int8  strspn(char *s1, char *s2) 
                    09464 .................... { 
                    09465 ....................    char *sc1, *sc2; 
                    09466 ....................  
                    09467 ....................    for (sc1 = s1; *sc1 != 0; sc1++) 
                    09468 ....................       for (sc2 = s2; ; sc2++) 
                    09469 ....................     if (*sc2 == '\0') 
                    09470 ....................        return(sc1 - s1); 
                    09471 ....................          else if (*sc1 == *sc2) 
                    09472 ....................             break; 
                    09473 ....................    return(sc1 - s1); 
                    09474 .................... } 
                    09475 .................... /* standard template: 
                    09476 ....................    char *strstr(const char *s1, const char *s2); 
                    09477 ....................    Locates first occurence of character sequence s2 in s1; 
                    09478 ....................    returns 0 if s2 is empty string 
                    09479 ....................  
                    09480 ....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
                    09481 ....................    file to use the faster algorithm */ 
                    09482 .................... char *strstr(char *s1, char *s2) 
                    09483 .................... { 
                    09484 ....................    char *s, *t; 
                    09485 ....................  
                    09486 ....................    #ifdef FASTER_BUT_MORE_ROM 
                    09487 ....................    if (*s2 == '\0') 
                    09488 ....................          return(s1); 
                    09489 ....................    #endif 
                    09490 ....................  
                    09491 ....................    while (*s1) 
                    09492 ....................    { 
                    09493 ....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
                    09494 ....................  
                    09495 ....................       if (*t == '\0') 
                    09496 ....................          return s1; 
                    09497 ....................       ++s1; 
                    09498 ....................       #ifdef FASTER_BUT_MORE_ROM 
                    09499 ....................          while(*s1 != '\0' && *s1 != *s2) 
                    09500 ....................             ++s1; 
                    09501 ....................       #endif 
                    09502 ....................    } 
                    09503 ....................    return 0; 
                    09504 .................... } 
                    09505 ....................  
                    09506 .................... /* standard template: char *strtok(char *s1, const char *s2). 
                    09507 ....................  
                    09508 ....................    Finds next token in s1 delimited by a character from separator 
                    09509 ....................    string s2 (which can be different from call to call).  First call 
                    09510 ....................    starts at beginning of s1 searching for first character NOT 
                    09511 ....................    contained in s2; returns 0 if none is found. 
                    09512 ....................    If one is found, it is the start of first token (return value). 
                    09513 ....................    Function then searches from there for a character contained in s2. 
                    09514 ....................    If none is found, current token extends to end of s1, and subsequent 
                    09515 ....................    searches for a token will return 0.  If one is found, it is 
                    09516 ....................    overwritten by '\0', which terminates current token.  Function saves 
                    09517 ....................    pointer to following character from which next search will start. 
                    09518 ....................    Each subsequent call, with 0 as first argument, starts searching 
                    09519 ....................    from saved pointer */ 
                    09520 ....................  
                    09521 .................... char *strtok(char *s1, char *s2) 
                    09522 .................... { 
                    09523 ....................    char *beg, *end; 
                    09524 ....................    static char *save; 
                    09525 ....................  
                    09526 ....................    beg = (s1)? s1: save; 
                    09527 ....................    beg += strspn(beg, s2); 
                    09528 ....................    if (*beg == '\0') 
                    09529 ....................    { 
                    09530 ....................       *save = ' '; 
                    09531 ....................       return(0); 
                    09532 ....................    } 
                    09533 ....................    end = strpbrk(beg, s2); 
                    09534 ....................    if (*end != '\0') 
                    09535 ....................    { 
                    09536 ....................       *end = '\0'; 
                    09537 ....................       end++; 
                    09538 ....................    } 
                    09539 ....................    save = end; 
                    09540 ....................    return(beg); 
                    09541 .................... } 
                    09542 ....................  
                    09543 .................... /*****************************************************************/ 
                    09544 .................... /*Miscellaneous functions*/ 
                    09545 .................... /* standard template 
                    09546 .................... maps error number in errnum to an error message string 
                    09547 .................... Returns: Pointer to string 
                    09548 .................... */ 
                    09549 .................... #ifdef _ERRNO 
                    09550 .................... char * strerror(unsigned int8 errnum) 
                    09551 .................... { 
                    09552 .................... static char s[13]; 
                    09553 .................... switch( errnum) 
                    09554 .................... { 
                    09555 .................... case 0: 
                    09556 ....................    strcpy(s,"no errors"); 
                    09557 ....................    return s; 
                    09558 .................... case EDOM : 
                    09559 ....................    strcpy(s,"domain error"); 
                    09560 ....................    return s; 
                    09561 .................... case ERANGE: 
                    09562 ....................    strcpy(s,"range error"); 
                    09563 ....................    return s; 
                    09564 .................... } 
                    09565 .................... } 
                    09566 .................... #ENDIF 
                    09567 .................... /* standard template: size_t strlen(const char *s). 
                    09568 ....................    Computes length of s1 (preceding terminating 0) */ 
                    09569 ....................  
                    09570 .................... unsigned int8 strlen(char *s) 
                    09571 .................... { 
                    09572 ....................    char *sc; 
                    09573 ....................  
                    09574 ....................    for (sc = s; *sc != 0; sc++); 
                    09575 ....................    return(sc - s); 
                    09576 .................... } 
                    09577 ....................  
                    09578 .................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
                    09579 ....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
                    09580 ....................  
                    09581 .................... signed int8 stricmp(char *s1, char *s2) 
                    09582 .................... { 
                    09583 ....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
                    09584 ....................     s1++, s2++) 
                    09585 ....................     if (*s1 == '\0') 
                    09586 ....................        return(0); 
                    09587 ....................  return((*s1 < *s2) ? -1: 1); 
                    09588 .................... } 
                    09589 ....................  
                    09590 ....................  
                    09591 .................... /* standard template: char *strlwr(char *s). 
                    09592 ....................    Replaces uppercase letters by lowercase; 
                    09593 ....................    returns pointer to new string s */ 
                    09594 ....................  
                    09595 .................... char *strlwr(char *s) 
                    09596 .................... { 
                    09597 ....................    char *p; 
                    09598 ....................  
                    09599 ....................    for (p = s; *p != '\0'; p++) 
                    09600 ....................       if (*p >= 'A' && *p <='Z') 
                    09601 ....................          *p += 'a' - 'A'; 
                    09602 ....................    return(s); 
                    09603 .................... } 
                    09604 ....................  
                    09605 .................... /* standard template: char *strupr(char *s). 
                    09606 ....................    Replaces lowercase letters by upercase; 
                    09607 ....................    returns pointer to new string s */ 
                    09608 ....................  
                    09609 .................... char *strupr(char *s) 
                    09610 .................... { 
                    09611 ....................    char *p; 
                    09612 ....................  
                    09613 ....................    for (p = s; *p != '\0'; p++) 
                    09614 ....................       if (*p >= 'a' && *p <='z') 
                    09615 ....................          *p -= 'a' - 'A'; 
                    09616 ....................    return(s); 
                    09617 .................... } 
                    09618 ....................  
                    09619 ....................  
                    09620 .................... /************************************************************/ 
                    09621 ....................  
                    09622 ....................  
                    09623 .................... #endif 
                    09624 ....................  
                    09625 ....................  
                    09626 .................... /////////////////////////////////////////////////////////////////////////// 
                    09627 .................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
                    09628 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    09629 .................... //// compiler.  This source code may only be distributed to other      //// 
                    09630 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    09631 .................... //// or distribution is permitted without written permission.          //// 
                    09632 .................... //// Derivative programs created using this software in object code    //// 
                    09633 .................... //// form are not restricted in any way.                               //// 
                    09634 .................... /////////////////////////////////////////////////////////////////////////// 
                    09635 ....................  
                    09636 .................... #ifndef _STDIO 
                    09637 .................... #define _STDIO 
                    09638 .................... #include <string.h> 
                    09639 .................... //////////////////////////////////////////////////////////////////////////// 
                    09640 .................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
                    09641 .................... //// This source code may only be used by licensed users of the CCS C   //// 
                    09642 .................... //// compiler.  This source code may only be distributed to other       //// 
                    09643 .................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
                    09644 .................... //// or distribution is permitted without written permission.           //// 
                    09645 .................... //// Derivative programs created using this software in object code     //// 
                    09646 .................... //// form are not restricted in any way.                                //// 
                    09647 .................... //////////////////////////////////////////////////////////////////////////// 
                    09648 ....................  
                    09649 .................... #ifndef _STRING 
                    09650 .................... #define _STRING 
                    09651 .................... #include <stddef.h> 
                    09652 .................... #include <ctype.h> 
                    09653 ....................  
                    09654 ....................  
                    09655 ....................  
                    09656 .................... ////////////////////////////////////////////// 
                    09657 .................... //// Uncomment the following define to    //// 
                    09658 .................... //// allow some functions to use a        //// 
                    09659 .................... //// quicker algorithm, but use more ROM  //// 
                    09660 .................... ////                                      //// 
                    09661 .................... //// #define FASTER_BUT_MORE_ROM          //// 
                    09662 .................... ////////////////////////////////////////////// 
                    09663 ....................  
                    09664 ....................  
                    09665 ....................  
                    09666 .................... /*Copying functions*/ 
                    09667 .................... /* standard template: 
                    09668 ....................    void *memmove(void *s1, void *s2, size_t n). 
                    09669 ....................    Copies max of n characters safely (not following ending '\0') 
                    09670 ....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
                    09671 ....................  
                    09672 .................... char *memmove(void *s1,char *s2,size_t n) 
                    09673 .................... { 
                    09674 ....................    char *sc1; 
                    09675 ....................    char *sc2; 
                    09676 ....................    sc1=s1; 
                    09677 ....................    sc2=s2; 
                    09678 ....................    if(sc2<sc1 && sc1 <sc2 +n) 
                    09679 ....................       for(sc1+=n,sc2+=n;0<n;--n) 
                    09680 ....................          *--sc1=*--sc2; 
                    09681 ....................    else 
                    09682 ....................       for(;0<n;--n) 
                    09683 ....................          *sc1++=*sc2++; 
                    09684 ....................   return s1; 
                    09685 ....................   } 
                    09686 ....................  
                    09687 .................... /* Standard template: char *strcpy(char *s1, const char *s2) 
                    09688 ....................    copies the string s2 including the null character to s1. 
                    09689 ....................    This is a compiler built in to handle the different address 
                    09690 ....................    spaces */ 
                    09691 ....................  
                    09692 .................... #define strcopy strcpy 
                    09693 ....................  
                    09694 .................... /* standard template: 
                    09695 ....................    char *strncpy(char *s1, const char *s2, size_t n). 
                    09696 ....................    Copies max of n characters (not following ending '\0') 
                    09697 ....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
                    09698 ....................  
                    09699 .................... char *strncpy(char *s1, char *s2, size_t n) 
                    09700 .................... { 
                    09701 ....................   char *s; 
                    09702 ....................  
                    09703 ....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
                    09704 ....................      *s++ = *s2++; 
                    09705 ....................   for (; n > 0; n--) 
                    09706 ....................      *s++ = '\0'; 
                    09707 ....................  
                    09708 ....................   return(s1); 
                    09709 .................... } 
                    09710 .................... /***********************************************************/ 
                    09711 ....................  
                    09712 .................... /*concatenation functions*/ 
                    09713 .................... /* standard template: char *strcat(char *s1, const char *s2) 
                    09714 .................... appends s2 to s1*/ 
                    09715 ....................  
                    09716 .................... char *strcat(char *s1, char *s2) 
                    09717 .................... { 
                    09718 ....................    char *s; 
                    09719 ....................  
                    09720 ....................    for (s = s1; *s != '\0'; ++s); 
                    09721 ....................    while(*s2 != '\0') 
                    09722 ....................    { 
                    09723 ....................       *s = *s2; 
                    09724 ....................       ++s; 
                    09725 ....................       ++s2; 
                    09726 ....................    } 
                    09727 ....................  
                    09728 ....................    *s = '\0'; 
                    09729 ....................    return(s1); 
                    09730 .................... } 
                    09731 .................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
                    09732 .................... appends not more than n characters from s2 to s1*/ 
                    09733 ....................  
                    09734 .................... char *strncat(char *s1, char *s2, size_t n) 
                    09735 .................... { 
                    09736 ....................    char *s; 
                    09737 ....................  
                    09738 ....................    for (s = s1; *s != '\0'; ++s); 
                    09739 ....................    while(*s2 != '\0' && 0<n) 
                    09740 ....................    { 
                    09741 ....................       *s = *s2; 
                    09742 ....................       ++s; 
                    09743 ....................       ++s2; 
                    09744 ....................       --n; 
                    09745 ....................    } 
                    09746 ....................  
                    09747 ....................    *s = '\0'; 
                    09748 ....................    return(s1); 
                    09749 .................... } 
                    09750 ....................  
                    09751 .................... /***********************************************************/ 
                    09752 ....................  
                    09753 ....................  
                    09754 .................... /*comparison functions*/ 
                    09755 .................... /* standard template: signed int memcmp(void *s1, void *s2). 
                    09756 ....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
                    09757 ....................  
                    09758 .................... signed int8 memcmp(void * s1,char *s2,size_t n) 
                    09759 .................... { 
                    09760 .................... char *su1, *su2; 
                    09761 .................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
                    09762 .................... { 
                    09763 ....................    if(*su1!=*su2) 
                    09764 ....................       return ((*su1<*su2)?-1:+1); 
                    09765 .................... } 
                    09766 .................... return 0; 
                    09767 .................... } 
                    09768 ....................  
                    09769 .................... /* standard template: int strcmp(const char *s1, const char *s2). 
                    09770 ....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
                    09771 ....................  
                    09772 .................... signed int8 strcmp(char *s1, char *s2) 
                    09773 .................... { 
                    09774 ....................    for (; *s1 == *s2; s1++, s2++) 
                    09775 ....................       if (*s1 == '\0') 
                    09776 ....................          return(0); 
                    09777 ....................    return((*s1 < *s2) ? -1: 1); 
                    09778 .................... } 
                    09779 .................... /* standard template: int strcoll(const char *s1, const char *s2). 
                    09780 ....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
                    09781 ....................  
                    09782 .................... signed int8 strcoll(char *s1, char *s2) 
                    09783 .................... { 
                    09784 ....................    for (; *s1 == *s2; s1++, s2++) 
                    09785 ....................       if (*s1 == '\0') 
                    09786 ....................          return(0); 
                    09787 ....................    return((*s1 < *s2) ? -1: 1); 
                    09788 .................... } 
                    09789 ....................  
                    09790 .................... /* standard template: 
                    09791 ....................    int strncmp(const char *s1, const char *s2, size_t n). 
                    09792 ....................    Compares max of n characters (not following 0) from s1 to s2; 
                    09793 ....................    returns same as strcmp */ 
                    09794 ....................  
                    09795 .................... signed int8 strncmp(char *s1, char *s2, size_t n) 
                    09796 .................... { 
                    09797 ....................    for (; n > 0; s1++, s2++, n--) 
                    09798 ....................       if (*s1 != *s2) 
                    09799 ....................          return((*s1 <*s2) ? -1: 1); 
                    09800 ....................       else if (*s1 == '\0') 
                    09801 ....................          return(0); 
                    09802 ....................    return(0); 
                    09803 .................... } 
                    09804 .................... /* standard template: 
                    09805 ....................    int strxfrm(const char *s1, const char *s2, size_t n). 
                    09806 ....................    transforms maximum of n characters from s2 and places them into s1*/ 
                    09807 .................... size_t strxfrm(char *s1, char *s2, size_t n) 
                    09808 .................... { 
                    09809 ....................   char *s; 
                    09810 ....................   unsigned int8 n1; 
                    09811 ....................   n1=n; 
                    09812 ....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
                    09813 ....................      *s++ = *s2++; 
                    09814 ....................   for (; n > 0; n--) 
                    09815 ....................      *s++ = '\0'; 
                    09816 ....................  
                    09817 ....................   return(n1); 
                    09818 .................... } 
                    09819 ....................  
                    09820 ....................  
                    09821 ....................  
                    09822 ....................  
                    09823 ....................  
                    09824 .................... /***********************************************************/ 
                    09825 .................... /*Search functions*/ 
                    09826 .................... /* standard template: void *memchr(const char *s, int c). 
                    09827 ....................    Finds first occurrence of c in n characters of s */ 
                    09828 ....................  
                    09829 .................... char *memchr(void *s,unsigned int8 c,size_t n) 
                    09830 .................... { 
                    09831 ....................    char uc; 
                    09832 ....................    char *su; 
                    09833 ....................    uc=c; 
                    09834 ....................    for(su=s;0<n;++su,--n) 
                    09835 ....................       if(*su==uc) 
                    09836 ....................       return su; 
                    09837 ....................    return NULL; 
                    09838 .................... } 
                    09839 ....................  
                    09840 .................... /* standard template: char *strchr(const char *s, int c). 
                    09841 ....................    Finds first occurrence of c in s */ 
                    09842 ....................  
                    09843 .................... char *strchr(char *s, unsigned int8 c) 
                    09844 .................... { 
                    09845 ....................    for (; *s != c; s++) 
                    09846 ....................       if (*s == '\0') 
                    09847 ....................          return(0); 
                    09848 ....................    return(s); 
                    09849 .................... } 
                    09850 .................... /* standard template: 
                    09851 ....................    size_t strcspn(const char *s1, const char *s2). 
                    09852 ....................    Computes length of max initial segment of s1 that 
                    09853 ....................    consists entirely of characters NOT from s2*/ 
                    09854 ....................  
                    09855 .................... unsigned int8  strcspn(char *s1, char *s2) 
                    09856 .................... { 
                    09857 ....................    char *sc1, *sc2; 
                    09858 ....................  
                    09859 ....................    for (sc1 = s1; *sc1 != 0; sc1++) 
                    09860 ....................       for (sc2 = s2; *sc2 != 0; sc2++) 
                    09861 ....................          if (*sc1 == *sc2) 
                    09862 ....................             return(sc1 - s1); 
                    09863 ....................    return(sc1 - s1); 
                    09864 .................... } 
                    09865 .................... /* standard template: 
                    09866 ....................    char *strpbrk(const char *s1, const char *s2). 
                    09867 ....................    Locates first occurence of any character from s2 in s1; 
                    09868 ....................    returns s1 if s2 is empty string */ 
                    09869 ....................  
                    09870 .................... char *strpbrk(char *s1, char *s2) 
                    09871 .................... { 
                    09872 ....................    char *sc1, *sc2; 
                    09873 ....................  
                    09874 ....................    for (sc1 = s1; *sc1 != 0; sc1++) 
                    09875 ....................       for (sc2 = s2; *sc2 != 0; sc2++) 
                    09876 ....................          if (*sc1 == *sc2) 
                    09877 ....................             return(sc1); 
                    09878 ....................    return(0); 
                    09879 .................... } 
                    09880 ....................  
                    09881 ....................  
                    09882 .................... /* standard template: char *strrchr(const char *s, int c). 
                    09883 ....................    Finds last occurrence of c in s */ 
                    09884 ....................  
                    09885 .................... char *strrchr(char *s, unsigned int8 c) 
                    09886 .................... { 
                    09887 ....................    char *p; 
                    09888 ....................  
                    09889 ....................    for (p = 0; ; s++) 
                    09890 ....................    { 
                    09891 ....................       if (*s == c) 
                    09892 ....................          p = s; 
                    09893 ....................       if (*s == '\0') 
                    09894 ....................          return(p); 
                    09895 ....................    } 
                    09896 .................... } 
                    09897 .................... /* computes length of max initial segment of s1 consisting 
                    09898 ....................    entirely of characters from s2 */ 
                    09899 ....................  
                    09900 .................... unsigned int8  strspn(char *s1, char *s2) 
                    09901 .................... { 
                    09902 ....................    char *sc1, *sc2; 
                    09903 ....................  
                    09904 ....................    for (sc1 = s1; *sc1 != 0; sc1++) 
                    09905 ....................       for (sc2 = s2; ; sc2++) 
                    09906 ....................     if (*sc2 == '\0') 
                    09907 ....................        return(sc1 - s1); 
                    09908 ....................          else if (*sc1 == *sc2) 
                    09909 ....................             break; 
                    09910 ....................    return(sc1 - s1); 
                    09911 .................... } 
                    09912 .................... /* standard template: 
                    09913 ....................    char *strstr(const char *s1, const char *s2); 
                    09914 ....................    Locates first occurence of character sequence s2 in s1; 
                    09915 ....................    returns 0 if s2 is empty string 
                    09916 ....................  
                    09917 ....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
                    09918 ....................    file to use the faster algorithm */ 
                    09919 .................... char *strstr(char *s1, char *s2) 
                    09920 .................... { 
                    09921 ....................    char *s, *t; 
                    09922 ....................  
                    09923 ....................    #ifdef FASTER_BUT_MORE_ROM 
                    09924 ....................    if (*s2 == '\0') 
                    09925 ....................          return(s1); 
                    09926 ....................    #endif 
                    09927 ....................  
                    09928 ....................    while (*s1) 
                    09929 ....................    { 
                    09930 ....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
                    09931 ....................  
                    09932 ....................       if (*t == '\0') 
                    09933 ....................          return s1; 
                    09934 ....................       ++s1; 
                    09935 ....................       #ifdef FASTER_BUT_MORE_ROM 
                    09936 ....................          while(*s1 != '\0' && *s1 != *s2) 
                    09937 ....................             ++s1; 
                    09938 ....................       #endif 
                    09939 ....................    } 
                    09940 ....................    return 0; 
                    09941 .................... } 
                    09942 ....................  
                    09943 .................... /* standard template: char *strtok(char *s1, const char *s2). 
                    09944 ....................  
                    09945 ....................    Finds next token in s1 delimited by a character from separator 
                    09946 ....................    string s2 (which can be different from call to call).  First call 
                    09947 ....................    starts at beginning of s1 searching for first character NOT 
                    09948 ....................    contained in s2; returns 0 if none is found. 
                    09949 ....................    If one is found, it is the start of first token (return value). 
                    09950 ....................    Function then searches from there for a character contained in s2. 
                    09951 ....................    If none is found, current token extends to end of s1, and subsequent 
                    09952 ....................    searches for a token will return 0.  If one is found, it is 
                    09953 ....................    overwritten by '\0', which terminates current token.  Function saves 
                    09954 ....................    pointer to following character from which next search will start. 
                    09955 ....................    Each subsequent call, with 0 as first argument, starts searching 
                    09956 ....................    from saved pointer */ 
                    09957 ....................  
                    09958 .................... char *strtok(char *s1, char *s2) 
                    09959 .................... { 
                    09960 ....................    char *beg, *end; 
                    09961 ....................    static char *save; 
                    09962 ....................  
                    09963 ....................    beg = (s1)? s1: save; 
                    09964 ....................    beg += strspn(beg, s2); 
                    09965 ....................    if (*beg == '\0') 
                    09966 ....................    { 
                    09967 ....................       *save = ' '; 
                    09968 ....................       return(0); 
                    09969 ....................    } 
                    09970 ....................    end = strpbrk(beg, s2); 
                    09971 ....................    if (*end != '\0') 
                    09972 ....................    { 
                    09973 ....................       *end = '\0'; 
                    09974 ....................       end++; 
                    09975 ....................    } 
                    09976 ....................    save = end; 
                    09977 ....................    return(beg); 
                    09978 .................... } 
                    09979 ....................  
                    09980 .................... /*****************************************************************/ 
                    09981 .................... /*Miscellaneous functions*/ 
                    09982 .................... /* standard template 
                    09983 .................... maps error number in errnum to an error message string 
                    09984 .................... Returns: Pointer to string 
                    09985 .................... */ 
                    09986 .................... #ifdef _ERRNO 
                    09987 .................... char * strerror(unsigned int8 errnum) 
                    09988 .................... { 
                    09989 .................... static char s[13]; 
                    09990 .................... switch( errnum) 
                    09991 .................... { 
                    09992 .................... case 0: 
                    09993 ....................    strcpy(s,"no errors"); 
                    09994 ....................    return s; 
                    09995 .................... case EDOM : 
                    09996 ....................    strcpy(s,"domain error"); 
                    09997 ....................    return s; 
                    09998 .................... case ERANGE: 
                    09999 ....................    strcpy(s,"range error"); 
                    10000 ....................    return s; 
                    10001 .................... } 
                    10002 .................... } 
                    10003 .................... #ENDIF 
                    10004 .................... /* standard template: size_t strlen(const char *s). 
                    10005 ....................    Computes length of s1 (preceding terminating 0) */ 
                    10006 ....................  
                    10007 .................... unsigned int8 strlen(char *s) 
                    10008 .................... { 
                    10009 ....................    char *sc; 
                    10010 ....................  
                    10011 ....................    for (sc = s; *sc != 0; sc++); 
                    10012 ....................    return(sc - s); 
                    10013 .................... } 
                    10014 ....................  
                    10015 .................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
                    10016 ....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
                    10017 ....................  
                    10018 .................... signed int8 stricmp(char *s1, char *s2) 
                    10019 .................... { 
                    10020 ....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
                    10021 ....................     s1++, s2++) 
                    10022 ....................     if (*s1 == '\0') 
                    10023 ....................        return(0); 
                    10024 ....................  return((*s1 < *s2) ? -1: 1); 
                    10025 .................... } 
                    10026 ....................  
                    10027 ....................  
                    10028 .................... /* standard template: char *strlwr(char *s). 
                    10029 ....................    Replaces uppercase letters by lowercase; 
                    10030 ....................    returns pointer to new string s */ 
                    10031 ....................  
                    10032 .................... char *strlwr(char *s) 
                    10033 .................... { 
                    10034 ....................    char *p; 
                    10035 ....................  
                    10036 ....................    for (p = s; *p != '\0'; p++) 
                    10037 ....................       if (*p >= 'A' && *p <='Z') 
                    10038 ....................          *p += 'a' - 'A'; 
                    10039 ....................    return(s); 
                    10040 .................... } 
                    10041 ....................  
                    10042 .................... /* standard template: char *strupr(char *s). 
                    10043 ....................    Replaces lowercase letters by upercase; 
                    10044 ....................    returns pointer to new string s */ 
                    10045 ....................  
                    10046 .................... char *strupr(char *s) 
                    10047 .................... { 
                    10048 ....................    char *p; 
                    10049 ....................  
                    10050 ....................    for (p = s; *p != '\0'; p++) 
                    10051 ....................       if (*p >= 'a' && *p <='z') 
                    10052 ....................          *p -= 'a' - 'A'; 
                    10053 ....................    return(s); 
                    10054 .................... } 
                    10055 ....................  
                    10056 ....................  
                    10057 .................... /************************************************************/ 
                    10058 ....................  
                    10059 ....................  
                    10060 .................... #endif 
                    10061 ....................  
                    10062 .................... #ifndef getc 
                    10063 .................... #define getc getch 
                    10064 .................... #define getchar getch 
                    10065 .................... #define puts(s) {printf(s); putchar(13); putchar(10);} 
                    10066 .................... #define putc putchar 
                    10067 .................... #endif 
                    10068 .................... /* maps error number to an error message. Writes a sequence of characters to 
                    10069 .................... stderr stream thus: if s is not null then string pointed to by s follwed by 
                    10070 .................... a colon (:) and a space and the appropriate error message returned by strerror 
                    10071 .................... function with argument errno 
                    10072 ....................  
                    10073 .................... Returns: no value 
                    10074 .................... */ 
                    10075 ....................  
                    10076 .................... #ifdef _ERRNO 
                    10077 .................... void perror(char *s) 
                    10078 .................... { 
                    10079 ....................   if(s) 
                    10080 ....................   fprintf(STDERR,"%s: ",s); 
                    10081 ....................   fprintf(STDERR,"%s\r\n",strerror(errno)); 
                    10082 .................... } 
                    10083 .................... #endif 
                    10084 .................... #endif 
                    10085 ....................  
                    10086 ....................  
                    10087 .................... /////////////////////////////////////////////////////////////////////////// 
                    10088 .................... ////                                                                   //// 
                    10089 .................... ////                          stdbool.h                                //// 
                    10090 .................... ////                                                                   //// 
                    10091 .................... //// Standard boolean definitions                                      //// 
                    10092 .................... ////                                                                   //// 
                    10093 .................... /////////////////////////////////////////////////////////////////////////// 
                    10094 .................... ////        (C) Copyright 1996,2012 Custom Computer Services           //// 
                    10095 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    10096 .................... //// compiler.  This source code may only be distributed to other      //// 
                    10097 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    10098 .................... //// or distribution is permitted without written permission.          //// 
                    10099 .................... //// Derivative programs created using this software in object code    //// 
                    10100 .................... //// form are not restricted in any way.                               //// 
                    10101 .................... /////////////////////////////////////////////////////////////////////////// 
                    10102 ....................  
                    10103 .................... #ifndef __STDBOOL_H__ 
                    10104 .................... #define __STDBOOL_H__ 
                    10105 ....................  
                    10106 .................... //remove TRUE and FALSE added by CCS's device .h file 
                    10107 .................... #if defined(TRUE) 
                    10108 .................... #undef TRUE 
                    10109 .................... #endif 
                    10110 .................... #if defined(FALSE) 
                    10111 .................... #undef FALSE 
                    10112 .................... #endif 
                    10113 ....................  
                    10114 .................... typedef int1   bool; 
                    10115 .................... #define true   1 
                    10116 .................... #define false  0 
                    10117 .................... #define __bool_true_false_are_defined  1 
                    10118 ....................  
                    10119 .................... #endif 
                    10120 ....................  
                    10121 ....................  
                    10122 ....................  
                    10123 .................... /* 
                    10124 ....................  * comm.h 
                    10125 ....................  * 
                    10126 ....................  *  Created on: Mar 23, 2017 
                    10127 ....................  *      Author: asaf 
                    10128 ....................  */ 
                    10129 ....................  
                    10130 .................... #ifndef COMM_H_ 
                    10131 .................... #define COMM_H_ 
                    10132 ....................  
                    10133 .................... #include <stdint.h> 
                    10134 .................... /////////////////////////////////////////////////////////////////////////// 
                    10135 .................... ////                                                                   //// 
                    10136 .................... ////                           stdint.h                                //// 
                    10137 .................... ////                                                                   //// 
                    10138 .................... //// Standard integer definitions.                                     //// 
                    10139 .................... ////                                                                   //// 
                    10140 .................... /////////////////////////////////////////////////////////////////////////// 
                    10141 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    10142 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    10143 .................... //// compiler.  This source code may only be distributed to other      //// 
                    10144 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    10145 .................... //// or distribution is permitted without written permission.          //// 
                    10146 .................... //// Derivative programs created using this software in object code    //// 
                    10147 .................... //// form are not restricted in any way.                               //// 
                    10148 .................... /////////////////////////////////////////////////////////////////////////// 
                    10149 ....................  
                    10150 .................... #ifndef _STDINT 
                    10151 ....................  
                    10152 .................... #define _STDINT 
                    10153 ....................  
                    10154 .................... //////////// exact width 
                    10155 ....................  
                    10156 .................... typedef signed int8 int8_t; 
                    10157 .................... typedef unsigned int8 uint8_t; 
                    10158 .................... typedef signed int16 int16_t; 
                    10159 .................... typedef unsigned int16 uint16_t; 
                    10160 .................... typedef signed int32 int32_t; 
                    10161 .................... typedef unsigned int32 uint32_t; 
                    10162 ....................  
                    10163 .................... #if defined(__PCD__) 
                    10164 .................... //typedef signed int24 int24_t; 
                    10165 .................... //typedef unsigned int24 uint24_t; 
                    10166 .................... typedef signed int64 int64_t; 
                    10167 .................... typedef unsigned int64 uint64_t; 
                    10168 .................... #endif 
                    10169 ....................  
                    10170 .................... #define INT8_MAX  (128) 
                    10171 .................... #define INT8_MIN  (-127) 
                    10172 .................... #define UINT8_MAX (255) 
                    10173 ....................  
                    10174 .................... #define INT16_MAX  (32767) 
                    10175 .................... #define INT16_MIN  (-32768) 
                    10176 .................... #define UINT16_MAX (65535) 
                    10177 ....................  
                    10178 .................... #define INT32_MAX  (2147483647) 
                    10179 .................... #define INT32_MIN  (-2147483648) 
                    10180 .................... #define UINT32_MAX (4294967295) 
                    10181 ....................  
                    10182 .................... #if defined(__PCD__) 
                    10183 .................... //#define INT24_MAX  (8388607) 
                    10184 .................... //#define INT24_MIN  (-8388608) 
                    10185 .................... //#define UINT24_MAX (16777215) 
                    10186 ....................  
                    10187 .................... #define INT64_MAX  (9223372036854775807) 
                    10188 .................... #define INT64_MIN  (-9223372036854775808) 
                    10189 .................... #define UINT64_MAX (18446744073709551615) 
                    10190 .................... #endif 
                    10191 ....................  
                    10192 .................... ///////// minimum width 
                    10193 ....................  
                    10194 .................... typedef signed int8 int_least8_t; 
                    10195 .................... typedef unsigned int8 uint_least8_t; 
                    10196 .................... typedef signed int16 int_least16_t; 
                    10197 .................... typedef unsigned int16 uint_least16_t; 
                    10198 .................... typedef signed int32 int_least32_t; 
                    10199 .................... typedef unsigned int32 uint_least32_t; 
                    10200 ....................  
                    10201 .................... #if defined(__PCD__) 
                    10202 .................... //typedef signed int24 int_least24_t; 
                    10203 .................... //typedef unsigned int24 uint_least24_t; 
                    10204 .................... typedef signed int64 int_least64_t; 
                    10205 .................... typedef unsigned int64 uint_least64_t; 
                    10206 .................... #endif 
                    10207 ....................  
                    10208 .................... #define INT_LEAST8_MAX  (128) 
                    10209 .................... #define INT_LEAST8_MIN  (-127) 
                    10210 .................... #define UINT_LEAST8_MAX (255) 
                    10211 ....................  
                    10212 .................... #define INT_LEAST16_MAX  (32767) 
                    10213 .................... #define INT_LEAST16_MIN  (-32768) 
                    10214 .................... #define UINT_LEAST16_MAX (65535) 
                    10215 ....................  
                    10216 .................... #define INT_LEAST32_MAX  (2147483647) 
                    10217 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    10218 .................... #define UINT_LEAST32_MAX (4294967295) 
                    10219 ....................  
                    10220 .................... #if defined(__PCD__) 
                    10221 .................... //#define INT_LEAST24_MAX  (8388607) 
                    10222 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    10223 .................... //#define UINT_LEAST24_MAX (16777215) 
                    10224 ....................  
                    10225 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    10226 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    10227 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    10228 .................... #endif 
                    10229 ....................  
                    10230 .................... ///////// fastest width 
                    10231 ....................  
                    10232 .................... #if defined(__PCD__) 
                    10233 .................... typedef signed int16 int_fast8_t; 
                    10234 .................... typedef unsigned int16 uint_fast8_t; 
                    10235 .................... #define INT_FAST8_MAX  (32767) 
                    10236 .................... #define INT_FAST8_MIN  (-32768) 
                    10237 .................... #define UINT_FAST8_MAX (65535) 
                    10238 .................... typedef signed int16 int_fast16_t; 
                    10239 .................... typedef unsigned int16 uint_fast16_t; 
                    10240 .................... //typedef signed int24 int_fast24_t; 
                    10241 .................... //typedef unsigned int24 uint_fast24_t; 
                    10242 .................... typedef signed int64 int_fast64_t; 
                    10243 .................... typedef unsigned int64 uint_fast64_t; 
                    10244 .................... #else 
                    10245 .................... typedef signed int8 int_fast8_t; 
                    10246 .................... typedef unsigned int8 uint_fast8_t; 
                    10247 .................... #define INT_FAST8_MAX  (128) 
                    10248 .................... #define INT_FAST8_MIN  (-127) 
                    10249 .................... #define UINT_FAST8_MAX (255) 
                    10250 .................... typedef signed int16 int_fast16_t; 
                    10251 .................... typedef unsigned int16 uint_fast16_t; 
                    10252 .................... #endif 
                    10253 ....................  
                    10254 .................... typedef signed int32 int_fast32_t; 
                    10255 .................... typedef unsigned int32 uint_fast32_t; 
                    10256 ....................  
                    10257 .................... #define INT_FAST16_MAX  (32767) 
                    10258 .................... #define INT_FAST16_MIN  (-32768) 
                    10259 .................... #define UINT_FAST16_MAX (65535) 
                    10260 ....................  
                    10261 .................... #define INT_FAST32_MAX  (2147483647) 
                    10262 .................... #define INT_FAST32_MIN  (-2147483648) 
                    10263 .................... #define UINT_FAST32_MAX (4294967295) 
                    10264 ....................  
                    10265 .................... #if defined(__PCD__) 
                    10266 .................... //#define INT_FAST24_MAX  (8388607) 
                    10267 .................... //#define INT_FAST24_MIN  (-8388608) 
                    10268 .................... //#define UINT_FAST24_MAX (16777215) 
                    10269 ....................  
                    10270 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    10271 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    10272 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    10273 .................... #endif 
                    10274 ....................  
                    10275 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    10276 ....................  
                    10277 .................... /// TODO 
                    10278 ....................  
                    10279 .................... /// intptr_t uintptr_t 
                    10280 ....................  
                    10281 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    10282 ....................  
                    10283 ....................  
                    10284 .................... /////////// greatest width (OPTIONAL) 
                    10285 ....................  
                    10286 .................... /// TODO 
                    10287 ....................  
                    10288 .................... /// intmax_t uintmax_t 
                    10289 ....................  
                    10290 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    10291 ....................  
                    10292 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    10293 ....................  
                    10294 ....................  
                    10295 .................... #endif 
                    10296 ....................  
                    10297 .................... #include <stdbool.h> 
                    10298 .................... /////////////////////////////////////////////////////////////////////////// 
                    10299 .................... ////                                                                   //// 
                    10300 .................... ////                          stdbool.h                                //// 
                    10301 .................... ////                                                                   //// 
                    10302 .................... //// Standard boolean definitions                                      //// 
                    10303 .................... ////                                                                   //// 
                    10304 .................... /////////////////////////////////////////////////////////////////////////// 
                    10305 .................... ////        (C) Copyright 1996,2012 Custom Computer Services           //// 
                    10306 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    10307 .................... //// compiler.  This source code may only be distributed to other      //// 
                    10308 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    10309 .................... //// or distribution is permitted without written permission.          //// 
                    10310 .................... //// Derivative programs created using this software in object code    //// 
                    10311 .................... //// form are not restricted in any way.                               //// 
                    10312 .................... /////////////////////////////////////////////////////////////////////////// 
                    10313 ....................  
                    10314 .................... #ifndef __STDBOOL_H__ 
                    10315 .................... #define __STDBOOL_H__ 
                    10316 ....................  
                    10317 .................... //remove TRUE and FALSE added by CCS's device .h file 
                    10318 .................... #if defined(TRUE) 
                    10319 .................... #undef TRUE 
                    10320 .................... #endif 
                    10321 .................... #if defined(FALSE) 
                    10322 .................... #undef FALSE 
                    10323 .................... #endif 
                    10324 ....................  
                    10325 .................... typedef int1   bool; 
                    10326 .................... #define true   1 
                    10327 .................... #define false  0 
                    10328 .................... #define __bool_true_false_are_defined  1 
                    10329 ....................  
                    10330 .................... #endif 
                    10331 ....................  
                    10332 ....................  
                    10333 .................... #define MSG_MAX_MESSAGE_LEN 80 
                    10334 ....................  
                    10335 .................... #ifndef MIN 
                    10336 .................... #define MIN(x,y) ((x)<(y)?(x):(y)) 
                    10337 .................... #endif 
                    10338 .................... #ifndef MAX 
                    10339 .................... #define	MAX(a,b) (((a)>(b))?(a):(b)) 
                    10340 .................... #endif 
                    10341 ....................  
                    10342 .................... #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0])) 
                    10343 .................... #define MAX_INDEX_IN_ARRAY(x) (ARRAY_SIZE(x)-1) 
                    10344 ....................  
                    10345 .................... void comm_init(); 
                    10346 .................... bool comm_receive_message(void* buffer, uint16_t* size); 
                    10347 .................... void comm_send_message(void* buffer, uint16_t size); 
                    10348 ....................  
                    10349 ....................  
                    10350 ....................  
                    10351 .................... #endif /* COMM_H_ */ 
                    10352 ....................  
                    10353 ....................  
                    10354 .................... /* 
                    10355 ....................  * uart.h 
                    10356 ....................  * 
                    10357 ....................  *  Created on: Mar 23, 2017 
                    10358 ....................  *      Author: asaf 
                    10359 ....................  */ 
                    10360 ....................  
                    10361 .................... #ifndef UART_H_ 
                    10362 .................... #define UART_H_ 
                    10363 ....................  
                    10364 .................... #include <stdint.h> 
                    10365 .................... /////////////////////////////////////////////////////////////////////////// 
                    10366 .................... ////                                                                   //// 
                    10367 .................... ////                           stdint.h                                //// 
                    10368 .................... ////                                                                   //// 
                    10369 .................... //// Standard integer definitions.                                     //// 
                    10370 .................... ////                                                                   //// 
                    10371 .................... /////////////////////////////////////////////////////////////////////////// 
                    10372 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    10373 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    10374 .................... //// compiler.  This source code may only be distributed to other      //// 
                    10375 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    10376 .................... //// or distribution is permitted without written permission.          //// 
                    10377 .................... //// Derivative programs created using this software in object code    //// 
                    10378 .................... //// form are not restricted in any way.                               //// 
                    10379 .................... /////////////////////////////////////////////////////////////////////////// 
                    10380 ....................  
                    10381 .................... #ifndef _STDINT 
                    10382 ....................  
                    10383 .................... #define _STDINT 
                    10384 ....................  
                    10385 .................... //////////// exact width 
                    10386 ....................  
                    10387 .................... typedef signed int8 int8_t; 
                    10388 .................... typedef unsigned int8 uint8_t; 
                    10389 .................... typedef signed int16 int16_t; 
                    10390 .................... typedef unsigned int16 uint16_t; 
                    10391 .................... typedef signed int32 int32_t; 
                    10392 .................... typedef unsigned int32 uint32_t; 
                    10393 ....................  
                    10394 .................... #if defined(__PCD__) 
                    10395 .................... //typedef signed int24 int24_t; 
                    10396 .................... //typedef unsigned int24 uint24_t; 
                    10397 .................... typedef signed int64 int64_t; 
                    10398 .................... typedef unsigned int64 uint64_t; 
                    10399 .................... #endif 
                    10400 ....................  
                    10401 .................... #define INT8_MAX  (128) 
                    10402 .................... #define INT8_MIN  (-127) 
                    10403 .................... #define UINT8_MAX (255) 
                    10404 ....................  
                    10405 .................... #define INT16_MAX  (32767) 
                    10406 .................... #define INT16_MIN  (-32768) 
                    10407 .................... #define UINT16_MAX (65535) 
                    10408 ....................  
                    10409 .................... #define INT32_MAX  (2147483647) 
                    10410 .................... #define INT32_MIN  (-2147483648) 
                    10411 .................... #define UINT32_MAX (4294967295) 
                    10412 ....................  
                    10413 .................... #if defined(__PCD__) 
                    10414 .................... //#define INT24_MAX  (8388607) 
                    10415 .................... //#define INT24_MIN  (-8388608) 
                    10416 .................... //#define UINT24_MAX (16777215) 
                    10417 ....................  
                    10418 .................... #define INT64_MAX  (9223372036854775807) 
                    10419 .................... #define INT64_MIN  (-9223372036854775808) 
                    10420 .................... #define UINT64_MAX (18446744073709551615) 
                    10421 .................... #endif 
                    10422 ....................  
                    10423 .................... ///////// minimum width 
                    10424 ....................  
                    10425 .................... typedef signed int8 int_least8_t; 
                    10426 .................... typedef unsigned int8 uint_least8_t; 
                    10427 .................... typedef signed int16 int_least16_t; 
                    10428 .................... typedef unsigned int16 uint_least16_t; 
                    10429 .................... typedef signed int32 int_least32_t; 
                    10430 .................... typedef unsigned int32 uint_least32_t; 
                    10431 ....................  
                    10432 .................... #if defined(__PCD__) 
                    10433 .................... //typedef signed int24 int_least24_t; 
                    10434 .................... //typedef unsigned int24 uint_least24_t; 
                    10435 .................... typedef signed int64 int_least64_t; 
                    10436 .................... typedef unsigned int64 uint_least64_t; 
                    10437 .................... #endif 
                    10438 ....................  
                    10439 .................... #define INT_LEAST8_MAX  (128) 
                    10440 .................... #define INT_LEAST8_MIN  (-127) 
                    10441 .................... #define UINT_LEAST8_MAX (255) 
                    10442 ....................  
                    10443 .................... #define INT_LEAST16_MAX  (32767) 
                    10444 .................... #define INT_LEAST16_MIN  (-32768) 
                    10445 .................... #define UINT_LEAST16_MAX (65535) 
                    10446 ....................  
                    10447 .................... #define INT_LEAST32_MAX  (2147483647) 
                    10448 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    10449 .................... #define UINT_LEAST32_MAX (4294967295) 
                    10450 ....................  
                    10451 .................... #if defined(__PCD__) 
                    10452 .................... //#define INT_LEAST24_MAX  (8388607) 
                    10453 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    10454 .................... //#define UINT_LEAST24_MAX (16777215) 
                    10455 ....................  
                    10456 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    10457 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    10458 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    10459 .................... #endif 
                    10460 ....................  
                    10461 .................... ///////// fastest width 
                    10462 ....................  
                    10463 .................... #if defined(__PCD__) 
                    10464 .................... typedef signed int16 int_fast8_t; 
                    10465 .................... typedef unsigned int16 uint_fast8_t; 
                    10466 .................... #define INT_FAST8_MAX  (32767) 
                    10467 .................... #define INT_FAST8_MIN  (-32768) 
                    10468 .................... #define UINT_FAST8_MAX (65535) 
                    10469 .................... typedef signed int16 int_fast16_t; 
                    10470 .................... typedef unsigned int16 uint_fast16_t; 
                    10471 .................... //typedef signed int24 int_fast24_t; 
                    10472 .................... //typedef unsigned int24 uint_fast24_t; 
                    10473 .................... typedef signed int64 int_fast64_t; 
                    10474 .................... typedef unsigned int64 uint_fast64_t; 
                    10475 .................... #else 
                    10476 .................... typedef signed int8 int_fast8_t; 
                    10477 .................... typedef unsigned int8 uint_fast8_t; 
                    10478 .................... #define INT_FAST8_MAX  (128) 
                    10479 .................... #define INT_FAST8_MIN  (-127) 
                    10480 .................... #define UINT_FAST8_MAX (255) 
                    10481 .................... typedef signed int16 int_fast16_t; 
                    10482 .................... typedef unsigned int16 uint_fast16_t; 
                    10483 .................... #endif 
                    10484 ....................  
                    10485 .................... typedef signed int32 int_fast32_t; 
                    10486 .................... typedef unsigned int32 uint_fast32_t; 
                    10487 ....................  
                    10488 .................... #define INT_FAST16_MAX  (32767) 
                    10489 .................... #define INT_FAST16_MIN  (-32768) 
                    10490 .................... #define UINT_FAST16_MAX (65535) 
                    10491 ....................  
                    10492 .................... #define INT_FAST32_MAX  (2147483647) 
                    10493 .................... #define INT_FAST32_MIN  (-2147483648) 
                    10494 .................... #define UINT_FAST32_MAX (4294967295) 
                    10495 ....................  
                    10496 .................... #if defined(__PCD__) 
                    10497 .................... //#define INT_FAST24_MAX  (8388607) 
                    10498 .................... //#define INT_FAST24_MIN  (-8388608) 
                    10499 .................... //#define UINT_FAST24_MAX (16777215) 
                    10500 ....................  
                    10501 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    10502 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    10503 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    10504 .................... #endif 
                    10505 ....................  
                    10506 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    10507 ....................  
                    10508 .................... /// TODO 
                    10509 ....................  
                    10510 .................... /// intptr_t uintptr_t 
                    10511 ....................  
                    10512 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    10513 ....................  
                    10514 ....................  
                    10515 .................... /////////// greatest width (OPTIONAL) 
                    10516 ....................  
                    10517 .................... /// TODO 
                    10518 ....................  
                    10519 .................... /// intmax_t uintmax_t 
                    10520 ....................  
                    10521 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    10522 ....................  
                    10523 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    10524 ....................  
                    10525 ....................  
                    10526 .................... #endif 
                    10527 ....................  
                    10528 .................... #include <stddef.h> 
                    10529 .................... /////////////////////////////////////////////////////////////////////////// 
                    10530 .................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
                    10531 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    10532 .................... //// compiler.  This source code may only be distributed to other      //// 
                    10533 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    10534 .................... //// or distribution is permitted without written permission.          //// 
                    10535 .................... //// Derivative programs created using this software in object code    //// 
                    10536 .................... //// form are not restricted in any way.                               //// 
                    10537 .................... /////////////////////////////////////////////////////////////////////////// 
                    10538 ....................  
                    10539 .................... #ifndef _STDDEF 
                    10540 ....................  
                    10541 .................... #define _STDDEF 
                    10542 ....................  
                    10543 .................... #if sizeof(unsigned int8 *)==1 
                    10544 .................... #define ptrdiff_t unsigned int8 
                    10545 .................... #else 
                    10546 .................... #define ptrdiff_t unsigned int16 
                    10547 .................... #endif 
                    10548 ....................  
                    10549 .................... #if defined(__PCB__) 
                    10550 .................... #define size_t unsigned int8 
                    10551 .................... #else 
                    10552 .................... #define size_t unsigned int16 
                    10553 .................... #endif 
                    10554 .................... #define wchar_t char 
                    10555 .................... #define NULL 0 
                    10556 ....................  
                    10557 .................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
                    10558 ....................  
                    10559 .................... #endif 
                    10560 ....................  
                    10561 ....................  
                    10562 .................... void uart_init(); 
                    10563 .................... void uart_disable(); 
                    10564 .................... uint8_t uart_get_byte_blocking(); 
                    10565 .................... uint8_t uart_get_byte_nonblocking(uint8_t *dst); 
                    10566 .................... void uart_send(void* buffer, uint8_t size); 
                    10567 .................... void uart_clear_errors(); 
                    10568 ....................  
                    10569 .................... #endif /* UART_H_ */ 
                    10570 ....................  
                    10571 ....................  
                    10572 .................... /* 
                    10573 ....................  * message.h 
                    10574 ....................  * 
                    10575 ....................  *  Created on: Mar 23, 2017 
                    10576 ....................  *      Author: asaf 
                    10577 ....................  */ 
                    10578 ....................  
                    10579 .................... #ifndef MESSAGE_H_ 
                    10580 .................... #define MESSAGE_H_ 
                    10581 ....................  
                    10582 .................... #include <stdint.h> 
                    10583 .................... /////////////////////////////////////////////////////////////////////////// 
                    10584 .................... ////                                                                   //// 
                    10585 .................... ////                           stdint.h                                //// 
                    10586 .................... ////                                                                   //// 
                    10587 .................... //// Standard integer definitions.                                     //// 
                    10588 .................... ////                                                                   //// 
                    10589 .................... /////////////////////////////////////////////////////////////////////////// 
                    10590 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    10591 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    10592 .................... //// compiler.  This source code may only be distributed to other      //// 
                    10593 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    10594 .................... //// or distribution is permitted without written permission.          //// 
                    10595 .................... //// Derivative programs created using this software in object code    //// 
                    10596 .................... //// form are not restricted in any way.                               //// 
                    10597 .................... /////////////////////////////////////////////////////////////////////////// 
                    10598 ....................  
                    10599 .................... #ifndef _STDINT 
                    10600 ....................  
                    10601 .................... #define _STDINT 
                    10602 ....................  
                    10603 .................... //////////// exact width 
                    10604 ....................  
                    10605 .................... typedef signed int8 int8_t; 
                    10606 .................... typedef unsigned int8 uint8_t; 
                    10607 .................... typedef signed int16 int16_t; 
                    10608 .................... typedef unsigned int16 uint16_t; 
                    10609 .................... typedef signed int32 int32_t; 
                    10610 .................... typedef unsigned int32 uint32_t; 
                    10611 ....................  
                    10612 .................... #if defined(__PCD__) 
                    10613 .................... //typedef signed int24 int24_t; 
                    10614 .................... //typedef unsigned int24 uint24_t; 
                    10615 .................... typedef signed int64 int64_t; 
                    10616 .................... typedef unsigned int64 uint64_t; 
                    10617 .................... #endif 
                    10618 ....................  
                    10619 .................... #define INT8_MAX  (128) 
                    10620 .................... #define INT8_MIN  (-127) 
                    10621 .................... #define UINT8_MAX (255) 
                    10622 ....................  
                    10623 .................... #define INT16_MAX  (32767) 
                    10624 .................... #define INT16_MIN  (-32768) 
                    10625 .................... #define UINT16_MAX (65535) 
                    10626 ....................  
                    10627 .................... #define INT32_MAX  (2147483647) 
                    10628 .................... #define INT32_MIN  (-2147483648) 
                    10629 .................... #define UINT32_MAX (4294967295) 
                    10630 ....................  
                    10631 .................... #if defined(__PCD__) 
                    10632 .................... //#define INT24_MAX  (8388607) 
                    10633 .................... //#define INT24_MIN  (-8388608) 
                    10634 .................... //#define UINT24_MAX (16777215) 
                    10635 ....................  
                    10636 .................... #define INT64_MAX  (9223372036854775807) 
                    10637 .................... #define INT64_MIN  (-9223372036854775808) 
                    10638 .................... #define UINT64_MAX (18446744073709551615) 
                    10639 .................... #endif 
                    10640 ....................  
                    10641 .................... ///////// minimum width 
                    10642 ....................  
                    10643 .................... typedef signed int8 int_least8_t; 
                    10644 .................... typedef unsigned int8 uint_least8_t; 
                    10645 .................... typedef signed int16 int_least16_t; 
                    10646 .................... typedef unsigned int16 uint_least16_t; 
                    10647 .................... typedef signed int32 int_least32_t; 
                    10648 .................... typedef unsigned int32 uint_least32_t; 
                    10649 ....................  
                    10650 .................... #if defined(__PCD__) 
                    10651 .................... //typedef signed int24 int_least24_t; 
                    10652 .................... //typedef unsigned int24 uint_least24_t; 
                    10653 .................... typedef signed int64 int_least64_t; 
                    10654 .................... typedef unsigned int64 uint_least64_t; 
                    10655 .................... #endif 
                    10656 ....................  
                    10657 .................... #define INT_LEAST8_MAX  (128) 
                    10658 .................... #define INT_LEAST8_MIN  (-127) 
                    10659 .................... #define UINT_LEAST8_MAX (255) 
                    10660 ....................  
                    10661 .................... #define INT_LEAST16_MAX  (32767) 
                    10662 .................... #define INT_LEAST16_MIN  (-32768) 
                    10663 .................... #define UINT_LEAST16_MAX (65535) 
                    10664 ....................  
                    10665 .................... #define INT_LEAST32_MAX  (2147483647) 
                    10666 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    10667 .................... #define UINT_LEAST32_MAX (4294967295) 
                    10668 ....................  
                    10669 .................... #if defined(__PCD__) 
                    10670 .................... //#define INT_LEAST24_MAX  (8388607) 
                    10671 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    10672 .................... //#define UINT_LEAST24_MAX (16777215) 
                    10673 ....................  
                    10674 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    10675 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    10676 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    10677 .................... #endif 
                    10678 ....................  
                    10679 .................... ///////// fastest width 
                    10680 ....................  
                    10681 .................... #if defined(__PCD__) 
                    10682 .................... typedef signed int16 int_fast8_t; 
                    10683 .................... typedef unsigned int16 uint_fast8_t; 
                    10684 .................... #define INT_FAST8_MAX  (32767) 
                    10685 .................... #define INT_FAST8_MIN  (-32768) 
                    10686 .................... #define UINT_FAST8_MAX (65535) 
                    10687 .................... typedef signed int16 int_fast16_t; 
                    10688 .................... typedef unsigned int16 uint_fast16_t; 
                    10689 .................... //typedef signed int24 int_fast24_t; 
                    10690 .................... //typedef unsigned int24 uint_fast24_t; 
                    10691 .................... typedef signed int64 int_fast64_t; 
                    10692 .................... typedef unsigned int64 uint_fast64_t; 
                    10693 .................... #else 
                    10694 .................... typedef signed int8 int_fast8_t; 
                    10695 .................... typedef unsigned int8 uint_fast8_t; 
                    10696 .................... #define INT_FAST8_MAX  (128) 
                    10697 .................... #define INT_FAST8_MIN  (-127) 
                    10698 .................... #define UINT_FAST8_MAX (255) 
                    10699 .................... typedef signed int16 int_fast16_t; 
                    10700 .................... typedef unsigned int16 uint_fast16_t; 
                    10701 .................... #endif 
                    10702 ....................  
                    10703 .................... typedef signed int32 int_fast32_t; 
                    10704 .................... typedef unsigned int32 uint_fast32_t; 
                    10705 ....................  
                    10706 .................... #define INT_FAST16_MAX  (32767) 
                    10707 .................... #define INT_FAST16_MIN  (-32768) 
                    10708 .................... #define UINT_FAST16_MAX (65535) 
                    10709 ....................  
                    10710 .................... #define INT_FAST32_MAX  (2147483647) 
                    10711 .................... #define INT_FAST32_MIN  (-2147483648) 
                    10712 .................... #define UINT_FAST32_MAX (4294967295) 
                    10713 ....................  
                    10714 .................... #if defined(__PCD__) 
                    10715 .................... //#define INT_FAST24_MAX  (8388607) 
                    10716 .................... //#define INT_FAST24_MIN  (-8388608) 
                    10717 .................... //#define UINT_FAST24_MAX (16777215) 
                    10718 ....................  
                    10719 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    10720 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    10721 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    10722 .................... #endif 
                    10723 ....................  
                    10724 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    10725 ....................  
                    10726 .................... /// TODO 
                    10727 ....................  
                    10728 .................... /// intptr_t uintptr_t 
                    10729 ....................  
                    10730 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    10731 ....................  
                    10732 ....................  
                    10733 .................... /////////// greatest width (OPTIONAL) 
                    10734 ....................  
                    10735 .................... /// TODO 
                    10736 ....................  
                    10737 .................... /// intmax_t uintmax_t 
                    10738 ....................  
                    10739 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    10740 ....................  
                    10741 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    10742 ....................  
                    10743 ....................  
                    10744 .................... #endif 
                    10745 ....................  
                    10746 .................... #include "calibration.h" 
                    10747 .................... #ifndef CALIBRATION_H_ 
                    10748 .................... #define CALIBRATION_H_ 
                    10749 ....................  
                    10750 .................... #include <stdint.h> 
                    10751 .................... /////////////////////////////////////////////////////////////////////////// 
                    10752 .................... ////                                                                   //// 
                    10753 .................... ////                           stdint.h                                //// 
                    10754 .................... ////                                                                   //// 
                    10755 .................... //// Standard integer definitions.                                     //// 
                    10756 .................... ////                                                                   //// 
                    10757 .................... /////////////////////////////////////////////////////////////////////////// 
                    10758 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    10759 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    10760 .................... //// compiler.  This source code may only be distributed to other      //// 
                    10761 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    10762 .................... //// or distribution is permitted without written permission.          //// 
                    10763 .................... //// Derivative programs created using this software in object code    //// 
                    10764 .................... //// form are not restricted in any way.                               //// 
                    10765 .................... /////////////////////////////////////////////////////////////////////////// 
                    10766 ....................  
                    10767 .................... #ifndef _STDINT 
                    10768 ....................  
                    10769 .................... #define _STDINT 
                    10770 ....................  
                    10771 .................... //////////// exact width 
                    10772 ....................  
                    10773 .................... typedef signed int8 int8_t; 
                    10774 .................... typedef unsigned int8 uint8_t; 
                    10775 .................... typedef signed int16 int16_t; 
                    10776 .................... typedef unsigned int16 uint16_t; 
                    10777 .................... typedef signed int32 int32_t; 
                    10778 .................... typedef unsigned int32 uint32_t; 
                    10779 ....................  
                    10780 .................... #if defined(__PCD__) 
                    10781 .................... //typedef signed int24 int24_t; 
                    10782 .................... //typedef unsigned int24 uint24_t; 
                    10783 .................... typedef signed int64 int64_t; 
                    10784 .................... typedef unsigned int64 uint64_t; 
                    10785 .................... #endif 
                    10786 ....................  
                    10787 .................... #define INT8_MAX  (128) 
                    10788 .................... #define INT8_MIN  (-127) 
                    10789 .................... #define UINT8_MAX (255) 
                    10790 ....................  
                    10791 .................... #define INT16_MAX  (32767) 
                    10792 .................... #define INT16_MIN  (-32768) 
                    10793 .................... #define UINT16_MAX (65535) 
                    10794 ....................  
                    10795 .................... #define INT32_MAX  (2147483647) 
                    10796 .................... #define INT32_MIN  (-2147483648) 
                    10797 .................... #define UINT32_MAX (4294967295) 
                    10798 ....................  
                    10799 .................... #if defined(__PCD__) 
                    10800 .................... //#define INT24_MAX  (8388607) 
                    10801 .................... //#define INT24_MIN  (-8388608) 
                    10802 .................... //#define UINT24_MAX (16777215) 
                    10803 ....................  
                    10804 .................... #define INT64_MAX  (9223372036854775807) 
                    10805 .................... #define INT64_MIN  (-9223372036854775808) 
                    10806 .................... #define UINT64_MAX (18446744073709551615) 
                    10807 .................... #endif 
                    10808 ....................  
                    10809 .................... ///////// minimum width 
                    10810 ....................  
                    10811 .................... typedef signed int8 int_least8_t; 
                    10812 .................... typedef unsigned int8 uint_least8_t; 
                    10813 .................... typedef signed int16 int_least16_t; 
                    10814 .................... typedef unsigned int16 uint_least16_t; 
                    10815 .................... typedef signed int32 int_least32_t; 
                    10816 .................... typedef unsigned int32 uint_least32_t; 
                    10817 ....................  
                    10818 .................... #if defined(__PCD__) 
                    10819 .................... //typedef signed int24 int_least24_t; 
                    10820 .................... //typedef unsigned int24 uint_least24_t; 
                    10821 .................... typedef signed int64 int_least64_t; 
                    10822 .................... typedef unsigned int64 uint_least64_t; 
                    10823 .................... #endif 
                    10824 ....................  
                    10825 .................... #define INT_LEAST8_MAX  (128) 
                    10826 .................... #define INT_LEAST8_MIN  (-127) 
                    10827 .................... #define UINT_LEAST8_MAX (255) 
                    10828 ....................  
                    10829 .................... #define INT_LEAST16_MAX  (32767) 
                    10830 .................... #define INT_LEAST16_MIN  (-32768) 
                    10831 .................... #define UINT_LEAST16_MAX (65535) 
                    10832 ....................  
                    10833 .................... #define INT_LEAST32_MAX  (2147483647) 
                    10834 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    10835 .................... #define UINT_LEAST32_MAX (4294967295) 
                    10836 ....................  
                    10837 .................... #if defined(__PCD__) 
                    10838 .................... //#define INT_LEAST24_MAX  (8388607) 
                    10839 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    10840 .................... //#define UINT_LEAST24_MAX (16777215) 
                    10841 ....................  
                    10842 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    10843 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    10844 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    10845 .................... #endif 
                    10846 ....................  
                    10847 .................... ///////// fastest width 
                    10848 ....................  
                    10849 .................... #if defined(__PCD__) 
                    10850 .................... typedef signed int16 int_fast8_t; 
                    10851 .................... typedef unsigned int16 uint_fast8_t; 
                    10852 .................... #define INT_FAST8_MAX  (32767) 
                    10853 .................... #define INT_FAST8_MIN  (-32768) 
                    10854 .................... #define UINT_FAST8_MAX (65535) 
                    10855 .................... typedef signed int16 int_fast16_t; 
                    10856 .................... typedef unsigned int16 uint_fast16_t; 
                    10857 .................... //typedef signed int24 int_fast24_t; 
                    10858 .................... //typedef unsigned int24 uint_fast24_t; 
                    10859 .................... typedef signed int64 int_fast64_t; 
                    10860 .................... typedef unsigned int64 uint_fast64_t; 
                    10861 .................... #else 
                    10862 .................... typedef signed int8 int_fast8_t; 
                    10863 .................... typedef unsigned int8 uint_fast8_t; 
                    10864 .................... #define INT_FAST8_MAX  (128) 
                    10865 .................... #define INT_FAST8_MIN  (-127) 
                    10866 .................... #define UINT_FAST8_MAX (255) 
                    10867 .................... typedef signed int16 int_fast16_t; 
                    10868 .................... typedef unsigned int16 uint_fast16_t; 
                    10869 .................... #endif 
                    10870 ....................  
                    10871 .................... typedef signed int32 int_fast32_t; 
                    10872 .................... typedef unsigned int32 uint_fast32_t; 
                    10873 ....................  
                    10874 .................... #define INT_FAST16_MAX  (32767) 
                    10875 .................... #define INT_FAST16_MIN  (-32768) 
                    10876 .................... #define UINT_FAST16_MAX (65535) 
                    10877 ....................  
                    10878 .................... #define INT_FAST32_MAX  (2147483647) 
                    10879 .................... #define INT_FAST32_MIN  (-2147483648) 
                    10880 .................... #define UINT_FAST32_MAX (4294967295) 
                    10881 ....................  
                    10882 .................... #if defined(__PCD__) 
                    10883 .................... //#define INT_FAST24_MAX  (8388607) 
                    10884 .................... //#define INT_FAST24_MIN  (-8388608) 
                    10885 .................... //#define UINT_FAST24_MAX (16777215) 
                    10886 ....................  
                    10887 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    10888 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    10889 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    10890 .................... #endif 
                    10891 ....................  
                    10892 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    10893 ....................  
                    10894 .................... /// TODO 
                    10895 ....................  
                    10896 .................... /// intptr_t uintptr_t 
                    10897 ....................  
                    10898 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    10899 ....................  
                    10900 ....................  
                    10901 .................... /////////// greatest width (OPTIONAL) 
                    10902 ....................  
                    10903 .................... /// TODO 
                    10904 ....................  
                    10905 .................... /// intmax_t uintmax_t 
                    10906 ....................  
                    10907 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    10908 ....................  
                    10909 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    10910 ....................  
                    10911 ....................  
                    10912 .................... #endif 
                    10913 ....................  
                    10914 .................... #include <stdbool.h> 
                    10915 .................... /////////////////////////////////////////////////////////////////////////// 
                    10916 .................... ////                                                                   //// 
                    10917 .................... ////                          stdbool.h                                //// 
                    10918 .................... ////                                                                   //// 
                    10919 .................... //// Standard boolean definitions                                      //// 
                    10920 .................... ////                                                                   //// 
                    10921 .................... /////////////////////////////////////////////////////////////////////////// 
                    10922 .................... ////        (C) Copyright 1996,2012 Custom Computer Services           //// 
                    10923 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    10924 .................... //// compiler.  This source code may only be distributed to other      //// 
                    10925 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    10926 .................... //// or distribution is permitted without written permission.          //// 
                    10927 .................... //// Derivative programs created using this software in object code    //// 
                    10928 .................... //// form are not restricted in any way.                               //// 
                    10929 .................... /////////////////////////////////////////////////////////////////////////// 
                    10930 ....................  
                    10931 .................... #ifndef __STDBOOL_H__ 
                    10932 .................... #define __STDBOOL_H__ 
                    10933 ....................  
                    10934 .................... //remove TRUE and FALSE added by CCS's device .h file 
                    10935 .................... #if defined(TRUE) 
                    10936 .................... #undef TRUE 
                    10937 .................... #endif 
                    10938 .................... #if defined(FALSE) 
                    10939 .................... #undef FALSE 
                    10940 .................... #endif 
                    10941 ....................  
                    10942 .................... typedef int1   bool; 
                    10943 .................... #define true   1 
                    10944 .................... #define false  0 
                    10945 .................... #define __bool_true_false_are_defined  1 
                    10946 ....................  
                    10947 .................... #endif 
                    10948 ....................  
                    10949 ....................  
                    10950 .................... #define CALIBRATION_AREA_START 0x4000 
                    10951 .................... #define CALIBRATION_AREA_END 0x4FFF 
                    10952 ....................  
                    10953 .................... typedef enum { 
                    10954 ....................   CALIBRATION_TABLE_PARAMS = 0, 
                    10955 ....................   CALIBRATION_TABLE_PA_GAINS_1 = 1, 
                    10956 ....................   CALIBRATION_TABLE_PA_GAINS_2 = 2, 
                    10957 ....................   CALIBRATION_TABLE_MAX = 3 
                    10958 .................... } calibration_table_id_t; 
                    10959 ....................  
                    10960 .................... typedef enum { 
                    10961 ....................   PARAM_CAL_TBL_VERSION = 0, 
                    10962 ....................   PARAM_SERIAL_NUM = 1, 
                    10963 ....................   PARAM_TEMP_MULT = 2, 
                    10964 ....................   PARAM_FWD_MULT = 3, 
                    10965 ....................   PARAM_REV_TRESH = 4, 
                    10966 ....................   PARAM_INP_PWR_MULT = 5, 
                    10967 ....................   PARAM_PWR_CURRENT_MULT = 6, 
                    10968 ....................   PARAM_PRE_AMP_MULT = 7, 
                    10969 ....................   PARAM_ISENSE_PA1_MULT = 8, 
                    10970 ....................   PARAM_ISENSE_PA2_MULT = 9, 
                    10971 ....................   PARAM_BOOT_WAIT_TIME_USEC = 10, 
                    10972 ....................   PARAM_TX_ON_TIMING_USEC = 11, 
                    10973 ....................   PARAM_TX_OFF_TIMING_USEC = 12, 
                    10974 ....................   PARAM_PA_ON_TIMING_USEC = 13, 
                    10975 ....................   PARAM_PA_OFF_TIMING_USEC = 14, 
                    10976 ....................   PARAM_ANT_SEL_TIMING_USEC = 15, 
                    10977 ....................   PARAM_FWD_SAMP_TIMING_USEC = 16, 
                    10978 ....................   PARAM_REV_SAMP_TIMING_USEC = 17, 
                    10979 ....................   PARAM_INP_PWR_SAMP_TIMING_USEC = 18, 
                    10980 .................... } calibration_param_t; 
                    10981 ....................  
                    10982 .................... #define CALIBRATION_TABLE_INDEX_MAX 32 
                    10983 ....................  
                    10984 .................... void get_calibration_table_data(calibration_table_id_t table_id, void* table_data); 
                    10985 .................... void set_calibration_table_data(calibration_table_id_t table_id, void* table_data); 
                    10986 .................... #INLINE 
                    10987 .................... uint16_t get_calibration_param(calibration_table_id_t table, uint8_t index); 
                    10988 .................... void set_calibration_param(calibration_table_id_t table, uint8_t index, uint16_t value); 
                    10989 ....................  
                    10990 .................... #endif /* CALIBRATION_H_ */ 
                    10991 ....................  
                    10992 ....................  
                    10993 .................... enum { 
                    10994 ....................   NUM_ADC_SAMPLES = 4, 
                    10995 .................... }; 
                    10996 ....................  
                    10997 .................... enum { 
                    10998 ....................   OP_CONTROL_MESSAGE = 0x00, 
                    10999 ....................   OP_VERSION_REQUEST_MESSAGE = 0x02, 
                    11000 ....................   OP_CHANGE_MODE_MESSAGE = 0x03, 
                    11001 ....................   OP_SET_CALIBRATION_TABLE_MESSAGE = 0x04, 
                    11002 ....................   OP_GET_CALIBRATION_TABLE_MESSAGE = 0x05, 
                    11003 ....................   OP_SET_DATA_LINE_MESSAGE = 0x06, 
                    11004 ....................   OP_GET_DATA_LINE_MESSAGE = 0x07, 
                    11005 ....................   OP_FINISH_UPDATE_PROCESS_MESSAGE = 0x08, 
                    11006 ....................   OP_BIT_STATUS_REQUEST_MESSAGE = 0x09, 
                    11007 .................... }; 
                    11008 ....................  
                    11009 .................... enum { 
                    11010 ....................   OP_ACK_RESPONSE = 0x80, 
                    11011 ....................   OP_SF_STATUS_RESPONSE = 0x81, 
                    11012 ....................   OP_VERSION_RESPONSE = 0x82, 
                    11013 ....................   OP_GET_CALIBRATION_TABLE_RESPONSE = 0x85, 
                    11014 ....................   OP_SET_DATA_LINE_RESPONSE = 0x86, 
                    11015 ....................   OP_GET_DATA_LINE_RESPONSE = 0x87, 
                    11016 ....................   OP_BIT_STATUS_RESPONSE = 0x89, 
                    11017 .................... }; 
                    11018 ....................  
                    11019 .................... typedef enum { 
                    11020 ....................   MODE_OPERATIONAL = 0, 
                    11021 ....................   MODE_TECHNICIAN = 1, 
                    11022 ....................   MODE_MAINTENANCE = 2, 
                    11023 .................... } software_mode_t; 
                    11024 ....................  
                    11025 .................... enum { 
                    11026 ....................   CALIBRATION_TABLE_TEMP = 0, 
                    11027 ....................   CALIBRATION_TABLE_FWD = 1, 
                    11028 ....................   CALIBRATION_TABLE_REV = 2, 
                    11029 ....................   CALIBRATION_TABLE_INP = 3, 
                    11030 ....................   CALIBRATION_TABLE_CURRENT = 4, 
                    11031 ....................   CALIBRATION_TABLE_PA_BIAS = 5, 
                    11032 ....................   CALIBRATION_TABLE_TIMING = 6, 
                    11033 ....................   CALIBRATION_TABLE_GENERAL = 7, 
                    11034 .................... }; 
                    11035 ....................  
                    11036 .................... enum { 
                    11037 ....................   PROGRAMMING_STATUS_OK = 0, 
                    11038 ....................   PROGRAMMING_STATUS_ERROR = 1, 
                    11039 .................... }; 
                    11040 ....................  
                    11041 .................... typedef struct message_t { 
                    11042 ....................   uint8_t opcode; 
                    11043 ....................   uint8_t payload[]; /* this will include the payload and the crc */ 
                    11044 .................... } message_t; 
                    11045 ....................  
                    11046 .................... typedef struct generic_response_t { 
                    11047 ....................   uint8_t opcode; 
                    11048 .................... } generic_response_t; 
                    11049 ....................  
                    11050 .................... /* message payloads*/ 
                    11051 ....................  
                    11052 .................... typedef struct control_bits_t { 
                    11053 ....................   uint8_t tx_on : 1; 
                    11054 ....................   uint8_t pa_gain : 3; 
                    11055 ....................   uint8_t tx_ant : 1; 
                    11056 ....................   uint8_t amplifier_operation_frequency : 1; 
                    11057 ....................   uint8_t reset : 1; 
                    11058 ....................   uint8_t dont_change : 1; 
                    11059 .................... } control_bits_t; 
                    11060 ....................  
                    11061 .................... typedef struct control_message_payload_t { 
                    11062 ....................   control_bits_t bits; 
                    11063 ....................   uint16_t control_identifier; 
                    11064 .................... } control_message_payload_t; 
                    11065 ....................  
                    11066 .................... typedef struct change_mode_message_payload_t { 
                    11067 ....................   uint8_t mode; 
                    11068 .................... } change_mode_message_payload_t; 
                    11069 ....................  
                    11070 ....................  
                    11071 .................... typedef struct set_calibration_table_message_payload_t { 
                    11072 ....................   uint8_t table_id; 
                    11073 ....................   uint16_t params[CALIBRATION_TABLE_INDEX_MAX]; 
                    11074 .................... } set_calibration_table_message_payload_t; 
                    11075 ....................  
                    11076 .................... typedef struct get_calibration_table_message_payload_t { 
                    11077 ....................   uint8_t table_id; 
                    11078 .................... } get_calibration_table_message_payload_t; 
                    11079 ....................  
                    11080 .................... typedef struct set_data_line_payload_t { 
                    11081 ....................   uint32_t address; 
                    11082 ....................   uint8_t data[64]; 
                    11083 .................... } set_data_line_payload_t; 
                    11084 ....................  
                    11085 .................... typedef struct get_data_line_payload_t { 
                    11086 ....................   uint32_t address; 
                    11087 .................... } get_data_line_payload_t; 
                    11088 ....................  
                    11089 .................... /* responses */ 
                    11090 ....................  
                    11091 .................... typedef struct ack_response_t { 
                    11092 ....................   generic_response_t generic; 
                    11093 .................... } ack_response_t; 
                    11094 ....................  
                    11095 .................... typedef struct sf_status_response_t { 
                    11096 ....................   generic_response_t generic; 
                    11097 ....................   control_bits_t last_control_bits; 
                    11098 ....................   uint16_t tti_counter; 
                    11099 ....................   uint16_t control_identifier; 
                    11100 ....................   uint16_t fwd_power_values[NUM_ADC_SAMPLES]; 
                    11101 .................... //  uint16_t reverse_power_values[NUM_ADC_SAMPLES];		//yehuda move rev power to bit status 
                    11102 ....................   uint16_t input_power_values[NUM_ADC_SAMPLES]; 
                    11103 ....................   //uint16_t pre_amp_power_values[NUM_ADC_SAMPLES];		//yehuda move pre amp to bit status 
                    11104 ....................   uint16_t temperature; 
                    11105 ....................   uint16_t power_amplifier_current; 
                    11106 ....................   uint8_t reverse_power_status;							//Difference between forword power and reverse power compared to general calibration rev tresh param 
                    11107 .................... } sf_status_response_t; 
                    11108 ....................  
                    11109 .................... typedef struct bit_status_response_t { 
                    11110 ....................   generic_response_t generic; 
                    11111 ....................   control_bits_t last_control_bits; 
                    11112 ....................   uint16_t tti_counter; 
                    11113 ....................   uint8_t mode; 
                    11114 ....................   uint16_t pre_amp_power_values[NUM_ADC_SAMPLES]; 		//yehuda add pre amp to bit status 
                    11115 ....................   uint16_t reverse_power_values[NUM_ADC_SAMPLES];		//yehuda add rev power to bit status 
                    11116 .................... } bit_status_response_t; 
                    11117 ....................  
                    11118 .................... typedef struct version_response_t { 
                    11119 ....................   generic_response_t generic; 
                    11120 ....................   uint8_t day; 
                    11121 ....................   uint8_t month; 
                    11122 ....................   uint16_t year; 
                    11123 ....................   uint8_t major; 
                    11124 ....................   uint8_t minor; 
                    11125 ....................   uint16_t serial_number; 
                    11126 .................... } version_response_t; 
                    11127 ....................  
                    11128 .................... typedef struct calibration_table_response_t { 
                    11129 ....................   generic_response_t generic; 
                    11130 ....................   uint8_t table_id; 
                    11131 ....................   uint16_t params[CALIBRATION_TABLE_INDEX_MAX]; 
                    11132 .................... } calibration_table_response_t; 
                    11133 ....................  
                    11134 .................... typedef struct set_data_line_response_t { 
                    11135 ....................   generic_response_t generic; 
                    11136 ....................   uint32_t address; 
                    11137 ....................   uint8_t status; 
                    11138 .................... } set_data_line_response_t; 
                    11139 ....................  
                    11140 .................... typedef struct get_data_line_response_t { 
                    11141 ....................   generic_response_t generic; 
                    11142 ....................   uint32_t address; 
                    11143 ....................   uint8_t data[64]; 
                    11144 .................... } get_data_line_response_t; 
                    11145 ....................  
                    11146 .................... #endif /* MESSAGE_H_ */ 
                    11147 ....................  
                    11148 ....................  
                    11149 .................... /* 
                    11150 ....................  * rfc1662.h 
                    11151 ....................  * 
                    11152 ....................  *  Created on: 09/01/2011 
                    11153 ....................  *      Author: asafe 
                    11154 ....................  */ 
                    11155 ....................  
                    11156 .................... #ifndef __RFC1662_H__ 
                    11157 .................... #define __RFC1662_H__ 
                    11158 ....................  
                    11159 .................... #define CHAR_FLAG 0x7E 
                    11160 .................... #define CHAR_FLAG_XORED 0x5E 
                    11161 .................... #define CHAR_ESCAPE 0x7D 
                    11162 .................... #define CHAR_ESCAPE_XORED 0x5D 
                    11163 ....................  
                    11164 .................... int rfc1662_unpack(unsigned char *data, int len, unsigned char *dest); 
                    11165 .................... int rfc1662_pack(unsigned char *data, int dataLen, unsigned char *dest); 
                    11166 ....................  
                    11167 .................... #endif /* __RFC1662_H__ */ 
                    11168 ....................  
                    11169 ....................  
                    11170 .................... #ifndef INCLUDE_TIMER_H_ 
                    11171 .................... #define INCLUDE_TIMER_H_ 
                    11172 ....................  
                    11173 .................... #include <stdint.h> 
                    11174 .................... /////////////////////////////////////////////////////////////////////////// 
                    11175 .................... ////                                                                   //// 
                    11176 .................... ////                           stdint.h                                //// 
                    11177 .................... ////                                                                   //// 
                    11178 .................... //// Standard integer definitions.                                     //// 
                    11179 .................... ////                                                                   //// 
                    11180 .................... /////////////////////////////////////////////////////////////////////////// 
                    11181 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    11182 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    11183 .................... //// compiler.  This source code may only be distributed to other      //// 
                    11184 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    11185 .................... //// or distribution is permitted without written permission.          //// 
                    11186 .................... //// Derivative programs created using this software in object code    //// 
                    11187 .................... //// form are not restricted in any way.                               //// 
                    11188 .................... /////////////////////////////////////////////////////////////////////////// 
                    11189 ....................  
                    11190 .................... #ifndef _STDINT 
                    11191 ....................  
                    11192 .................... #define _STDINT 
                    11193 ....................  
                    11194 .................... //////////// exact width 
                    11195 ....................  
                    11196 .................... typedef signed int8 int8_t; 
                    11197 .................... typedef unsigned int8 uint8_t; 
                    11198 .................... typedef signed int16 int16_t; 
                    11199 .................... typedef unsigned int16 uint16_t; 
                    11200 .................... typedef signed int32 int32_t; 
                    11201 .................... typedef unsigned int32 uint32_t; 
                    11202 ....................  
                    11203 .................... #if defined(__PCD__) 
                    11204 .................... //typedef signed int24 int24_t; 
                    11205 .................... //typedef unsigned int24 uint24_t; 
                    11206 .................... typedef signed int64 int64_t; 
                    11207 .................... typedef unsigned int64 uint64_t; 
                    11208 .................... #endif 
                    11209 ....................  
                    11210 .................... #define INT8_MAX  (128) 
                    11211 .................... #define INT8_MIN  (-127) 
                    11212 .................... #define UINT8_MAX (255) 
                    11213 ....................  
                    11214 .................... #define INT16_MAX  (32767) 
                    11215 .................... #define INT16_MIN  (-32768) 
                    11216 .................... #define UINT16_MAX (65535) 
                    11217 ....................  
                    11218 .................... #define INT32_MAX  (2147483647) 
                    11219 .................... #define INT32_MIN  (-2147483648) 
                    11220 .................... #define UINT32_MAX (4294967295) 
                    11221 ....................  
                    11222 .................... #if defined(__PCD__) 
                    11223 .................... //#define INT24_MAX  (8388607) 
                    11224 .................... //#define INT24_MIN  (-8388608) 
                    11225 .................... //#define UINT24_MAX (16777215) 
                    11226 ....................  
                    11227 .................... #define INT64_MAX  (9223372036854775807) 
                    11228 .................... #define INT64_MIN  (-9223372036854775808) 
                    11229 .................... #define UINT64_MAX (18446744073709551615) 
                    11230 .................... #endif 
                    11231 ....................  
                    11232 .................... ///////// minimum width 
                    11233 ....................  
                    11234 .................... typedef signed int8 int_least8_t; 
                    11235 .................... typedef unsigned int8 uint_least8_t; 
                    11236 .................... typedef signed int16 int_least16_t; 
                    11237 .................... typedef unsigned int16 uint_least16_t; 
                    11238 .................... typedef signed int32 int_least32_t; 
                    11239 .................... typedef unsigned int32 uint_least32_t; 
                    11240 ....................  
                    11241 .................... #if defined(__PCD__) 
                    11242 .................... //typedef signed int24 int_least24_t; 
                    11243 .................... //typedef unsigned int24 uint_least24_t; 
                    11244 .................... typedef signed int64 int_least64_t; 
                    11245 .................... typedef unsigned int64 uint_least64_t; 
                    11246 .................... #endif 
                    11247 ....................  
                    11248 .................... #define INT_LEAST8_MAX  (128) 
                    11249 .................... #define INT_LEAST8_MIN  (-127) 
                    11250 .................... #define UINT_LEAST8_MAX (255) 
                    11251 ....................  
                    11252 .................... #define INT_LEAST16_MAX  (32767) 
                    11253 .................... #define INT_LEAST16_MIN  (-32768) 
                    11254 .................... #define UINT_LEAST16_MAX (65535) 
                    11255 ....................  
                    11256 .................... #define INT_LEAST32_MAX  (2147483647) 
                    11257 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    11258 .................... #define UINT_LEAST32_MAX (4294967295) 
                    11259 ....................  
                    11260 .................... #if defined(__PCD__) 
                    11261 .................... //#define INT_LEAST24_MAX  (8388607) 
                    11262 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    11263 .................... //#define UINT_LEAST24_MAX (16777215) 
                    11264 ....................  
                    11265 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    11266 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    11267 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    11268 .................... #endif 
                    11269 ....................  
                    11270 .................... ///////// fastest width 
                    11271 ....................  
                    11272 .................... #if defined(__PCD__) 
                    11273 .................... typedef signed int16 int_fast8_t; 
                    11274 .................... typedef unsigned int16 uint_fast8_t; 
                    11275 .................... #define INT_FAST8_MAX  (32767) 
                    11276 .................... #define INT_FAST8_MIN  (-32768) 
                    11277 .................... #define UINT_FAST8_MAX (65535) 
                    11278 .................... typedef signed int16 int_fast16_t; 
                    11279 .................... typedef unsigned int16 uint_fast16_t; 
                    11280 .................... //typedef signed int24 int_fast24_t; 
                    11281 .................... //typedef unsigned int24 uint_fast24_t; 
                    11282 .................... typedef signed int64 int_fast64_t; 
                    11283 .................... typedef unsigned int64 uint_fast64_t; 
                    11284 .................... #else 
                    11285 .................... typedef signed int8 int_fast8_t; 
                    11286 .................... typedef unsigned int8 uint_fast8_t; 
                    11287 .................... #define INT_FAST8_MAX  (128) 
                    11288 .................... #define INT_FAST8_MIN  (-127) 
                    11289 .................... #define UINT_FAST8_MAX (255) 
                    11290 .................... typedef signed int16 int_fast16_t; 
                    11291 .................... typedef unsigned int16 uint_fast16_t; 
                    11292 .................... #endif 
                    11293 ....................  
                    11294 .................... typedef signed int32 int_fast32_t; 
                    11295 .................... typedef unsigned int32 uint_fast32_t; 
                    11296 ....................  
                    11297 .................... #define INT_FAST16_MAX  (32767) 
                    11298 .................... #define INT_FAST16_MIN  (-32768) 
                    11299 .................... #define UINT_FAST16_MAX (65535) 
                    11300 ....................  
                    11301 .................... #define INT_FAST32_MAX  (2147483647) 
                    11302 .................... #define INT_FAST32_MIN  (-2147483648) 
                    11303 .................... #define UINT_FAST32_MAX (4294967295) 
                    11304 ....................  
                    11305 .................... #if defined(__PCD__) 
                    11306 .................... //#define INT_FAST24_MAX  (8388607) 
                    11307 .................... //#define INT_FAST24_MIN  (-8388608) 
                    11308 .................... //#define UINT_FAST24_MAX (16777215) 
                    11309 ....................  
                    11310 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    11311 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    11312 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    11313 .................... #endif 
                    11314 ....................  
                    11315 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    11316 ....................  
                    11317 .................... /// TODO 
                    11318 ....................  
                    11319 .................... /// intptr_t uintptr_t 
                    11320 ....................  
                    11321 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    11322 ....................  
                    11323 ....................  
                    11324 .................... /////////// greatest width (OPTIONAL) 
                    11325 ....................  
                    11326 .................... /// TODO 
                    11327 ....................  
                    11328 .................... /// intmax_t uintmax_t 
                    11329 ....................  
                    11330 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    11331 ....................  
                    11332 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    11333 ....................  
                    11334 ....................  
                    11335 .................... #endif 
                    11336 ....................  
                    11337 .................... #include <stdbool.h> 
                    11338 .................... /////////////////////////////////////////////////////////////////////////// 
                    11339 .................... ////                                                                   //// 
                    11340 .................... ////                          stdbool.h                                //// 
                    11341 .................... ////                                                                   //// 
                    11342 .................... //// Standard boolean definitions                                      //// 
                    11343 .................... ////                                                                   //// 
                    11344 .................... /////////////////////////////////////////////////////////////////////////// 
                    11345 .................... ////        (C) Copyright 1996,2012 Custom Computer Services           //// 
                    11346 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    11347 .................... //// compiler.  This source code may only be distributed to other      //// 
                    11348 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    11349 .................... //// or distribution is permitted without written permission.          //// 
                    11350 .................... //// Derivative programs created using this software in object code    //// 
                    11351 .................... //// form are not restricted in any way.                               //// 
                    11352 .................... /////////////////////////////////////////////////////////////////////////// 
                    11353 ....................  
                    11354 .................... #ifndef __STDBOOL_H__ 
                    11355 .................... #define __STDBOOL_H__ 
                    11356 ....................  
                    11357 .................... //remove TRUE and FALSE added by CCS's device .h file 
                    11358 .................... #if defined(TRUE) 
                    11359 .................... #undef TRUE 
                    11360 .................... #endif 
                    11361 .................... #if defined(FALSE) 
                    11362 .................... #undef FALSE 
                    11363 .................... #endif 
                    11364 ....................  
                    11365 .................... typedef int1   bool; 
                    11366 .................... #define true   1 
                    11367 .................... #define false  0 
                    11368 .................... #define __bool_true_false_are_defined  1 
                    11369 ....................  
                    11370 .................... #endif 
                    11371 ....................  
                    11372 ....................  
                    11373 .................... typedef void (*timer_func)(void* arg); 
                    11374 ....................  
                    11375 .................... typedef struct { 
                    11376 ....................   //bool triggred; 
                    11377 ....................   uint32_t expTime; 
                    11378 ....................   void *arg; 
                    11379 ....................   timer_func func; 
                    11380 .................... } timer_task_t; 
                    11381 ....................  
                    11382 .................... #INLINE 
                    11383 .................... uint32_t timer_get_us_count(); 
                    11384 .................... bool timer_registerTask(uint32_t expTime, timer_func func, void *arg); 
                    11385 .................... void timer_yield(); 
                    11386 ....................  
                    11387 .................... #endif /* INCLUDE_TIMER_H_ */ 
                    11388 ....................  
                    11389 ....................  
                    11390 .................... /* 
                    11391 ....................  * message_handlers.h 
                    11392 ....................  * 
                    11393 ....................  *  Created on: Mar 26, 2017 
                    11394 ....................  *      Author: asaf 
                    11395 ....................  */ 
                    11396 ....................  
                    11397 .................... #ifndef MESSAGE_HANDLERS_H_ 
                    11398 .................... #define MESSAGE_HANDLERS_H_ 
                    11399 ....................  
                    11400 .................... void init_message_handlers(); 
                    11401 .................... void process_message(uint8_t* message, uint16_t length); 
                    11402 .................... #INLINE 
                    11403 .................... void perform_last_control_message(); 
                    11404 .................... void control_handle_timer(); 
                    11405 .................... void samp_if_needed(); 
                    11406 ....................  
                    11407 .................... #endif /* MESSAGE_HANDLERS_H_ */ 
                    11408 ....................  
                    11409 ....................  
                    11410 ....................  
                    11411 ....................  
                    11412 ....................  
                    11413 ....................  
                    11414 ....................  
387C D7F6           11415 BRA    386A
                    11416 ....................  
387E EF9A F016      11417 GOTO   2D34 (RETURN)
                    11418 ....................  
                    11419 ....................  
                    11420 ....................  
                    11421 ....................  
537C 0103           11422 MOVLB  3
537E 91D9           11423 BCF    xD9.0
5380 6BDA           11424 CLRF   xDA
                    11425 ....................  
                    11426 ....................  
                    11427 ....................  
                    11428 ....................  
                    11429 ....................  
                    11430 ....................  
5382 0E03           11431 MOVLW  03
5384 6FDE           11432 MOVWF  xDE
5386 0EDB           11433 MOVLW  DB
5388 6FDD           11434 MOVWF  xDD
538A 0100           11435 MOVLB  0
538C EFD5 F01F      11436 GOTO   3FAA
5390 5201           11437 MOVF   01,F
5392 E101           11438 BNZ   5396
                    11439 ....................  
                    11440 ....................  
5394 D020           11441 BRA    53D6
                    11442 ....................  
                    11443 ....................  
5396 6A03           11444 CLRF   03
5398 0103           11445 MOVLB  3
539A 51DA           11446 MOVF   xDA,W
539C 0F71           11447 ADDLW  71
539E 6EE9           11448 MOVWF  FE9
53A0 0E00           11449 MOVLW  00
53A2 2003           11450 ADDWFC 03,W
53A4 6EEA           11451 MOVWF  FEA
53A6 C3DB FFEF      11452 MOVFF  3DB,FEF
                    11453 ....................  
                    11454 ....................  
53AA 6A03           11455 CLRF   03
53AC 51DA           11456 MOVF   xDA,W
53AE 0F71           11457 ADDLW  71
53B0 6EE9           11458 MOVWF  FE9
53B2 0E00           11459 MOVLW  00
53B4 2003           11460 ADDWFC 03,W
53B6 6EEA           11461 MOVWF  FEA
53B8 50EF           11462 MOVF   FEF,W
53BA 087E           11463 SUBLW  7E
53BC E006           11464 BZ    53CA
                    11465 ....................  
53BE 2BDA           11466 INCF   xDA,F
                    11467 ....................  
53C0 51DA           11468 MOVF   xDA,W
53C2 08A2           11469 SUBLW  A2
53C4 E101           11470 BNZ   53C8
                    11471 ....................  
53C6 6BDA           11472 CLRF   xDA
                    11473 ....................  
                    11474 ....................  
53C8 D006           11475 BRA    53D6
                    11476 ....................  
53CA 51DA           11477 MOVF   xDA,W
53CC 0801           11478 SUBLW  01
53CE E202           11479 BC    53D4
                    11480 ....................  
53D0 81D9           11481 BSF    xD9.0
                    11482 ....................  
53D2 D001           11483 BRA    53D6
                    11484 ....................  
                    11485 ....................  
53D4 6BDA           11486 CLRF   xDA
                    11487 ....................  
                    11488 ....................  
                    11489 ....................  
53D6 0103           11490 MOVLB  3
53D8 A1D9           11491 BTFSS  xD9.0
53DA D7D3           11492 BRA    5382
                    11493 ....................  
                    11494 ....................  
53DC A1D9           11495 BTFSS  xD9.0
53DE D01F           11496 BRA    541E
                    11497 ....................  
53E0 6BDE           11498 CLRF   xDE
53E2 0E71           11499 MOVLW  71
53E4 6FDD           11500 MOVWF  xDD
53E6 C3DA F3DF      11501 MOVFF  3DA,3DF
53EA C3D6 F3E1      11502 MOVFF  3D6,3E1
53EE C3D5 F3E0      11503 MOVFF  3D5,3E0
53F2 0100           11504 MOVLB  0
53F4 D788           11505 BRA    5306
53F6 C001 F3DC      11506 MOVFF  01,3DC
                    11507 ....................  
53FA 0103           11508 MOVLB  3
53FC 51DC           11509 MOVF   xDC,W
53FE 08FF           11510 SUBLW  FF
5400 E103           11511 BNZ   5408
                    11512 ....................  
                    11513 ....................  
                    11514 ....................  
5402 0E00           11515 MOVLW  00
5404 6E01           11516 MOVWF  01
5406 D00D           11517 BRA    5422
                    11518 ....................  
                    11519 ....................  
5408 C3D7 FFE9      11520 MOVFF  3D7,FE9
540C C3D8 FFEA      11521 MOVFF  3D8,FEA
5410 6AEC           11522 CLRF   FEC
5412 52ED           11523 MOVF   FED,F
5414 C3DC FFEF      11524 MOVFF  3DC,FEF
                    11525 ....................  
5418 0E01           11526 MOVLW  01
541A 6E01           11527 MOVWF  01
541C D002           11528 BRA    5422
                    11529 ....................  
                    11530 ....................  
                    11531 ....................  
541E 0E00           11532 MOVLW  00
5420 6E01           11533 MOVWF  01
                    11534 ....................  
5422 0100           11535 MOVLB  0
5424 EF07 F017      11536 GOTO   2E0E (RETURN)
                    11537 ....................  
                    11538 ....................  
5686 C427 F42D      11539 MOVFF  427,42D
568A C426 F42C      11540 MOVFF  426,42C
568E C428 F42E      11541 MOVFF  428,42E
5692 0104           11542 MOVLB  4
5694 6B30           11543 CLRF   x30
5696 0E71           11544 MOVLW  71
5698 6F2F           11545 MOVWF  x2F
569A 0100           11546 MOVLB  0
569C D728           11547 BRA    54EE
569E 0104           11548 MOVLB  4
56A0 6B2B           11549 CLRF   x2B
56A2 C001 F42A      11550 MOVFF  01,42A
                    11551 ....................  
                    11552 ....................  
56A6 6B2D           11553 CLRF   x2D
56A8 0E71           11554 MOVLW  71
56AA 6F2C           11555 MOVWF  x2C
56AC C42A F42E      11556 MOVFF  42A,42E
56B0 0100           11557 MOVLB  0
56B2 EFF0 F01F      11558 GOTO   3FE0
                    11559 ....................  
56B6 0012           11560 RETURN 0
                    11561 ....................  
                    11562 ....................  
                    11563 ....................  
                    11564 ....................  
                    11565 ....................  
                    11566 ....................  
                    11567 ....................  
                    11568 ....................  
                    11569 ....................  
                    11570 .................... #include <18F45K22.h> 
                    11571 .................... //////// Standard Header file for the PIC18F45K22 device //////////////// 
                    11572 .................... #device PIC18F45K22 
                    12365 .................... #list 
                    12366 ....................  
                    12367 .................... #device adc=10 
                    12368 .................... #device pass_strings=in_ram 
                    12369 ....................  
                    12370 .................... #define LOADER_END 0x1FFF 
                    12371 .................... #include <boot.h> 
                    12372 .................... #undef LOADER_END 
                    12373 .................... #define FLASH_SIZE getenv("FLASH_ERASE_SIZE") 
                    12374 .................... #define LOADER_END   0x1FFF 
                    12375 .................... #define LOADER_SIZE  0x3FF 
                    12376 ....................  
                    12377 .................... #ifndef _bootloader 
                    12378 .................... #build(reset=LOADER_END+1, interrupt=LOADER_END+9) 
                    12379 ....................  
                    12380 .................... /* when in operational software, keep out of the bootloader sections */ 
                    12381 .................... #org 0, 0xfff {} 
                    12382 .................... #org 0x1000, 0x1ffe {} 
                    12383 ....................  
                    12384 .................... #else 
                    12385 ....................  
                    12386 .................... /* when in the bootloader, keep out of the operational sections */ 
                    12387 .................... #org 0x2000, 0x7ffe {} 
                    12388 ....................  
                    12389 .................... #endif 
                    12390 ....................  
                    12391 ....................  
                    12392 .................... #FUSES NOWDT                   //No Watch Dog Timer 
                    12393 .................... #FUSES WDT128                  //Watch Dog Timer uses 1:128 Postscale 
                    12394 .................... #FUSES INTRC_IO                //Internal RC Osc, no CLKOUT 
                    12395 .................... #FUSES NOBROWNOUT              //No brownout reset 
                    12396 .................... #FUSES WDT_SW                  //No Watch Dog Timer, enabled in Software 
                    12397 .................... #FUSES NOLVP                   //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
                    12398 .................... #FUSES NOPUT 
                    12399 .................... #FUSES NOXINST                 //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
                    12400 ....................  
                    12401 .................... #use delay(clock=64000000) 
                    12402 .................... #use rs232(baud=921600,xmit=PIN_C6,rcv=PIN_C7,ERRORS) 
                    12403 .................... #USE TIMER(TIMER=1,TICK=1us,BITS=32,NOISR) 
                    12404 .................... #use spi(DO=PIN_A4, CLK=PIN_A3, ENABLE=PIN_A2, ENABLE_ACTIVE=0, DATA_HOLD=20, BITS=16) 
                    12405 ....................  
                    12406 .................... #opt 9 
                    12407 ....................  
                    12408 .................... #use fast_io(a) 
                    12409 .................... #use fast_io(b) 
                    12410 .................... #use fast_io(c) 
                    12411 .................... #use fast_io(d) 
                    12412 .................... #use fast_io(e) 
                    12413 ....................  
                    12414 .................... #define safe_write_program_memory(address, pointer, size) \ 
                    12415 ....................   do { disable_interrupts(GLOBAL); write_program_memory(address, pointer, size); enable_interrupts(GLOBAL); delay_us(1000); } while (0) 
                    12416 ....................  
                    12417 ....................  
                    12418 ....................  
                    12419 ....................  
                    12420 .................... /////////////////////////////////////////////////////////////////////////// 
                    12421 .................... ////                                                                   //// 
                    12422 .................... ////                           stdint.h                                //// 
                    12423 .................... ////                                                                   //// 
                    12424 .................... //// Standard integer definitions.                                     //// 
                    12425 .................... ////                                                                   //// 
                    12426 .................... /////////////////////////////////////////////////////////////////////////// 
                    12427 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    12428 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    12429 .................... //// compiler.  This source code may only be distributed to other      //// 
                    12430 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    12431 .................... //// or distribution is permitted without written permission.          //// 
                    12432 .................... //// Derivative programs created using this software in object code    //// 
                    12433 .................... //// form are not restricted in any way.                               //// 
                    12434 .................... /////////////////////////////////////////////////////////////////////////// 
                    12435 ....................  
                    12436 .................... #ifndef _STDINT 
                    12437 ....................  
                    12438 .................... #define _STDINT 
                    12439 ....................  
                    12440 .................... //////////// exact width 
                    12441 ....................  
                    12442 .................... typedef signed int8 int8_t; 
                    12443 .................... typedef unsigned int8 uint8_t; 
                    12444 .................... typedef signed int16 int16_t; 
                    12445 .................... typedef unsigned int16 uint16_t; 
                    12446 .................... typedef signed int32 int32_t; 
                    12447 .................... typedef unsigned int32 uint32_t; 
                    12448 ....................  
                    12449 .................... #if defined(__PCD__) 
                    12450 .................... //typedef signed int24 int24_t; 
                    12451 .................... //typedef unsigned int24 uint24_t; 
                    12452 .................... typedef signed int64 int64_t; 
                    12453 .................... typedef unsigned int64 uint64_t; 
                    12454 .................... #endif 
                    12455 ....................  
                    12456 .................... #define INT8_MAX  (128) 
                    12457 .................... #define INT8_MIN  (-127) 
                    12458 .................... #define UINT8_MAX (255) 
                    12459 ....................  
                    12460 .................... #define INT16_MAX  (32767) 
                    12461 .................... #define INT16_MIN  (-32768) 
                    12462 .................... #define UINT16_MAX (65535) 
                    12463 ....................  
                    12464 .................... #define INT32_MAX  (2147483647) 
                    12465 .................... #define INT32_MIN  (-2147483648) 
                    12466 .................... #define UINT32_MAX (4294967295) 
                    12467 ....................  
                    12468 .................... #if defined(__PCD__) 
                    12469 .................... //#define INT24_MAX  (8388607) 
                    12470 .................... //#define INT24_MIN  (-8388608) 
                    12471 .................... //#define UINT24_MAX (16777215) 
                    12472 ....................  
                    12473 .................... #define INT64_MAX  (9223372036854775807) 
                    12474 .................... #define INT64_MIN  (-9223372036854775808) 
                    12475 .................... #define UINT64_MAX (18446744073709551615) 
                    12476 .................... #endif 
                    12477 ....................  
                    12478 .................... ///////// minimum width 
                    12479 ....................  
                    12480 .................... typedef signed int8 int_least8_t; 
                    12481 .................... typedef unsigned int8 uint_least8_t; 
                    12482 .................... typedef signed int16 int_least16_t; 
                    12483 .................... typedef unsigned int16 uint_least16_t; 
                    12484 .................... typedef signed int32 int_least32_t; 
                    12485 .................... typedef unsigned int32 uint_least32_t; 
                    12486 ....................  
                    12487 .................... #if defined(__PCD__) 
                    12488 .................... //typedef signed int24 int_least24_t; 
                    12489 .................... //typedef unsigned int24 uint_least24_t; 
                    12490 .................... typedef signed int64 int_least64_t; 
                    12491 .................... typedef unsigned int64 uint_least64_t; 
                    12492 .................... #endif 
                    12493 ....................  
                    12494 .................... #define INT_LEAST8_MAX  (128) 
                    12495 .................... #define INT_LEAST8_MIN  (-127) 
                    12496 .................... #define UINT_LEAST8_MAX (255) 
                    12497 ....................  
                    12498 .................... #define INT_LEAST16_MAX  (32767) 
                    12499 .................... #define INT_LEAST16_MIN  (-32768) 
                    12500 .................... #define UINT_LEAST16_MAX (65535) 
                    12501 ....................  
                    12502 .................... #define INT_LEAST32_MAX  (2147483647) 
                    12503 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    12504 .................... #define UINT_LEAST32_MAX (4294967295) 
                    12505 ....................  
                    12506 .................... #if defined(__PCD__) 
                    12507 .................... //#define INT_LEAST24_MAX  (8388607) 
                    12508 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    12509 .................... //#define UINT_LEAST24_MAX (16777215) 
                    12510 ....................  
                    12511 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    12512 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    12513 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    12514 .................... #endif 
                    12515 ....................  
                    12516 .................... ///////// fastest width 
                    12517 ....................  
                    12518 .................... #if defined(__PCD__) 
                    12519 .................... typedef signed int16 int_fast8_t; 
                    12520 .................... typedef unsigned int16 uint_fast8_t; 
                    12521 .................... #define INT_FAST8_MAX  (32767) 
                    12522 .................... #define INT_FAST8_MIN  (-32768) 
                    12523 .................... #define UINT_FAST8_MAX (65535) 
                    12524 .................... typedef signed int16 int_fast16_t; 
                    12525 .................... typedef unsigned int16 uint_fast16_t; 
                    12526 .................... //typedef signed int24 int_fast24_t; 
                    12527 .................... //typedef unsigned int24 uint_fast24_t; 
                    12528 .................... typedef signed int64 int_fast64_t; 
                    12529 .................... typedef unsigned int64 uint_fast64_t; 
                    12530 .................... #else 
                    12531 .................... typedef signed int8 int_fast8_t; 
                    12532 .................... typedef unsigned int8 uint_fast8_t; 
                    12533 .................... #define INT_FAST8_MAX  (128) 
                    12534 .................... #define INT_FAST8_MIN  (-127) 
                    12535 .................... #define UINT_FAST8_MAX (255) 
                    12536 .................... typedef signed int16 int_fast16_t; 
                    12537 .................... typedef unsigned int16 uint_fast16_t; 
                    12538 .................... #endif 
                    12539 ....................  
                    12540 .................... typedef signed int32 int_fast32_t; 
                    12541 .................... typedef unsigned int32 uint_fast32_t; 
                    12542 ....................  
                    12543 .................... #define INT_FAST16_MAX  (32767) 
                    12544 .................... #define INT_FAST16_MIN  (-32768) 
                    12545 .................... #define UINT_FAST16_MAX (65535) 
                    12546 ....................  
                    12547 .................... #define INT_FAST32_MAX  (2147483647) 
                    12548 .................... #define INT_FAST32_MIN  (-2147483648) 
                    12549 .................... #define UINT_FAST32_MAX (4294967295) 
                    12550 ....................  
                    12551 .................... #if defined(__PCD__) 
                    12552 .................... //#define INT_FAST24_MAX  (8388607) 
                    12553 .................... //#define INT_FAST24_MIN  (-8388608) 
                    12554 .................... //#define UINT_FAST24_MAX (16777215) 
                    12555 ....................  
                    12556 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    12557 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    12558 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    12559 .................... #endif 
                    12560 ....................  
                    12561 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    12562 ....................  
                    12563 .................... /// TODO 
                    12564 ....................  
                    12565 .................... /// intptr_t uintptr_t 
                    12566 ....................  
                    12567 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    12568 ....................  
                    12569 ....................  
                    12570 .................... /////////// greatest width (OPTIONAL) 
                    12571 ....................  
                    12572 .................... /// TODO 
                    12573 ....................  
                    12574 .................... /// intmax_t uintmax_t 
                    12575 ....................  
                    12576 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    12577 ....................  
                    12578 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    12579 ....................  
                    12580 ....................  
                    12581 .................... #endif 
                    12582 ....................  
                    12583 ....................  
                    12584 .................... /////////////////////////////////////////////////////////////////////////// 
                    12585 .................... ////                                                                   //// 
                    12586 .................... ////                          stdbool.h                                //// 
                    12587 .................... ////                                                                   //// 
                    12588 .................... //// Standard boolean definitions                                      //// 
                    12589 .................... ////                                                                   //// 
                    12590 .................... /////////////////////////////////////////////////////////////////////////// 
                    12591 .................... ////        (C) Copyright 1996,2012 Custom Computer Services           //// 
                    12592 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    12593 .................... //// compiler.  This source code may only be distributed to other      //// 
                    12594 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    12595 .................... //// or distribution is permitted without written permission.          //// 
                    12596 .................... //// Derivative programs created using this software in object code    //// 
                    12597 .................... //// form are not restricted in any way.                               //// 
                    12598 .................... /////////////////////////////////////////////////////////////////////////// 
                    12599 ....................  
                    12600 .................... #ifndef __STDBOOL_H__ 
                    12601 .................... #define __STDBOOL_H__ 
                    12602 ....................  
                    12603 .................... //remove TRUE and FALSE added by CCS's device .h file 
                    12604 .................... #if defined(TRUE) 
                    12605 .................... #undef TRUE 
                    12606 .................... #endif 
                    12607 .................... #if defined(FALSE) 
                    12608 .................... #undef FALSE 
                    12609 .................... #endif 
                    12610 ....................  
                    12611 .................... typedef int1   bool; 
                    12612 .................... #define true   1 
                    12613 .................... #define false  0 
                    12614 .................... #define __bool_true_false_are_defined  1 
                    12615 ....................  
                    12616 .................... #endif 
                    12617 ....................  
                    12618 ....................  
                    12619 ....................  
                    12620 .................... #ifndef MAIN_H_ 
                    12621 .................... #define MAIN_H_ 
                    12622 ....................  
                    12623 .................... #define MAIN_ADDRESS 0x2700 
                    12624 ....................  
                    12625 .................... #define ATOMIC_SET(var, val)    do { \ 
                    12626 ....................                                       disable_interrupts(GLOBAL); \ 
                    12627 ....................                                       var = val; \ 
                    12628 ....................                                       enable_interrupts(GLOBAL); \ 
                    12629 ....................                                 } while(0); 
                    12630 ....................  
                    12631 .................... #endif /* MAIN_H_ */ 
                    12632 ....................  
                    12633 ....................  
                    12634 .................... /* 
                    12635 ....................  * message.h 
                    12636 ....................  * 
                    12637 ....................  *  Created on: Mar 23, 2017 
                    12638 ....................  *      Author: asaf 
                    12639 ....................  */ 
                    12640 ....................  
                    12641 .................... #ifndef MESSAGE_H_ 
                    12642 .................... #define MESSAGE_H_ 
                    12643 ....................  
                    12644 .................... #include <stdint.h> 
                    12645 .................... /////////////////////////////////////////////////////////////////////////// 
                    12646 .................... ////                                                                   //// 
                    12647 .................... ////                           stdint.h                                //// 
                    12648 .................... ////                                                                   //// 
                    12649 .................... //// Standard integer definitions.                                     //// 
                    12650 .................... ////                                                                   //// 
                    12651 .................... /////////////////////////////////////////////////////////////////////////// 
                    12652 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    12653 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    12654 .................... //// compiler.  This source code may only be distributed to other      //// 
                    12655 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    12656 .................... //// or distribution is permitted without written permission.          //// 
                    12657 .................... //// Derivative programs created using this software in object code    //// 
                    12658 .................... //// form are not restricted in any way.                               //// 
                    12659 .................... /////////////////////////////////////////////////////////////////////////// 
                    12660 ....................  
                    12661 .................... #ifndef _STDINT 
                    12662 ....................  
                    12663 .................... #define _STDINT 
                    12664 ....................  
                    12665 .................... //////////// exact width 
                    12666 ....................  
                    12667 .................... typedef signed int8 int8_t; 
                    12668 .................... typedef unsigned int8 uint8_t; 
                    12669 .................... typedef signed int16 int16_t; 
                    12670 .................... typedef unsigned int16 uint16_t; 
                    12671 .................... typedef signed int32 int32_t; 
                    12672 .................... typedef unsigned int32 uint32_t; 
                    12673 ....................  
                    12674 .................... #if defined(__PCD__) 
                    12675 .................... //typedef signed int24 int24_t; 
                    12676 .................... //typedef unsigned int24 uint24_t; 
                    12677 .................... typedef signed int64 int64_t; 
                    12678 .................... typedef unsigned int64 uint64_t; 
                    12679 .................... #endif 
                    12680 ....................  
                    12681 .................... #define INT8_MAX  (128) 
                    12682 .................... #define INT8_MIN  (-127) 
                    12683 .................... #define UINT8_MAX (255) 
                    12684 ....................  
                    12685 .................... #define INT16_MAX  (32767) 
                    12686 .................... #define INT16_MIN  (-32768) 
                    12687 .................... #define UINT16_MAX (65535) 
                    12688 ....................  
                    12689 .................... #define INT32_MAX  (2147483647) 
                    12690 .................... #define INT32_MIN  (-2147483648) 
                    12691 .................... #define UINT32_MAX (4294967295) 
                    12692 ....................  
                    12693 .................... #if defined(__PCD__) 
                    12694 .................... //#define INT24_MAX  (8388607) 
                    12695 .................... //#define INT24_MIN  (-8388608) 
                    12696 .................... //#define UINT24_MAX (16777215) 
                    12697 ....................  
                    12698 .................... #define INT64_MAX  (9223372036854775807) 
                    12699 .................... #define INT64_MIN  (-9223372036854775808) 
                    12700 .................... #define UINT64_MAX (18446744073709551615) 
                    12701 .................... #endif 
                    12702 ....................  
                    12703 .................... ///////// minimum width 
                    12704 ....................  
                    12705 .................... typedef signed int8 int_least8_t; 
                    12706 .................... typedef unsigned int8 uint_least8_t; 
                    12707 .................... typedef signed int16 int_least16_t; 
                    12708 .................... typedef unsigned int16 uint_least16_t; 
                    12709 .................... typedef signed int32 int_least32_t; 
                    12710 .................... typedef unsigned int32 uint_least32_t; 
                    12711 ....................  
                    12712 .................... #if defined(__PCD__) 
                    12713 .................... //typedef signed int24 int_least24_t; 
                    12714 .................... //typedef unsigned int24 uint_least24_t; 
                    12715 .................... typedef signed int64 int_least64_t; 
                    12716 .................... typedef unsigned int64 uint_least64_t; 
                    12717 .................... #endif 
                    12718 ....................  
                    12719 .................... #define INT_LEAST8_MAX  (128) 
                    12720 .................... #define INT_LEAST8_MIN  (-127) 
                    12721 .................... #define UINT_LEAST8_MAX (255) 
                    12722 ....................  
                    12723 .................... #define INT_LEAST16_MAX  (32767) 
                    12724 .................... #define INT_LEAST16_MIN  (-32768) 
                    12725 .................... #define UINT_LEAST16_MAX (65535) 
                    12726 ....................  
                    12727 .................... #define INT_LEAST32_MAX  (2147483647) 
                    12728 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    12729 .................... #define UINT_LEAST32_MAX (4294967295) 
                    12730 ....................  
                    12731 .................... #if defined(__PCD__) 
                    12732 .................... //#define INT_LEAST24_MAX  (8388607) 
                    12733 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    12734 .................... //#define UINT_LEAST24_MAX (16777215) 
                    12735 ....................  
                    12736 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    12737 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    12738 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    12739 .................... #endif 
                    12740 ....................  
                    12741 .................... ///////// fastest width 
                    12742 ....................  
                    12743 .................... #if defined(__PCD__) 
                    12744 .................... typedef signed int16 int_fast8_t; 
                    12745 .................... typedef unsigned int16 uint_fast8_t; 
                    12746 .................... #define INT_FAST8_MAX  (32767) 
                    12747 .................... #define INT_FAST8_MIN  (-32768) 
                    12748 .................... #define UINT_FAST8_MAX (65535) 
                    12749 .................... typedef signed int16 int_fast16_t; 
                    12750 .................... typedef unsigned int16 uint_fast16_t; 
                    12751 .................... //typedef signed int24 int_fast24_t; 
                    12752 .................... //typedef unsigned int24 uint_fast24_t; 
                    12753 .................... typedef signed int64 int_fast64_t; 
                    12754 .................... typedef unsigned int64 uint_fast64_t; 
                    12755 .................... #else 
                    12756 .................... typedef signed int8 int_fast8_t; 
                    12757 .................... typedef unsigned int8 uint_fast8_t; 
                    12758 .................... #define INT_FAST8_MAX  (128) 
                    12759 .................... #define INT_FAST8_MIN  (-127) 
                    12760 .................... #define UINT_FAST8_MAX (255) 
                    12761 .................... typedef signed int16 int_fast16_t; 
                    12762 .................... typedef unsigned int16 uint_fast16_t; 
                    12763 .................... #endif 
                    12764 ....................  
                    12765 .................... typedef signed int32 int_fast32_t; 
                    12766 .................... typedef unsigned int32 uint_fast32_t; 
                    12767 ....................  
                    12768 .................... #define INT_FAST16_MAX  (32767) 
                    12769 .................... #define INT_FAST16_MIN  (-32768) 
                    12770 .................... #define UINT_FAST16_MAX (65535) 
                    12771 ....................  
                    12772 .................... #define INT_FAST32_MAX  (2147483647) 
                    12773 .................... #define INT_FAST32_MIN  (-2147483648) 
                    12774 .................... #define UINT_FAST32_MAX (4294967295) 
                    12775 ....................  
                    12776 .................... #if defined(__PCD__) 
                    12777 .................... //#define INT_FAST24_MAX  (8388607) 
                    12778 .................... //#define INT_FAST24_MIN  (-8388608) 
                    12779 .................... //#define UINT_FAST24_MAX (16777215) 
                    12780 ....................  
                    12781 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    12782 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    12783 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    12784 .................... #endif 
                    12785 ....................  
                    12786 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    12787 ....................  
                    12788 .................... /// TODO 
                    12789 ....................  
                    12790 .................... /// intptr_t uintptr_t 
                    12791 ....................  
                    12792 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    12793 ....................  
                    12794 ....................  
                    12795 .................... /////////// greatest width (OPTIONAL) 
                    12796 ....................  
                    12797 .................... /// TODO 
                    12798 ....................  
                    12799 .................... /// intmax_t uintmax_t 
                    12800 ....................  
                    12801 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    12802 ....................  
                    12803 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    12804 ....................  
                    12805 ....................  
                    12806 .................... #endif 
                    12807 ....................  
                    12808 .................... #include "calibration.h" 
                    12809 .................... #ifndef CALIBRATION_H_ 
                    12810 .................... #define CALIBRATION_H_ 
                    12811 ....................  
                    12812 .................... #include <stdint.h> 
                    12813 .................... /////////////////////////////////////////////////////////////////////////// 
                    12814 .................... ////                                                                   //// 
                    12815 .................... ////                           stdint.h                                //// 
                    12816 .................... ////                                                                   //// 
                    12817 .................... //// Standard integer definitions.                                     //// 
                    12818 .................... ////                                                                   //// 
                    12819 .................... /////////////////////////////////////////////////////////////////////////// 
                    12820 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    12821 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    12822 .................... //// compiler.  This source code may only be distributed to other      //// 
                    12823 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    12824 .................... //// or distribution is permitted without written permission.          //// 
                    12825 .................... //// Derivative programs created using this software in object code    //// 
                    12826 .................... //// form are not restricted in any way.                               //// 
                    12827 .................... /////////////////////////////////////////////////////////////////////////// 
                    12828 ....................  
                    12829 .................... #ifndef _STDINT 
                    12830 ....................  
                    12831 .................... #define _STDINT 
                    12832 ....................  
                    12833 .................... //////////// exact width 
                    12834 ....................  
                    12835 .................... typedef signed int8 int8_t; 
                    12836 .................... typedef unsigned int8 uint8_t; 
                    12837 .................... typedef signed int16 int16_t; 
                    12838 .................... typedef unsigned int16 uint16_t; 
                    12839 .................... typedef signed int32 int32_t; 
                    12840 .................... typedef unsigned int32 uint32_t; 
                    12841 ....................  
                    12842 .................... #if defined(__PCD__) 
                    12843 .................... //typedef signed int24 int24_t; 
                    12844 .................... //typedef unsigned int24 uint24_t; 
                    12845 .................... typedef signed int64 int64_t; 
                    12846 .................... typedef unsigned int64 uint64_t; 
                    12847 .................... #endif 
                    12848 ....................  
                    12849 .................... #define INT8_MAX  (128) 
                    12850 .................... #define INT8_MIN  (-127) 
                    12851 .................... #define UINT8_MAX (255) 
                    12852 ....................  
                    12853 .................... #define INT16_MAX  (32767) 
                    12854 .................... #define INT16_MIN  (-32768) 
                    12855 .................... #define UINT16_MAX (65535) 
                    12856 ....................  
                    12857 .................... #define INT32_MAX  (2147483647) 
                    12858 .................... #define INT32_MIN  (-2147483648) 
                    12859 .................... #define UINT32_MAX (4294967295) 
                    12860 ....................  
                    12861 .................... #if defined(__PCD__) 
                    12862 .................... //#define INT24_MAX  (8388607) 
                    12863 .................... //#define INT24_MIN  (-8388608) 
                    12864 .................... //#define UINT24_MAX (16777215) 
                    12865 ....................  
                    12866 .................... #define INT64_MAX  (9223372036854775807) 
                    12867 .................... #define INT64_MIN  (-9223372036854775808) 
                    12868 .................... #define UINT64_MAX (18446744073709551615) 
                    12869 .................... #endif 
                    12870 ....................  
                    12871 .................... ///////// minimum width 
                    12872 ....................  
                    12873 .................... typedef signed int8 int_least8_t; 
                    12874 .................... typedef unsigned int8 uint_least8_t; 
                    12875 .................... typedef signed int16 int_least16_t; 
                    12876 .................... typedef unsigned int16 uint_least16_t; 
                    12877 .................... typedef signed int32 int_least32_t; 
                    12878 .................... typedef unsigned int32 uint_least32_t; 
                    12879 ....................  
                    12880 .................... #if defined(__PCD__) 
                    12881 .................... //typedef signed int24 int_least24_t; 
                    12882 .................... //typedef unsigned int24 uint_least24_t; 
                    12883 .................... typedef signed int64 int_least64_t; 
                    12884 .................... typedef unsigned int64 uint_least64_t; 
                    12885 .................... #endif 
                    12886 ....................  
                    12887 .................... #define INT_LEAST8_MAX  (128) 
                    12888 .................... #define INT_LEAST8_MIN  (-127) 
                    12889 .................... #define UINT_LEAST8_MAX (255) 
                    12890 ....................  
                    12891 .................... #define INT_LEAST16_MAX  (32767) 
                    12892 .................... #define INT_LEAST16_MIN  (-32768) 
                    12893 .................... #define UINT_LEAST16_MAX (65535) 
                    12894 ....................  
                    12895 .................... #define INT_LEAST32_MAX  (2147483647) 
                    12896 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    12897 .................... #define UINT_LEAST32_MAX (4294967295) 
                    12898 ....................  
                    12899 .................... #if defined(__PCD__) 
                    12900 .................... //#define INT_LEAST24_MAX  (8388607) 
                    12901 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    12902 .................... //#define UINT_LEAST24_MAX (16777215) 
                    12903 ....................  
                    12904 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    12905 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    12906 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    12907 .................... #endif 
                    12908 ....................  
                    12909 .................... ///////// fastest width 
                    12910 ....................  
                    12911 .................... #if defined(__PCD__) 
                    12912 .................... typedef signed int16 int_fast8_t; 
                    12913 .................... typedef unsigned int16 uint_fast8_t; 
                    12914 .................... #define INT_FAST8_MAX  (32767) 
                    12915 .................... #define INT_FAST8_MIN  (-32768) 
                    12916 .................... #define UINT_FAST8_MAX (65535) 
                    12917 .................... typedef signed int16 int_fast16_t; 
                    12918 .................... typedef unsigned int16 uint_fast16_t; 
                    12919 .................... //typedef signed int24 int_fast24_t; 
                    12920 .................... //typedef unsigned int24 uint_fast24_t; 
                    12921 .................... typedef signed int64 int_fast64_t; 
                    12922 .................... typedef unsigned int64 uint_fast64_t; 
                    12923 .................... #else 
                    12924 .................... typedef signed int8 int_fast8_t; 
                    12925 .................... typedef unsigned int8 uint_fast8_t; 
                    12926 .................... #define INT_FAST8_MAX  (128) 
                    12927 .................... #define INT_FAST8_MIN  (-127) 
                    12928 .................... #define UINT_FAST8_MAX (255) 
                    12929 .................... typedef signed int16 int_fast16_t; 
                    12930 .................... typedef unsigned int16 uint_fast16_t; 
                    12931 .................... #endif 
                    12932 ....................  
                    12933 .................... typedef signed int32 int_fast32_t; 
                    12934 .................... typedef unsigned int32 uint_fast32_t; 
                    12935 ....................  
                    12936 .................... #define INT_FAST16_MAX  (32767) 
                    12937 .................... #define INT_FAST16_MIN  (-32768) 
                    12938 .................... #define UINT_FAST16_MAX (65535) 
                    12939 ....................  
                    12940 .................... #define INT_FAST32_MAX  (2147483647) 
                    12941 .................... #define INT_FAST32_MIN  (-2147483648) 
                    12942 .................... #define UINT_FAST32_MAX (4294967295) 
                    12943 ....................  
                    12944 .................... #if defined(__PCD__) 
                    12945 .................... //#define INT_FAST24_MAX  (8388607) 
                    12946 .................... //#define INT_FAST24_MIN  (-8388608) 
                    12947 .................... //#define UINT_FAST24_MAX (16777215) 
                    12948 ....................  
                    12949 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    12950 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    12951 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    12952 .................... #endif 
                    12953 ....................  
                    12954 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    12955 ....................  
                    12956 .................... /// TODO 
                    12957 ....................  
                    12958 .................... /// intptr_t uintptr_t 
                    12959 ....................  
                    12960 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    12961 ....................  
                    12962 ....................  
                    12963 .................... /////////// greatest width (OPTIONAL) 
                    12964 ....................  
                    12965 .................... /// TODO 
                    12966 ....................  
                    12967 .................... /// intmax_t uintmax_t 
                    12968 ....................  
                    12969 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    12970 ....................  
                    12971 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    12972 ....................  
                    12973 ....................  
                    12974 .................... #endif 
                    12975 ....................  
                    12976 .................... #include <stdbool.h> 
                    12977 .................... /////////////////////////////////////////////////////////////////////////// 
                    12978 .................... ////                                                                   //// 
                    12979 .................... ////                          stdbool.h                                //// 
                    12980 .................... ////                                                                   //// 
                    12981 .................... //// Standard boolean definitions                                      //// 
                    12982 .................... ////                                                                   //// 
                    12983 .................... /////////////////////////////////////////////////////////////////////////// 
                    12984 .................... ////        (C) Copyright 1996,2012 Custom Computer Services           //// 
                    12985 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    12986 .................... //// compiler.  This source code may only be distributed to other      //// 
                    12987 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    12988 .................... //// or distribution is permitted without written permission.          //// 
                    12989 .................... //// Derivative programs created using this software in object code    //// 
                    12990 .................... //// form are not restricted in any way.                               //// 
                    12991 .................... /////////////////////////////////////////////////////////////////////////// 
                    12992 ....................  
                    12993 .................... #ifndef __STDBOOL_H__ 
                    12994 .................... #define __STDBOOL_H__ 
                    12995 ....................  
                    12996 .................... //remove TRUE and FALSE added by CCS's device .h file 
                    12997 .................... #if defined(TRUE) 
                    12998 .................... #undef TRUE 
                    12999 .................... #endif 
                    13000 .................... #if defined(FALSE) 
                    13001 .................... #undef FALSE 
                    13002 .................... #endif 
                    13003 ....................  
                    13004 .................... typedef int1   bool; 
                    13005 .................... #define true   1 
                    13006 .................... #define false  0 
                    13007 .................... #define __bool_true_false_are_defined  1 
                    13008 ....................  
                    13009 .................... #endif 
                    13010 ....................  
                    13011 ....................  
                    13012 .................... #define CALIBRATION_AREA_START 0x4000 
                    13013 .................... #define CALIBRATION_AREA_END 0x4FFF 
                    13014 ....................  
                    13015 .................... typedef enum { 
                    13016 ....................   CALIBRATION_TABLE_PARAMS = 0, 
                    13017 ....................   CALIBRATION_TABLE_PA_GAINS_1 = 1, 
                    13018 ....................   CALIBRATION_TABLE_PA_GAINS_2 = 2, 
                    13019 ....................   CALIBRATION_TABLE_MAX = 3 
                    13020 .................... } calibration_table_id_t; 
                    13021 ....................  
                    13022 .................... typedef enum { 
                    13023 ....................   PARAM_CAL_TBL_VERSION = 0, 
                    13024 ....................   PARAM_SERIAL_NUM = 1, 
                    13025 ....................   PARAM_TEMP_MULT = 2, 
                    13026 ....................   PARAM_FWD_MULT = 3, 
                    13027 ....................   PARAM_REV_TRESH = 4, 
                    13028 ....................   PARAM_INP_PWR_MULT = 5, 
                    13029 ....................   PARAM_PWR_CURRENT_MULT = 6, 
                    13030 ....................   PARAM_PRE_AMP_MULT = 7, 
                    13031 ....................   PARAM_ISENSE_PA1_MULT = 8, 
                    13032 ....................   PARAM_ISENSE_PA2_MULT = 9, 
                    13033 ....................   PARAM_BOOT_WAIT_TIME_USEC = 10, 
                    13034 ....................   PARAM_TX_ON_TIMING_USEC = 11, 
                    13035 ....................   PARAM_TX_OFF_TIMING_USEC = 12, 
                    13036 ....................   PARAM_PA_ON_TIMING_USEC = 13, 
                    13037 ....................   PARAM_PA_OFF_TIMING_USEC = 14, 
                    13038 ....................   PARAM_ANT_SEL_TIMING_USEC = 15, 
                    13039 ....................   PARAM_FWD_SAMP_TIMING_USEC = 16, 
                    13040 ....................   PARAM_REV_SAMP_TIMING_USEC = 17, 
                    13041 ....................   PARAM_INP_PWR_SAMP_TIMING_USEC = 18, 
                    13042 .................... } calibration_param_t; 
                    13043 ....................  
                    13044 .................... #define CALIBRATION_TABLE_INDEX_MAX 32 
                    13045 ....................  
                    13046 .................... void get_calibration_table_data(calibration_table_id_t table_id, void* table_data); 
                    13047 .................... void set_calibration_table_data(calibration_table_id_t table_id, void* table_data); 
                    13048 .................... #INLINE 
                    13049 .................... uint16_t get_calibration_param(calibration_table_id_t table, uint8_t index); 
                    13050 .................... void set_calibration_param(calibration_table_id_t table, uint8_t index, uint16_t value); 
                    13051 ....................  
                    13052 .................... #endif /* CALIBRATION_H_ */ 
                    13053 ....................  
                    13054 ....................  
                    13055 .................... enum { 
                    13056 ....................   NUM_ADC_SAMPLES = 4, 
                    13057 .................... }; 
                    13058 ....................  
                    13059 .................... enum { 
                    13060 ....................   OP_CONTROL_MESSAGE = 0x00, 
                    13061 ....................   OP_VERSION_REQUEST_MESSAGE = 0x02, 
                    13062 ....................   OP_CHANGE_MODE_MESSAGE = 0x03, 
                    13063 ....................   OP_SET_CALIBRATION_TABLE_MESSAGE = 0x04, 
                    13064 ....................   OP_GET_CALIBRATION_TABLE_MESSAGE = 0x05, 
                    13065 ....................   OP_SET_DATA_LINE_MESSAGE = 0x06, 
                    13066 ....................   OP_GET_DATA_LINE_MESSAGE = 0x07, 
                    13067 ....................   OP_FINISH_UPDATE_PROCESS_MESSAGE = 0x08, 
                    13068 ....................   OP_BIT_STATUS_REQUEST_MESSAGE = 0x09, 
                    13069 .................... }; 
                    13070 ....................  
                    13071 .................... enum { 
                    13072 ....................   OP_ACK_RESPONSE = 0x80, 
                    13073 ....................   OP_SF_STATUS_RESPONSE = 0x81, 
                    13074 ....................   OP_VERSION_RESPONSE = 0x82, 
                    13075 ....................   OP_GET_CALIBRATION_TABLE_RESPONSE = 0x85, 
                    13076 ....................   OP_SET_DATA_LINE_RESPONSE = 0x86, 
                    13077 ....................   OP_GET_DATA_LINE_RESPONSE = 0x87, 
                    13078 ....................   OP_BIT_STATUS_RESPONSE = 0x89, 
                    13079 .................... }; 
                    13080 ....................  
                    13081 .................... typedef enum { 
                    13082 ....................   MODE_OPERATIONAL = 0, 
                    13083 ....................   MODE_TECHNICIAN = 1, 
                    13084 ....................   MODE_MAINTENANCE = 2, 
                    13085 .................... } software_mode_t; 
                    13086 ....................  
                    13087 .................... enum { 
                    13088 ....................   CALIBRATION_TABLE_TEMP = 0, 
                    13089 ....................   CALIBRATION_TABLE_FWD = 1, 
                    13090 ....................   CALIBRATION_TABLE_REV = 2, 
                    13091 ....................   CALIBRATION_TABLE_INP = 3, 
                    13092 ....................   CALIBRATION_TABLE_CURRENT = 4, 
                    13093 ....................   CALIBRATION_TABLE_PA_BIAS = 5, 
                    13094 ....................   CALIBRATION_TABLE_TIMING = 6, 
                    13095 ....................   CALIBRATION_TABLE_GENERAL = 7, 
                    13096 .................... }; 
                    13097 ....................  
                    13098 .................... enum { 
                    13099 ....................   PROGRAMMING_STATUS_OK = 0, 
                    13100 ....................   PROGRAMMING_STATUS_ERROR = 1, 
                    13101 .................... }; 
                    13102 ....................  
                    13103 .................... typedef struct message_t { 
                    13104 ....................   uint8_t opcode; 
                    13105 ....................   uint8_t payload[]; /* this will include the payload and the crc */ 
                    13106 .................... } message_t; 
                    13107 ....................  
                    13108 .................... typedef struct generic_response_t { 
                    13109 ....................   uint8_t opcode; 
                    13110 .................... } generic_response_t; 
                    13111 ....................  
                    13112 .................... /* message payloads*/ 
                    13113 ....................  
                    13114 .................... typedef struct control_bits_t { 
                    13115 ....................   uint8_t tx_on : 1; 
                    13116 ....................   uint8_t pa_gain : 3; 
                    13117 ....................   uint8_t tx_ant : 1; 
                    13118 ....................   uint8_t amplifier_operation_frequency : 1; 
                    13119 ....................   uint8_t reset : 1; 
                    13120 ....................   uint8_t dont_change : 1; 
                    13121 .................... } control_bits_t; 
                    13122 ....................  
                    13123 .................... typedef struct control_message_payload_t { 
                    13124 ....................   control_bits_t bits; 
                    13125 ....................   uint16_t control_identifier; 
                    13126 .................... } control_message_payload_t; 
                    13127 ....................  
                    13128 .................... typedef struct change_mode_message_payload_t { 
                    13129 ....................   uint8_t mode; 
                    13130 .................... } change_mode_message_payload_t; 
                    13131 ....................  
                    13132 ....................  
                    13133 .................... typedef struct set_calibration_table_message_payload_t { 
                    13134 ....................   uint8_t table_id; 
                    13135 ....................   uint16_t params[CALIBRATION_TABLE_INDEX_MAX]; 
                    13136 .................... } set_calibration_table_message_payload_t; 
                    13137 ....................  
                    13138 .................... typedef struct get_calibration_table_message_payload_t { 
                    13139 ....................   uint8_t table_id; 
                    13140 .................... } get_calibration_table_message_payload_t; 
                    13141 ....................  
                    13142 .................... typedef struct set_data_line_payload_t { 
                    13143 ....................   uint32_t address; 
                    13144 ....................   uint8_t data[64]; 
                    13145 .................... } set_data_line_payload_t; 
                    13146 ....................  
                    13147 .................... typedef struct get_data_line_payload_t { 
                    13148 ....................   uint32_t address; 
                    13149 .................... } get_data_line_payload_t; 
                    13150 ....................  
                    13151 .................... /* responses */ 
                    13152 ....................  
                    13153 .................... typedef struct ack_response_t { 
                    13154 ....................   generic_response_t generic; 
                    13155 .................... } ack_response_t; 
                    13156 ....................  
                    13157 .................... typedef struct sf_status_response_t { 
                    13158 ....................   generic_response_t generic; 
                    13159 ....................   control_bits_t last_control_bits; 
                    13160 ....................   uint16_t tti_counter; 
                    13161 ....................   uint16_t control_identifier; 
                    13162 ....................   uint16_t fwd_power_values[NUM_ADC_SAMPLES]; 
                    13163 .................... //  uint16_t reverse_power_values[NUM_ADC_SAMPLES];		//yehuda move rev power to bit status 
                    13164 ....................   uint16_t input_power_values[NUM_ADC_SAMPLES]; 
                    13165 ....................   //uint16_t pre_amp_power_values[NUM_ADC_SAMPLES];		//yehuda move pre amp to bit status 
                    13166 ....................   uint16_t temperature; 
                    13167 ....................   uint16_t power_amplifier_current; 
                    13168 ....................   uint8_t reverse_power_status;							//Difference between forword power and reverse power compared to general calibration rev tresh param 
                    13169 .................... } sf_status_response_t; 
                    13170 ....................  
                    13171 .................... typedef struct bit_status_response_t { 
                    13172 ....................   generic_response_t generic; 
                    13173 ....................   control_bits_t last_control_bits; 
                    13174 ....................   uint16_t tti_counter; 
                    13175 ....................   uint8_t mode; 
                    13176 ....................   uint16_t pre_amp_power_values[NUM_ADC_SAMPLES]; 		//yehuda add pre amp to bit status 
                    13177 ....................   uint16_t reverse_power_values[NUM_ADC_SAMPLES];		//yehuda add rev power to bit status 
                    13178 .................... } bit_status_response_t; 
                    13179 ....................  
                    13180 .................... typedef struct version_response_t { 
                    13181 ....................   generic_response_t generic; 
                    13182 ....................   uint8_t day; 
                    13183 ....................   uint8_t month; 
                    13184 ....................   uint16_t year; 
                    13185 ....................   uint8_t major; 
                    13186 ....................   uint8_t minor; 
                    13187 ....................   uint16_t serial_number; 
                    13188 .................... } version_response_t; 
                    13189 ....................  
                    13190 .................... typedef struct calibration_table_response_t { 
                    13191 ....................   generic_response_t generic; 
                    13192 ....................   uint8_t table_id; 
                    13193 ....................   uint16_t params[CALIBRATION_TABLE_INDEX_MAX]; 
                    13194 .................... } calibration_table_response_t; 
                    13195 ....................  
                    13196 .................... typedef struct set_data_line_response_t { 
                    13197 ....................   generic_response_t generic; 
                    13198 ....................   uint32_t address; 
                    13199 ....................   uint8_t status; 
                    13200 .................... } set_data_line_response_t; 
                    13201 ....................  
                    13202 .................... typedef struct get_data_line_response_t { 
                    13203 ....................   generic_response_t generic; 
                    13204 ....................   uint32_t address; 
                    13205 ....................   uint8_t data[64]; 
                    13206 .................... } get_data_line_response_t; 
                    13207 ....................  
                    13208 .................... #endif /* MESSAGE_H_ */ 
                    13209 ....................  
                    13210 ....................  
                    13211 .................... /* 
                    13212 ....................  * message_handlers.h 
                    13213 ....................  * 
                    13214 ....................  *  Created on: Mar 26, 2017 
                    13215 ....................  *      Author: asaf 
                    13216 ....................  */ 
                    13217 ....................  
                    13218 .................... #ifndef MESSAGE_HANDLERS_H_ 
                    13219 .................... #define MESSAGE_HANDLERS_H_ 
                    13220 ....................  
                    13221 .................... void init_message_handlers(); 
                    13222 .................... void process_message(uint8_t* message, uint16_t length); 
                    13223 .................... #INLINE 
                    13224 .................... void perform_last_control_message(); 
                    13225 .................... void control_handle_timer(); 
                    13226 .................... void samp_if_needed(); 
                    13227 ....................  
                    13228 .................... #endif /* MESSAGE_HANDLERS_H_ */ 
                    13229 ....................  
                    13230 ....................  
                    13231 .................... /* 
                    13232 ....................  * comm.h 
                    13233 ....................  * 
                    13234 ....................  *  Created on: Mar 23, 2017 
                    13235 ....................  *      Author: asaf 
                    13236 ....................  */ 
                    13237 ....................  
                    13238 .................... #ifndef COMM_H_ 
                    13239 .................... #define COMM_H_ 
                    13240 ....................  
                    13241 .................... #include <stdint.h> 
                    13242 .................... /////////////////////////////////////////////////////////////////////////// 
                    13243 .................... ////                                                                   //// 
                    13244 .................... ////                           stdint.h                                //// 
                    13245 .................... ////                                                                   //// 
                    13246 .................... //// Standard integer definitions.                                     //// 
                    13247 .................... ////                                                                   //// 
                    13248 .................... /////////////////////////////////////////////////////////////////////////// 
                    13249 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    13250 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    13251 .................... //// compiler.  This source code may only be distributed to other      //// 
                    13252 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    13253 .................... //// or distribution is permitted without written permission.          //// 
                    13254 .................... //// Derivative programs created using this software in object code    //// 
                    13255 .................... //// form are not restricted in any way.                               //// 
                    13256 .................... /////////////////////////////////////////////////////////////////////////// 
                    13257 ....................  
                    13258 .................... #ifndef _STDINT 
                    13259 ....................  
                    13260 .................... #define _STDINT 
                    13261 ....................  
                    13262 .................... //////////// exact width 
                    13263 ....................  
                    13264 .................... typedef signed int8 int8_t; 
                    13265 .................... typedef unsigned int8 uint8_t; 
                    13266 .................... typedef signed int16 int16_t; 
                    13267 .................... typedef unsigned int16 uint16_t; 
                    13268 .................... typedef signed int32 int32_t; 
                    13269 .................... typedef unsigned int32 uint32_t; 
                    13270 ....................  
                    13271 .................... #if defined(__PCD__) 
                    13272 .................... //typedef signed int24 int24_t; 
                    13273 .................... //typedef unsigned int24 uint24_t; 
                    13274 .................... typedef signed int64 int64_t; 
                    13275 .................... typedef unsigned int64 uint64_t; 
                    13276 .................... #endif 
                    13277 ....................  
                    13278 .................... #define INT8_MAX  (128) 
                    13279 .................... #define INT8_MIN  (-127) 
                    13280 .................... #define UINT8_MAX (255) 
                    13281 ....................  
                    13282 .................... #define INT16_MAX  (32767) 
                    13283 .................... #define INT16_MIN  (-32768) 
                    13284 .................... #define UINT16_MAX (65535) 
                    13285 ....................  
                    13286 .................... #define INT32_MAX  (2147483647) 
                    13287 .................... #define INT32_MIN  (-2147483648) 
                    13288 .................... #define UINT32_MAX (4294967295) 
                    13289 ....................  
                    13290 .................... #if defined(__PCD__) 
                    13291 .................... //#define INT24_MAX  (8388607) 
                    13292 .................... //#define INT24_MIN  (-8388608) 
                    13293 .................... //#define UINT24_MAX (16777215) 
                    13294 ....................  
                    13295 .................... #define INT64_MAX  (9223372036854775807) 
                    13296 .................... #define INT64_MIN  (-9223372036854775808) 
                    13297 .................... #define UINT64_MAX (18446744073709551615) 
                    13298 .................... #endif 
                    13299 ....................  
                    13300 .................... ///////// minimum width 
                    13301 ....................  
                    13302 .................... typedef signed int8 int_least8_t; 
                    13303 .................... typedef unsigned int8 uint_least8_t; 
                    13304 .................... typedef signed int16 int_least16_t; 
                    13305 .................... typedef unsigned int16 uint_least16_t; 
                    13306 .................... typedef signed int32 int_least32_t; 
                    13307 .................... typedef unsigned int32 uint_least32_t; 
                    13308 ....................  
                    13309 .................... #if defined(__PCD__) 
                    13310 .................... //typedef signed int24 int_least24_t; 
                    13311 .................... //typedef unsigned int24 uint_least24_t; 
                    13312 .................... typedef signed int64 int_least64_t; 
                    13313 .................... typedef unsigned int64 uint_least64_t; 
                    13314 .................... #endif 
                    13315 ....................  
                    13316 .................... #define INT_LEAST8_MAX  (128) 
                    13317 .................... #define INT_LEAST8_MIN  (-127) 
                    13318 .................... #define UINT_LEAST8_MAX (255) 
                    13319 ....................  
                    13320 .................... #define INT_LEAST16_MAX  (32767) 
                    13321 .................... #define INT_LEAST16_MIN  (-32768) 
                    13322 .................... #define UINT_LEAST16_MAX (65535) 
                    13323 ....................  
                    13324 .................... #define INT_LEAST32_MAX  (2147483647) 
                    13325 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    13326 .................... #define UINT_LEAST32_MAX (4294967295) 
                    13327 ....................  
                    13328 .................... #if defined(__PCD__) 
                    13329 .................... //#define INT_LEAST24_MAX  (8388607) 
                    13330 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    13331 .................... //#define UINT_LEAST24_MAX (16777215) 
                    13332 ....................  
                    13333 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    13334 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    13335 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    13336 .................... #endif 
                    13337 ....................  
                    13338 .................... ///////// fastest width 
                    13339 ....................  
                    13340 .................... #if defined(__PCD__) 
                    13341 .................... typedef signed int16 int_fast8_t; 
                    13342 .................... typedef unsigned int16 uint_fast8_t; 
                    13343 .................... #define INT_FAST8_MAX  (32767) 
                    13344 .................... #define INT_FAST8_MIN  (-32768) 
                    13345 .................... #define UINT_FAST8_MAX (65535) 
                    13346 .................... typedef signed int16 int_fast16_t; 
                    13347 .................... typedef unsigned int16 uint_fast16_t; 
                    13348 .................... //typedef signed int24 int_fast24_t; 
                    13349 .................... //typedef unsigned int24 uint_fast24_t; 
                    13350 .................... typedef signed int64 int_fast64_t; 
                    13351 .................... typedef unsigned int64 uint_fast64_t; 
                    13352 .................... #else 
                    13353 .................... typedef signed int8 int_fast8_t; 
                    13354 .................... typedef unsigned int8 uint_fast8_t; 
                    13355 .................... #define INT_FAST8_MAX  (128) 
                    13356 .................... #define INT_FAST8_MIN  (-127) 
                    13357 .................... #define UINT_FAST8_MAX (255) 
                    13358 .................... typedef signed int16 int_fast16_t; 
                    13359 .................... typedef unsigned int16 uint_fast16_t; 
                    13360 .................... #endif 
                    13361 ....................  
                    13362 .................... typedef signed int32 int_fast32_t; 
                    13363 .................... typedef unsigned int32 uint_fast32_t; 
                    13364 ....................  
                    13365 .................... #define INT_FAST16_MAX  (32767) 
                    13366 .................... #define INT_FAST16_MIN  (-32768) 
                    13367 .................... #define UINT_FAST16_MAX (65535) 
                    13368 ....................  
                    13369 .................... #define INT_FAST32_MAX  (2147483647) 
                    13370 .................... #define INT_FAST32_MIN  (-2147483648) 
                    13371 .................... #define UINT_FAST32_MAX (4294967295) 
                    13372 ....................  
                    13373 .................... #if defined(__PCD__) 
                    13374 .................... //#define INT_FAST24_MAX  (8388607) 
                    13375 .................... //#define INT_FAST24_MIN  (-8388608) 
                    13376 .................... //#define UINT_FAST24_MAX (16777215) 
                    13377 ....................  
                    13378 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    13379 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    13380 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    13381 .................... #endif 
                    13382 ....................  
                    13383 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    13384 ....................  
                    13385 .................... /// TODO 
                    13386 ....................  
                    13387 .................... /// intptr_t uintptr_t 
                    13388 ....................  
                    13389 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    13390 ....................  
                    13391 ....................  
                    13392 .................... /////////// greatest width (OPTIONAL) 
                    13393 ....................  
                    13394 .................... /// TODO 
                    13395 ....................  
                    13396 .................... /// intmax_t uintmax_t 
                    13397 ....................  
                    13398 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    13399 ....................  
                    13400 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    13401 ....................  
                    13402 ....................  
                    13403 .................... #endif 
                    13404 ....................  
                    13405 .................... #include <stdbool.h> 
                    13406 .................... /////////////////////////////////////////////////////////////////////////// 
                    13407 .................... ////                                                                   //// 
                    13408 .................... ////                          stdbool.h                                //// 
                    13409 .................... ////                                                                   //// 
                    13410 .................... //// Standard boolean definitions                                      //// 
                    13411 .................... ////                                                                   //// 
                    13412 .................... /////////////////////////////////////////////////////////////////////////// 
                    13413 .................... ////        (C) Copyright 1996,2012 Custom Computer Services           //// 
                    13414 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    13415 .................... //// compiler.  This source code may only be distributed to other      //// 
                    13416 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    13417 .................... //// or distribution is permitted without written permission.          //// 
                    13418 .................... //// Derivative programs created using this software in object code    //// 
                    13419 .................... //// form are not restricted in any way.                               //// 
                    13420 .................... /////////////////////////////////////////////////////////////////////////// 
                    13421 ....................  
                    13422 .................... #ifndef __STDBOOL_H__ 
                    13423 .................... #define __STDBOOL_H__ 
                    13424 ....................  
                    13425 .................... //remove TRUE and FALSE added by CCS's device .h file 
                    13426 .................... #if defined(TRUE) 
                    13427 .................... #undef TRUE 
                    13428 .................... #endif 
                    13429 .................... #if defined(FALSE) 
                    13430 .................... #undef FALSE 
                    13431 .................... #endif 
                    13432 ....................  
                    13433 .................... typedef int1   bool; 
                    13434 .................... #define true   1 
                    13435 .................... #define false  0 
                    13436 .................... #define __bool_true_false_are_defined  1 
                    13437 ....................  
                    13438 .................... #endif 
                    13439 ....................  
                    13440 ....................  
                    13441 .................... #define MSG_MAX_MESSAGE_LEN 80 
                    13442 ....................  
                    13443 .................... #ifndef MIN 
                    13444 .................... #define MIN(x,y) ((x)<(y)?(x):(y)) 
                    13445 .................... #endif 
                    13446 .................... #ifndef MAX 
                    13447 .................... #define	MAX(a,b) (((a)>(b))?(a):(b)) 
                    13448 .................... #endif 
                    13449 ....................  
                    13450 .................... #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0])) 
                    13451 .................... #define MAX_INDEX_IN_ARRAY(x) (ARRAY_SIZE(x)-1) 
                    13452 ....................  
                    13453 .................... void comm_init(); 
                    13454 .................... bool comm_receive_message(void* buffer, uint16_t* size); 
                    13455 .................... void comm_send_message(void* buffer, uint16_t size); 
                    13456 ....................  
                    13457 ....................  
                    13458 ....................  
                    13459 .................... #endif /* COMM_H_ */ 
                    13460 ....................  
                    13461 ....................  
                    13462 .................... /* 
                    13463 ....................  * gpio.h 
                    13464 ....................  * 
                    13465 ....................  *  Created on: Mar 8, 2017 
                    13466 ....................  *      Author: asafe 
                    13467 ....................  */ 
                    13468 ....................  
                    13469 .................... #ifndef INCLUDE_GPIO_H_ 
                    13470 .................... #define INCLUDE_GPIO_H_ 
                    13471 ....................  
                    13472 .................... #include <stdint.h> 
                    13473 .................... /////////////////////////////////////////////////////////////////////////// 
                    13474 .................... ////                                                                   //// 
                    13475 .................... ////                           stdint.h                                //// 
                    13476 .................... ////                                                                   //// 
                    13477 .................... //// Standard integer definitions.                                     //// 
                    13478 .................... ////                                                                   //// 
                    13479 .................... /////////////////////////////////////////////////////////////////////////// 
                    13480 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    13481 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    13482 .................... //// compiler.  This source code may only be distributed to other      //// 
                    13483 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    13484 .................... //// or distribution is permitted without written permission.          //// 
                    13485 .................... //// Derivative programs created using this software in object code    //// 
                    13486 .................... //// form are not restricted in any way.                               //// 
                    13487 .................... /////////////////////////////////////////////////////////////////////////// 
                    13488 ....................  
                    13489 .................... #ifndef _STDINT 
                    13490 ....................  
                    13491 .................... #define _STDINT 
                    13492 ....................  
                    13493 .................... //////////// exact width 
                    13494 ....................  
                    13495 .................... typedef signed int8 int8_t; 
                    13496 .................... typedef unsigned int8 uint8_t; 
                    13497 .................... typedef signed int16 int16_t; 
                    13498 .................... typedef unsigned int16 uint16_t; 
                    13499 .................... typedef signed int32 int32_t; 
                    13500 .................... typedef unsigned int32 uint32_t; 
                    13501 ....................  
                    13502 .................... #if defined(__PCD__) 
                    13503 .................... //typedef signed int24 int24_t; 
                    13504 .................... //typedef unsigned int24 uint24_t; 
                    13505 .................... typedef signed int64 int64_t; 
                    13506 .................... typedef unsigned int64 uint64_t; 
                    13507 .................... #endif 
                    13508 ....................  
                    13509 .................... #define INT8_MAX  (128) 
                    13510 .................... #define INT8_MIN  (-127) 
                    13511 .................... #define UINT8_MAX (255) 
                    13512 ....................  
                    13513 .................... #define INT16_MAX  (32767) 
                    13514 .................... #define INT16_MIN  (-32768) 
                    13515 .................... #define UINT16_MAX (65535) 
                    13516 ....................  
                    13517 .................... #define INT32_MAX  (2147483647) 
                    13518 .................... #define INT32_MIN  (-2147483648) 
                    13519 .................... #define UINT32_MAX (4294967295) 
                    13520 ....................  
                    13521 .................... #if defined(__PCD__) 
                    13522 .................... //#define INT24_MAX  (8388607) 
                    13523 .................... //#define INT24_MIN  (-8388608) 
                    13524 .................... //#define UINT24_MAX (16777215) 
                    13525 ....................  
                    13526 .................... #define INT64_MAX  (9223372036854775807) 
                    13527 .................... #define INT64_MIN  (-9223372036854775808) 
                    13528 .................... #define UINT64_MAX (18446744073709551615) 
                    13529 .................... #endif 
                    13530 ....................  
                    13531 .................... ///////// minimum width 
                    13532 ....................  
                    13533 .................... typedef signed int8 int_least8_t; 
                    13534 .................... typedef unsigned int8 uint_least8_t; 
                    13535 .................... typedef signed int16 int_least16_t; 
                    13536 .................... typedef unsigned int16 uint_least16_t; 
                    13537 .................... typedef signed int32 int_least32_t; 
                    13538 .................... typedef unsigned int32 uint_least32_t; 
                    13539 ....................  
                    13540 .................... #if defined(__PCD__) 
                    13541 .................... //typedef signed int24 int_least24_t; 
                    13542 .................... //typedef unsigned int24 uint_least24_t; 
                    13543 .................... typedef signed int64 int_least64_t; 
                    13544 .................... typedef unsigned int64 uint_least64_t; 
                    13545 .................... #endif 
                    13546 ....................  
                    13547 .................... #define INT_LEAST8_MAX  (128) 
                    13548 .................... #define INT_LEAST8_MIN  (-127) 
                    13549 .................... #define UINT_LEAST8_MAX (255) 
                    13550 ....................  
                    13551 .................... #define INT_LEAST16_MAX  (32767) 
                    13552 .................... #define INT_LEAST16_MIN  (-32768) 
                    13553 .................... #define UINT_LEAST16_MAX (65535) 
                    13554 ....................  
                    13555 .................... #define INT_LEAST32_MAX  (2147483647) 
                    13556 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    13557 .................... #define UINT_LEAST32_MAX (4294967295) 
                    13558 ....................  
                    13559 .................... #if defined(__PCD__) 
                    13560 .................... //#define INT_LEAST24_MAX  (8388607) 
                    13561 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    13562 .................... //#define UINT_LEAST24_MAX (16777215) 
                    13563 ....................  
                    13564 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    13565 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    13566 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    13567 .................... #endif 
                    13568 ....................  
                    13569 .................... ///////// fastest width 
                    13570 ....................  
                    13571 .................... #if defined(__PCD__) 
                    13572 .................... typedef signed int16 int_fast8_t; 
                    13573 .................... typedef unsigned int16 uint_fast8_t; 
                    13574 .................... #define INT_FAST8_MAX  (32767) 
                    13575 .................... #define INT_FAST8_MIN  (-32768) 
                    13576 .................... #define UINT_FAST8_MAX (65535) 
                    13577 .................... typedef signed int16 int_fast16_t; 
                    13578 .................... typedef unsigned int16 uint_fast16_t; 
                    13579 .................... //typedef signed int24 int_fast24_t; 
                    13580 .................... //typedef unsigned int24 uint_fast24_t; 
                    13581 .................... typedef signed int64 int_fast64_t; 
                    13582 .................... typedef unsigned int64 uint_fast64_t; 
                    13583 .................... #else 
                    13584 .................... typedef signed int8 int_fast8_t; 
                    13585 .................... typedef unsigned int8 uint_fast8_t; 
                    13586 .................... #define INT_FAST8_MAX  (128) 
                    13587 .................... #define INT_FAST8_MIN  (-127) 
                    13588 .................... #define UINT_FAST8_MAX (255) 
                    13589 .................... typedef signed int16 int_fast16_t; 
                    13590 .................... typedef unsigned int16 uint_fast16_t; 
                    13591 .................... #endif 
                    13592 ....................  
                    13593 .................... typedef signed int32 int_fast32_t; 
                    13594 .................... typedef unsigned int32 uint_fast32_t; 
                    13595 ....................  
                    13596 .................... #define INT_FAST16_MAX  (32767) 
                    13597 .................... #define INT_FAST16_MIN  (-32768) 
                    13598 .................... #define UINT_FAST16_MAX (65535) 
                    13599 ....................  
                    13600 .................... #define INT_FAST32_MAX  (2147483647) 
                    13601 .................... #define INT_FAST32_MIN  (-2147483648) 
                    13602 .................... #define UINT_FAST32_MAX (4294967295) 
                    13603 ....................  
                    13604 .................... #if defined(__PCD__) 
                    13605 .................... //#define INT_FAST24_MAX  (8388607) 
                    13606 .................... //#define INT_FAST24_MIN  (-8388608) 
                    13607 .................... //#define UINT_FAST24_MAX (16777215) 
                    13608 ....................  
                    13609 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    13610 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    13611 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    13612 .................... #endif 
                    13613 ....................  
                    13614 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    13615 ....................  
                    13616 .................... /// TODO 
                    13617 ....................  
                    13618 .................... /// intptr_t uintptr_t 
                    13619 ....................  
                    13620 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    13621 ....................  
                    13622 ....................  
                    13623 .................... /////////// greatest width (OPTIONAL) 
                    13624 ....................  
                    13625 .................... /// TODO 
                    13626 ....................  
                    13627 .................... /// intmax_t uintmax_t 
                    13628 ....................  
                    13629 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    13630 ....................  
                    13631 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    13632 ....................  
                    13633 ....................  
                    13634 .................... #endif 
                    13635 ....................  
                    13636 .................... #include "gpio.h" 
                    13637 .................... /* 
                    13638 ....................  * gpio.h 
                    13639 ....................  * 
                    13640 ....................  *  Created on: Mar 8, 2017 
                    13641 ....................  *      Author: asafe 
                    13642 ....................  */ 
                    13643 ....................  
                    13644 .................... #ifndef INCLUDE_GPIO_H_ 
                    13645 .................... #define INCLUDE_GPIO_H_ 
                    13646 ....................  
                    13647 .................... #include <stdint.h> 
                    13648 .................... #include "gpio.h" 
                    13649 ....................  
                    13650 .................... enum { 
                    13651 ....................     GPIO_DIR_IN     = 0, 
                    13652 ....................     GPIO_DIR_OUT    = 1, 
                    13653 ....................     GPIO_ANALOG     = 2, 
                    13654 ....................  
                    13655 ....................     GPIO_VALUE_LOW = 0, 
                    13656 ....................     GPIO_VALUE_HIGH = 1, 
                    13657 .................... }; 
                    13658 ....................  
                    13659 .................... typedef struct gpio_st { 
                    13660 ....................     uint32_t pin; 
                    13661 ....................     int dir; 
                    13662 ....................     char *gpio_name; 
                    13663 .................... } st_gpio; 
                    13664 ....................  
                    13665 .................... /* this is the deceleration that a developer will use to access a specific GPIO */ 
                    13666 .................... /* this list should be identical in order to the <Bold> st_gpio gpios [] </Bold> list in gpio.c */ 
                    13667 ....................  
                    13668 .................... enum { 
                    13669 ....................     GPIO_DAC_CLK        = 0, 
                    13670 ....................     GPIO_DAC_CS         = 1, 
                    13671 ....................     GPIO_DAC_DATA_OUT   = 2, 
                    13672 ....................     GPIO_DAC_LDAC       = 3, 
                    13673 ....................  
                    13674 ....................     GPIO_LED            = 4, 
                    13675 ....................  
                    13676 ....................     GPIO_PA1_ISENSE     = 5, 
                    13677 ....................     GPIO_PA2_ISENSE     = 6, 
                    13678 ....................     GPIO_FFWR           = 7, 
                    13679 ....................     GPIO_RREV           = 8, 
                    13680 ....................     GPIO_RF_INDET       = 9, 
                    13681 ....................     GPIO_TMP            = 10, 
                    13682 ....................     GPIO_PREAMP_DET     = 11, 
                    13683 ....................  
                    13684 ....................     GPIO_ANT_SEL        = 12, 
                    13685 ....................     GPIO_ANT_SELN       = 13, 
                    13686 ....................     GPIO_TX_RX_SEL      = 14, 
                    13687 ....................     GPIO_TX_RX_ENV      = 15, 
                    13688 ....................     GPIO_TX_RX_ENVM     = 16, 
                    13689 ....................  
                    13690 ....................     GPIO_5V_EN          = 17, 
                    13691 ....................  
                    13692 .................... }; 
                    13693 ....................  
                    13694 .................... /* Inputs */ 
                    13695 .................... enum { 
                    13696 ....................  
                    13697 .................... }; 
                    13698 ....................  
                    13699 ....................  
                    13700 .................... void gpio_init(); 
                    13701 .................... int gpio_toggle(int gpio); 
                    13702 .................... #INLINE 
                    13703 .................... void gpio_set(int gpio); 
                    13704 .................... void gpio_clear(int gpio); 
                    13705 .................... #INLINE 
                    13706 .................... void gpio_set_value(int gpio, int value); 
                    13707 .................... int gpio_get(int gpio); 
                    13708 .................... #INLINE 
                    13709 .................... uint32_t gpio_get_analog(int gpio); 
                    13710 ....................  
                    13711 .................... #endif /* INCLUDE_GPIO_H_ */ 
                    13712 ....................  
                    13713 ....................  
                    13714 .................... enum { 
                    13715 ....................     GPIO_DIR_IN     = 0, 
                    13716 ....................     GPIO_DIR_OUT    = 1, 
                    13717 ....................     GPIO_ANALOG     = 2, 
                    13718 ....................  
                    13719 ....................     GPIO_VALUE_LOW = 0, 
                    13720 ....................     GPIO_VALUE_HIGH = 1, 
                    13721 .................... }; 
                    13722 ....................  
                    13723 .................... typedef struct gpio_st { 
                    13724 ....................     uint32_t pin; 
                    13725 ....................     int dir; 
                    13726 ....................     char *gpio_name; 
                    13727 .................... } st_gpio; 
                    13728 ....................  
                    13729 .................... /* this is the deceleration that a developer will use to access a specific GPIO */ 
                    13730 .................... /* this list should be identical in order to the <Bold> st_gpio gpios [] </Bold> list in gpio.c */ 
                    13731 ....................  
                    13732 .................... enum { 
                    13733 ....................     GPIO_DAC_CLK        = 0, 
                    13734 ....................     GPIO_DAC_CS         = 1, 
                    13735 ....................     GPIO_DAC_DATA_OUT   = 2, 
                    13736 ....................     GPIO_DAC_LDAC       = 3, 
                    13737 ....................  
                    13738 ....................     GPIO_LED            = 4, 
                    13739 ....................  
                    13740 ....................     GPIO_PA1_ISENSE     = 5, 
                    13741 ....................     GPIO_PA2_ISENSE     = 6, 
                    13742 ....................     GPIO_FFWR           = 7, 
                    13743 ....................     GPIO_RREV           = 8, 
                    13744 ....................     GPIO_RF_INDET       = 9, 
                    13745 ....................     GPIO_TMP            = 10, 
                    13746 ....................     GPIO_PREAMP_DET     = 11, 
                    13747 ....................  
                    13748 ....................     GPIO_ANT_SEL        = 12, 
                    13749 ....................     GPIO_ANT_SELN       = 13, 
                    13750 ....................     GPIO_TX_RX_SEL      = 14, 
                    13751 ....................     GPIO_TX_RX_ENV      = 15, 
                    13752 ....................     GPIO_TX_RX_ENVM     = 16, 
                    13753 ....................  
                    13754 ....................     GPIO_5V_EN          = 17, 
                    13755 ....................  
                    13756 .................... }; 
                    13757 ....................  
                    13758 .................... /* Inputs */ 
                    13759 .................... enum { 
                    13760 ....................  
                    13761 .................... }; 
                    13762 ....................  
                    13763 ....................  
                    13764 .................... void gpio_init(); 
                    13765 .................... int gpio_toggle(int gpio); 
                    13766 .................... #INLINE 
                    13767 .................... void gpio_set(int gpio); 
                    13768 .................... void gpio_clear(int gpio); 
                    13769 .................... #INLINE 
                    13770 .................... void gpio_set_value(int gpio, int value); 
                    13771 .................... int gpio_get(int gpio); 
                    13772 .................... #INLINE 
                    13773 .................... uint32_t gpio_get_analog(int gpio); 
                    13774 ....................  
                    13775 .................... #endif /* INCLUDE_GPIO_H_ */ 
                    13776 ....................  
                    13777 ....................  
                    13778 .................... #ifndef VERSION_H_ 
                    13779 .................... #define VERSION_H_ 
                    13780 ....................  
                    13781 .................... #define VERSION_DAY 19   
                    13782 .................... #define VERSION_MONTH 6 
                    13783 .................... #define VERSION_YEAR 2018   
                    13784 .................... #define VERSION_MAJOR 1 
                    13785 .................... #define VERSION_MINOR 15 
                    13786 ....................  
                    13787 ....................  
                    13788 .................... #endif /* VERSION_H_ */ 
                    13789 ....................  
                    13790 ....................  
                    13791 .................... #ifndef CALIBRATION_H_ 
                    13792 .................... #define CALIBRATION_H_ 
                    13793 ....................  
                    13794 .................... #include <stdint.h> 
                    13795 .................... #include <stdbool.h> 
                    13796 ....................  
                    13797 .................... #define CALIBRATION_AREA_START 0x4000 
                    13798 .................... #define CALIBRATION_AREA_END 0x4FFF 
                    13799 ....................  
                    13800 .................... typedef enum { 
                    13801 ....................   CALIBRATION_TABLE_PARAMS = 0, 
                    13802 ....................   CALIBRATION_TABLE_PA_GAINS_1 = 1, 
                    13803 ....................   CALIBRATION_TABLE_PA_GAINS_2 = 2, 
                    13804 ....................   CALIBRATION_TABLE_MAX = 3 
                    13805 .................... } calibration_table_id_t; 
                    13806 ....................  
                    13807 .................... typedef enum { 
                    13808 ....................   PARAM_CAL_TBL_VERSION = 0, 
                    13809 ....................   PARAM_SERIAL_NUM = 1, 
                    13810 ....................   PARAM_TEMP_MULT = 2, 
                    13811 ....................   PARAM_FWD_MULT = 3, 
                    13812 ....................   PARAM_REV_TRESH = 4, 
                    13813 ....................   PARAM_INP_PWR_MULT = 5, 
                    13814 ....................   PARAM_PWR_CURRENT_MULT = 6, 
                    13815 ....................   PARAM_PRE_AMP_MULT = 7, 
                    13816 ....................   PARAM_ISENSE_PA1_MULT = 8, 
                    13817 ....................   PARAM_ISENSE_PA2_MULT = 9, 
                    13818 ....................   PARAM_BOOT_WAIT_TIME_USEC = 10, 
                    13819 ....................   PARAM_TX_ON_TIMING_USEC = 11, 
                    13820 ....................   PARAM_TX_OFF_TIMING_USEC = 12, 
                    13821 ....................   PARAM_PA_ON_TIMING_USEC = 13, 
                    13822 ....................   PARAM_PA_OFF_TIMING_USEC = 14, 
                    13823 ....................   PARAM_ANT_SEL_TIMING_USEC = 15, 
                    13824 ....................   PARAM_FWD_SAMP_TIMING_USEC = 16, 
                    13825 ....................   PARAM_REV_SAMP_TIMING_USEC = 17, 
                    13826 ....................   PARAM_INP_PWR_SAMP_TIMING_USEC = 18, 
                    13827 .................... } calibration_param_t; 
                    13828 ....................  
                    13829 .................... #define CALIBRATION_TABLE_INDEX_MAX 32 
                    13830 ....................  
                    13831 .................... void get_calibration_table_data(calibration_table_id_t table_id, void* table_data); 
                    13832 .................... void set_calibration_table_data(calibration_table_id_t table_id, void* table_data); 
                    13833 .................... #INLINE 
                    13834 .................... uint16_t get_calibration_param(calibration_table_id_t table, uint8_t index); 
                    13835 .................... void set_calibration_param(calibration_table_id_t table, uint8_t index, uint16_t value); 
                    13836 ....................  
                    13837 .................... #endif /* CALIBRATION_H_ */ 
                    13838 ....................  
                    13839 ....................  
                    13840 .................... /* 
                    13841 ....................  * ad5312.h 
                    13842 ....................  * 
                    13843 ....................  *  Created on: Oct 13, 2016 
                    13844 ....................  *      Author: asaf 
                    13845 ....................  */ 
                    13846 ....................  
                    13847 .................... #ifndef AD5312_H_ 
                    13848 .................... #define AD5312_H_ 
                    13849 ....................  
                    13850 .................... enum { 
                    13851 .................... 	DAC_SELECT_BIT = 15, 
                    13852 .................... 	REF_BUF_BIT = 14, 
                    13853 .................... 	PD1_BIT = 13, 
                    13854 .................... 	PD2_BIT = 12, 
                    13855 .................... 	PD_ARR_START_BIT = PD2_BIT, 
                    13856 .................... }; 
                    13857 ....................  
                    13858 .................... enum { 
                    13859 .................... 	DAC_A = 0, 
                    13860 .................... 	DAC_B = 1, 
                    13861 .................... }; 
                    13862 ....................  
                    13863 .................... enum { 
                    13864 .................... 	REF_UNBUFFERED = 0, 
                    13865 .................... 	REF_BUFFERED = 1, 
                    13866 .................... }; 
                    13867 ....................  
                    13868 .................... /* Power Down Modes */ 
                    13869 .................... enum { 
                    13870 .................... 	PD_NORMAL = 0, 
                    13871 .................... 	PD_1K_TO_GND = 1, 
                    13872 .................... 	PD_100K_TO_GND = 2, 
                    13873 .................... 	PD_HIGH_IMPEDANCE_OUTPUT = 3, 
                    13874 .................... }; 
                    13875 ....................  
                    13876 .................... enum { 
                    13877 .................... 	VREF_FULL_SCALE = 5000, /* mV */ 
                    13878 .................... 	DAC_PRECISION = 1024 , /* bits */ 
                    13879 .................... }; 
                    13880 ....................  
                    13881 .................... #INLINE 
                    13882 .................... void ad5312_setVout(int dac, uint16_t mV); 
                    13883 .................... void ad5312_init(); 
                    13884 .................... #INLINE 
                    13885 .................... void ad5312_latch(); 
                    13886 ....................  
                    13887 .................... #endif /* AD5312_H_ */ 
                    13888 ....................  
                    13889 ....................  
                    13890 ....................  
                    13891 ....................  
                    13892 ....................  
                    13893 ....................  
                    13894 ....................  
63FC 0103           13895 MOVLB  3
63FE 6BE3           13896 CLRF   xE3
                    13897 ....................  
6400 0E80           13898 MOVLW  80
6402 6FE3           13899 MOVWF  xE3
                    13900 ....................  
6404 0E03           13901 MOVLW  03
6406 0104           13902 MOVLB  4
6408 6F27           13903 MOVWF  x27
640A 0EE3           13904 MOVLW  E3
640C 6F26           13905 MOVWF  x26
640E 6B29           13906 CLRF   x29
6410 0E01           13907 MOVLW  01
6412 6F28           13908 MOVWF  x28
6414 0100           13909 MOVLB  0
6416 EC43 F02B      13910 CALL   5686
                    13911 ....................  
641A 0012           13912 RETURN 0
                    13913 ....................  
                    13914 ....................  
                    13915 ....................  
                    13916 ....................  
                    13917 ....................  
                    13918 ....................  
                    13919 ....................  
                    13920 ....................  
                    13921 ....................  
2308 0E0E           13922 MOVLW  0E
230A 0104           13923 MOVLB  4
230C 6F49           13924 MOVWF  x49
230E C447 F44A      13925 MOVFF  447,44A
                    13926 ....................  
2378 0E0F           13927 MOVLW  0F
237A 0104           13928 MOVLB  4
237C 6F49           13929 MOVWF  x49
237E C447 F44A      13930 MOVFF  447,44A
                    13931 ....................  
23E8 0104           13932 MOVLB  4
23EA 5347           13933 MOVF   x47,F
23EC E002           13934 BZ    23F2
23EE 0E00           13935 MOVLW  00
23F0 D001           13936 BRA    23F4
23F2 0E01           13937 MOVLW  01
23F4 6F48           13938 MOVWF  x48
23F6 0E10           13939 MOVLW  10
23F8 6F49           13940 MOVWF  x49
23FA C448 F44A      13941 MOVFF  448,44A
                    13942 ....................  
2464 0012           13943 RETURN 0
                    13944 ....................  
                    13945 ....................  
56B8 0104           13946 MOVLB  4
56BA 5302           13947 MOVF   x02,F
56BC E002           13948 BZ    56C2
56BE 0E02           13949 MOVLW  02
56C0 D001           13950 BRA    56C4
56C2 0E01           13951 MOVLW  01
56C4 6F06           13952 MOVWF  x06
56C6 C406 F448      13953 MOVFF  406,448
56CA C403 F449      13954 MOVFF  403,449
5722 C002 F405      13955 MOVFF  02,405
5726 C001 F404      13956 MOVFF  01,404
                    13957 ....................  
                    13958 ....................  
572A 3D04           13959 INCFSZ x04,W
572C D004           13960 BRA    5736
572E 3D05           13961 INCFSZ x05,W
5730 D002           13962 BRA    5736
                    13963 ....................  
                    13964 ....................  
5732 6B05           13965 CLRF   x05
5734 6B04           13966 CLRF   x04
                    13967 ....................  
                    13968 ....................  
5736 6B06           13969 CLRF   x06
5738 C405 F408      13970 MOVFF  405,408
573C C404 F407      13971 MOVFF  404,407
                    13972 ....................  
                    13973 ....................  
57CC 0104           13974 MOVLB  4
57CE 5302           13975 MOVF   x02,F
57D0 E002           13976 BZ    57D6
57D2 0E02           13977 MOVLW  02
57D4 D001           13978 BRA    57D8
57D6 0E01           13979 MOVLW  01
57D8 6F06           13980 MOVWF  x06
57DA 0E10           13981 MOVLW  10
57DC 2503           13982 ADDWF  x03,W
57DE 6F07           13983 MOVWF  x07
57E0 C406 F448      13984 MOVFF  406,448
57E4 C407 F449      13985 MOVFF  407,449
583C C002 F405      13986 MOVFF  02,405
5840 C001 F404      13987 MOVFF  01,404
                    13988 ....................  
5844 3D04           13989 INCFSZ x04,W
5846 D004           13990 BRA    5850
5848 3D05           13991 INCFSZ x05,W
584A D002           13992 BRA    5850
                    13993 ....................  
                    13994 ....................  
584C 6B05           13995 CLRF   x05
584E 6B04           13996 CLRF   x04
                    13997 ....................  
                    13998 ....................  
5850 0E01           13999 MOVLW  01
5852 6F06           14000 MOVWF  x06
5854 C405 F408      14001 MOVFF  405,408
5858 C404 F407      14002 MOVFF  404,407
                    14003 ....................  
58E8 EF87 F030      14004 GOTO   610E (RETURN)
                    14005 ....................  
                    14006 ....................  
                    14007 ....................  
                    14008 ....................  
3146 0E0C           14009 MOVLW  0C
3148 6F49           14010 MOVWF  x49
314A C447 F44A      14011 MOVFF  447,44A
3960 0E0C           14012 MOVLW  0C
3962 6F49           14013 MOVWF  x49
3964 C447 F44A      14014 MOVFF  447,44A
5B60 0E0C           14015 MOVLW  0C
5B62 6F49           14016 MOVWF  x49
5B64 C447 F44A      14017 MOVFF  447,44A
                    14018 ....................  
31BA 0104           14019 MOVLB  4
31BC 5347           14020 MOVF   x47,F
31BE E002           14021 BZ    31C4
31C0 0E00           14022 MOVLW  00
31C2 D001           14023 BRA    31C6
31C4 0E01           14024 MOVLW  01
31C6 6F48           14025 MOVWF  x48
31C8 0E0D           14026 MOVLW  0D
31CA 6F49           14027 MOVWF  x49
31CC C448 F44A      14028 MOVFF  448,44A
323C 0000           14029 NOP   
323E 0101           14030 MOVLB  1
39D4 0104           14031 MOVLB  4
39D6 5347           14032 MOVF   x47,F
39D8 E002           14033 BZ    39DE
39DA 0E00           14034 MOVLW  00
39DC D001           14035 BRA    39E0
39DE 0E01           14036 MOVLW  01
39E0 6F48           14037 MOVWF  x48
39E2 0E0D           14038 MOVLW  0D
39E4 6F49           14039 MOVWF  x49
39E6 C448 F44A      14040 MOVFF  448,44A
3A56 0000           14041 NOP   
3A58 0101           14042 MOVLB  1
5BD4 0104           14043 MOVLB  4
5BD6 5347           14044 MOVF   x47,F
5BD8 E002           14045 BZ    5BDE
5BDA 0E00           14046 MOVLW  00
5BDC D001           14047 BRA    5BE0
5BDE 0E01           14048 MOVLW  01
5BE0 6F48           14049 MOVWF  x48
5BE2 0E0D           14050 MOVLW  0D
5BE4 6F49           14051 MOVWF  x49
5BE6 C448 F44A      14052 MOVFF  448,44A
5C56 0000           14053 NOP   
5C58 0101           14054 MOVLB  1
                    14055 ....................  
                    14056 ....................  
                    14057 ....................  
                    14058 ....................  
24C6 90D8           14059 BCF    FD8.0
24C8 0104           14060 MOVLB  4
24CA 3547           14061 RLCF   x47,W
24CC 6A03           14062 CLRF   03
24CE 0F3D           14063 ADDLW  3D
24D0 6E01           14064 MOVWF  01
24D2 0E01           14065 MOVLW  01
24D4 2203           14066 ADDWFC 03,F
24D6 5001           14067 MOVF   01,W
24D8 6F48           14068 MOVWF  x48
24DA C003 F449      14069 MOVFF  03,449
24DE 0E07           14070 MOVLW  07
24E0 6F4A           14071 MOVWF  x4A
2560 C449 FFEA      14072 MOVFF  449,FEA
2564 C448 FFE9      14073 MOVFF  448,FE9
2568 C000 FFEF      14074 MOVFF  00,FEF
256C C001 FFEC      14075 MOVFF  01,FEC
                    14076 ....................  
2570 0100           14077 MOVLB  0
2572 0012           14078 RETURN 0
                    14079 ....................  
                    14080 ....................  
2F02 0104           14081 MOVLB  4
2F04 6B48           14082 CLRF   x48
2F06 0E04           14083 MOVLW  04
2F08 6F49           14084 MOVWF  x49
2F5E C002 F447      14085 MOVFF  02,447
2F62 C001 F446      14086 MOVFF  01,446
                    14087 ....................  
                    14088 ....................  
2F66 0E01           14089 MOVLW  01
2F68 0101           14090 MOVLB  1
2F6A 6F51           14091 MOVWF  x51
                    14092 ....................  
2F6C 0E08           14093 MOVLW  08
2F6E 0104           14094 MOVLB  4
2F70 6F4A           14095 MOVWF  x4A
2FF2 5000           14096 MOVF   00,W
2FF4 0101           14097 MOVLB  1
2FF6 5D3D           14098 SUBWF  x3D,W
2FF8 0104           14099 MOVLB  4
2FFA 6F48           14100 MOVWF  x48
2FFC 5001           14101 MOVF   01,W
2FFE 0101           14102 MOVLB  1
3000 593E           14103 SUBWFB x3E,W
3002 0104           14104 MOVLB  4
3004 6F49           14105 MOVWF  x49
3006 0E00           14106 MOVLW  00
3008 5402           14107 SUBFWB 02,W
300A 6F4A           14108 MOVWF  x4A
300C 0E00           14109 MOVLW  00
300E 5403           14110 SUBFWB 03,W
3010 6F4B           14111 MOVWF  x4B
3012 534B           14112 MOVF   x4B,F
3014 E10C           14113 BNZ   302E
3016 534A           14114 MOVF   x4A,F
3018 E10A           14115 BNZ   302E
301A 5149           14116 MOVF   x49,W
301C 5D47           14117 SUBWF  x47,W
301E E307           14118 BNC   302E
3020 E103           14119 BNZ   3028
3022 5146           14120 MOVF   x46,W
3024 5D48           14121 SUBWF  x48,W
3026 E203           14122 BC    302E
                    14123 ....................  
3028 0101           14124 MOVLB  1
302A 6B51           14125 CLRF   x51
302C 0104           14126 MOVLB  4
                    14127 ....................  
302E 0100           14128 MOVLB  0
3030 0012           14129 RETURN 0
                    14130 ....................  
                    14131 ....................  
                    14132 ....................  
2574 90D8           14133 BCF    FD8.0
2576 0104           14134 MOVLB  4
2578 3547           14135 RLCF   x47,W
257A 6A03           14136 CLRF   03
257C 0F45           14137 ADDLW  45
257E 6E01           14138 MOVWF  01
2580 0E01           14139 MOVLW  01
2582 2203           14140 ADDWFC 03,F
2584 5001           14141 MOVF   01,W
2586 6F48           14142 MOVWF  x48
2588 C003 F449      14143 MOVFF  03,449
258C 0E09           14144 MOVLW  09
258E 6F4A           14145 MOVWF  x4A
260E C449 FFEA      14146 MOVFF  449,FEA
2612 C448 FFE9      14147 MOVFF  448,FE9
2616 C000 FFEF      14148 MOVFF  00,FEF
261A C001 FFEC      14149 MOVFF  01,FEC
                    14150 ....................  
261E 0100           14151 MOVLB  0
2620 0012           14152 RETURN 0
                    14153 ....................  
                    14154 ....................  
                    14155 ....................  
                    14156 ....................  
                    14157 ....................  
                    14158 ....................  
                    14159 ....................  
2466 0E01           14160 MOVLW  01
2468 6EEA           14161 MOVWF  FEA
246A 0E1C           14162 MOVLW  1C
246C 6EE9           14163 MOVWF  FE9
246E 0E01           14164 MOVLW  01
2470 6EE2           14165 MOVWF  FE2
2472 0E37           14166 MOVLW  37
2474 6EE1           14167 MOVWF  FE1
2476 0E1B           14168 MOVLW  1B
2478 6E01           14169 MOVWF  01
247A CFE6 FFEE      14170 MOVFF  FE6,FEE
247E 2E01           14171 DECFSZ 01,F
2480 D7FC           14172 BRA    247A
                    14173 ....................  
2482 0012           14174 RETURN 0
                    14175 ....................  
                    14176 ....................  
                    14177 ....................  
                    14178 ....................  
                    14179 ....................  
331A 6B48           14180 CLRF   x48
331C 0E10           14181 MOVLW  10
331E 6F49           14182 MOVWF  x49
3374 C002 F448      14183 MOVFF  02,448
3378 C001 F447      14184 MOVFF  01,447
337C C448 F449      14185 MOVFF  448,449
3380 2B49           14186 INCF   x49,F
3382 0749           14187 DECF   x49,F
3384 B4D8           14188 BTFSC  FD8.2
3386 D006           14189 BRA    3394
3388 694A           14190 SETF   x4A
338A 0100           14191 MOVLB  0
338C EC51 F012      14192 CALL   24A2
3390 0104           14193 MOVLB  4
3392 D7F7           14194 BRA    3382
3394 C447 F44A      14195 MOVFF  447,44A
3398 0100           14196 MOVLB  0
339A EC51 F012      14197 CALL   24A2
3B34 6B48           14198 CLRF   x48
3B36 0E10           14199 MOVLW  10
3B38 6F49           14200 MOVWF  x49
3B8E C002 F448      14201 MOVFF  02,448
3B92 C001 F447      14202 MOVFF  01,447
3B96 C448 F449      14203 MOVFF  448,449
3B9A 2B49           14204 INCF   x49,F
3B9C 0749           14205 DECF   x49,F
3B9E B4D8           14206 BTFSC  FD8.2
3BA0 D006           14207 BRA    3BAE
3BA2 694A           14208 SETF   x4A
3BA4 0100           14209 MOVLB  0
3BA6 EC51 F012      14210 CALL   24A2
3BAA 0104           14211 MOVLB  4
3BAC D7F7           14212 BRA    3B9C
3BAE C447 F44A      14213 MOVFF  447,44A
3BB2 0100           14214 MOVLB  0
3BB4 EC51 F012      14215 CALL   24A2
5D34 6B48           14216 CLRF   x48
5D36 0E10           14217 MOVLW  10
5D38 6F49           14218 MOVWF  x49
5D8E C002 F448      14219 MOVFF  02,448
5D92 C001 F447      14220 MOVFF  01,447
5D96 C448 F449      14221 MOVFF  448,449
5D9A 2B49           14222 INCF   x49,F
5D9C 0749           14223 DECF   x49,F
5D9E B4D8           14224 BTFSC  FD8.2
5DA0 D006           14225 BRA    5DAE
5DA2 694A           14226 SETF   x4A
5DA4 0100           14227 MOVLB  0
5DA6 EC51 F012      14228 CALL   24A2
5DAA 0104           14229 MOVLB  4
5DAC D7F7           14230 BRA    5D9C
5DAE C447 F44A      14231 MOVFF  447,44A
5DB2 0100           14232 MOVLB  0
5DB4 EC51 F012      14233 CALL   24A2
                    14234 ....................  
339E C446 F447      14235 MOVFF  446,447
33A2 EC63 F012      14236 CALL   24C6
3BB8 C446 F447      14237 MOVFF  446,447
3BBC EC63 F012      14238 CALL   24C6
5DB8 C446 F447      14239 MOVFF  446,447
5DBC EC63 F012      14240 CALL   24C6
                    14241 ....................  
33A6 0104           14242 MOVLB  4
33A8 6B48           14243 CLRF   x48
33AA 0E11           14244 MOVLW  11
33AC 6F49           14245 MOVWF  x49
3402 C002 F448      14246 MOVFF  02,448
3406 C001 F447      14247 MOVFF  01,447
340A C448 F449      14248 MOVFF  448,449
340E 2B49           14249 INCF   x49,F
3410 0749           14250 DECF   x49,F
3412 B4D8           14251 BTFSC  FD8.2
3414 D006           14252 BRA    3422
3416 694A           14253 SETF   x4A
3418 0100           14254 MOVLB  0
341A EC51 F012      14255 CALL   24A2
341E 0104           14256 MOVLB  4
3420 D7F7           14257 BRA    3410
3422 C447 F44A      14258 MOVFF  447,44A
3426 0100           14259 MOVLB  0
3428 EC51 F012      14260 CALL   24A2
3BC0 0104           14261 MOVLB  4
3BC2 6B48           14262 CLRF   x48
3BC4 0E11           14263 MOVLW  11
3BC6 6F49           14264 MOVWF  x49
3C1C C002 F448      14265 MOVFF  02,448
3C20 C001 F447      14266 MOVFF  01,447
3C24 C448 F449      14267 MOVFF  448,449
3C28 2B49           14268 INCF   x49,F
3C2A 0749           14269 DECF   x49,F
3C2C B4D8           14270 BTFSC  FD8.2
3C2E D006           14271 BRA    3C3C
3C30 694A           14272 SETF   x4A
3C32 0100           14273 MOVLB  0
3C34 EC51 F012      14274 CALL   24A2
3C38 0104           14275 MOVLB  4
3C3A D7F7           14276 BRA    3C2A
3C3C C447 F44A      14277 MOVFF  447,44A
3C40 0100           14278 MOVLB  0
3C42 EC51 F012      14279 CALL   24A2
5DC0 0104           14280 MOVLB  4
5DC2 6B48           14281 CLRF   x48
5DC4 0E11           14282 MOVLW  11
5DC6 6F49           14283 MOVWF  x49
5E1C C002 F448      14284 MOVFF  02,448
5E20 C001 F447      14285 MOVFF  01,447
5E24 C448 F449      14286 MOVFF  448,449
5E28 2B49           14287 INCF   x49,F
5E2A 0749           14288 DECF   x49,F
5E2C B4D8           14289 BTFSC  FD8.2
5E2E D006           14290 BRA    5E3C
5E30 694A           14291 SETF   x4A
5E32 0100           14292 MOVLB  0
5E34 EC51 F012      14293 CALL   24A2
5E38 0104           14294 MOVLB  4
5E3A D7F7           14295 BRA    5E2A
5E3C C447 F44A      14296 MOVFF  447,44A
5E40 0100           14297 MOVLB  0
5E42 EC51 F012      14298 CALL   24A2
                    14299 ....................  
                    14300 ....................  
                    14301 ....................  
342C C446 F447      14302 MOVFF  446,447
3430 ECBA F012      14303 CALL   2574
3434 0000           14304 NOP   
3C46 C446 F447      14305 MOVFF  446,447
3C4A ECBA F012      14306 CALL   2574
3C4E 0000           14307 NOP   
5E46 C446 F447      14308 MOVFF  446,447
5E4A ECBA F012      14309 CALL   2574
5E4E 0000           14310 NOP   
                    14311 ....................  
                    14312 ....................  
                    14313 ....................  
                    14314 ....................  
                    14315 ....................  
                    14316 ....................  
                    14317 ....................  
                    14318 ....................  
                    14319 ....................  
                    14320 ....................  
                    14321 ....................  
                    14322 ....................  
                    14323 ....................  
                    14324 ....................  
                    14325 ....................  
                    14326 ....................  
                    14327 ....................  
                    14328 ....................  
                    14329 ....................  
                    14330 ....................  
                    14331 ....................  
                    14332 ....................  
                    14333 ....................  
                    14334 ....................  
                    14335 ....................  
                    14336 ....................  
                    14337 ....................  
3128 0101           14338 MOVLB  1
312A BF19           14339 BTFSC  x19.7
312C D0EB           14340 BRA    3304
3944 BF19           14341 BTFSC  x19.7
3946 D0EB           14342 BRA    3B1E
5B44 BF19           14343 BTFSC  x19.7
5B46 D0EB           14344 BRA    5D1E
                    14345 ....................  
                    14346 ....................  
312E 5119           14347 MOVF   x19,W
3130 1916           14348 XORWF  x16,W
3132 0B10           14349 ANDLW  10
3134 B4D8           14350 BTFSC  FD8.2
3136 D084           14351 BRA    3240
3948 5119           14352 MOVF   x19,W
394A 1916           14353 XORWF  x16,W
394C 0B10           14354 ANDLW  10
394E B4D8           14355 BTFSC  FD8.2
3950 D084           14356 BRA    3A5A
5B48 5119           14357 MOVF   x19,W
5B4A 1916           14358 XORWF  x16,W
5B4C 0B10           14359 ANDLW  10
5B4E B4D8           14360 BTFSC  FD8.2
5B50 D084           14361 BRA    5C5A
                    14362 ....................  
                    14363 ....................  
3138 0E00           14364 MOVLW  00
313A B919           14365 BTFSC  x19.4
313C 0E01           14366 MOVLW  01
313E 0104           14367 MOVLB  4
3140 6F46           14368 MOVWF  x46
3142 C446 F447      14369 MOVFF  446,447
3952 0E00           14370 MOVLW  00
3954 B919           14371 BTFSC  x19.4
3956 0E01           14372 MOVLW  01
3958 0104           14373 MOVLB  4
395A 6F46           14374 MOVWF  x46
395C C446 F447      14375 MOVFF  446,447
5B52 0E00           14376 MOVLW  00
5B54 B919           14377 BTFSC  x19.4
5B56 0E01           14378 MOVLW  01
5B58 0104           14379 MOVLB  4
5B5A 6F46           14380 MOVWF  x46
5B5C C446 F447      14381 MOVFF  446,447
                    14382 ....................  
                    14383 ....................  
                    14384 ....................  
                    14385 ....................  
                    14386 ....................  
3240 0104           14387 MOVLB  4
3242 9141           14388 BCF    x41.0
3244 0101           14389 MOVLB  1
3246 3119           14390 RRCF   x19,W
3248 0B07           14391 ANDLW  07
324A 0104           14392 MOVLB  4
324C 6F46           14393 MOVWF  x46
324E 0101           14394 MOVLB  1
3250 C116 F000      14395 MOVFF  116,00
3254 3116           14396 RRCF   x16,W
3256 0B07           14397 ANDLW  07
3258 0104           14398 MOVLB  4
325A 5D46           14399 SUBWF  x46,W
325C E106           14400 BNZ   326A
325E 0101           14401 MOVLB  1
3260 5119           14402 MOVF   x19,W
3262 1916           14403 XORWF  x16,W
3264 0B20           14404 ANDLW  20
3266 E003           14405 BZ    326E
3268 0104           14406 MOVLB  4
326A 8141           14407 BSF    x41.0
326C 0101           14408 MOVLB  1
3A5A 0104           14409 MOVLB  4
3A5C 9141           14410 BCF    x41.0
3A5E 0101           14411 MOVLB  1
3A60 3119           14412 RRCF   x19,W
3A62 0B07           14413 ANDLW  07
3A64 0104           14414 MOVLB  4
3A66 6F46           14415 MOVWF  x46
3A68 0101           14416 MOVLB  1
3A6A C116 F000      14417 MOVFF  116,00
3A6E 3116           14418 RRCF   x16,W
3A70 0B07           14419 ANDLW  07
3A72 0104           14420 MOVLB  4
3A74 5D46           14421 SUBWF  x46,W
3A76 E106           14422 BNZ   3A84
3A78 0101           14423 MOVLB  1
3A7A 5119           14424 MOVF   x19,W
3A7C 1916           14425 XORWF  x16,W
3A7E 0B20           14426 ANDLW  20
3A80 E003           14427 BZ    3A88
3A82 0104           14428 MOVLB  4
3A84 8141           14429 BSF    x41.0
3A86 0101           14430 MOVLB  1
5C5A 0104           14431 MOVLB  4
5C5C 9141           14432 BCF    x41.0
5C5E 0101           14433 MOVLB  1
5C60 3119           14434 RRCF   x19,W
5C62 0B07           14435 ANDLW  07
5C64 0104           14436 MOVLB  4
5C66 6F46           14437 MOVWF  x46
5C68 0101           14438 MOVLB  1
5C6A C116 F000      14439 MOVFF  116,00
5C6E 3116           14440 RRCF   x16,W
5C70 0B07           14441 ANDLW  07
5C72 0104           14442 MOVLB  4
5C74 5D46           14443 SUBWF  x46,W
5C76 E106           14444 BNZ   5C84
5C78 0101           14445 MOVLB  1
5C7A 5119           14446 MOVF   x19,W
5C7C 1916           14447 XORWF  x16,W
5C7E 0B20           14448 ANDLW  20
5C80 E003           14449 BZ    5C88
5C82 0104           14450 MOVLB  4
5C84 8141           14451 BSF    x41.0
5C86 0101           14452 MOVLB  1
                    14453 ....................  
                    14454 ....................  
326E 0104           14455 MOVLB  4
3270 A141           14456 BTFSS  x41.0
3272 D039           14457 BRA    32E6
3A88 0104           14458 MOVLB  4
3A8A A141           14459 BTFSS  x41.0
3A8C D039           14460 BRA    3B00
5C88 0104           14461 MOVLB  4
5C8A A141           14462 BTFSS  x41.0
5C8C D039           14463 BRA    5D00
                    14464 ....................  
                    14465 ....................  
                    14466 ....................  
                    14467 ....................  
                    14468 ....................  
                    14469 ....................  
32E6 0101           14470 MOVLB  1
32E8 5119           14471 MOVF   x19,W
32EA 1916           14472 XORWF  x16,W
32EC 0B01           14473 ANDLW  01
32EE E00A           14474 BZ    3304
3B00 0101           14475 MOVLB  1
3B02 5119           14476 MOVF   x19,W
3B04 1916           14477 XORWF  x16,W
3B06 0B01           14478 ANDLW  01
3B08 E00A           14479 BZ    3B1E
5D00 0101           14480 MOVLB  1
5D02 5119           14481 MOVF   x19,W
5D04 1916           14482 XORWF  x16,W
5D06 0B01           14483 ANDLW  01
5D08 E00A           14484 BZ    5D1E
                    14485 ....................  
                    14486 ....................  
32F0 0E00           14487 MOVLW  00
32F2 B119           14488 BTFSC  x19.0
32F4 0E01           14489 MOVLW  01
32F6 0104           14490 MOVLB  4
32F8 6F46           14491 MOVWF  x46
32FA 6F47           14492 MOVWF  x47
32FC 0100           14493 MOVLB  0
32FE EC84 F011      14494 CALL   2308
3302 0101           14495 MOVLB  1
3B0A 0E00           14496 MOVLW  00
3B0C B119           14497 BTFSC  x19.0
3B0E 0E01           14498 MOVLW  01
3B10 0104           14499 MOVLB  4
3B12 6F46           14500 MOVWF  x46
3B14 6F47           14501 MOVWF  x47
3B16 0100           14502 MOVLB  0
3B18 EC84 F011      14503 CALL   2308
3B1C 0101           14504 MOVLB  1
5D0A 0E00           14505 MOVLW  00
5D0C B119           14506 BTFSC  x19.0
5D0E 0E01           14507 MOVLW  01
5D10 0104           14508 MOVLB  4
5D12 6F46           14509 MOVWF  x46
5D14 6F47           14510 MOVWF  x47
5D16 0100           14511 MOVLB  0
5D18 EC84 F011      14512 CALL   2308
5D1C 0101           14513 MOVLB  1
                    14514 ....................  
                    14515 ....................  
                    14516 ....................  
                    14517 ....................  
                    14518 ....................  
3304 0100           14519 MOVLB  0
3306 EC33 F012      14520 CALL   2466
3B1E 0100           14521 MOVLB  0
3B20 EC33 F012      14522 CALL   2466
5D1E 0100           14523 MOVLB  0
5D20 EC33 F012      14524 CALL   2466
                    14525 ....................  
                    14526 ....................  
                    14527 ....................  
                    14528 ....................  
330A 0104           14529 MOVLB  4
330C 6B40           14530 CLRF   x40
330E 5140           14531 MOVF   x40,W
3310 0803           14532 SUBLW  03
3312 A0D8           14533 BTFSS  FD8.0
3314 D093           14534 BRA    343C
3B24 0104           14535 MOVLB  4
3B26 6B40           14536 CLRF   x40
3B28 5140           14537 MOVF   x40,W
3B2A 0803           14538 SUBLW  03
3B2C A0D8           14539 BTFSS  FD8.0
3B2E D093           14540 BRA    3C56
5D24 0104           14541 MOVLB  4
5D26 6B40           14542 CLRF   x40
5D28 5140           14543 MOVF   x40,W
5D2A 0803           14544 SUBLW  03
5D2C A0D8           14545 BTFSS  FD8.0
5D2E D093           14546 BRA    5E56
                    14547 ....................  
3316 C440 F446      14548 MOVFF  440,446
3B30 C440 F446      14549 MOVFF  440,446
5D30 C440 F446      14550 MOVFF  440,446
                    14551 ....................  
3436 0104           14552 MOVLB  4
3438 2B40           14553 INCF   x40,F
343A D769           14554 BRA    330E
3C50 0104           14555 MOVLB  4
3C52 2B40           14556 INCF   x40,F
3C54 D769           14557 BRA    3B28
5E50 0104           14558 MOVLB  4
5E52 2B40           14559 INCF   x40,F
5E54 D769           14560 BRA    5D28
                    14561 ....................  
343C 0100           14562 MOVLB  0
343E DD61           14563 RCALL  2F02
3C56 0100           14564 MOVLB  0
3C58 EC81 F017      14565 CALL   2F02
5E56 0100           14566 MOVLB  0
5E58 EC81 F017      14567 CALL   2F02
                    14568 ....................  
                    14569 ....................  
3440 0E0A           14570 MOVLW  0A
3442 0104           14571 MOVLB  4
3444 6F4A           14572 MOVWF  x4A
34C6 C003 F449      14573 MOVFF  03,449
34CA C002 F448      14574 MOVFF  02,448
34CE C001 F447      14575 MOVFF  01,447
34D2 C000 F446      14576 MOVFF  00,446
34D6 0EA7           14577 MOVLW  A7
34D8 5F46           14578 SUBWF  x46,F
34DA 0E00           14579 MOVLW  00
34DC 5B47           14580 SUBWFB x47,F
34DE 5B48           14581 SUBWFB x48,F
34E0 5B49           14582 SUBWFB x49,F
34E2 C449 F44D      14583 MOVFF  449,44D
34E6 C448 F44C      14584 MOVFF  448,44C
34EA C447 F44B      14585 MOVFF  447,44B
34EE C446 F44A      14586 MOVFF  446,44A
34F2 0100           14587 MOVLB  0
34F4 EC11 F013      14588 CALL   2622
34F8 C003 F44D      14589 MOVFF  03,44D
34FC C002 F44C      14590 MOVFF  02,44C
3500 C001 F44B      14591 MOVFF  01,44B
3504 C000 F44A      14592 MOVFF  00,44A
3508 0EC0           14593 MOVLW  C0
350A 0104           14594 MOVLB  4
350C 6F51           14595 MOVWF  x51
350E 0E26           14596 MOVLW  26
3510 6F50           14597 MOVWF  x50
3512 0E1B           14598 MOVLW  1B
3514 6F4F           14599 MOVWF  x4F
3516 0E7D           14600 MOVLW  7D
3518 6F4E           14601 MOVWF  x4E
351A 0100           14602 MOVLB  0
351C DD8A           14603 RCALL  3032
351E C003 F449      14604 MOVFF  03,449
3522 C002 F448      14605 MOVFF  02,448
3526 C001 F447      14606 MOVFF  01,447
352A C000 F446      14607 MOVFF  00,446
352E EC2D F013      14608 CALL   265A
3532 C002 F14E      14609 MOVFF  02,14E
3536 C001 F14D      14610 MOVFF  01,14D
3C5C 0E0A           14611 MOVLW  0A
3C5E 0104           14612 MOVLB  4
3C60 6F4A           14613 MOVWF  x4A
3CE2 C003 F449      14614 MOVFF  03,449
3CE6 C002 F448      14615 MOVFF  02,448
3CEA C001 F447      14616 MOVFF  01,447
3CEE C000 F446      14617 MOVFF  00,446
3CF2 0EA7           14618 MOVLW  A7
3CF4 5F46           14619 SUBWF  x46,F
3CF6 0E00           14620 MOVLW  00
3CF8 5B47           14621 SUBWFB x47,F
3CFA 5B48           14622 SUBWFB x48,F
3CFC 5B49           14623 SUBWFB x49,F
3CFE C449 F44D      14624 MOVFF  449,44D
3D02 C448 F44C      14625 MOVFF  448,44C
3D06 C447 F44B      14626 MOVFF  447,44B
3D0A C446 F44A      14627 MOVFF  446,44A
3D0E 0100           14628 MOVLB  0
3D10 EC11 F013      14629 CALL   2622
3D14 C003 F44D      14630 MOVFF  03,44D
3D18 C002 F44C      14631 MOVFF  02,44C
3D1C C001 F44B      14632 MOVFF  01,44B
3D20 C000 F44A      14633 MOVFF  00,44A
3D24 0EC0           14634 MOVLW  C0
3D26 0104           14635 MOVLB  4
3D28 6F51           14636 MOVWF  x51
3D2A 0E26           14637 MOVLW  26
3D2C 6F50           14638 MOVWF  x50
3D2E 0E1B           14639 MOVLW  1B
3D30 6F4F           14640 MOVWF  x4F
3D32 0E7D           14641 MOVLW  7D
3D34 6F4E           14642 MOVWF  x4E
3D36 0100           14643 MOVLB  0
3D38 EC19 F018      14644 CALL   3032
3D3C C003 F449      14645 MOVFF  03,449
3D40 C002 F448      14646 MOVFF  02,448
3D44 C001 F447      14647 MOVFF  01,447
3D48 C000 F446      14648 MOVFF  00,446
3D4C EC2D F013      14649 CALL   265A
3D50 C002 F14E      14650 MOVFF  02,14E
3D54 C001 F14D      14651 MOVFF  01,14D
5E5C 0E0A           14652 MOVLW  0A
5E5E 0104           14653 MOVLB  4
5E60 6F4A           14654 MOVWF  x4A
5EE2 C003 F449      14655 MOVFF  03,449
5EE6 C002 F448      14656 MOVFF  02,448
5EEA C001 F447      14657 MOVFF  01,447
5EEE C000 F446      14658 MOVFF  00,446
5EF2 0EA7           14659 MOVLW  A7
5EF4 5F46           14660 SUBWF  x46,F
5EF6 0E00           14661 MOVLW  00
5EF8 5B47           14662 SUBWFB x47,F
5EFA 5B48           14663 SUBWFB x48,F
5EFC 5B49           14664 SUBWFB x49,F
5EFE C449 F44D      14665 MOVFF  449,44D
5F02 C448 F44C      14666 MOVFF  448,44C
5F06 C447 F44B      14667 MOVFF  447,44B
5F0A C446 F44A      14668 MOVFF  446,44A
5F0E 0100           14669 MOVLB  0
5F10 EC11 F013      14670 CALL   2622
5F14 C003 F44D      14671 MOVFF  03,44D
5F18 C002 F44C      14672 MOVFF  02,44C
5F1C C001 F44B      14673 MOVFF  01,44B
5F20 C000 F44A      14674 MOVFF  00,44A
5F24 0EC0           14675 MOVLW  C0
5F26 0104           14676 MOVLB  4
5F28 6F51           14677 MOVWF  x51
5F2A 0E26           14678 MOVLW  26
5F2C 6F50           14679 MOVWF  x50
5F2E 0E1B           14680 MOVLW  1B
5F30 6F4F           14681 MOVWF  x4F
5F32 0E7D           14682 MOVLW  7D
5F34 6F4E           14683 MOVWF  x4E
5F36 0100           14684 MOVLB  0
5F38 EC19 F018      14685 CALL   3032
5F3C C003 F449      14686 MOVFF  03,449
5F40 C002 F448      14687 MOVFF  02,448
5F44 C001 F447      14688 MOVFF  01,447
5F48 C000 F446      14689 MOVFF  00,446
5F4C EC2D F013      14690 CALL   265A
5F50 C002 F14E      14691 MOVFF  02,14E
5F54 C001 F14D      14692 MOVFF  01,14D
                    14693 ....................  
                    14694 ....................  
353A 0E05           14695 MOVLW  05
353C 0104           14696 MOVLB  4
353E 6F4A           14697 MOVWF  x4A
35C0 C001 F443      14698 MOVFF  01,443
35C4 C000 F442      14699 MOVFF  00,442
35C8 0E06           14700 MOVLW  06
35CA 6F4A           14701 MOVWF  x4A
364C C001 F445      14702 MOVFF  01,445
3650 C000 F444      14703 MOVFF  00,444
3D58 0E05           14704 MOVLW  05
3D5A 0104           14705 MOVLB  4
3D5C 6F4A           14706 MOVWF  x4A
3DDE C001 F443      14707 MOVFF  01,443
3DE2 C000 F442      14708 MOVFF  00,442
3DE6 0E06           14709 MOVLW  06
3DE8 6F4A           14710 MOVWF  x4A
3E6A C001 F445      14711 MOVFF  01,445
3E6E C000 F444      14712 MOVFF  00,444
5F58 0E05           14713 MOVLW  05
5F5A 0104           14714 MOVLB  4
5F5C 6F4A           14715 MOVWF  x4A
5FDE C001 F443      14716 MOVFF  01,443
5FE2 C000 F442      14717 MOVFF  00,442
5FE6 0E06           14718 MOVLW  06
5FE8 6F4A           14719 MOVWF  x4A
606A C001 F445      14720 MOVFF  01,445
606E C000 F444      14721 MOVFF  00,444
                    14722 ....................  
3654 5144           14723 MOVF   x44,W
3656 2542           14724 ADDWF  x42,W
3658 0101           14725 MOVLB  1
365A 6F4F           14726 MOVWF  x4F
365C 0104           14727 MOVLB  4
365E 5145           14728 MOVF   x45,W
3660 2143           14729 ADDWFC x43,W
3662 0101           14730 MOVLB  1
3664 6F50           14731 MOVWF  x50
3E72 5144           14732 MOVF   x44,W
3E74 2542           14733 ADDWF  x42,W
3E76 0101           14734 MOVLB  1
3E78 6F4F           14735 MOVWF  x4F
3E7A 0104           14736 MOVLB  4
3E7C 5145           14737 MOVF   x45,W
3E7E 2143           14738 ADDWFC x43,W
3E80 0101           14739 MOVLB  1
3E82 6F50           14740 MOVWF  x50
6072 5144           14741 MOVF   x44,W
6074 2542           14742 ADDWF  x42,W
6076 0101           14743 MOVLB  1
6078 6F4F           14744 MOVWF  x4F
607A 0104           14745 MOVLB  4
607C 5145           14746 MOVF   x45,W
607E 2143           14747 ADDWFC x43,W
6080 0101           14748 MOVLB  1
6082 6F50           14749 MOVWF  x50
                    14750 ....................  
                    14751 ....................  
                    14752 ....................  
3666 C11B F13C      14753 MOVFF  11B,13C
366A C11A F13B      14754 MOVFF  11A,13B
3E84 C11B F13C      14755 MOVFF  11B,13C
3E88 C11A F13B      14756 MOVFF  11A,13B
6084 C11B F13C      14757 MOVFF  11B,13C
6088 C11A F13B      14758 MOVFF  11A,13B
                    14759 ....................  
366E C11B F118      14760 MOVFF  11B,118
3672 C11A F117      14761 MOVFF  11A,117
3676 C119 F116      14762 MOVFF  119,116
3E8C C11B F118      14763 MOVFF  11B,118
3E90 C11A F117      14764 MOVFF  11A,117
3E94 C119 F116      14765 MOVFF  119,116
608C C11B F118      14766 MOVFF  11B,118
6090 C11A F117      14767 MOVFF  11A,117
6094 C119 F116      14768 MOVFF  119,116
                    14769 ....................  
367A 88F2           14770 BSF    FF2.4
3E98 88F2           14771 BSF    FF2.4
6098 88F2           14772 BSF    FF2.4
                    14773 ....................  
                    14774 ....................  
                    14775 ....................  
58EC 0103           14776 MOVLB  3
58EE 91E2           14777 BCF    xE2.0
                    14778 ....................  
                    14779 ....................  
                    14780 ....................  
                    14781 ....................  
58F0 0E03           14782 MOVLW  03
58F2 6EEA           14783 MOVWF  FEA
58F4 0EE3           14784 MOVLW  E3
58F6 6EE9           14785 MOVWF  FE9
58F8 0E01           14786 MOVLW  01
58FA 6EE2           14787 MOVWF  FE2
58FC 0E1C           14788 MOVLW  1C
58FE 6EE1           14789 MOVWF  FE1
5900 0E1B           14790 MOVLW  1B
5902 6E01           14791 MOVWF  01
5904 CFE6 FFEE      14792 MOVFF  FE6,FEE
5908 2E01           14793 DECFSZ 01,F
590A D7FC           14794 BRA    5904
                    14795 ....................  
590C C3E0 F3FF      14796 MOVFF  3E0,3FF
5910 C3DF F3FE      14797 MOVFF  3DF,3FE
                    14798 ....................  
                    14799 ....................  
5914 C3FE FFE9      14800 MOVFF  3FE,FE9
5918 C3FF FFEA      14801 MOVFF  3FF,FEA
591C BEEF           14802 BTFSC  FEF.7
591E D10C           14803 BRA    5B38
                    14804 ....................  
                    14805 ....................  
5920 C3FE FFE9      14806 MOVFF  3FE,FE9
5924 C3FF FFEA      14807 MOVFF  3FF,FEA
5928 ACEF           14808 BTFSS  FEF.6
592A D001           14809 BRA    592E
                    14810 ....................  
592C 00FF           14811 RESET
                    14812 ....................  
                    14813 ....................  
                    14814 ....................  
592E 0E01           14815 MOVLW  01
5930 6EEA           14816 MOVWF  FEA
5932 0E19           14817 MOVLW  19
5934 6EE9           14818 MOVWF  FE9
5936 C3FF FFE2      14819 MOVFF  3FF,FE2
593A C3FE FFE1      14820 MOVFF  3FE,FE1
593E 0E03           14821 MOVLW  03
5940 6E01           14822 MOVWF  01
5942 CFE6 FFEE      14823 MOVFF  FE6,FEE
5946 2E01           14824 DECFSZ 01,F
5948 D7FC           14825 BRA    5942
                    14826 ....................  
                    14827 ....................  
594A 0101           14828 MOVLB  1
594C 5119           14829 MOVF   x19,W
594E 1916           14830 XORWF  x16,W
5950 0B01           14831 ANDLW  01
5952 E069           14832 BZ    5A26
                    14833 ....................  
5954 A119           14834 BTFSS  x19.0
5956 D034           14835 BRA    59C0
                    14836 ....................  
5958 0104           14837 MOVLB  4
595A 6B48           14838 CLRF   x48
595C 0E0B           14839 MOVLW  0B
595E 6F49           14840 MOVWF  x49
59B4 C002 F157      14841 MOVFF  02,157
59B8 C001 F156      14842 MOVFF  01,156
                    14843 ....................  
59BC D033           14844 BRA    5A24
59BE 0101           14845 MOVLB  1
                    14846 ....................  
59C0 0104           14847 MOVLB  4
59C2 6B48           14848 CLRF   x48
59C4 0E0C           14849 MOVLW  0C
59C6 6F49           14850 MOVWF  x49
5A1C C002 F157      14851 MOVFF  02,157
5A20 C001 F156      14852 MOVFF  01,156
5A24 0101           14853 MOVLB  1
                    14854 ....................  
                    14855 ....................  
                    14856 ....................  
                    14857 ....................  
                    14858 ....................  
                    14859 ....................  
5A26 3119           14860 RRCF   x19,W
5A28 0B07           14861 ANDLW  07
5A2A 0104           14862 MOVLB  4
5A2C 6F00           14863 MOVWF  x00
5A2E 0101           14864 MOVLB  1
5A30 C116 F000      14865 MOVFF  116,00
5A34 3116           14866 RRCF   x16,W
5A36 0B07           14867 ANDLW  07
5A38 0104           14868 MOVLB  4
5A3A 5D00           14869 SUBWF  x00,W
5A3C E107           14870 BNZ   5A4C
5A3E 0101           14871 MOVLB  1
5A40 5119           14872 MOVF   x19,W
5A42 1916           14873 XORWF  x16,W
5A44 0B20           14874 ANDLW  20
5A46 B4D8           14875 BTFSC  FD8.2
5A48 D077           14876 BRA    5B38
5A4A 0104           14877 MOVLB  4
                    14878 ....................  
                    14879 ....................  
5A4C 0103           14880 MOVLB  3
5A4E 81E2           14881 BSF    xE2.0
                    14882 ....................  
5A50 93E2           14883 BCF    xE2.1
5A52 0101           14884 MOVLB  1
5A54 C119 F000      14885 MOVFF  119,00
5A58 3119           14886 RRCF   x19,W
5A5A 0B07           14887 ANDLW  07
5A5C E103           14888 BNZ   5A64
5A5E 0103           14889 MOVLB  3
5A60 83E2           14890 BSF    xE2.1
5A62 0101           14891 MOVLB  1
                    14892 ....................  
5A64 0103           14893 MOVLB  3
5A66 A3E2           14894 BTFSS  xE2.1
5A68 D034           14895 BRA    5AD2
                    14896 ....................  
5A6A 0104           14897 MOVLB  4
5A6C 6B48           14898 CLRF   x48
5A6E 0E0E           14899 MOVLW  0E
5A70 6F49           14900 MOVWF  x49
5AC6 C002 F155      14901 MOVFF  02,155
5ACA C001 F154      14902 MOVFF  01,154
                    14903 ....................  
5ACE D033           14904 BRA    5B36
5AD0 0103           14905 MOVLB  3
                    14906 ....................  
5AD2 0104           14907 MOVLB  4
5AD4 6B48           14908 CLRF   x48
5AD6 0E0D           14909 MOVLW  0D
5AD8 6F49           14910 MOVWF  x49
5B2E C002 F155      14911 MOVFF  02,155
5B32 C001 F154      14912 MOVFF  01,154
5B36 0101           14913 MOVLB  1
                    14914 ....................  
                    14915 ....................  
                    14916 ....................  
                    14917 ....................  
                    14918 ....................  
5B38 0101           14919 MOVLB  1
5B3A 5315           14920 MOVF   x15,F
5B3C E101           14921 BNZ   5B40
                    14922 ....................  
                    14923 ....................  
                    14924 ....................  
5B3E D2BD           14925 BRA    60BA
5B40 2D15           14926 DECFSZ x15,W
5B42 D2BA           14927 BRA    60B8
                    14928 ....................  
                    14929 ....................  
609A 0E03           14930 MOVLW  03
609C 6EEA           14931 MOVWF  FEA
609E 0EE3           14932 MOVLW  E3
60A0 6EE9           14933 MOVWF  FE9
60A2 0E01           14934 MOVLW  01
60A4 6EE2           14935 MOVWF  FE2
60A6 0E1C           14936 MOVLW  1C
60A8 6EE1           14937 MOVWF  FE1
60AA 0E1B           14938 MOVLW  1B
60AC 6E01           14939 MOVWF  01
60AE CFE6 FFEE      14940 MOVFF  FE6,FEE
60B2 2E01           14941 DECFSZ 01,F
60B4 D7FC           14942 BRA    60AE
                    14943 ....................  
60B6 D001           14944 BRA    60BA
                    14945 ....................  
60B8 D068           14946 BRA    618A
                    14947 ....................  
                    14948 ....................  
                    14949 ....................  
60BA 0E81           14950 MOVLW  81
60BC 0103           14951 MOVLB  3
60BE 6FE3           14952 MOVWF  xE3
                    14953 ....................  
60C0 C114 F3E6      14954 MOVFF  114,3E6
60C4 C113 F3E5      14955 MOVFF  113,3E5
                    14956 ....................  
60C8 C116 F3E4      14957 MOVFF  116,3E4
                    14958 ....................  
60CC 0E03           14959 MOVLW  03
60CE 0104           14960 MOVLB  4
60D0 6F27           14961 MOVWF  x27
60D2 0EE3           14962 MOVLW  E3
60D4 6F26           14963 MOVWF  x26
60D6 6B29           14964 CLRF   x29
60D8 0E1B           14965 MOVLW  1B
60DA 6F28           14966 MOVWF  x28
60DC 0100           14967 MOVLB  0
60DE EC43 F02B      14968 CALL   5686
                    14969 ....................  
                    14970 ....................  
60E2 0103           14971 MOVLB  3
60E4 A1E2           14972 BTFSS  xE2.0
60E6 D052           14973 BRA    618C
                    14974 ....................  
60E8 0E00           14975 MOVLW  00
60EA 0101           14976 MOVLB  1
60EC BB19           14977 BTFSC  x19.5
60EE 0E01           14978 MOVLW  01
60F0 0104           14979 MOVLB  4
60F2 6F00           14980 MOVWF  x00
60F4 0101           14981 MOVLB  1
60F6 C119 F000      14982 MOVFF  119,00
60FA 3119           14983 RRCF   x19,W
60FC 0B07           14984 ANDLW  07
60FE 0104           14985 MOVLB  4
6100 6F01           14986 MOVWF  x01
6102 C400 F402      14987 MOVFF  400,402
6106 6F03           14988 MOVWF  x03
6108 0100           14989 MOVLB  0
610A EF5C F02B      14990 GOTO   56B8
                    14991 ....................  
610E 0101           14992 MOVLB  1
6110 2D15           14993 DECFSZ x15,W
6112 D03B           14994 BRA    618A
                    14995 ....................  
                    14996 ....................  
                    14997 ....................  
                    14998 ....................  
618C 0100           14999 MOVLB  0
618E 0012           15000 RETURN 0
                    15001 ....................  
                    15002 ....................  
                    15003 ....................  
                    15004 ....................  
6190 0103           15005 MOVLB  3
6192 6BE2           15006 CLRF   xE2
6194 6BE3           15007 CLRF   xE3
6196 6BE4           15008 CLRF   xE4
6198 6BE5           15009 CLRF   xE5
619A 6BE6           15010 CLRF   xE6
619C 6BE7           15011 CLRF   xE7
619E 6BE8           15012 CLRF   xE8
61A0 6BE9           15013 CLRF   xE9
61A2 6BEA           15014 CLRF   xEA
61A4 6BEB           15015 CLRF   xEB
61A6 6BEC           15016 CLRF   xEC
61A8 6BED           15017 CLRF   xED
61AA 6BEE           15018 CLRF   xEE
61AC 6BEF           15019 CLRF   xEF
61AE 6BF0           15020 CLRF   xF0
61B0 6BF1           15021 CLRF   xF1
61B2 6BF2           15022 CLRF   xF2
61B4 6BF3           15023 CLRF   xF3
61B6 6BF4           15024 CLRF   xF4
61B8 6BF5           15025 CLRF   xF5
61BA 6BF6           15026 CLRF   xF6
                    15027 ....................  
61BC 0E89           15028 MOVLW  89
61BE 6FE2           15029 MOVWF  xE2
                    15030 ....................  
61C0 C114 F3E5      15031 MOVFF  114,3E5
61C4 C113 F3E4      15032 MOVFF  113,3E4
                    15033 ....................  
61C8 C116 F3E3      15034 MOVFF  116,3E3
                    15035 ....................  
61CC C115 F3E6      15036 MOVFF  115,3E6
                    15037 ....................  
61D0 6BE1           15038 CLRF   xE1
61D2 51E1           15039 MOVF   xE1,W
61D4 0803           15040 SUBLW  03
61D6 A0D8           15041 BTFSS  FD8.0
61D8 D0B0           15042 BRA    633A
                    15043 ....................  
                    15044 ....................  
61DA 90D8           15045 BCF    FD8.0
61DC 35E1           15046 RLCF   xE1,W
61DE 6A03           15047 CLRF   03
61E0 0FE7           15048 ADDLW  E7
61E2 6E01           15049 MOVWF  01
61E4 0E03           15050 MOVLW  03
61E6 2203           15051 ADDWFC 03,F
61E8 5001           15052 MOVF   01,W
61EA 6FF7           15053 MOVWF  xF7
61EC C003 F3F8      15054 MOVFF  03,3F8
61F0 0E0B           15055 MOVLW  0B
61F2 0104           15056 MOVLB  4
61F4 6F4A           15057 MOVWF  x4A
6276 C3F8 FFEA      15058 MOVFF  3F8,FEA
627A C3F7 FFE9      15059 MOVFF  3F7,FE9
627E C000 FFEF      15060 MOVFF  00,FEF
6282 C001 FFEC      15061 MOVFF  01,FEC
                    15062 ....................  
6286 90D8           15063 BCF    FD8.0
6288 0103           15064 MOVLB  3
628A 35E1           15065 RLCF   xE1,W
628C 6A03           15066 CLRF   03
628E 0FEF           15067 ADDLW  EF
6290 6E01           15068 MOVWF  01
6292 0E03           15069 MOVLW  03
6294 2203           15070 ADDWFC 03,F
6296 5001           15071 MOVF   01,W
6298 6FF7           15072 MOVWF  xF7
629A C003 F3F8      15073 MOVFF  03,3F8
629E 0E08           15074 MOVLW  08
62A0 0104           15075 MOVLB  4
62A2 6F4A           15076 MOVWF  x4A
6324 C3F8 FFEA      15077 MOVFF  3F8,FEA
6328 C3F7 FFE9      15078 MOVFF  3F7,FE9
632C C000 FFEF      15079 MOVFF  00,FEF
6330 C001 FFEC      15080 MOVFF  01,FEC
                    15081 ....................  
6334 0103           15082 MOVLB  3
6336 2BE1           15083 INCF   xE1,F
6338 D74C           15084 BRA    61D2
                    15085 ....................  
633A 0E03           15086 MOVLW  03
633C 0104           15087 MOVLB  4
633E 6F27           15088 MOVWF  x27
6340 0EE2           15089 MOVLW  E2
6342 6F26           15090 MOVWF  x26
6344 6B29           15091 CLRF   x29
6346 0E15           15092 MOVLW  15
6348 6F28           15093 MOVWF  x28
634A 0100           15094 MOVLB  0
634C EC43 F02B      15095 CALL   5686
                    15096 ....................  
6350 0012           15097 RETURN 0
                    15098 ....................  
                    15099 ....................  
                    15100 ....................  
6352 0103           15101 MOVLB  3
6354 6BE1           15102 CLRF   xE1
6356 6BE2           15103 CLRF   xE2
6358 6BE3           15104 CLRF   xE3
635A 6BE4           15105 CLRF   xE4
635C 6BE5           15106 CLRF   xE5
635E 6BE6           15107 CLRF   xE6
6360 6BE7           15108 CLRF   xE7
6362 6BE8           15109 CLRF   xE8
6364 6BE9           15110 CLRF   xE9
                    15111 ....................  
6366 0E82           15112 MOVLW  82
6368 6FE1           15113 MOVWF  xE1
                    15114 ....................  
636A 0E13           15115 MOVLW  13
636C 6FE2           15116 MOVWF  xE2
                    15117 ....................  
636E 0E06           15118 MOVLW  06
6370 6FE3           15119 MOVWF  xE3
                    15120 ....................  
6372 0E07           15121 MOVLW  07
6374 6FE5           15122 MOVWF  xE5
6376 0EE2           15123 MOVLW  E2
6378 6FE4           15124 MOVWF  xE4
                    15125 ....................  
637A 0E01           15126 MOVLW  01
637C 6FE6           15127 MOVWF  xE6
                    15128 ....................  
637E 0E0F           15129 MOVLW  0F
6380 6FE7           15130 MOVWF  xE7
                    15131 ....................  
6382 0104           15132 MOVLB  4
6384 6B48           15133 CLRF   x48
6386 0E01           15134 MOVLW  01
6388 6F49           15135 MOVWF  x49
63DE C002 F3E9      15136 MOVFF  02,3E9
63E2 C001 F3E8      15137 MOVFF  01,3E8
                    15138 ....................  
63E6 0E03           15139 MOVLW  03
63E8 6F27           15140 MOVWF  x27
63EA 0EE1           15141 MOVLW  E1
63EC 6F26           15142 MOVWF  x26
63EE 6B29           15143 CLRF   x29
63F0 0E09           15144 MOVLW  09
63F2 6F28           15145 MOVWF  x28
63F4 0100           15146 MOVLB  0
63F6 EC43 F02B      15147 CALL   5686
                    15148 ....................  
63FA 0012           15149 RETURN 0
                    15150 ....................  
                    15151 ....................  
641C C3E0 F3E2      15152 MOVFF  3E0,3E2
6420 C3DF F3E1      15153 MOVFF  3DF,3E1
                    15154 ....................  
                    15155 ....................  
6424 0103           15156 MOVLB  3
6426 51E1           15157 MOVF   xE1,W
6428 6EE9           15158 MOVWF  FE9
642A 51E2           15159 MOVF   xE2,W
642C 6EEA           15160 MOVWF  FEA
642E 50EF           15161 MOVF   FEF,W
6430 0A01           15162 XORLW  01
6432 0100           15163 MOVLB  0
6434 E005           15164 BZ    6440
6436 0A01           15165 XORLW  01
6438 E004           15166 BZ    6442
643A 0A02           15167 XORLW  02
643C E003           15168 BZ    6444
643E D00B           15169 BRA    6456
                    15170 ....................  
                    15171 ....................  
6440 98F2           15172 BCF    FF2.4
                    15173 ....................  
                    15174 ....................  
6442 88F2           15175 BSF    FF2.4
                    15176 ....................  
                    15177 ....................  
6444 C3E1 FFE9      15178 MOVFF  3E1,FE9
6448 C3E2 FFEA      15179 MOVFF  3E2,FEA
644C CFEF F115      15180 MOVFF  FEF,115
6450 0101           15181 MOVLB  1
                    15182 ....................  
6452 D002           15183 BRA    6458
6454 0100           15184 MOVLB  0
                    15185 ....................  
                    15186 ....................  
6456 D002           15187 BRA    645C
                    15188 ....................  
                    15189 ....................  
6458 0100           15190 MOVLB  0
645A DFD0           15191 RCALL  63FC
                    15192 ....................  
645C 0012           15193 RETURN 0
                    15194 ....................  
                    15195 ....................  
64CE C3E0 F3E2      15196 MOVFF  3E0,3E2
64D2 C3DF F3E1      15197 MOVFF  3DF,3E1
                    15198 ....................  
                    15199 ....................  
                    15200 ....................  
64D6 0101           15201 MOVLB  1
64D8 5115           15202 MOVF   x15,W
64DA 0802           15203 SUBLW  02
64DC E001           15204 BZ    64E0
                    15205 ....................  
64DE D023           15206 BRA    6526
                    15207 ....................  
                    15208 ....................  
64E0 0103           15209 MOVLB  3
64E2 C3E1 FFE9      15210 MOVFF  3E1,FE9
64E6 C3E2 FFEA      15211 MOVFF  3E2,FEA
64EA 50EF           15212 MOVF   FEF,W
64EC 0802           15213 SUBLW  02
64EE E203           15214 BC    64F6
                    15215 ....................  
64F0 0101           15216 MOVLB  1
64F2 D019           15217 BRA    6526
64F4 0103           15218 MOVLB  3
                    15219 ....................  
                    15220 ....................  
64F6 C3E1 FFE9      15221 MOVFF  3E1,FE9
64FA C3E2 FFEA      15222 MOVFF  3E2,FEA
64FE CFEF F3E3      15223 MOVFF  FEF,3E3
6502 0E01           15224 MOVLW  01
6504 25E1           15225 ADDWF  xE1,W
6506 6E01           15226 MOVWF  01
6508 0E00           15227 MOVLW  00
650A 21E2           15228 ADDWFC xE2,W
650C 6E03           15229 MOVWF  03
650E C001 F3E4      15230 MOVFF  01,3E4
6512 6FE5           15231 MOVWF  xE5
6514 C3E3 F3E6      15232 MOVFF  3E3,3E6
6518 6FE8           15233 MOVWF  xE8
651A C001 F3E7      15234 MOVFF  01,3E7
651E 0100           15235 MOVLB  0
6520 D7B4           15236 BRA    648A
                    15237 ....................  
                    15238 ....................  
6522 DF6C           15239 RCALL  63FC
6524 0101           15240 MOVLB  1
                    15241 ....................  
6526 0100           15242 MOVLB  0
6528 0012           15243 RETURN 0
                    15244 ....................  
                    15245 ....................  
6564 C3E0 F3E2      15246 MOVFF  3E0,3E2
6568 C3DF F3E1      15247 MOVFF  3DF,3E1
                    15248 ....................  
                    15249 ....................  
                    15250 ....................  
656C 0103           15251 MOVLB  3
656E C3E1 FFE9      15252 MOVFF  3E1,FE9
6572 C3E2 FFEA      15253 MOVFF  3E2,FEA
6576 50EF           15254 MOVF   FEF,W
6578 0802           15255 SUBLW  02
657A E201           15256 BC    657E
                    15257 ....................  
657C D067           15258 BRA    664C
                    15259 ....................  
                    15260 ....................  
657E 6BE3           15261 CLRF   xE3
6580 6BE4           15262 CLRF   xE4
6582 6BE5           15263 CLRF   xE5
6584 6BE6           15264 CLRF   xE6
6586 6BE7           15265 CLRF   xE7
6588 6BE8           15266 CLRF   xE8
658A 6BE9           15267 CLRF   xE9
658C 6BEA           15268 CLRF   xEA
658E 6BEB           15269 CLRF   xEB
6590 6BEC           15270 CLRF   xEC
6592 6BED           15271 CLRF   xED
6594 6BEE           15272 CLRF   xEE
6596 6BEF           15273 CLRF   xEF
6598 6BF0           15274 CLRF   xF0
659A 6BF1           15275 CLRF   xF1
659C 6BF2           15276 CLRF   xF2
659E 6BF3           15277 CLRF   xF3
65A0 6BF4           15278 CLRF   xF4
65A2 6BF5           15279 CLRF   xF5
65A4 6BF6           15280 CLRF   xF6
65A6 6BF7           15281 CLRF   xF7
65A8 6BF8           15282 CLRF   xF8
65AA 6BF9           15283 CLRF   xF9
65AC 6BFA           15284 CLRF   xFA
65AE 6BFB           15285 CLRF   xFB
65B0 6BFC           15286 CLRF   xFC
65B2 6BFD           15287 CLRF   xFD
65B4 6BFE           15288 CLRF   xFE
65B6 6BFF           15289 CLRF   xFF
65B8 0104           15290 MOVLB  4
65BA 6B00           15291 CLRF   x00
65BC 6B01           15292 CLRF   x01
65BE 6B02           15293 CLRF   x02
65C0 6B03           15294 CLRF   x03
65C2 6B04           15295 CLRF   x04
65C4 6B05           15296 CLRF   x05
65C6 6B06           15297 CLRF   x06
65C8 6B07           15298 CLRF   x07
65CA 6B08           15299 CLRF   x08
65CC 6B09           15300 CLRF   x09
65CE 6B0A           15301 CLRF   x0A
65D0 6B0B           15302 CLRF   x0B
65D2 6B0C           15303 CLRF   x0C
65D4 6B0D           15304 CLRF   x0D
65D6 6B0E           15305 CLRF   x0E
65D8 6B0F           15306 CLRF   x0F
65DA 6B10           15307 CLRF   x10
65DC 6B11           15308 CLRF   x11
65DE 6B12           15309 CLRF   x12
65E0 6B13           15310 CLRF   x13
65E2 6B14           15311 CLRF   x14
65E4 6B15           15312 CLRF   x15
65E6 6B16           15313 CLRF   x16
65E8 6B17           15314 CLRF   x17
65EA 6B18           15315 CLRF   x18
65EC 6B19           15316 CLRF   x19
65EE 6B1A           15317 CLRF   x1A
65F0 6B1B           15318 CLRF   x1B
65F2 6B1C           15319 CLRF   x1C
65F4 6B1D           15320 CLRF   x1D
65F6 6B1E           15321 CLRF   x1E
65F8 6B1F           15322 CLRF   x1F
65FA 6B20           15323 CLRF   x20
65FC 6B21           15324 CLRF   x21
65FE 6B22           15325 CLRF   x22
6600 6B23           15326 CLRF   x23
6602 6B24           15327 CLRF   x24
                    15328 ....................  
6604 0E85           15329 MOVLW  85
6606 0103           15330 MOVLB  3
6608 6FE3           15331 MOVWF  xE3
                    15332 ....................  
660A C3E1 FFE9      15333 MOVFF  3E1,FE9
660E C3E2 FFEA      15334 MOVFF  3E2,FEA
6612 CFEF F3E4      15335 MOVFF  FEF,3E4
                    15336 ....................  
6616 C3E1 FFE9      15337 MOVFF  3E1,FE9
661A C3E2 FFEA      15338 MOVFF  3E2,FEA
661E CFEF F425      15339 MOVFF  FEF,425
6622 C425 F426      15340 MOVFF  425,426
6626 0E03           15341 MOVLW  03
6628 0104           15342 MOVLB  4
662A 6F28           15343 MOVWF  x28
662C 0EE5           15344 MOVLW  E5
662E 6F27           15345 MOVWF  x27
6630 0100           15346 MOVLB  0
6632 D77B           15347 BRA    652A
                    15348 ....................  
6634 0E03           15349 MOVLW  03
6636 0104           15350 MOVLB  4
6638 6F27           15351 MOVWF  x27
663A 0EE3           15352 MOVLW  E3
663C 6F26           15353 MOVWF  x26
663E 6B29           15354 CLRF   x29
6640 0E42           15355 MOVLW  42
6642 6F28           15356 MOVWF  x28
6644 0100           15357 MOVLB  0
6646 EC43 F02B      15358 CALL   5686
664A 0103           15359 MOVLB  3
                    15360 ....................  
664C 0100           15361 MOVLB  0
664E 0012           15362 RETURN 0
                    15363 ....................  
                    15364 ....................  
                    15365 ....................  
6650 DED5           15366 RCALL  63FC
                    15367 ....................  
6652 0012           15368 RETURN 0
                    15369 ....................  
                    15370 ....................  
                    15371 ....................  
6654 0103           15372 MOVLB  3
6656 6BE1           15373 CLRF   xE1
6658 6BE2           15374 CLRF   xE2
665A 6BE3           15375 CLRF   xE3
665C 6BE4           15376 CLRF   xE4
665E 6BE5           15377 CLRF   xE5
6660 6BE6           15378 CLRF   xE6
6662 6BE7           15379 CLRF   xE7
6664 6BE8           15380 CLRF   xE8
6666 6BE9           15381 CLRF   xE9
6668 6BEA           15382 CLRF   xEA
666A 6BEB           15383 CLRF   xEB
666C 6BEC           15384 CLRF   xEC
666E 6BED           15385 CLRF   xED
6670 6BEE           15386 CLRF   xEE
6672 6BEF           15387 CLRF   xEF
6674 6BF0           15388 CLRF   xF0
6676 6BF1           15389 CLRF   xF1
6678 6BF2           15390 CLRF   xF2
667A 6BF3           15391 CLRF   xF3
667C 6BF4           15392 CLRF   xF4
667E 6BF5           15393 CLRF   xF5
6680 6BF6           15394 CLRF   xF6
6682 6BF7           15395 CLRF   xF7
6684 6BF8           15396 CLRF   xF8
6686 6BF9           15397 CLRF   xF9
6688 6BFA           15398 CLRF   xFA
668A 6BFB           15399 CLRF   xFB
668C 6BFC           15400 CLRF   xFC
668E 6BFD           15401 CLRF   xFD
6690 6BFE           15402 CLRF   xFE
6692 6BFF           15403 CLRF   xFF
6694 0104           15404 MOVLB  4
6696 6B00           15405 CLRF   x00
6698 6B01           15406 CLRF   x01
669A 6B02           15407 CLRF   x02
669C 6B03           15408 CLRF   x03
669E 6B04           15409 CLRF   x04
66A0 6B05           15410 CLRF   x05
66A2 6B06           15411 CLRF   x06
66A4 6B07           15412 CLRF   x07
66A6 6B08           15413 CLRF   x08
66A8 6B09           15414 CLRF   x09
66AA 6B0A           15415 CLRF   x0A
66AC 6B0B           15416 CLRF   x0B
66AE 6B0C           15417 CLRF   x0C
66B0 6B0D           15418 CLRF   x0D
66B2 6B0E           15419 CLRF   x0E
66B4 6B0F           15420 CLRF   x0F
66B6 6B10           15421 CLRF   x10
66B8 6B11           15422 CLRF   x11
66BA 6B12           15423 CLRF   x12
66BC 6B13           15424 CLRF   x13
66BE 6B14           15425 CLRF   x14
66C0 6B15           15426 CLRF   x15
66C2 6B16           15427 CLRF   x16
66C4 6B17           15428 CLRF   x17
66C6 6B18           15429 CLRF   x18
66C8 6B19           15430 CLRF   x19
66CA 6B1A           15431 CLRF   x1A
66CC 6B1B           15432 CLRF   x1B
66CE 6B1C           15433 CLRF   x1C
66D0 6B1D           15434 CLRF   x1D
66D2 6B1E           15435 CLRF   x1E
66D4 6B1F           15436 CLRF   x1F
66D6 6B20           15437 CLRF   x20
66D8 6B21           15438 CLRF   x21
66DA 6B22           15439 CLRF   x22
66DC 6B23           15440 CLRF   x23
66DE 6B24           15441 CLRF   x24
66E0 6B25           15442 CLRF   x25
                    15443 ....................  
66E2 0E07           15444 MOVLW  07
66E4 0103           15445 MOVLB  3
66E6 6FE1           15446 MOVWF  xE1
                    15447 ....................  
66E8 C3DF FFE9      15448 MOVFF  3DF,FE9
66EC C3E0 FFEA      15449 MOVFF  3E0,FEA
66F0 CFEF F000      15450 MOVFF  FEF,00
66F4 CFEC F001      15451 MOVFF  FEC,01
66F8 CFEC F002      15452 MOVFF  FEC,02
66FC CFEC F003      15453 MOVFF  FEC,03
6700 C003 F3E5      15454 MOVFF  03,3E5
6704 C002 F3E4      15455 MOVFF  02,3E4
6708 C001 F3E3      15456 MOVFF  01,3E3
670C C000 F3E2      15457 MOVFF  00,3E2
                    15458 ....................  
6710 0E03           15459 MOVLW  03
6712 0104           15460 MOVLB  4
6714 6F27           15461 MOVWF  x27
6716 0EE1           15462 MOVLW  E1
6718 6F26           15463 MOVWF  x26
671A 6B29           15464 CLRF   x29
671C 0E45           15465 MOVLW  45
671E 6F28           15466 MOVWF  x28
6720 0100           15467 MOVLB  0
6722 EC43 F02B      15468 CALL   5686
                    15469 ....................  
6726 0012           15470 RETURN 0
                    15471 ....................  
                    15472 ....................  
                    15473 ....................  
                    15474 ....................  
                    15475 ....................  
                    15476 ....................  
                    15477 ....................  
                    15478 ....................  
                    15479 ....................  
                    15480 ....................  
                    15481 ....................  
                    15482 ....................  
                    15483 ....................  
                    15484 ....................  
                    15485 ....................  
                    15486 ....................  
                    15487 ....................  
                    15488 ....................  
                    15489 ....................  
                    15490 ....................  
6728 C3D6 F3DA      15491 MOVFF  3D6,3DA
672C C3D5 F3D9      15492 MOVFF  3D5,3D9
                    15493 ....................  
                    15494 ....................  
                    15495 ....................  
                    15496 ....................  
6730 0103           15497 MOVLB  3
6732 6BDB           15498 CLRF   xDB
6734 51DB           15499 MOVF   xDB,W
6736 0807           15500 SUBLW  07
6738 E33E           15501 BNC   67B6
                    15502 ....................  
673A 51DB           15503 MOVF   xDB,W
673C 0D03           15504 MULLW  03
673E 50F3           15505 MOVF   FF3,W
6740 6BDD           15506 CLRF   xDD
6742 6FDC           15507 MOVWF  xDC
6744 0E58           15508 MOVLW  58
6746 25DC           15509 ADDWF  xDC,W
6748 6EE9           15510 MOVWF  FE9
674A 0E01           15511 MOVLW  01
674C 21DD           15512 ADDWFC xDD,W
674E 6EEA           15513 MOVWF  FEA
6750 CFEF F3DE      15514 MOVFF  FEF,3DE
6754 C3D9 FFE9      15515 MOVFF  3D9,FE9
6758 C3DA FFEA      15516 MOVFF  3DA,FEA
675C 50EF           15517 MOVF   FEF,W
675E 5DDE           15518 SUBWF  xDE,W
6760 E128           15519 BNZ   67B2
                    15520 ....................  
6762 51DB           15521 MOVF   xDB,W
6764 0D03           15522 MULLW  03
6766 50F3           15523 MOVF   FF3,W
6768 6BDD           15524 CLRF   xDD
676A 6FDC           15525 MOVWF  xDC
676C 0E01           15526 MOVLW  01
676E 25DC           15527 ADDWF  xDC,W
6770 6E01           15528 MOVWF  01
6772 0E00           15529 MOVLW  00
6774 21DD           15530 ADDWFC xDD,W
6776 6E03           15531 MOVWF  03
6778 5001           15532 MOVF   01,W
677A 0F58           15533 ADDLW  58
677C 6E01           15534 MOVWF  01
677E 0E01           15535 MOVLW  01
6780 2203           15536 ADDWFC 03,F
6782 C001 F3DC      15537 MOVFF  01,3DC
6786 C003 F3DD      15538 MOVFF  03,3DD
678A 0E01           15539 MOVLW  01
678C 25D9           15540 ADDWF  xD9,W
678E 6E01           15541 MOVWF  01
6790 0E00           15542 MOVLW  00
6792 21DA           15543 ADDWFC xDA,W
6794 6E03           15544 MOVWF  03
6796 C001 F3DE      15545 MOVFF  01,3DE
679A C3DD FFEA      15546 MOVFF  3DD,FEA
679E C3DC FFE9      15547 MOVFF  3DC,FE9
67A2 6BE0           15548 CLRF   xE0
67A4 C001 F3DF      15549 MOVFF  01,3DF
67A8 0100           15550 MOVLB  0
67AA EC34 F011      15551 CALL   2268
                    15552 ....................  
67AE D003           15553 BRA    67B6
67B0 0103           15554 MOVLB  3
                    15555 ....................  
                    15556 ....................  
67B2 2BDB           15557 INCF   xDB,F
67B4 D7BF           15558 BRA    6734
67B6 0100           15559 MOVLB  0
                    15560 ....................  
67B8 EF17 F017      15561 GOTO   2E2E (RETURN)
                    15562 ....................  
                    15563 ....................  
                    15564 ....................  
38EA 0101           15565 MOVLB  1
38EC 6B14           15566 CLRF   x14
38EE 6B13           15567 CLRF   x13
                    15568 ....................  
38F0 6B15           15569 CLRF   x15
                    15570 ....................  
                    15571 ....................  
38F2 0E01           15572 MOVLW  01
38F4 6EEA           15573 MOVWF  FEA
38F6 0E37           15574 MOVLW  37
38F8 6EE9           15575 MOVWF  FE9
38FA 6A00           15576 CLRF   00
38FC 6A02           15577 CLRF   02
38FE 0E1B           15578 MOVLW  1B
3900 6E01           15579 MOVWF  01
3902 0100           15580 MOVLB  0
3904 DFE5           15581 RCALL  38D0
                    15582 ....................  
3906 0E01           15583 MOVLW  01
3908 6EEA           15584 MOVWF  FEA
390A 0E1C           15585 MOVLW  1C
390C 6EE9           15586 MOVWF  FE9
390E 6A00           15587 CLRF   00
3910 6A02           15588 CLRF   02
3912 0E1B           15589 MOVLW  1B
3914 6E01           15590 MOVWF  01
3916 DFDC           15591 RCALL  38D0
                    15592 ....................  
3918 0E01           15593 MOVLW  01
391A 6EEA           15594 MOVWF  FEA
391C 0E19           15595 MOVLW  19
391E 6EE9           15596 MOVWF  FE9
3920 6A00           15597 CLRF   00
3922 6A02           15598 CLRF   02
3924 0E03           15599 MOVLW  03
3926 6E01           15600 MOVWF  01
3928 DFD3           15601 RCALL  38D0
                    15602 ....................  
                    15603 ....................  
392A C11B F118      15604 MOVFF  11B,118
392E C11A F117      15605 MOVFF  11A,117
3932 C119 F116      15606 MOVFF  119,116
                    15607 ....................  
                    15608 ....................  
3936 0EF1           15609 MOVLW  F1
3938 0101           15610 MOVLB  1
393A 1516           15611 ANDWF  x16,W
393C 0906           15612 IORLW  06
393E 6F16           15613 MOVWF  x16
                    15614 ....................  
3940 8916           15615 BSF    x16.4
                    15616 ....................  
3942 8116           15617 BSF    x16.0
                    15618 ....................  
                    15619 ....................  
                    15620 ....................  
3E9A 8CF1           15621 BSF    FF1.6
                    15622 ....................  
3E9C 88F2           15623 BSF    FF2.4
                    15624 ....................  
3E9E 0100           15625 MOVLB  0
3EA0 EF9E F016      15626 GOTO   2D3C (RETURN)
                    15627 ....................  
                    15628 ....................  
                    15629 ....................  
                    15630 ....................  
                    15631 ....................  
                    15632 ....................  
367C 2B13           15633 INCF   x13,F
367E B4D8           15634 BTFSC  FD8.2
3680 2B14           15635 INCF   x14,F
                    15636 ....................  
                    15637 ....................  
3682 92F2           15638 BCF    FF2.1
3684 0100           15639 MOVLB  0
3686 EF3C F010      15640 GOTO   2078
                    15641 ....................  
                    15642 ....................  
                    15643 ....................  
                    15644 ....................  
                    15645 ....................  
                    15646 ....................  
                    15647 ....................  
                    15648 ....................  
                    15649 .................... #include <18F45K22.h> 
                    15650 .................... //////// Standard Header file for the PIC18F45K22 device //////////////// 
                    15651 .................... #device PIC18F45K22 
                    16252 .................... #list 
                    16253 ....................  
                    16254 .................... #device adc=10 
                    16255 .................... #device pass_strings=in_ram 
                    16256 ....................  
                    16257 .................... #define LOADER_END 0x1FFF 
                    16258 .................... #include <boot.h> 
                    16259 .................... #undef LOADER_END 
                    16260 .................... #define FLASH_SIZE getenv("FLASH_ERASE_SIZE") 
                    16261 .................... #define LOADER_END   0x1FFF 
                    16262 .................... #define LOADER_SIZE  0x3FF 
                    16263 ....................  
                    16264 .................... #ifndef _bootloader 
                    16265 .................... #build(reset=LOADER_END+1, interrupt=LOADER_END+9) 
                    16266 ....................  
                    16267 .................... /* when in operational software, keep out of the bootloader sections */ 
                    16268 .................... #org 0, 0xfff {} 
                    16269 .................... #org 0x1000, 0x1ffe {} 
                    16270 ....................  
                    16271 .................... #else 
                    16272 ....................  
                    16273 .................... /* when in the bootloader, keep out of the operational sections */ 
                    16274 .................... #org 0x2000, 0x7ffe {} 
                    16275 ....................  
                    16276 .................... #endif 
                    16277 ....................  
                    16278 ....................  
                    16279 .................... #FUSES NOWDT                   //No Watch Dog Timer 
                    16280 .................... #FUSES WDT128                  //Watch Dog Timer uses 1:128 Postscale 
                    16281 .................... #FUSES INTRC_IO                //Internal RC Osc, no CLKOUT 
                    16282 .................... #FUSES NOBROWNOUT              //No brownout reset 
                    16283 .................... #FUSES WDT_SW                  //No Watch Dog Timer, enabled in Software 
                    16284 .................... #FUSES NOLVP                   //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
                    16285 .................... #FUSES NOPUT 
                    16286 .................... #FUSES NOXINST                 //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
                    16287 ....................  
                    16288 .................... #use delay(clock=64000000) 
                    16289 .................... #use rs232(baud=921600,xmit=PIN_C6,rcv=PIN_C7,ERRORS) 
                    16290 .................... #USE TIMER(TIMER=1,TICK=1us,BITS=32,NOISR) 
                    16291 .................... #use spi(DO=PIN_A4, CLK=PIN_A3, ENABLE=PIN_A2, ENABLE_ACTIVE=0, DATA_HOLD=20, BITS=16) 
                    16292 ....................  
                    16293 .................... #opt 9 
                    16294 ....................  
                    16295 .................... #use fast_io(a) 
                    16296 .................... #use fast_io(b) 
                    16297 .................... #use fast_io(c) 
                    16298 .................... #use fast_io(d) 
                    16299 .................... #use fast_io(e) 
                    16300 ....................  
                    16301 .................... #define safe_write_program_memory(address, pointer, size) \ 
                    16302 ....................   do { disable_interrupts(GLOBAL); write_program_memory(address, pointer, size); enable_interrupts(GLOBAL); delay_us(1000); } while (0) 
                    16303 ....................  
                    16304 ....................  
                    16305 ....................  
                    16306 .................... /* 
                    16307 ....................  * rfc1662.h 
                    16308 ....................  * 
                    16309 ....................  *  Created on: 09/01/2011 
                    16310 ....................  *      Author: asafe 
                    16311 ....................  */ 
                    16312 ....................  
                    16313 .................... #ifndef __RFC1662_H__ 
                    16314 .................... #define __RFC1662_H__ 
                    16315 ....................  
                    16316 .................... #define CHAR_FLAG 0x7E 
                    16317 .................... #define CHAR_FLAG_XORED 0x5E 
                    16318 .................... #define CHAR_ESCAPE 0x7D 
                    16319 .................... #define CHAR_ESCAPE_XORED 0x5D 
                    16320 ....................  
                    16321 .................... int rfc1662_unpack(unsigned char *data, int len, unsigned char *dest); 
                    16322 .................... int rfc1662_pack(unsigned char *data, int dataLen, unsigned char *dest); 
                    16323 ....................  
                    16324 .................... #endif /* __RFC1662_H__ */ 
                    16325 ....................  
                    16326 ....................  
                    16327 .................... #ifndef __CRC8__ 
                    16328 .................... #define __CRC8__ 
                    16329 ....................  
                    16330 .................... #include <stdint.h> 
                    16331 .................... /////////////////////////////////////////////////////////////////////////// 
                    16332 .................... ////                                                                   //// 
                    16333 .................... ////                           stdint.h                                //// 
                    16334 .................... ////                                                                   //// 
                    16335 .................... //// Standard integer definitions.                                     //// 
                    16336 .................... ////                                                                   //// 
                    16337 .................... /////////////////////////////////////////////////////////////////////////// 
                    16338 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    16339 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    16340 .................... //// compiler.  This source code may only be distributed to other      //// 
                    16341 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    16342 .................... //// or distribution is permitted without written permission.          //// 
                    16343 .................... //// Derivative programs created using this software in object code    //// 
                    16344 .................... //// form are not restricted in any way.                               //// 
                    16345 .................... /////////////////////////////////////////////////////////////////////////// 
                    16346 ....................  
                    16347 .................... #ifndef _STDINT 
                    16348 ....................  
                    16349 .................... #define _STDINT 
                    16350 ....................  
                    16351 .................... //////////// exact width 
                    16352 ....................  
                    16353 .................... typedef signed int8 int8_t; 
                    16354 .................... typedef unsigned int8 uint8_t; 
                    16355 .................... typedef signed int16 int16_t; 
                    16356 .................... typedef unsigned int16 uint16_t; 
                    16357 .................... typedef signed int32 int32_t; 
                    16358 .................... typedef unsigned int32 uint32_t; 
                    16359 ....................  
                    16360 .................... #if defined(__PCD__) 
                    16361 .................... //typedef signed int24 int24_t; 
                    16362 .................... //typedef unsigned int24 uint24_t; 
                    16363 .................... typedef signed int64 int64_t; 
                    16364 .................... typedef unsigned int64 uint64_t; 
                    16365 .................... #endif 
                    16366 ....................  
                    16367 .................... #define INT8_MAX  (128) 
                    16368 .................... #define INT8_MIN  (-127) 
                    16369 .................... #define UINT8_MAX (255) 
                    16370 ....................  
                    16371 .................... #define INT16_MAX  (32767) 
                    16372 .................... #define INT16_MIN  (-32768) 
                    16373 .................... #define UINT16_MAX (65535) 
                    16374 ....................  
                    16375 .................... #define INT32_MAX  (2147483647) 
                    16376 .................... #define INT32_MIN  (-2147483648) 
                    16377 .................... #define UINT32_MAX (4294967295) 
                    16378 ....................  
                    16379 .................... #if defined(__PCD__) 
                    16380 .................... //#define INT24_MAX  (8388607) 
                    16381 .................... //#define INT24_MIN  (-8388608) 
                    16382 .................... //#define UINT24_MAX (16777215) 
                    16383 ....................  
                    16384 .................... #define INT64_MAX  (9223372036854775807) 
                    16385 .................... #define INT64_MIN  (-9223372036854775808) 
                    16386 .................... #define UINT64_MAX (18446744073709551615) 
                    16387 .................... #endif 
                    16388 ....................  
                    16389 .................... ///////// minimum width 
                    16390 ....................  
                    16391 .................... typedef signed int8 int_least8_t; 
                    16392 .................... typedef unsigned int8 uint_least8_t; 
                    16393 .................... typedef signed int16 int_least16_t; 
                    16394 .................... typedef unsigned int16 uint_least16_t; 
                    16395 .................... typedef signed int32 int_least32_t; 
                    16396 .................... typedef unsigned int32 uint_least32_t; 
                    16397 ....................  
                    16398 .................... #if defined(__PCD__) 
                    16399 .................... //typedef signed int24 int_least24_t; 
                    16400 .................... //typedef unsigned int24 uint_least24_t; 
                    16401 .................... typedef signed int64 int_least64_t; 
                    16402 .................... typedef unsigned int64 uint_least64_t; 
                    16403 .................... #endif 
                    16404 ....................  
                    16405 .................... #define INT_LEAST8_MAX  (128) 
                    16406 .................... #define INT_LEAST8_MIN  (-127) 
                    16407 .................... #define UINT_LEAST8_MAX (255) 
                    16408 ....................  
                    16409 .................... #define INT_LEAST16_MAX  (32767) 
                    16410 .................... #define INT_LEAST16_MIN  (-32768) 
                    16411 .................... #define UINT_LEAST16_MAX (65535) 
                    16412 ....................  
                    16413 .................... #define INT_LEAST32_MAX  (2147483647) 
                    16414 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    16415 .................... #define UINT_LEAST32_MAX (4294967295) 
                    16416 ....................  
                    16417 .................... #if defined(__PCD__) 
                    16418 .................... //#define INT_LEAST24_MAX  (8388607) 
                    16419 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    16420 .................... //#define UINT_LEAST24_MAX (16777215) 
                    16421 ....................  
                    16422 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    16423 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    16424 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    16425 .................... #endif 
                    16426 ....................  
                    16427 .................... ///////// fastest width 
                    16428 ....................  
                    16429 .................... #if defined(__PCD__) 
                    16430 .................... typedef signed int16 int_fast8_t; 
                    16431 .................... typedef unsigned int16 uint_fast8_t; 
                    16432 .................... #define INT_FAST8_MAX  (32767) 
                    16433 .................... #define INT_FAST8_MIN  (-32768) 
                    16434 .................... #define UINT_FAST8_MAX (65535) 
                    16435 .................... typedef signed int16 int_fast16_t; 
                    16436 .................... typedef unsigned int16 uint_fast16_t; 
                    16437 .................... //typedef signed int24 int_fast24_t; 
                    16438 .................... //typedef unsigned int24 uint_fast24_t; 
                    16439 .................... typedef signed int64 int_fast64_t; 
                    16440 .................... typedef unsigned int64 uint_fast64_t; 
                    16441 .................... #else 
                    16442 .................... typedef signed int8 int_fast8_t; 
                    16443 .................... typedef unsigned int8 uint_fast8_t; 
                    16444 .................... #define INT_FAST8_MAX  (128) 
                    16445 .................... #define INT_FAST8_MIN  (-127) 
                    16446 .................... #define UINT_FAST8_MAX (255) 
                    16447 .................... typedef signed int16 int_fast16_t; 
                    16448 .................... typedef unsigned int16 uint_fast16_t; 
                    16449 .................... #endif 
                    16450 ....................  
                    16451 .................... typedef signed int32 int_fast32_t; 
                    16452 .................... typedef unsigned int32 uint_fast32_t; 
                    16453 ....................  
                    16454 .................... #define INT_FAST16_MAX  (32767) 
                    16455 .................... #define INT_FAST16_MIN  (-32768) 
                    16456 .................... #define UINT_FAST16_MAX (65535) 
                    16457 ....................  
                    16458 .................... #define INT_FAST32_MAX  (2147483647) 
                    16459 .................... #define INT_FAST32_MIN  (-2147483648) 
                    16460 .................... #define UINT_FAST32_MAX (4294967295) 
                    16461 ....................  
                    16462 .................... #if defined(__PCD__) 
                    16463 .................... //#define INT_FAST24_MAX  (8388607) 
                    16464 .................... //#define INT_FAST24_MIN  (-8388608) 
                    16465 .................... //#define UINT_FAST24_MAX (16777215) 
                    16466 ....................  
                    16467 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    16468 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    16469 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    16470 .................... #endif 
                    16471 ....................  
                    16472 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    16473 ....................  
                    16474 .................... /// TODO 
                    16475 ....................  
                    16476 .................... /// intptr_t uintptr_t 
                    16477 ....................  
                    16478 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    16479 ....................  
                    16480 ....................  
                    16481 .................... /////////// greatest width (OPTIONAL) 
                    16482 ....................  
                    16483 .................... /// TODO 
                    16484 ....................  
                    16485 .................... /// intmax_t uintmax_t 
                    16486 ....................  
                    16487 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    16488 ....................  
                    16489 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    16490 ....................  
                    16491 ....................  
                    16492 .................... #endif 
                    16493 ....................  
                    16494 ....................  
                    16495 .................... uint8_t crc8(uint8_t* buffer, uint16_t size); 
                    16496 ....................  
                    16497 .................... #endif 
                    16498 ....................  
                    16499 ....................  
                    16500 ....................  
                    16501 ....................  
5428 0104           16502 MOVLB  4
542A 6B3B           16503 CLRF   x3B
542C 6B3C           16504 CLRF   x3C
                    16505 ....................  
                    16506 ....................  
                    16507 ....................  
542E 6B3B           16508 CLRF   x3B
5430 513A           16509 MOVF   x3A,W
5432 5D3B           16510 SUBWF  x3B,W
5434 E258           16511 BC    54E6
                    16512 ....................  
                    16513 ....................  
5436 6A03           16514 CLRF   03
5438 513B           16515 MOVF   x3B,W
543A 2536           16516 ADDWF  x36,W
543C 6EE9           16517 MOVWF  FE9
543E 5137           16518 MOVF   x37,W
5440 2003           16519 ADDWFC 03,W
5442 6EEA           16520 MOVWF  FEA
5444 50EF           16521 MOVF   FEF,W
5446 087E           16522 SUBLW  7E
5448 E115           16523 BNZ   5474
                    16524 ....................  
                    16525 ....................  
544A 513C           16526 MOVF   x3C,W
544C 2B3C           16527 INCF   x3C,F
544E 6A03           16528 CLRF   03
5450 2538           16529 ADDWF  x38,W
5452 6EE9           16530 MOVWF  FE9
5454 5139           16531 MOVF   x39,W
5456 2003           16532 ADDWFC 03,W
5458 6EEA           16533 MOVWF  FEA
545A 0E7D           16534 MOVLW  7D
545C 6EEF           16535 MOVWF  FEF
                    16536 ....................  
545E 513C           16537 MOVF   x3C,W
5460 2B3C           16538 INCF   x3C,F
5462 6A03           16539 CLRF   03
5464 2538           16540 ADDWF  x38,W
5466 6EE9           16541 MOVWF  FE9
5468 5139           16542 MOVF   x39,W
546A 2003           16543 ADDWFC 03,W
546C 6EEA           16544 MOVWF  FEA
546E 0E5E           16545 MOVLW  5E
5470 6EEF           16546 MOVWF  FEF
                    16547 ....................  
                    16548 ....................  
5472 D037           16549 BRA    54E2
5474 6A03           16550 CLRF   03
5476 513B           16551 MOVF   x3B,W
5478 2536           16552 ADDWF  x36,W
547A 6EE9           16553 MOVWF  FE9
547C 5137           16554 MOVF   x37,W
547E 2003           16555 ADDWFC 03,W
5480 6EEA           16556 MOVWF  FEA
5482 50EF           16557 MOVF   FEF,W
5484 087D           16558 SUBLW  7D
5486 E115           16559 BNZ   54B2
                    16560 ....................  
                    16561 ....................  
5488 513C           16562 MOVF   x3C,W
548A 2B3C           16563 INCF   x3C,F
548C 6A03           16564 CLRF   03
548E 2538           16565 ADDWF  x38,W
5490 6EE9           16566 MOVWF  FE9
5492 5139           16567 MOVF   x39,W
5494 2003           16568 ADDWFC 03,W
5496 6EEA           16569 MOVWF  FEA
5498 0E7D           16570 MOVLW  7D
549A 6EEF           16571 MOVWF  FEF
                    16572 ....................  
549C 513C           16573 MOVF   x3C,W
549E 2B3C           16574 INCF   x3C,F
54A0 6A03           16575 CLRF   03
54A2 2538           16576 ADDWF  x38,W
54A4 6EE9           16577 MOVWF  FE9
54A6 5139           16578 MOVF   x39,W
54A8 2003           16579 ADDWFC 03,W
54AA 6EEA           16580 MOVWF  FEA
54AC 0E5D           16581 MOVLW  5D
54AE 6EEF           16582 MOVWF  FEF
                    16583 ....................  
                    16584 ....................  
54B0 D018           16585 BRA    54E2
                    16586 ....................  
                    16587 ....................  
54B2 513C           16588 MOVF   x3C,W
54B4 2B3C           16589 INCF   x3C,F
54B6 6A03           16590 CLRF   03
54B8 2538           16591 ADDWF  x38,W
54BA 6E01           16592 MOVWF  01
54BC 5139           16593 MOVF   x39,W
54BE 2203           16594 ADDWFC 03,F
54C0 C003 F43E      16595 MOVFF  03,43E
54C4 6A03           16596 CLRF   03
54C6 513B           16597 MOVF   x3B,W
54C8 2536           16598 ADDWF  x36,W
54CA 6EE9           16599 MOVWF  FE9
54CC 5137           16600 MOVF   x37,W
54CE 2003           16601 ADDWFC 03,W
54D0 6EEA           16602 MOVWF  FEA
54D2 CFEF F43F      16603 MOVFF  FEF,43F
54D6 C43E FFEA      16604 MOVFF  43E,FEA
54DA C001 FFE9      16605 MOVFF  01,FE9
54DE C43F FFEF      16606 MOVFF  43F,FEF
                    16607 ....................  
                    16608 ....................  
54E2 2B3B           16609 INCF   x3B,F
54E4 D7A5           16610 BRA    5430
                    16611 ....................  
54E6 C43C F001      16612 MOVFF  43C,01
                    16613 ....................  
54EA 0100           16614 MOVLB  0
54EC 0012           16615 RETURN 0
                    16616 ....................  
                    16617 ....................  
                    16618 ....................  
5202 0103           16619 MOVLB  3
5204 6BEA           16620 CLRF   xEA
5206 6BEB           16621 CLRF   xEB
                    16622 ....................  
                    16623 ....................  
                    16624 ....................  
5208 6BEA           16625 CLRF   xEA
520A 51E9           16626 MOVF   xE9,W
520C 5DEA           16627 SUBWF  xEA,W
520E E24E           16628 BC    52AC
                    16629 ....................  
                    16630 ....................  
5210 6A03           16631 CLRF   03
5212 51EA           16632 MOVF   xEA,W
5214 25E5           16633 ADDWF  xE5,W
5216 6EE9           16634 MOVWF  FE9
5218 51E6           16635 MOVF   xE6,W
521A 2003           16636 ADDWFC 03,W
521C 6EEA           16637 MOVWF  FEA
521E 50EF           16638 MOVF   FEF,W
5220 087D           16639 SUBLW  7D
5222 E12B           16640 BNZ   527A
                    16641 ....................  
                    16642 ....................  
5224 2BEA           16643 INCF   xEA,F
                    16644 ....................  
5226 6A03           16645 CLRF   03
5228 51EA           16646 MOVF   xEA,W
522A 25E5           16647 ADDWF  xE5,W
522C 6EE9           16648 MOVWF  FE9
522E 51E6           16649 MOVF   xE6,W
5230 2003           16650 ADDWFC 03,W
5232 6EEA           16651 MOVWF  FEA
5234 50EF           16652 MOVF   FEF,W
5236 085E           16653 SUBLW  5E
5238 E10B           16654 BNZ   5250
                    16655 ....................  
                    16656 ....................  
523A 51EB           16657 MOVF   xEB,W
523C 2BEB           16658 INCF   xEB,F
523E 6A03           16659 CLRF   03
5240 25E7           16660 ADDWF  xE7,W
5242 6EE9           16661 MOVWF  FE9
5244 51E8           16662 MOVF   xE8,W
5246 2003           16663 ADDWFC 03,W
5248 6EEA           16664 MOVWF  FEA
524A 0E7E           16665 MOVLW  7E
524C 6EEF           16666 MOVWF  FEF
                    16667 ....................  
                    16668 ....................  
524E D014           16669 BRA    5278
5250 6A03           16670 CLRF   03
5252 51EA           16671 MOVF   xEA,W
5254 25E5           16672 ADDWF  xE5,W
5256 6EE9           16673 MOVWF  FE9
5258 51E6           16674 MOVF   xE6,W
525A 2003           16675 ADDWFC 03,W
525C 6EEA           16676 MOVWF  FEA
525E 50EF           16677 MOVF   FEF,W
5260 085D           16678 SUBLW  5D
5262 E10A           16679 BNZ   5278
                    16680 ....................  
                    16681 ....................  
5264 51EB           16682 MOVF   xEB,W
5266 2BEB           16683 INCF   xEB,F
5268 6A03           16684 CLRF   03
526A 25E7           16685 ADDWF  xE7,W
526C 6EE9           16686 MOVWF  FE9
526E 51E8           16687 MOVF   xE8,W
5270 2003           16688 ADDWFC 03,W
5272 6EEA           16689 MOVWF  FEA
5274 0E7D           16690 MOVLW  7D
5276 6EEF           16691 MOVWF  FEF
                    16692 ....................  
                    16693 ....................  
                    16694 ....................  
                    16695 ....................  
                    16696 ....................  
                    16697 ....................  
                    16698 ....................  
5278 D017           16699 BRA    52A8
                    16700 ....................  
                    16701 ....................  
527A 51EB           16702 MOVF   xEB,W
527C 2BEB           16703 INCF   xEB,F
527E 6A03           16704 CLRF   03
5280 25E7           16705 ADDWF  xE7,W
5282 6FEC           16706 MOVWF  xEC
5284 51E8           16707 MOVF   xE8,W
5286 2003           16708 ADDWFC 03,W
5288 6FED           16709 MOVWF  xED
528A 6A03           16710 CLRF   03
528C 51EA           16711 MOVF   xEA,W
528E 25E5           16712 ADDWF  xE5,W
5290 6EE9           16713 MOVWF  FE9
5292 51E6           16714 MOVF   xE6,W
5294 2003           16715 ADDWFC 03,W
5296 6EEA           16716 MOVWF  FEA
5298 CFEF F3EE      16717 MOVFF  FEF,3EE
529C C3ED FFEA      16718 MOVFF  3ED,FEA
52A0 C3EC FFE9      16719 MOVFF  3EC,FE9
52A4 C3EE FFEF      16720 MOVFF  3EE,FEF
                    16721 ....................  
                    16722 ....................  
52A8 2BEA           16723 INCF   xEA,F
52AA D7AF           16724 BRA    520A
                    16725 ....................  
52AC C3EB F001      16726 MOVFF  3EB,01
                    16727 ....................  
52B0 0100           16728 MOVLB  0
52B2 EF91 F029      16729 GOTO   5322 (RETURN)
                    16730 ....................  
                    16731 ....................  
                    16732 ....................  
                    16733 ....................  
                    16734 ....................  
                    16735 ....................  
                    16736 ....................  
                    16737 ....................  
54EE 0104           16738 MOVLB  4
54F0 6B31           16739 CLRF   x31
54F2 6B32           16740 CLRF   x32
54F4 C42D F435      16741 MOVFF  42D,435
54F8 C42C F434      16742 MOVFF  42C,434
54FC 6B37           16743 CLRF   x37
54FE C42E F436      16744 MOVFF  42E,436
5502 0100           16745 MOVLB  0
5504 DED8           16746 RCALL  52B6
5506 C001 F433      16747 MOVFF  01,433
                    16748 ....................  
                    16749 ....................  
                    16750 ....................  
                    16751 ....................  
                    16752 ....................  
                    16753 ....................  
550A 0E01           16754 MOVLW  01
550C 0104           16755 MOVLB  4
550E 252F           16756 ADDWF  x2F,W
5510 6E01           16757 MOVWF  01
5512 0E00           16758 MOVLW  00
5514 2130           16759 ADDWFC x30,W
5516 6E03           16760 MOVWF  03
5518 C001 F434      16761 MOVFF  01,434
551C 6F35           16762 MOVWF  x35
551E C42D F437      16763 MOVFF  42D,437
5522 C42C F436      16764 MOVFF  42C,436
5526 6F39           16765 MOVWF  x39
5528 C001 F438      16766 MOVFF  01,438
552C C42E F43A      16767 MOVFF  42E,43A
5530 0100           16768 MOVLB  0
5532 DF7A           16769 RCALL  5428
5534 C001 F431      16770 MOVFF  01,431
                    16771 ....................  
5538 0E01           16772 MOVLW  01
553A 0104           16773 MOVLB  4
553C 2531           16774 ADDWF  x31,W
553E 6A03           16775 CLRF   03
5540 252F           16776 ADDWF  x2F,W
5542 6E01           16777 MOVWF  01
5544 5130           16778 MOVF   x30,W
5546 2203           16779 ADDWFC 03,F
5548 C001 F434      16780 MOVFF  01,434
554C C003 F435      16781 MOVFF  03,435
5550 0E04           16782 MOVLW  04
5552 6F37           16783 MOVWF  x37
5554 0E33           16784 MOVLW  33
5556 6F36           16785 MOVWF  x36
5558 C003 F439      16786 MOVFF  03,439
555C C001 F438      16787 MOVFF  01,438
5560 0E01           16788 MOVLW  01
5562 6F3A           16789 MOVWF  x3A
5564 0100           16790 MOVLB  0
5566 DF60           16791 RCALL  5428
5568 C001 F432      16792 MOVFF  01,432
                    16793 ....................  
                    16794 ....................  
556C 0104           16795 MOVLB  4
556E C42F FFE9      16796 MOVFF  42F,FE9
5572 C430 FFEA      16797 MOVFF  430,FEA
5576 0E7E           16798 MOVLW  7E
5578 6EEF           16799 MOVWF  FEF
                    16800 ....................  
557A 5132           16801 MOVF   x32,W
557C 2531           16802 ADDWF  x31,W
557E 0F01           16803 ADDLW  01
5580 6A03           16804 CLRF   03
5582 252F           16805 ADDWF  x2F,W
5584 6EE9           16806 MOVWF  FE9
5586 5130           16807 MOVF   x30,W
5588 2003           16808 ADDWFC 03,W
558A 6EEA           16809 MOVWF  FEA
558C 0E7E           16810 MOVLW  7E
558E 6EEF           16811 MOVWF  FEF
                    16812 ....................  
                    16813 ....................  
                    16814 ....................  
5590 5132           16815 MOVF   x32,W
5592 2531           16816 ADDWF  x31,W
5594 0F02           16817 ADDLW  02
5596 6E01           16818 MOVWF  01
                    16819 ....................  
5598 0100           16820 MOVLB  0
559A EF4F F02B      16821 GOTO   569E (RETURN)
                    16822 ....................  
                    16823 ....................  
                    16824 ....................  
                    16825 ....................  
5306 0103           16826 MOVLB  3
5308 6BE2           16827 CLRF   xE2
                    16828 ....................  
                    16829 ....................  
                    16830 ....................  
530A C3DE F3E6      16831 MOVFF  3DE,3E6
530E C3DD F3E5      16832 MOVFF  3DD,3E5
5312 C3E1 F3E8      16833 MOVFF  3E1,3E8
5316 C3E0 F3E7      16834 MOVFF  3E0,3E7
531A C3DF F3E9      16835 MOVFF  3DF,3E9
531E 0100           16836 MOVLB  0
5320 D770           16837 BRA    5202
5322 C001 F3E2      16838 MOVFF  01,3E2
                    16839 ....................  
                    16840 ....................  
5326 0103           16841 MOVLB  3
5328 53E2           16842 MOVF   xE2,F
532A E103           16843 BNZ   5332
                    16844 ....................  
532C 0EFF           16845 MOVLW  FF
532E 6E01           16846 MOVWF  01
5330 D022           16847 BRA    5376
                    16848 ....................  
                    16849 ....................  
                    16850 ....................  
5332 0E01           16851 MOVLW  01
5334 5DE2           16852 SUBWF  xE2,W
5336 6FE5           16853 MOVWF  xE5
5338 C3E1 F435      16854 MOVFF  3E1,435
533C C3E0 F434      16855 MOVFF  3E0,434
5340 0104           16856 MOVLB  4
5342 6B37           16857 CLRF   x37
5344 6F36           16858 MOVWF  x36
5346 0100           16859 MOVLB  0
5348 DFB6           16860 RCALL  52B6
534A C001 F3E3      16861 MOVFF  01,3E3
534E 0E01           16862 MOVLW  01
5350 0103           16863 MOVLB  3
5352 5DE2           16864 SUBWF  xE2,W
5354 6A03           16865 CLRF   03
5356 25E0           16866 ADDWF  xE0,W
5358 6EE9           16867 MOVWF  FE9
535A 51E1           16868 MOVF   xE1,W
535C 2003           16869 ADDWFC 03,W
535E 6EEA           16870 MOVWF  FEA
5360 CFEF F3E4      16871 MOVFF  FEF,3E4
                    16872 ....................  
5364 51E4           16873 MOVF   xE4,W
5366 5DE3           16874 SUBWF  xE3,W
5368 E104           16875 BNZ   5372
                    16876 ....................  
                    16877 ....................  
                    16878 ....................  
536A 0E01           16879 MOVLW  01
536C 5DE2           16880 SUBWF  xE2,W
536E 6E01           16881 MOVWF  01
5370 D002           16882 BRA    5376
                    16883 ....................  
                    16884 ....................  
                    16885 ....................  
5372 0EFF           16886 MOVLW  FF
5374 6E01           16887 MOVWF  01
                    16888 ....................  
5376 0100           16889 MOVLB  0
5378 EFFB F029      16890 GOTO   53F6 (RETURN)
                    16891 ....................  
                    16892 ....................  
                    16893 .................... #include <18F45K22.h> 
                    16894 .................... //////// Standard Header file for the PIC18F45K22 device //////////////// 
                    16895 .................... #device PIC18F45K22 
                    17496 .................... #list 
                    17497 ....................  
                    17498 .................... #device adc=10 
                    17499 .................... #device pass_strings=in_ram 
                    17500 ....................  
                    17501 .................... #define LOADER_END 0x1FFF 
                    17502 .................... #include <boot.h> 
                    17503 .................... #undef LOADER_END 
                    17504 .................... #define FLASH_SIZE getenv("FLASH_ERASE_SIZE") 
                    17505 .................... #define LOADER_END   0x1FFF 
                    17506 .................... #define LOADER_SIZE  0x3FF 
                    17507 ....................  
                    17508 .................... #ifndef _bootloader 
                    17509 .................... #build(reset=LOADER_END+1, interrupt=LOADER_END+9) 
                    17510 ....................  
                    17511 .................... /* when in operational software, keep out of the bootloader sections */ 
                    17512 .................... #org 0, 0xfff {} 
                    17513 .................... #org 0x1000, 0x1ffe {} 
                    17514 ....................  
                    17515 .................... #else 
                    17516 ....................  
                    17517 .................... /* when in the bootloader, keep out of the operational sections */ 
                    17518 .................... #org 0x2000, 0x7ffe {} 
                    17519 ....................  
                    17520 .................... #endif 
                    17521 ....................  
                    17522 ....................  
                    17523 .................... #FUSES NOWDT                   //No Watch Dog Timer 
                    17524 .................... #FUSES WDT128                  //Watch Dog Timer uses 1:128 Postscale 
                    17525 .................... #FUSES INTRC_IO                //Internal RC Osc, no CLKOUT 
                    17526 .................... #FUSES NOBROWNOUT              //No brownout reset 
                    17527 .................... #FUSES WDT_SW                  //No Watch Dog Timer, enabled in Software 
                    17528 .................... #FUSES NOLVP                   //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
                    17529 .................... #FUSES NOPUT 
                    17530 .................... #FUSES NOXINST                 //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
                    17531 ....................  
                    17532 .................... #use delay(clock=64000000) 
                    17533 .................... #use rs232(baud=921600,xmit=PIN_C6,rcv=PIN_C7,ERRORS) 
                    17534 .................... #USE TIMER(TIMER=1,TICK=1us,BITS=32,NOISR) 
                    17535 .................... #use spi(DO=PIN_A4, CLK=PIN_A3, ENABLE=PIN_A2, ENABLE_ACTIVE=0, DATA_HOLD=20, BITS=16) 
                    17536 ....................  
                    17537 .................... #opt 9 
                    17538 ....................  
                    17539 .................... #use fast_io(a) 
                    17540 .................... #use fast_io(b) 
                    17541 .................... #use fast_io(c) 
                    17542 .................... #use fast_io(d) 
                    17543 .................... #use fast_io(e) 
                    17544 ....................  
                    17545 .................... #define safe_write_program_memory(address, pointer, size) \ 
                    17546 ....................   do { disable_interrupts(GLOBAL); write_program_memory(address, pointer, size); enable_interrupts(GLOBAL); delay_us(1000); } while (0) 
                    17547 ....................  
                    17548 ....................  
                    17549 ....................  
                    17550 .................... /////////////////////////////////////////////////////////////////////////// 
                    17551 .................... ////                                                                   //// 
                    17552 .................... ////                           stdint.h                                //// 
                    17553 .................... ////                                                                   //// 
                    17554 .................... //// Standard integer definitions.                                     //// 
                    17555 .................... ////                                                                   //// 
                    17556 .................... /////////////////////////////////////////////////////////////////////////// 
                    17557 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    17558 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    17559 .................... //// compiler.  This source code may only be distributed to other      //// 
                    17560 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    17561 .................... //// or distribution is permitted without written permission.          //// 
                    17562 .................... //// Derivative programs created using this software in object code    //// 
                    17563 .................... //// form are not restricted in any way.                               //// 
                    17564 .................... /////////////////////////////////////////////////////////////////////////// 
                    17565 ....................  
                    17566 .................... #ifndef _STDINT 
                    17567 ....................  
                    17568 .................... #define _STDINT 
                    17569 ....................  
                    17570 .................... //////////// exact width 
                    17571 ....................  
                    17572 .................... typedef signed int8 int8_t; 
                    17573 .................... typedef unsigned int8 uint8_t; 
                    17574 .................... typedef signed int16 int16_t; 
                    17575 .................... typedef unsigned int16 uint16_t; 
                    17576 .................... typedef signed int32 int32_t; 
                    17577 .................... typedef unsigned int32 uint32_t; 
                    17578 ....................  
                    17579 .................... #if defined(__PCD__) 
                    17580 .................... //typedef signed int24 int24_t; 
                    17581 .................... //typedef unsigned int24 uint24_t; 
                    17582 .................... typedef signed int64 int64_t; 
                    17583 .................... typedef unsigned int64 uint64_t; 
                    17584 .................... #endif 
                    17585 ....................  
                    17586 .................... #define INT8_MAX  (128) 
                    17587 .................... #define INT8_MIN  (-127) 
                    17588 .................... #define UINT8_MAX (255) 
                    17589 ....................  
                    17590 .................... #define INT16_MAX  (32767) 
                    17591 .................... #define INT16_MIN  (-32768) 
                    17592 .................... #define UINT16_MAX (65535) 
                    17593 ....................  
                    17594 .................... #define INT32_MAX  (2147483647) 
                    17595 .................... #define INT32_MIN  (-2147483648) 
                    17596 .................... #define UINT32_MAX (4294967295) 
                    17597 ....................  
                    17598 .................... #if defined(__PCD__) 
                    17599 .................... //#define INT24_MAX  (8388607) 
                    17600 .................... //#define INT24_MIN  (-8388608) 
                    17601 .................... //#define UINT24_MAX (16777215) 
                    17602 ....................  
                    17603 .................... #define INT64_MAX  (9223372036854775807) 
                    17604 .................... #define INT64_MIN  (-9223372036854775808) 
                    17605 .................... #define UINT64_MAX (18446744073709551615) 
                    17606 .................... #endif 
                    17607 ....................  
                    17608 .................... ///////// minimum width 
                    17609 ....................  
                    17610 .................... typedef signed int8 int_least8_t; 
                    17611 .................... typedef unsigned int8 uint_least8_t; 
                    17612 .................... typedef signed int16 int_least16_t; 
                    17613 .................... typedef unsigned int16 uint_least16_t; 
                    17614 .................... typedef signed int32 int_least32_t; 
                    17615 .................... typedef unsigned int32 uint_least32_t; 
                    17616 ....................  
                    17617 .................... #if defined(__PCD__) 
                    17618 .................... //typedef signed int24 int_least24_t; 
                    17619 .................... //typedef unsigned int24 uint_least24_t; 
                    17620 .................... typedef signed int64 int_least64_t; 
                    17621 .................... typedef unsigned int64 uint_least64_t; 
                    17622 .................... #endif 
                    17623 ....................  
                    17624 .................... #define INT_LEAST8_MAX  (128) 
                    17625 .................... #define INT_LEAST8_MIN  (-127) 
                    17626 .................... #define UINT_LEAST8_MAX (255) 
                    17627 ....................  
                    17628 .................... #define INT_LEAST16_MAX  (32767) 
                    17629 .................... #define INT_LEAST16_MIN  (-32768) 
                    17630 .................... #define UINT_LEAST16_MAX (65535) 
                    17631 ....................  
                    17632 .................... #define INT_LEAST32_MAX  (2147483647) 
                    17633 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    17634 .................... #define UINT_LEAST32_MAX (4294967295) 
                    17635 ....................  
                    17636 .................... #if defined(__PCD__) 
                    17637 .................... //#define INT_LEAST24_MAX  (8388607) 
                    17638 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    17639 .................... //#define UINT_LEAST24_MAX (16777215) 
                    17640 ....................  
                    17641 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    17642 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    17643 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    17644 .................... #endif 
                    17645 ....................  
                    17646 .................... ///////// fastest width 
                    17647 ....................  
                    17648 .................... #if defined(__PCD__) 
                    17649 .................... typedef signed int16 int_fast8_t; 
                    17650 .................... typedef unsigned int16 uint_fast8_t; 
                    17651 .................... #define INT_FAST8_MAX  (32767) 
                    17652 .................... #define INT_FAST8_MIN  (-32768) 
                    17653 .................... #define UINT_FAST8_MAX (65535) 
                    17654 .................... typedef signed int16 int_fast16_t; 
                    17655 .................... typedef unsigned int16 uint_fast16_t; 
                    17656 .................... //typedef signed int24 int_fast24_t; 
                    17657 .................... //typedef unsigned int24 uint_fast24_t; 
                    17658 .................... typedef signed int64 int_fast64_t; 
                    17659 .................... typedef unsigned int64 uint_fast64_t; 
                    17660 .................... #else 
                    17661 .................... typedef signed int8 int_fast8_t; 
                    17662 .................... typedef unsigned int8 uint_fast8_t; 
                    17663 .................... #define INT_FAST8_MAX  (128) 
                    17664 .................... #define INT_FAST8_MIN  (-127) 
                    17665 .................... #define UINT_FAST8_MAX (255) 
                    17666 .................... typedef signed int16 int_fast16_t; 
                    17667 .................... typedef unsigned int16 uint_fast16_t; 
                    17668 .................... #endif 
                    17669 ....................  
                    17670 .................... typedef signed int32 int_fast32_t; 
                    17671 .................... typedef unsigned int32 uint_fast32_t; 
                    17672 ....................  
                    17673 .................... #define INT_FAST16_MAX  (32767) 
                    17674 .................... #define INT_FAST16_MIN  (-32768) 
                    17675 .................... #define UINT_FAST16_MAX (65535) 
                    17676 ....................  
                    17677 .................... #define INT_FAST32_MAX  (2147483647) 
                    17678 .................... #define INT_FAST32_MIN  (-2147483648) 
                    17679 .................... #define UINT_FAST32_MAX (4294967295) 
                    17680 ....................  
                    17681 .................... #if defined(__PCD__) 
                    17682 .................... //#define INT_FAST24_MAX  (8388607) 
                    17683 .................... //#define INT_FAST24_MIN  (-8388608) 
                    17684 .................... //#define UINT_FAST24_MAX (16777215) 
                    17685 ....................  
                    17686 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    17687 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    17688 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    17689 .................... #endif 
                    17690 ....................  
                    17691 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    17692 ....................  
                    17693 .................... /// TODO 
                    17694 ....................  
                    17695 .................... /// intptr_t uintptr_t 
                    17696 ....................  
                    17697 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    17698 ....................  
                    17699 ....................  
                    17700 .................... /////////// greatest width (OPTIONAL) 
                    17701 ....................  
                    17702 .................... /// TODO 
                    17703 ....................  
                    17704 .................... /// intmax_t uintmax_t 
                    17705 ....................  
                    17706 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    17707 ....................  
                    17708 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    17709 ....................  
                    17710 ....................  
                    17711 .................... #endif 
                    17712 ....................  
                    17713 ....................  
                    17714 .................... /////////////////////////////////////////////////////////////////////////// 
                    17715 .................... ////                                                                   //// 
                    17716 .................... ////                          stdbool.h                                //// 
                    17717 .................... ////                                                                   //// 
                    17718 .................... //// Standard boolean definitions                                      //// 
                    17719 .................... ////                                                                   //// 
                    17720 .................... /////////////////////////////////////////////////////////////////////////// 
                    17721 .................... ////        (C) Copyright 1996,2012 Custom Computer Services           //// 
                    17722 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    17723 .................... //// compiler.  This source code may only be distributed to other      //// 
                    17724 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    17725 .................... //// or distribution is permitted without written permission.          //// 
                    17726 .................... //// Derivative programs created using this software in object code    //// 
                    17727 .................... //// form are not restricted in any way.                               //// 
                    17728 .................... /////////////////////////////////////////////////////////////////////////// 
                    17729 ....................  
                    17730 .................... #ifndef __STDBOOL_H__ 
                    17731 .................... #define __STDBOOL_H__ 
                    17732 ....................  
                    17733 .................... //remove TRUE and FALSE added by CCS's device .h file 
                    17734 .................... #if defined(TRUE) 
                    17735 .................... #undef TRUE 
                    17736 .................... #endif 
                    17737 .................... #if defined(FALSE) 
                    17738 .................... #undef FALSE 
                    17739 .................... #endif 
                    17740 ....................  
                    17741 .................... typedef int1   bool; 
                    17742 .................... #define true   1 
                    17743 .................... #define false  0 
                    17744 .................... #define __bool_true_false_are_defined  1 
                    17745 ....................  
                    17746 .................... #endif 
                    17747 ....................  
                    17748 ....................  
                    17749 .................... #ifndef INCLUDE_TIMER_H_ 
                    17750 .................... #define INCLUDE_TIMER_H_ 
                    17751 ....................  
                    17752 .................... #include <stdint.h> 
                    17753 .................... /////////////////////////////////////////////////////////////////////////// 
                    17754 .................... ////                                                                   //// 
                    17755 .................... ////                           stdint.h                                //// 
                    17756 .................... ////                                                                   //// 
                    17757 .................... //// Standard integer definitions.                                     //// 
                    17758 .................... ////                                                                   //// 
                    17759 .................... /////////////////////////////////////////////////////////////////////////// 
                    17760 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    17761 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    17762 .................... //// compiler.  This source code may only be distributed to other      //// 
                    17763 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    17764 .................... //// or distribution is permitted without written permission.          //// 
                    17765 .................... //// Derivative programs created using this software in object code    //// 
                    17766 .................... //// form are not restricted in any way.                               //// 
                    17767 .................... /////////////////////////////////////////////////////////////////////////// 
                    17768 ....................  
                    17769 .................... #ifndef _STDINT 
                    17770 ....................  
                    17771 .................... #define _STDINT 
                    17772 ....................  
                    17773 .................... //////////// exact width 
                    17774 ....................  
                    17775 .................... typedef signed int8 int8_t; 
                    17776 .................... typedef unsigned int8 uint8_t; 
                    17777 .................... typedef signed int16 int16_t; 
                    17778 .................... typedef unsigned int16 uint16_t; 
                    17779 .................... typedef signed int32 int32_t; 
                    17780 .................... typedef unsigned int32 uint32_t; 
                    17781 ....................  
                    17782 .................... #if defined(__PCD__) 
                    17783 .................... //typedef signed int24 int24_t; 
                    17784 .................... //typedef unsigned int24 uint24_t; 
                    17785 .................... typedef signed int64 int64_t; 
                    17786 .................... typedef unsigned int64 uint64_t; 
                    17787 .................... #endif 
                    17788 ....................  
                    17789 .................... #define INT8_MAX  (128) 
                    17790 .................... #define INT8_MIN  (-127) 
                    17791 .................... #define UINT8_MAX (255) 
                    17792 ....................  
                    17793 .................... #define INT16_MAX  (32767) 
                    17794 .................... #define INT16_MIN  (-32768) 
                    17795 .................... #define UINT16_MAX (65535) 
                    17796 ....................  
                    17797 .................... #define INT32_MAX  (2147483647) 
                    17798 .................... #define INT32_MIN  (-2147483648) 
                    17799 .................... #define UINT32_MAX (4294967295) 
                    17800 ....................  
                    17801 .................... #if defined(__PCD__) 
                    17802 .................... //#define INT24_MAX  (8388607) 
                    17803 .................... //#define INT24_MIN  (-8388608) 
                    17804 .................... //#define UINT24_MAX (16777215) 
                    17805 ....................  
                    17806 .................... #define INT64_MAX  (9223372036854775807) 
                    17807 .................... #define INT64_MIN  (-9223372036854775808) 
                    17808 .................... #define UINT64_MAX (18446744073709551615) 
                    17809 .................... #endif 
                    17810 ....................  
                    17811 .................... ///////// minimum width 
                    17812 ....................  
                    17813 .................... typedef signed int8 int_least8_t; 
                    17814 .................... typedef unsigned int8 uint_least8_t; 
                    17815 .................... typedef signed int16 int_least16_t; 
                    17816 .................... typedef unsigned int16 uint_least16_t; 
                    17817 .................... typedef signed int32 int_least32_t; 
                    17818 .................... typedef unsigned int32 uint_least32_t; 
                    17819 ....................  
                    17820 .................... #if defined(__PCD__) 
                    17821 .................... //typedef signed int24 int_least24_t; 
                    17822 .................... //typedef unsigned int24 uint_least24_t; 
                    17823 .................... typedef signed int64 int_least64_t; 
                    17824 .................... typedef unsigned int64 uint_least64_t; 
                    17825 .................... #endif 
                    17826 ....................  
                    17827 .................... #define INT_LEAST8_MAX  (128) 
                    17828 .................... #define INT_LEAST8_MIN  (-127) 
                    17829 .................... #define UINT_LEAST8_MAX (255) 
                    17830 ....................  
                    17831 .................... #define INT_LEAST16_MAX  (32767) 
                    17832 .................... #define INT_LEAST16_MIN  (-32768) 
                    17833 .................... #define UINT_LEAST16_MAX (65535) 
                    17834 ....................  
                    17835 .................... #define INT_LEAST32_MAX  (2147483647) 
                    17836 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    17837 .................... #define UINT_LEAST32_MAX (4294967295) 
                    17838 ....................  
                    17839 .................... #if defined(__PCD__) 
                    17840 .................... //#define INT_LEAST24_MAX  (8388607) 
                    17841 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    17842 .................... //#define UINT_LEAST24_MAX (16777215) 
                    17843 ....................  
                    17844 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    17845 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    17846 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    17847 .................... #endif 
                    17848 ....................  
                    17849 .................... ///////// fastest width 
                    17850 ....................  
                    17851 .................... #if defined(__PCD__) 
                    17852 .................... typedef signed int16 int_fast8_t; 
                    17853 .................... typedef unsigned int16 uint_fast8_t; 
                    17854 .................... #define INT_FAST8_MAX  (32767) 
                    17855 .................... #define INT_FAST8_MIN  (-32768) 
                    17856 .................... #define UINT_FAST8_MAX (65535) 
                    17857 .................... typedef signed int16 int_fast16_t; 
                    17858 .................... typedef unsigned int16 uint_fast16_t; 
                    17859 .................... //typedef signed int24 int_fast24_t; 
                    17860 .................... //typedef unsigned int24 uint_fast24_t; 
                    17861 .................... typedef signed int64 int_fast64_t; 
                    17862 .................... typedef unsigned int64 uint_fast64_t; 
                    17863 .................... #else 
                    17864 .................... typedef signed int8 int_fast8_t; 
                    17865 .................... typedef unsigned int8 uint_fast8_t; 
                    17866 .................... #define INT_FAST8_MAX  (128) 
                    17867 .................... #define INT_FAST8_MIN  (-127) 
                    17868 .................... #define UINT_FAST8_MAX (255) 
                    17869 .................... typedef signed int16 int_fast16_t; 
                    17870 .................... typedef unsigned int16 uint_fast16_t; 
                    17871 .................... #endif 
                    17872 ....................  
                    17873 .................... typedef signed int32 int_fast32_t; 
                    17874 .................... typedef unsigned int32 uint_fast32_t; 
                    17875 ....................  
                    17876 .................... #define INT_FAST16_MAX  (32767) 
                    17877 .................... #define INT_FAST16_MIN  (-32768) 
                    17878 .................... #define UINT_FAST16_MAX (65535) 
                    17879 ....................  
                    17880 .................... #define INT_FAST32_MAX  (2147483647) 
                    17881 .................... #define INT_FAST32_MIN  (-2147483648) 
                    17882 .................... #define UINT_FAST32_MAX (4294967295) 
                    17883 ....................  
                    17884 .................... #if defined(__PCD__) 
                    17885 .................... //#define INT_FAST24_MAX  (8388607) 
                    17886 .................... //#define INT_FAST24_MIN  (-8388608) 
                    17887 .................... //#define UINT_FAST24_MAX (16777215) 
                    17888 ....................  
                    17889 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    17890 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    17891 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    17892 .................... #endif 
                    17893 ....................  
                    17894 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    17895 ....................  
                    17896 .................... /// TODO 
                    17897 ....................  
                    17898 .................... /// intptr_t uintptr_t 
                    17899 ....................  
                    17900 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    17901 ....................  
                    17902 ....................  
                    17903 .................... /////////// greatest width (OPTIONAL) 
                    17904 ....................  
                    17905 .................... /// TODO 
                    17906 ....................  
                    17907 .................... /// intmax_t uintmax_t 
                    17908 ....................  
                    17909 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    17910 ....................  
                    17911 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    17912 ....................  
                    17913 ....................  
                    17914 .................... #endif 
                    17915 ....................  
                    17916 .................... #include <stdbool.h> 
                    17917 .................... /////////////////////////////////////////////////////////////////////////// 
                    17918 .................... ////                                                                   //// 
                    17919 .................... ////                          stdbool.h                                //// 
                    17920 .................... ////                                                                   //// 
                    17921 .................... //// Standard boolean definitions                                      //// 
                    17922 .................... ////                                                                   //// 
                    17923 .................... /////////////////////////////////////////////////////////////////////////// 
                    17924 .................... ////        (C) Copyright 1996,2012 Custom Computer Services           //// 
                    17925 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    17926 .................... //// compiler.  This source code may only be distributed to other      //// 
                    17927 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    17928 .................... //// or distribution is permitted without written permission.          //// 
                    17929 .................... //// Derivative programs created using this software in object code    //// 
                    17930 .................... //// form are not restricted in any way.                               //// 
                    17931 .................... /////////////////////////////////////////////////////////////////////////// 
                    17932 ....................  
                    17933 .................... #ifndef __STDBOOL_H__ 
                    17934 .................... #define __STDBOOL_H__ 
                    17935 ....................  
                    17936 .................... //remove TRUE and FALSE added by CCS's device .h file 
                    17937 .................... #if defined(TRUE) 
                    17938 .................... #undef TRUE 
                    17939 .................... #endif 
                    17940 .................... #if defined(FALSE) 
                    17941 .................... #undef FALSE 
                    17942 .................... #endif 
                    17943 ....................  
                    17944 .................... typedef int1   bool; 
                    17945 .................... #define true   1 
                    17946 .................... #define false  0 
                    17947 .................... #define __bool_true_false_are_defined  1 
                    17948 ....................  
                    17949 .................... #endif 
                    17950 ....................  
                    17951 ....................  
                    17952 .................... typedef void (*timer_func)(void* arg); 
                    17953 ....................  
                    17954 .................... typedef struct { 
                    17955 ....................   //bool triggred; 
                    17956 ....................   uint32_t expTime; 
                    17957 ....................   void *arg; 
                    17958 ....................   timer_func func; 
                    17959 .................... } timer_task_t; 
                    17960 ....................  
                    17961 .................... #INLINE 
                    17962 .................... uint32_t timer_get_us_count(); 
                    17963 .................... bool timer_registerTask(uint32_t expTime, timer_func func, void *arg); 
                    17964 .................... void timer_yield(); 
                    17965 ....................  
                    17966 .................... #endif /* INCLUDE_TIMER_H_ */ 
                    17967 ....................  
                    17968 ....................  
                    17969 .................... /* 
                    17970 ....................  * message_handlers.h 
                    17971 ....................  * 
                    17972 ....................  *  Created on: Mar 26, 2017 
                    17973 ....................  *      Author: asaf 
                    17974 ....................  */ 
                    17975 ....................  
                    17976 .................... #ifndef MESSAGE_HANDLERS_H_ 
                    17977 .................... #define MESSAGE_HANDLERS_H_ 
                    17978 ....................  
                    17979 .................... void init_message_handlers(); 
                    17980 .................... void process_message(uint8_t* message, uint16_t length); 
                    17981 .................... #INLINE 
                    17982 .................... void perform_last_control_message(); 
                    17983 .................... void control_handle_timer(); 
                    17984 .................... void samp_if_needed(); 
                    17985 ....................  
                    17986 .................... #endif /* MESSAGE_HANDLERS_H_ */ 
                    17987 ....................  
                    17988 ....................  
                    17989 ....................  
                    17990 ....................  
                    17991 ....................  
                    17992 ....................  
                    17993 ....................  
                    17994 ....................  
                    17995 ....................  
                    17996 ....................  
                    17997 ....................  
                    17998 ....................  
                    17999 ....................  
                    18000 ....................  
                    18001 ....................  
                    18002 ....................  
                    18003 ....................  
                    18004 ....................  
                    18005 ....................  
                    18006 ....................  
                    18007 ....................  
                    18008 ....................  
                    18009 ....................  
                    18010 ....................  
                    18011 ....................  
                    18012 ....................  
                    18013 ....................  
                    18014 ....................  
                    18015 ....................  
                    18016 ....................  
                    18017 ....................  
                    18018 ....................  
                    18019 ....................  
                    18020 ....................  
                    18021 ....................  
                    18022 ....................  
                    18023 ....................  
                    18024 ....................  
                    18025 ....................  
                    18026 ....................  
                    18027 ....................  
                    18028 ....................  
                    18029 ....................  
                    18030 ....................  
                    18031 ....................  
                    18032 ....................  
                    18033 ....................  
                    18034 ....................  
                    18035 ....................  
                    18036 ....................  
                    18037 ....................  
                    18038 ....................  
                    18039 ....................  
                    18040 ....................  
                    18041 .................... #include <18F45K22.h> 
                    18042 .................... //////// Standard Header file for the PIC18F45K22 device //////////////// 
                    18043 .................... #device PIC18F45K22 
                    18644 .................... #list 
                    18645 ....................  
                    18646 .................... #device adc=10 
                    18647 .................... #device pass_strings=in_ram 
                    18648 ....................  
                    18649 .................... #define LOADER_END 0x1FFF 
                    18650 .................... #include <boot.h> 
                    18651 .................... #undef LOADER_END 
                    18652 .................... #define FLASH_SIZE getenv("FLASH_ERASE_SIZE") 
                    18653 .................... #define LOADER_END   0x1FFF 
                    18654 .................... #define LOADER_SIZE  0x3FF 
                    18655 ....................  
                    18656 .................... #ifndef _bootloader 
                    18657 .................... #build(reset=LOADER_END+1, interrupt=LOADER_END+9) 
                    18658 ....................  
                    18659 .................... /* when in operational software, keep out of the bootloader sections */ 
                    18660 .................... #org 0, 0xfff {} 
                    18661 .................... #org 0x1000, 0x1ffe {} 
                    18662 ....................  
                    18663 .................... #else 
                    18664 ....................  
                    18665 .................... /* when in the bootloader, keep out of the operational sections */ 
                    18666 .................... #org 0x2000, 0x7ffe {} 
                    18667 ....................  
                    18668 .................... #endif 
                    18669 ....................  
                    18670 ....................  
                    18671 .................... #FUSES NOWDT                   //No Watch Dog Timer 
                    18672 .................... #FUSES WDT128                  //Watch Dog Timer uses 1:128 Postscale 
                    18673 .................... #FUSES INTRC_IO                //Internal RC Osc, no CLKOUT 
                    18674 .................... #FUSES NOBROWNOUT              //No brownout reset 
                    18675 .................... #FUSES WDT_SW                  //No Watch Dog Timer, enabled in Software 
                    18676 .................... #FUSES NOLVP                   //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
                    18677 .................... #FUSES NOPUT 
                    18678 .................... #FUSES NOXINST                 //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
                    18679 ....................  
                    18680 .................... #use delay(clock=64000000) 
                    18681 .................... #use rs232(baud=921600,xmit=PIN_C6,rcv=PIN_C7,ERRORS) 
                    18682 .................... #USE TIMER(TIMER=1,TICK=1us,BITS=32,NOISR) 
                    18683 .................... #use spi(DO=PIN_A4, CLK=PIN_A3, ENABLE=PIN_A2, ENABLE_ACTIVE=0, DATA_HOLD=20, BITS=16) 
                    18684 ....................  
                    18685 .................... #opt 9 
                    18686 ....................  
                    18687 .................... #use fast_io(a) 
                    18688 .................... #use fast_io(b) 
                    18689 .................... #use fast_io(c) 
                    18690 .................... #use fast_io(d) 
                    18691 .................... #use fast_io(e) 
                    18692 ....................  
                    18693 .................... #define safe_write_program_memory(address, pointer, size) \ 
                    18694 ....................   do { disable_interrupts(GLOBAL); write_program_memory(address, pointer, size); enable_interrupts(GLOBAL); delay_us(1000); } while (0) 
                    18695 ....................  
                    18696 ....................  
                    18697 ....................  
                    18698 .................... #byte TOSU = 0xFFF 
                    18699 .................... #word TOS = 0xFFE 
                    18700 .................... #byte STKPTR = 0xFFC 
                    18701 .................... #bit    STKPTR0 = STKPTR.0 
                    18702 .................... #bit    STKPTR1 = STKPTR.1 
                    18703 .................... #bit    STKPTR2 = STKPTR.2 
                    18704 .................... #bit    STKPTR3 = STKPTR.3 
                    18705 .................... #bit    STKPTR4 = STKPTR.4 
                    18706 .................... #bit    STKUNF = STKPTR.6 
                    18707 .................... #bit    STKFUL = STKPTR.7 
                    18708 .................... #byte PCLATU = 0xFFB 
                    18709 .................... #byte PCLATH = 0xFFA 
                    18710 .................... #byte PCL = 0xFF9 
                    18711 .................... #byte TBLPTRU = 0xFF8 
                    18712 .................... #word TBLPTR = 0xFF7 
                    18713 .................... #byte TABLAT = 0xFF5 
                    18714 .................... #word PROD = 0xFF4 
                    18715 .................... #byte INTCON = 0xFF2 
                    18716 .................... #bit    RBIF = INTCON.0 
                    18717 .................... #bit    INT0IF = INTCON.1 
                    18718 .................... #bit    TMR0IF = INTCON.2 
                    18719 .................... #bit    RBIE = INTCON.3 
                    18720 .................... #bit    INT0IE = INTCON.4 
                    18721 .................... #bit    TMR0IE = INTCON.5 
                    18722 .................... #bit    PEIE_GIEL = INTCON.6 
                    18723 .................... #bit    GIE_GIEH = INTCON.7 
                    18724 .................... #byte INTCON2 = 0xFF1 
                    18725 .................... #bit    RBIP = INTCON2.0 
                    18726 .................... #bit    TMR0IP = INTCON2.2 
                    18727 .................... #bit    INTEDG2 = INTCON2.4 
                    18728 .................... #bit    INTEDG1 = INTCON2.5 
                    18729 .................... #bit    INTEDG0 = INTCON2.6 
                    18730 .................... #bit    RBPU = INTCON2.7 
                    18731 .................... #byte INTCON3 = 0xFF0 
                    18732 .................... #bit    INT1IF = INTCON3.0 
                    18733 .................... #bit    INT2IF = INTCON3.1 
                    18734 .................... #bit    INT1IE = INTCON3.3 
                    18735 .................... #bit    INT2IE = INTCON3.4 
                    18736 .................... #bit    INT1IP = INTCON3.6 
                    18737 .................... #bit    INT2IP = INTCON3.7 
                    18738 .................... #byte INDF0 = 0xFEF 
                    18739 .................... #byte POSTINC0 = 0xFEE 
                    18740 .................... #byte POSTDEC0 = 0xFED 
                    18741 .................... #byte PREINC0 = 0xFEC 
                    18742 .................... #byte PLUSW0 = 0xFEB 
                    18743 .................... #word FSR0 = 0xFEA 
                    18744 .................... #byte WREG = 0xFE8 
                    18745 .................... #byte INDF1 = 0xFE7 
                    18746 .................... #byte POSTINC1 = 0xFE6 
                    18747 .................... #byte POSTDEC1 = 0xFE5 
                    18748 .................... #byte PREINC1 = 0xFE4 
                    18749 .................... #byte PLUSW1 = 0xFE3 
                    18750 .................... #word FSR1 = 0xFE2 
                    18751 .................... #byte BSR = 0xFE0 
                    18752 .................... #byte INDF2 = 0xFDF 
                    18753 .................... #byte POSTINC2 = 0xFDE 
                    18754 .................... #byte POSTDEC2 = 0xFDD 
                    18755 .................... #byte PREINC2 = 0xFDC 
                    18756 .................... #byte PLUSW2 = 0xFDB 
                    18757 .................... #word FSR2 = 0xFDA 
                    18758 .................... #byte STATUS = 0xFD8 
                    18759 .................... #bit    C = STATUS.0 
                    18760 .................... #bit    DC = STATUS.1 
                    18761 .................... #bit    Z = STATUS.2 
                    18762 .................... #bit    OV = STATUS.3 
                    18763 .................... #bit    N = STATUS.4 
                    18764 .................... #word TMR0 = 0xFD7 
                    18765 .................... #byte T0CON = 0xFD5 
                    18766 .................... #bit    T0PS0 = T0CON.0 
                    18767 .................... #bit    T0PS1 = T0CON.1 
                    18768 .................... #bit    T0PS2 = T0CON.2 
                    18769 .................... #bit    PSA = T0CON.3 
                    18770 .................... #bit    T0SE = T0CON.4 
                    18771 .................... #bit    T0CS = T0CON.5 
                    18772 .................... #bit    T08BIT = T0CON.6 
                    18773 .................... #bit    TMR0ON = T0CON.7 
                    18774 .................... #byte OSCCON = 0xFD3 
                    18775 .................... #bit    SCS0 = OSCCON.0 
                    18776 .................... #bit    SCS1 = OSCCON.1 
                    18777 .................... #bit    HFIOFS = OSCCON.2 
                    18778 .................... #bit    OSTS = OSCCON.3 
                    18779 .................... #bit    IRCF0 = OSCCON.4 
                    18780 .................... #bit    IRCF1 = OSCCON.5 
                    18781 .................... #bit    IRCF2 = OSCCON.6 
                    18782 .................... #bit    IDLEN = OSCCON.7 
                    18783 .................... #byte OSCCON2 = 0xFD2 
                    18784 .................... #bit    LFIOFS = OSCCON2.0 
                    18785 .................... #bit    MFIOFS = OSCCON2.1 
                    18786 .................... #bit    PRISD = OSCCON2.2 
                    18787 .................... #bit    SOSCGO = OSCCON2.3 
                    18788 .................... #bit    MFIOSEL = OSCCON2.4 
                    18789 .................... #bit    SOSCRUN = OSCCON2.6 
                    18790 .................... #bit    PLLRDY = OSCCON2.7 
                    18791 .................... #byte WDTCON = 0xFD1 
                    18792 .................... #bit    SWDTEN = WDTCON.0 
                    18793 .................... #byte RCON = 0xFD0 
                    18794 .................... #bit    BOR = RCON.0 
                    18795 .................... #bit    POR = RCON.1 
                    18796 .................... #bit    PD = RCON.2 
                    18797 .................... #bit    TO = RCON.3 
                    18798 .................... #bit    RI = RCON.4 
                    18799 .................... #bit    SBOREN = RCON.6 
                    18800 .................... #bit    IPEN = RCON.7 
                    18801 .................... #word TMR1 = 0xFCF 
                    18802 .................... #byte T1CON = 0xFCD 
                    18803 .................... #bit    TMR1ON = T1CON.0 
                    18804 .................... #bit    T1RD16 = T1CON.1 
                    18805 .................... #bit    T1SYNC = T1CON.2 
                    18806 .................... #bit    T1SOSCEN = T1CON.3 
                    18807 .................... #bit    T1CKPS0 = T1CON.4 
                    18808 .................... #bit    T1CKPS1 = T1CON.5 
                    18809 .................... #bit    TMR1CS0 = T1CON.6 
                    18810 .................... #bit    TMR1CS1 = T1CON.7 
                    18811 .................... #byte T1GCON = 0xFCC 
                    18812 .................... #bit    T1GSS0 = T1GCON.0 
                    18813 .................... #bit    T1GSS1 = T1GCON.1 
                    18814 .................... #bit    T1GVAL = T1GCON.2 
                    18815 .................... #bit    T1GGO = T1GCON.3 
                    18816 .................... #bit    T1GSPM = T1GCON.4 
                    18817 .................... #bit    T1GTM = T1GCON.5 
                    18818 .................... #bit    T1GPOL = T1GCON.6 
                    18819 .................... #bit    TMR1GE = T1GCON.7 
                    18820 .................... #byte SSP1CON3 = 0xFCB 
                    18821 .................... #bit    DHEN = SSP1CON3.0 
                    18822 .................... #bit    AHEN = SSP1CON3.1 
                    18823 .................... #bit    SBCDE = SSP1CON3.2 
                    18824 .................... #bit    SDAHT = SSP1CON3.3 
                    18825 .................... #bit    BOEN = SSP1CON3.4 
                    18826 .................... #bit    SCIE = SSP1CON3.5 
                    18827 .................... #bit    PCIE = SSP1CON3.6 
                    18828 .................... #bit    ACKTIM = SSP1CON3.7 
                    18829 .................... #byte SSP1MSK = 0xFCA 
                    18830 .................... #byte SSP1BUF = 0xFC9 
                    18831 .................... #byte SSP1ADD = 0xFC8 
                    18832 .................... #byte SSP1STAT = 0xFC7 
                    18833 .................... #bit    BF = SSP1STAT.0 
                    18834 .................... #bit    UA = SSP1STAT.1 
                    18835 .................... #bit    R = SSP1STAT.2 
                    18836 .................... #bit    S = SSP1STAT.3 
                    18837 .................... #bit    P = SSP1STAT.4 
                    18838 .................... #bit    D = SSP1STAT.5 
                    18839 .................... #bit    CKE = SSP1STAT.6 
                    18840 .................... #bit    SMP = SSP1STAT.7 
                    18841 .................... #byte SSP1CON1 = 0xFC6 
                    18842 .................... #bit    SSPM0 = SSP1CON1.0 
                    18843 .................... #bit    SSPM1 = SSP1CON1.1 
                    18844 .................... #bit    SSPM2 = SSP1CON1.2 
                    18845 .................... #bit    SSPM3 = SSP1CON1.3 
                    18846 .................... #bit    CKP = SSP1CON1.4 
                    18847 .................... #bit    SSPEN = SSP1CON1.5 
                    18848 .................... #bit    SSPOV = SSP1CON1.6 
                    18849 .................... #bit    WCOL = SSP1CON1.7 
                    18850 .................... #byte SSP1CON2 = 0xFC5 
                    18851 .................... #bit    SEN = SSP1CON2.0 
                    18852 .................... #bit    RSEN = SSP1CON2.1 
                    18853 .................... #bit    PEN = SSP1CON2.2 
                    18854 .................... #bit    RCEN = SSP1CON2.3 
                    18855 .................... #bit    ACKEN = SSP1CON2.4 
                    18856 .................... #bit    ACKDT = SSP1CON2.5 
                    18857 .................... #bit    ACKSTAT = SSP1CON2.6 
                    18858 .................... #bit    GCEN = SSP1CON2.7 
                    18859 .................... #word ADRES = 0xFC4 
                    18860 .................... #byte ADCON0 = 0xFC2 
                    18861 .................... #bit    ADON = ADCON0.0 
                    18862 .................... #bit    GO = ADCON0.1 
                    18863 .................... #bit    CHS0 = ADCON0.2 
                    18864 .................... #bit    CHS1 = ADCON0.3 
                    18865 .................... #bit    CHS2 = ADCON0.4 
                    18866 .................... #bit    CHS3 = ADCON0.5 
                    18867 .................... #bit    CHS4 = ADCON0.6 
                    18868 .................... #byte ADCON1 = 0xFC1 
                    18869 .................... #bit    NVCFG0 = ADCON1.0 
                    18870 .................... #bit    NVCFG1 = ADCON1.1 
                    18871 .................... #bit    PVCFG0 = ADCON1.2 
                    18872 .................... #bit    PVCFG1 = ADCON1.3 
                    18873 .................... #bit    TRIGSEL = ADCON1.7 
                    18874 .................... #byte ADCON2 = 0xFC0 
                    18875 .................... #bit    ADCS0 = ADCON2.0 
                    18876 .................... #bit    ADCS1 = ADCON2.1 
                    18877 .................... #bit    ADCS2 = ADCON2.2 
                    18878 .................... #bit    ACQT0 = ADCON2.3 
                    18879 .................... #bit    ACQT1 = ADCON2.4 
                    18880 .................... #bit    ACQT2 = ADCON2.5 
                    18881 .................... #bit    ADFM = ADCON2.7 
                    18882 .................... #word CCPR1 = 0xFBF 
                    18883 .................... #byte CCP1CON = 0xFBD 
                    18884 .................... #bit    CCP1M0 = CCP1CON.0 
                    18885 .................... #bit    CCP1M1 = CCP1CON.1 
                    18886 .................... #bit    CCP1M2 = CCP1CON.2 
                    18887 .................... #bit    CCP1M3 = CCP1CON.3 
                    18888 .................... #bit    DC1B0 = CCP1CON.4 
                    18889 .................... #bit    DC1B1 = CCP1CON.5 
                    18890 .................... #bit    P1M0 = CCP1CON.6 
                    18891 .................... #bit    P1M1 = CCP1CON.7 
                    18892 .................... #byte TMR2 = 0xFBC 
                    18893 .................... #byte PR2 = 0xFBB 
                    18894 .................... #byte T2CON = 0xFBA 
                    18895 .................... #bit    T2CKPS0 = T2CON.0 
                    18896 .................... #bit    T2CKPS1 = T2CON.1 
                    18897 .................... #bit    TMR2ON = T2CON.2 
                    18898 .................... #bit    T2OUTPS0 = T2CON.3 
                    18899 .................... #bit    T2OUTPS1 = T2CON.4 
                    18900 .................... #bit    T2OUTPS2 = T2CON.5 
                    18901 .................... #bit    T2OUTPS3 = T2CON.6 
                    18902 .................... #byte PSTR1CON = 0xFB9 
                    18903 .................... #bit    STR1A = PSTR1CON.0 
                    18904 .................... #bit    STR1B = PSTR1CON.1 
                    18905 .................... #bit    STR1C = PSTR1CON.2 
                    18906 .................... #bit    STR1D = PSTR1CON.3 
                    18907 .................... #bit    STR1SYNC = PSTR1CON.4 
                    18908 .................... #byte BAUDCON1 = 0xFB8 
                    18909 .................... #bit    ABDEN = BAUDCON1.0 
                    18910 .................... #bit    WUE = BAUDCON1.1 
                    18911 .................... #bit    BRG16 = BAUDCON1.3 
                    18912 .................... #bit    CKTXP = BAUDCON1.4 
                    18913 .................... #bit    DTRXP = BAUDCON1.5 
                    18914 .................... #bit    RCIDL = BAUDCON1.6 
                    18915 .................... #bit    ABDOVF = BAUDCON1.7 
                    18916 .................... #byte PWM1CON = 0xFB7 
                    18917 .................... #bit    P1DC0 = PWM1CON.0 
                    18918 .................... #bit    P1DC1 = PWM1CON.1 
                    18919 .................... #bit    P1DC2 = PWM1CON.2 
                    18920 .................... #bit    P1DC3 = PWM1CON.3 
                    18921 .................... #bit    P1DC4 = PWM1CON.4 
                    18922 .................... #bit    P1DC5 = PWM1CON.5 
                    18923 .................... #bit    P1DC6 = PWM1CON.6 
                    18924 .................... #bit    P1RSEN = PWM1CON.7 
                    18925 .................... #byte ECCP1AS = 0xFB6 
                    18926 .................... #bit    P1SSBD0 = ECCP1AS.0 
                    18927 .................... #bit    P1SSBD1 = ECCP1AS.1 
                    18928 .................... #bit    P1SSAC0 = ECCP1AS.2 
                    18929 .................... #bit    P1SSAC1 = ECCP1AS.3 
                    18930 .................... #bit    CCP1AS0 = ECCP1AS.4 
                    18931 .................... #bit    CCP1AS1 = ECCP1AS.5 
                    18932 .................... #bit    CCP1AS2 = ECCP1AS.6 
                    18933 .................... #bit    CCP1ASE = ECCP1AS.7 
                    18934 .................... #byte T3GCON = 0xFB4 
                    18935 .................... #bit    T3GSS0 = T3GCON.0 
                    18936 .................... #bit    T3GSS1 = T3GCON.1 
                    18937 .................... #bit    T3GVAL = T3GCON.2 
                    18938 .................... #bit    T3GGO = T3GCON.3 
                    18939 .................... #bit    T3GSPM = T3GCON.4 
                    18940 .................... #bit    T3GTM = T3GCON.5 
                    18941 .................... #bit    T3GPOL = T3GCON.6 
                    18942 .................... #bit    TMR3GE = T3GCON.7 
                    18943 .................... #word TMR3 = 0xFB3 
                    18944 .................... #byte T3CON = 0xFB1 
                    18945 .................... #bit    TMR3ON = T3CON.0 
                    18946 .................... #bit    T3RD16 = T3CON.1 
                    18947 .................... #bit    T3SYNC = T3CON.2 
                    18948 .................... #bit    T3SOSCEN = T3CON.3 
                    18949 .................... #bit    T3CKPS0 = T3CON.4 
                    18950 .................... #bit    T3CKPS1 = T3CON.5 
                    18951 .................... #bit    TMR3CS0 = T3CON.6 
                    18952 .................... #bit    TMR3CS1 = T3CON.7 
                    18953 .................... #byte SPBRGH1 = 0xFB0 
                    18954 .................... #byte SPBRG1 = 0xFAF 
                    18955 .................... #byte RCREG1 = 0xFAE 
                    18956 .................... #byte TXREG1 = 0xFAD 
                    18957 .................... #byte TXSTA1 = 0xFAC 
                    18958 .................... #bit    TX9D = TXSTA1.0 
                    18959 .................... #bit    TRMT = TXSTA1.1 
                    18960 .................... #bit    BRGH = TXSTA1.2 
                    18961 .................... #bit    SENDB = TXSTA1.3 
                    18962 .................... #bit    SYNC = TXSTA1.4 
                    18963 .................... #bit    TXEN = TXSTA1.5 
                    18964 .................... #bit    TX9 = TXSTA1.6 
                    18965 .................... #bit    CSRC = TXSTA1.7 
                    18966 .................... #byte RCSTA1 = 0xFAB 
                    18967 .................... #bit    RX9D = RCSTA1.0 
                    18968 .................... #bit    OERR = RCSTA1.1 
                    18969 .................... #bit    FERR = RCSTA1.2 
                    18970 .................... #bit    ADDEN = RCSTA1.3 
                    18971 .................... #bit    CREN = RCSTA1.4 
                    18972 .................... #bit    SREN = RCSTA1.5 
                    18973 .................... #bit    RX9 = RCSTA1.6 
                    18974 .................... #bit    SPEN = RCSTA1.7 
                    18975 .................... #byte EEADR = 0xFA9 
                    18976 .................... #byte EEDATA = 0xFA8 
                    18977 .................... #byte EECON2 = 0xFA7 
                    18978 .................... #byte EECON1 = 0xFA6 
                    18979 .................... #bit    RD = EECON1.0 
                    18980 .................... #bit    WR = EECON1.1 
                    18981 .................... #bit    WREN = EECON1.2 
                    18982 .................... #bit    WRERR = EECON1.3 
                    18983 .................... #bit    FREE = EECON1.4 
                    18984 .................... #bit    CFGS = EECON1.6 
                    18985 .................... #bit    EEPGD = EECON1.7 
                    18986 .................... #byte IPR3 = 0xFA5 
                    18987 .................... #bit    TMR1GIP = IPR3.0 
                    18988 .................... #bit    TMR3GIP = IPR3.1 
                    18989 .................... #bit    TMR5GIP = IPR3.2 
                    18990 .................... #bit    CTMUIP = IPR3.3 
                    18991 .................... #bit    TX2IP = IPR3.4 
                    18992 .................... #bit    RC2IP = IPR3.5 
                    18993 .................... #bit    BCL2IP = IPR3.6 
                    18994 .................... #bit    SSP2IP = IPR3.7 
                    18995 .................... #byte PIR3 = 0xFA4 
                    18996 .................... #bit    TMR1GIF = PIR3.0 
                    18997 .................... #bit    TMR3GIF = PIR3.1 
                    18998 .................... #bit    TMR5GIF = PIR3.2 
                    18999 .................... #bit    CTMUIF = PIR3.3 
                    19000 .................... #bit    TX2IF = PIR3.4 
                    19001 .................... #bit    RC2IF = PIR3.5 
                    19002 .................... #bit    BCL2IF = PIR3.6 
                    19003 .................... #bit    SSP2IF = PIR3.7 
                    19004 .................... #byte PIE3 = 0xFA3 
                    19005 .................... #bit    TMR1GIE = PIE3.0 
                    19006 .................... #bit    TMR3GIE = PIE3.1 
                    19007 .................... #bit    TMR5GIE = PIE3.2 
                    19008 .................... #bit    CTMUIE = PIE3.3 
                    19009 .................... #bit    TX2IE = PIE3.4 
                    19010 .................... #bit    RC2IE = PIE3.5 
                    19011 .................... #bit    BCL2IE = PIE3.6 
                    19012 .................... #bit    SSP2IE = PIE3.7 
                    19013 .................... #byte IPR2 = 0xFA2 
                    19014 .................... #bit    CCP2IP = IPR2.0 
                    19015 .................... #bit    TMR3IP = IPR2.1 
                    19016 .................... #bit    HLVDIP = IPR2.2 
                    19017 .................... #bit    BCL1IP = IPR2.3 
                    19018 .................... #bit    EEIP = IPR2.4 
                    19019 .................... #bit    C2IP = IPR2.5 
                    19020 .................... #bit    C1IP = IPR2.6 
                    19021 .................... #bit    OSCFIP = IPR2.7 
                    19022 .................... #byte PIR2 = 0xFA1 
                    19023 .................... #bit    CCP2IF = PIR2.0 
                    19024 .................... #bit    TMR3IF = PIR2.1 
                    19025 .................... #bit    HLVDIF = PIR2.2 
                    19026 .................... #bit    BCL1IF = PIR2.3 
                    19027 .................... #bit    EEIF = PIR2.4 
                    19028 .................... #bit    C2IF = PIR2.5 
                    19029 .................... #bit    C1IF = PIR2.6 
                    19030 .................... #bit    OSCFIF = PIR2.7 
                    19031 .................... #byte PIE2 = 0xFA0 
                    19032 .................... #bit    CCP2IE = PIE2.0 
                    19033 .................... #bit    TMR3IE = PIE2.1 
                    19034 .................... #bit    HLVDIE = PIE2.2 
                    19035 .................... #bit    BCL1IE = PIE2.3 
                    19036 .................... #bit    EEIE = PIE2.4 
                    19037 .................... #bit    C2IE = PIE2.5 
                    19038 .................... #bit    C1IE = PIE2.6 
                    19039 .................... #bit    OSCFIE = PIE2.7 
                    19040 .................... #byte IPR1 = 0xF9F 
                    19041 .................... #bit    TMR1IP = IPR1.0 
                    19042 .................... #bit    TMR2IP = IPR1.1 
                    19043 .................... #bit    CCP1IP = IPR1.2 
                    19044 .................... #bit    SSP1IP = IPR1.3 
                    19045 .................... #bit    TX1IP = IPR1.4 
                    19046 .................... #bit    RC1IP = IPR1.5 
                    19047 .................... #bit    ADIP = IPR1.6 
                    19048 .................... #byte PIR1 = 0xF9E 
                    19049 .................... #bit    TMR1IF = PIR1.0 
                    19050 .................... #bit    TMR2IF = PIR1.1 
                    19051 .................... #bit    CCP1IF = PIR1.2 
                    19052 .................... #bit    SSP1IF = PIR1.3 
                    19053 .................... #bit    TX1IF = PIR1.4 
                    19054 .................... #bit    RC1IF = PIR1.5 
                    19055 .................... #bit    ADIF = PIR1.6 
                    19056 .................... #byte PIE1 = 0xF9D 
                    19057 .................... #bit    TMR1IE = PIE1.0 
                    19058 .................... #bit    TMR2IE = PIE1.1 
                    19059 .................... #bit    CCP1IE = PIE1.2 
                    19060 .................... #bit    SSP1IE = PIE1.3 
                    19061 .................... #bit    TX1IE = PIE1.4 
                    19062 .................... #bit    RC1IE = PIE1.5 
                    19063 .................... #bit    ADIE = PIE1.6 
                    19064 .................... #byte HLVDCON = 0xF9C 
                    19065 .................... #bit    HLVDL0 = HLVDCON.0 
                    19066 .................... #bit    HLVDL1 = HLVDCON.1 
                    19067 .................... #bit    HLVDL2 = HLVDCON.2 
                    19068 .................... #bit    HLVDL3 = HLVDCON.3 
                    19069 .................... #bit    HLVDEN = HLVDCON.4 
                    19070 .................... #bit    IRVST = HLVDCON.5 
                    19071 .................... #bit    BGVST = HLVDCON.6 
                    19072 .................... #bit    VDIRMAG = HLVDCON.7 
                    19073 .................... #byte OSCTUNE = 0xF9B 
                    19074 .................... #bit    TUN0 = OSCTUNE.0 
                    19075 .................... #bit    TUN1 = OSCTUNE.1 
                    19076 .................... #bit    TUN2 = OSCTUNE.2 
                    19077 .................... #bit    TUN3 = OSCTUNE.3 
                    19078 .................... #bit    TUN4 = OSCTUNE.4 
                    19079 .................... #bit    TUN5 = OSCTUNE.5 
                    19080 .................... #bit    PLLEN = OSCTUNE.6 
                    19081 .................... #bit    INTSRC = OSCTUNE.7 
                    19082 .................... #byte TRISE = 0xF96 
                    19083 .................... #bit    TRISE0 = TRISE.0 
                    19084 .................... #bit    TRISE1 = TRISE.1 
                    19085 .................... #bit    TRISE2 = TRISE.2 
                    19086 .................... #bit    WPUE3 = TRISE.7 
                    19087 .................... #byte TRISD = 0xF95 
                    19088 .................... #byte TRISC = 0xF94 
                    19089 .................... #byte TRISB = 0xF93 
                    19090 .................... #byte TRISA = 0xF92 
                    19091 .................... #byte LATE = 0xF8D 
                    19092 .................... #byte LATD = 0xF8C 
                    19093 .................... #byte LATC = 0xF8B 
                    19094 .................... #byte LATB = 0xF8A 
                    19095 .................... #byte LATA = 0xF89 
                    19096 .................... #byte PORTE = 0xF84 
                    19097 .................... #byte PORTD = 0xF83 
                    19098 .................... #byte PORTC = 0xF82 
                    19099 .................... #byte PORTB = 0xF81 
                    19100 .................... #byte PORTA = 0xF80 
                    19101 .................... #byte IPR5 = 0xF7F 
                    19102 .................... #bit    TMR4IP = IPR5.0 
                    19103 .................... #bit    TMR5IP = IPR5.1 
                    19104 .................... #bit    TMR6IP = IPR5.2 
                    19105 .................... #byte PIR5 = 0xF7E 
                    19106 .................... #bit    TMR4IF = PIR5.0 
                    19107 .................... #bit    TMR5IF = PIR5.1 
                    19108 .................... #bit    TMR6IF = PIR5.2 
                    19109 .................... #byte PIE5 = 0xF7D 
                    19110 .................... #bit    TMR4IE = PIE5.0 
                    19111 .................... #bit    TMR5IE = PIE5.1 
                    19112 .................... #bit    TMR6IE = PIE5.2 
                    19113 .................... #byte IPR4 = 0xF7C 
                    19114 .................... #bit    CCP3IP = IPR4.0 
                    19115 .................... #bit    CCP4IP = IPR4.1 
                    19116 .................... #bit    CCP5IP = IPR4.2 
                    19117 .................... #byte PIR4 = 0xF7B 
                    19118 .................... #bit    CCP3IF = PIR4.0 
                    19119 .................... #bit    CCP4IF = PIR4.1 
                    19120 .................... #bit    CCP5IF = PIR4.2 
                    19121 .................... #byte PIE4 = 0xF7A 
                    19122 .................... #bit    CCP3IE = PIE4.0 
                    19123 .................... #bit    CCP4IE = PIE4.1 
                    19124 .................... #bit    CCP5IE = PIE4.2 
                    19125 .................... #byte CM1CON0 = 0xF79 
                    19126 .................... #bit    C1CH0 = CM1CON0.0 
                    19127 .................... #bit    C1CH1 = CM1CON0.1 
                    19128 .................... #bit    C1R = CM1CON0.2 
                    19129 .................... #bit    C1SP = CM1CON0.3 
                    19130 .................... #bit    C1POL = CM1CON0.4 
                    19131 .................... #bit    C1OE = CM1CON0.5 
                    19132 .................... //#bit    C1OUT = CM1CON0.6 
                    19133 .................... #bit    C1ON = CM1CON0.7 
                    19134 .................... #byte CM2CON0 = 0xF78 
                    19135 .................... #bit    C2CH0 = CM2CON0.0 
                    19136 .................... #bit    C2CH1 = CM2CON0.1 
                    19137 .................... #bit    C2R = CM2CON0.2 
                    19138 .................... #bit    C2SP = CM2CON0.3 
                    19139 .................... #bit    C2POL = CM2CON0.4 
                    19140 .................... #bit    C2OE = CM2CON0.5 
                    19141 .................... //#bit    C2OUT = CM2CON0.6 
                    19142 .................... #bit    C2ON = CM2CON0.7 
                    19143 .................... #byte CM2CON1 = 0xF77 
                    19144 .................... #bit    C2SYNC = CM2CON1.0 
                    19145 .................... #bit    C1SYNC = CM2CON1.1 
                    19146 .................... #bit    C2HYS = CM2CON1.2 
                    19147 .................... #bit    C1HYS = CM2CON1.3 
                    19148 .................... #bit    C2RSEL = CM2CON1.4 
                    19149 .................... #bit    C1RSEL = CM2CON1.5 
                    19150 .................... #bit    MC2OUT = CM2CON1.6 
                    19151 .................... #bit    MC1OUT = CM2CON1.7 
                    19152 .................... #byte SPBRGH2 = 0xF76 
                    19153 .................... #byte SPBRG2 = 0xF75 
                    19154 .................... #byte RCREG2 = 0xF74 
                    19155 .................... #byte TXREG2 = 0xF73 
                    19156 .................... #byte TXSTA2 = 0xF72 
                    19157 .................... #bit    U2TX9D = TXSTA2.0 
                    19158 .................... #bit    U2TRMT = TXSTA2.1 
                    19159 .................... #bit    U2BRGH = TXSTA2.2 
                    19160 .................... #bit    U2SENDB = TXSTA2.3 
                    19161 .................... #bit    U2SYNC = TXSTA2.4 
                    19162 .................... #bit    U2TXEN = TXSTA2.5 
                    19163 .................... #bit    U2TX9 = TXSTA2.6 
                    19164 .................... #bit    U2CSRC = TXSTA2.7 
                    19165 .................... #byte RCSTA2 = 0xF71 
                    19166 .................... #bit    U1RX9D = RCSTA2.0 
                    19167 .................... #bit    U1OERR = RCSTA2.1 
                    19168 .................... #bit    U1FERR = RCSTA2.2 
                    19169 .................... #bit    U1ADDEN = RCSTA2.3 
                    19170 .................... #bit    U1CREN = RCSTA2.4 
                    19171 .................... #bit    U1SREN = RCSTA2.5 
                    19172 .................... #bit    U1RX9 = RCSTA2.6 
                    19173 .................... #bit    U1SPEN = RCSTA2.7 
                    19174 .................... #byte BAUDCON2 = 0xF70 
                    19175 .................... #bit    U1ABDEN = BAUDCON2.0 
                    19176 .................... #bit    U1WUE = BAUDCON2.1 
                    19177 .................... #bit    U1BRG16 = BAUDCON2.3 
                    19178 .................... #bit    U1CKTXP = BAUDCON2.4 
                    19179 .................... #bit    U1DTRXP = BAUDCON2.5 
                    19180 .................... #bit    U1RCIDL = BAUDCON2.6 
                    19181 .................... #bit    U1ABDOVF = BAUDCON2.7 
                    19182 .................... #byte SSP2BUF = 0xF6F 
                    19183 .................... #byte SSP2ADD = 0xF6E 
                    19184 .................... #byte SSP2STAT = 0xF6D 
                    19185 .................... #bit    SP2BF = SSP2STAT.0 
                    19186 .................... #bit    SP2UA = SSP2STAT.1 
                    19187 .................... #bit    SP2R = SSP2STAT.2 
                    19188 .................... #bit    SP2S = SSP2STAT.3 
                    19189 .................... #bit    SP2P = SSP2STAT.4 
                    19190 .................... #bit    SP2D = SSP2STAT.5 
                    19191 .................... #bit    SP2CKE = SSP2STAT.6 
                    19192 .................... #bit    SP2SMP = SSP2STAT.7 
                    19193 .................... #byte SSP2CON1 = 0xF6C 
                    19194 .................... #bit    SP2SSPM0 = SSP2CON1.0 
                    19195 .................... #bit    SP2SSPM1 = SSP2CON1.1 
                    19196 .................... #bit    SP2SSPM2 = SSP2CON1.2 
                    19197 .................... #bit    SP2SSPM3 = SSP2CON1.3 
                    19198 .................... #bit    SP2CKP = SSP2CON1.4 
                    19199 .................... #bit    SP2SSPEN = SSP2CON1.5 
                    19200 .................... #bit    SP2SSPOV = SSP2CON1.6 
                    19201 .................... #bit    SP2WCOL = SSP2CON1.7 
                    19202 .................... #byte SSP2CON2 = 0xF6B 
                    19203 .................... #bit    SP2SEN = SSP2CON2.0 
                    19204 .................... #bit    SP2RSEN = SSP2CON2.1 
                    19205 .................... #bit    SP2PEN = SSP2CON2.2 
                    19206 .................... #bit    SP2RCEN = SSP2CON2.3 
                    19207 .................... #bit    SP2ACKEN = SSP2CON2.4 
                    19208 .................... #bit    SP2ACKDT = SSP2CON2.5 
                    19209 .................... #bit    SP2ACKSTAT = SSP2CON2.6 
                    19210 .................... #bit    SP2GCEN = SSP2CON2.7 
                    19211 .................... #byte SSP2MSK = 0xF6A 
                    19212 .................... #byte SSP2CON3 = 0xF69 
                    19213 .................... #bit    SP2DHEN = SSP2CON3.0 
                    19214 .................... #bit    SP2AHEN = SSP2CON3.1 
                    19215 .................... #bit    SP2SBCDE = SSP2CON3.2 
                    19216 .................... #bit    SP2SDAHT = SSP2CON3.3 
                    19217 .................... #bit    SP2BOEN = SSP2CON3.4 
                    19218 .................... #bit    SP2SCIE = SSP2CON3.5 
                    19219 .................... #bit    SP2PCIE = SSP2CON3.6 
                    19220 .................... #bit    SP2ACKTIM = SSP2CON3.7 
                    19221 .................... #word CCPR2 = 0xF68 
                    19222 .................... #byte CCP2CON = 0xF66 
                    19223 .................... #bit    CCP2M0 = CCP2CON.0 
                    19224 .................... #bit    CCP2M1 = CCP2CON.1 
                    19225 .................... #bit    CCP2M2 = CCP2CON.2 
                    19226 .................... #bit    CCP2M3 = CCP2CON.3 
                    19227 .................... #bit    CCP2DC2B0 = CCP2CON.4 
                    19228 .................... #bit    CCP2DC2B1 = CCP2CON.5 
                    19229 .................... #bit    CCP2P2M0 = CCP2CON.6 
                    19230 .................... #bit    CCP2P2M1 = CCP2CON.7 
                    19231 .................... #byte PWM2CON = 0xF65 
                    19232 .................... #bit    P2DC0 = PWM2CON.0 
                    19233 .................... #bit    P2DC1 = PWM2CON.1 
                    19234 .................... #bit    P2DC2 = PWM2CON.2 
                    19235 .................... #bit    P2DC3 = PWM2CON.3 
                    19236 .................... #bit    P2DC4 = PWM2CON.4 
                    19237 .................... #bit    P2DC5 = PWM2CON.5 
                    19238 .................... #bit    P2DC6 = PWM2CON.6 
                    19239 .................... #bit    P2RSEN = PWM2CON.7 
                    19240 .................... #byte ECCP2AS = 0xF64 
                    19241 .................... #bit    P2SSBD0 = ECCP2AS.0 
                    19242 .................... #bit    P2SSBD1 = ECCP2AS.1 
                    19243 .................... #bit    P2SSAC0 = ECCP2AS.2 
                    19244 .................... #bit    P2SSAC1 = ECCP2AS.3 
                    19245 .................... #bit    CCP2AS0 = ECCP2AS.4 
                    19246 .................... #bit    CCP2AS1 = ECCP2AS.5 
                    19247 .................... #bit    CCP2AS2 = ECCP2AS.6 
                    19248 .................... #bit    CCP2ASE = ECCP2AS.7 
                    19249 .................... #byte PSTR2CON = 0xF63 
                    19250 .................... #bit    STR2A = PSTR2CON.0 
                    19251 .................... #bit    STR2B = PSTR2CON.1 
                    19252 .................... #bit    STR2C = PSTR2CON.2 
                    19253 .................... #bit    STR2D = PSTR2CON.3 
                    19254 .................... #bit    STR2SYNC = PSTR2CON.4 
                    19255 .................... #byte IOCB = 0xF62 
                    19256 .................... #bit    IOCB4 = IOCB.4 
                    19257 .................... #bit    IOCB5 = IOCB.5 
                    19258 .................... #bit    IOCB6 = IOCB.6 
                    19259 .................... #bit    IOCB7 = IOCB.7 
                    19260 .................... #byte WPUB = 0xF61 
                    19261 .................... #byte SLRCON = 0xF60 
                    19262 .................... #bit    SLRA = SLRCON.0 
                    19263 .................... #bit    SLRB = SLRCON.1 
                    19264 .................... #bit    SLRC = SLRCON.2 
                    19265 .................... #bit    SLRD = SLRCON.3 
                    19266 .................... #bit    SLRE = SLRCON.4 
                    19267 .................... #word CCPR3 = 0xF5F 
                    19268 .................... #byte CCP3CON = 0xF5D 
                    19269 .................... #bit    CCP3M0 = CCP3CON.0 
                    19270 .................... #bit    CCP3M1 = CCP3CON.1 
                    19271 .................... #bit    CCP3M2 = CCP3CON.2 
                    19272 .................... #bit    CCP3M3 = CCP3CON.3 
                    19273 .................... #bit    CCP3DC3B0 = CCP3CON.4 
                    19274 .................... #bit    CCP3DC3B1 = CCP3CON.5 
                    19275 .................... #bit    CCP3P3M0 = CCP3CON.6 
                    19276 .................... #bit    CCP3P3M1 = CCP3CON.7 
                    19277 .................... #byte PWM3CON = 0xF5C 
                    19278 .................... #bit    P3DC0 = PWM3CON.0 
                    19279 .................... #bit    P3DC1 = PWM3CON.1 
                    19280 .................... #bit    P3DC2 = PWM3CON.2 
                    19281 .................... #bit    P3DC3 = PWM3CON.3 
                    19282 .................... #bit    P3DC4 = PWM3CON.4 
                    19283 .................... #bit    P3DC5 = PWM3CON.5 
                    19284 .................... #bit    P3DC6 = PWM3CON.6 
                    19285 .................... #bit    P3RSEN = PWM3CON.7 
                    19286 .................... #byte ECCP3AS = 0xF5B 
                    19287 .................... #bit    P3SSBD0 = ECCP3AS.0 
                    19288 .................... #bit    P3SSBD1 = ECCP3AS.1 
                    19289 .................... #bit    P3SSAC0 = ECCP3AS.2 
                    19290 .................... #bit    P3SSAC1 = ECCP3AS.3 
                    19291 .................... #bit    CCP3AS0 = ECCP3AS.4 
                    19292 .................... #bit    CCP3AS1 = ECCP3AS.5 
                    19293 .................... #bit    CCP3AS2 = ECCP3AS.6 
                    19294 .................... #bit    CCP3ASE = ECCP3AS.7 
                    19295 .................... #byte PSTR3CON = 0xF5A 
                    19296 .................... #bit    STR3A = PSTR3CON.0 
                    19297 .................... #bit    STR3B = PSTR3CON.1 
                    19298 .................... #bit    STR3C = PSTR3CON.2 
                    19299 .................... #bit    STR3D = PSTR3CON.3 
                    19300 .................... #bit    STR3SYNC = PSTR3CON.4 
                    19301 .................... #word CCPR4 = 0xF59 
                    19302 .................... #byte CCP4CON = 0xF57 
                    19303 .................... #bit    CCP4M0 = CCP4CON.0 
                    19304 .................... #bit    CCP4M1 = CCP4CON.1 
                    19305 .................... #bit    CCP4M2 = CCP4CON.2 
                    19306 .................... #bit    CCP4M3 = CCP4CON.3 
                    19307 .................... #bit    CCP4DC4B0 = CCP4CON.4 
                    19308 .................... #bit    CCP4DC4B1 = CCP4CON.5 
                    19309 .................... #word CCPR5 = 0xF56 
                    19310 .................... #byte CCP5CON = 0xF54 
                    19311 .................... #bit    CCP5M0 = CCP5CON.0 
                    19312 .................... #bit    CCP5M1 = CCP5CON.1 
                    19313 .................... #bit    CCP5M2 = CCP5CON.2 
                    19314 .................... #bit    CCP5M3 = CCP5CON.3 
                    19315 .................... #bit    CCP5DC5B0 = CCP5CON.4 
                    19316 .................... #bit    CCP5DC5B1 = CCP5CON.5 
                    19317 .................... #byte TMR4 = 0xF53 
                    19318 .................... #byte PR4 = 0xF52 
                    19319 .................... #byte T4CON = 0xF51 
                    19320 .................... #bit    T4CKPS0 = T4CON.0 
                    19321 .................... #bit    T4CKPS1 = T4CON.1 
                    19322 .................... #bit    TMR4ON = T4CON.2 
                    19323 .................... #bit    T4OUTPS0 = T4CON.3 
                    19324 .................... #bit    T4OUTPS1 = T4CON.4 
                    19325 .................... #bit    T4OUTPS2 = T4CON.5 
                    19326 .................... #bit    T4OUTPS3 = T4CON.6 
                    19327 .................... #word TMR5 = 0xF50 
                    19328 .................... #byte T5CON = 0xF4E 
                    19329 .................... #bit    TMR5ON = T5CON.0 
                    19330 .................... #bit    T5RD16 = T5CON.1 
                    19331 .................... #bit    T5SYNC = T5CON.2 
                    19332 .................... #bit    T5SOSCEN = T5CON.3 
                    19333 .................... #bit    T5CKPS0 = T5CON.4 
                    19334 .................... #bit    T5CKPS1 = T5CON.5 
                    19335 .................... #bit    TMR5CS0 = T5CON.6 
                    19336 .................... #bit    TMR5CS1 = T5CON.7 
                    19337 .................... #byte T5GCON = 0xF4D 
                    19338 .................... #bit    T5GSS0 = T5GCON.0 
                    19339 .................... #bit    T5GSS1 = T5GCON.1 
                    19340 .................... #bit    T5GVAL = T5GCON.2 
                    19341 .................... #bit    T5GGO = T5GCON.3 
                    19342 .................... #bit    T5GSPM = T5GCON.4 
                    19343 .................... #bit    T5GTM = T5GCON.5 
                    19344 .................... #bit    T5GPOL = T5GCON.6 
                    19345 .................... #bit    TMR5GE = T5GCON.7 
                    19346 .................... #byte TMR6 = 0xF4C 
                    19347 .................... #byte PR6 = 0xF4B 
                    19348 .................... #byte T6CON = 0xF4A 
                    19349 .................... #bit    T6CKPS0 = T6CON.0 
                    19350 .................... #bit    T6CKPS1 = T6CON.1 
                    19351 .................... #bit    TMR6ON = T6CON.2 
                    19352 .................... #bit    T6OUTPS0 = T6CON.3 
                    19353 .................... #bit    T6OUTPS1 = T6CON.4 
                    19354 .................... #bit    T6OUTPS2 = T6CON.5 
                    19355 .................... #bit    T6OUTPS3 = T6CON.6 
                    19356 .................... #byte CCPTMRS0 = 0xF49 
                    19357 .................... #bit    C1TSEL0 = CCPTMRS0.0 
                    19358 .................... #bit    C1TSEL1 = CCPTMRS0.1 
                    19359 .................... #bit    C2TSEL0 = CCPTMRS0.3 
                    19360 .................... #bit    C2TSEL1 = CCPTMRS0.4 
                    19361 .................... #bit    C3TSEL0 = CCPTMRS0.6 
                    19362 .................... #bit    C3TSEL1 = CCPTMRS0.7 
                    19363 .................... #byte CCPTMRS1 = 0xF48 
                    19364 .................... #bit    C4TSEL0 = CCPTMRS1.0 
                    19365 .................... #bit    C4TSEL1 = CCPTMRS1.1 
                    19366 .................... #bit    C5TSEL0 = CCPTMRS1.2 
                    19367 .................... #bit    C5TSEL1 = CCPTMRS1.3 
                    19368 .................... #byte SRCON0 = 0xF47 
                    19369 .................... #bit    SRPR = SRCON0.0 
                    19370 .................... #bit    SRPS = SRCON0.1 
                    19371 .................... #bit    SRNQEN = SRCON0.2 
                    19372 .................... #bit    SRQEN = SRCON0.3 
                    19373 .................... #bit    SRCLK0 = SRCON0.4 
                    19374 .................... #bit    SRCLK1 = SRCON0.5 
                    19375 .................... #bit    SRCLK2 = SRCON0.6 
                    19376 .................... #bit    SRLEN = SRCON0.7 
                    19377 .................... #byte SRCON1 = 0xF46 
                    19378 .................... #bit    SRRC1E = SRCON1.0 
                    19379 .................... #bit    SRRC2E = SRCON1.1 
                    19380 .................... #bit    SRRCKE = SRCON1.2 
                    19381 .................... #bit    SRRPE = SRCON1.3 
                    19382 .................... #bit    SRSC1E = SRCON1.4 
                    19383 .................... #bit    SRSC2E = SRCON1.5 
                    19384 .................... #bit    SRSCKE = SRCON1.6 
                    19385 .................... #bit    SRSPE = SRCON1.7 
                    19386 .................... #word CTMUCON = 0xF45 
                    19387 .................... #byte CTMUICON = 0xF43 
                    19388 .................... #bit    IRNG0 = CTMUICON.0 
                    19389 .................... #bit    IRNG1 = CTMUICON.1 
                    19390 .................... #bit    ITRIM0 = CTMUICON.2 
                    19391 .................... #bit    ITRIM1 = CTMUICON.3 
                    19392 .................... #bit    ITRIM2 = CTMUICON.4 
                    19393 .................... #bit    ITRIM3 = CTMUICON.5 
                    19394 .................... #bit    ITRIM4 = CTMUICON.6 
                    19395 .................... #bit    ITRIM5 = CTMUICON.7 
                    19396 .................... #byte VREFCON0 = 0xF42 
                    19397 .................... #bit    FVRS0 = VREFCON0.4 
                    19398 .................... #bit    FVRS1 = VREFCON0.5 
                    19399 .................... #bit    FVRST = VREFCON0.6 
                    19400 .................... #bit    FVREN = VREFCON0.7 
                    19401 .................... #byte VREFCON1 = 0xF41 
                    19402 .................... #bit    DACNSS = VREFCON1.0 
                    19403 .................... #bit    DACPSS0 = VREFCON1.2 
                    19404 .................... #bit    DACPSS1 = VREFCON1.3 
                    19405 .................... #bit    DACOE = VREFCON1.5 
                    19406 .................... #bit    DACLPS = VREFCON1.6 
                    19407 .................... #bit    DACEN = VREFCON1.7 
                    19408 .................... #byte VREFCON2 = 0xF40 
                    19409 .................... #byte PMD0 = 0xF3F 
                    19410 .................... #bit    TMR1MD = PMD0.0 
                    19411 .................... #bit    TMR2MD = PMD0.1 
                    19412 .................... #bit    TMR3MD = PMD0.2 
                    19413 .................... #bit    TMR4MD = PMD0.3 
                    19414 .................... #bit    TMR5MD = PMD0.4 
                    19415 .................... #bit    TMR6MD = PMD0.5 
                    19416 .................... #bit    UART1MD = PMD0.6 
                    19417 .................... #bit    UART2MD = PMD0.7 
                    19418 .................... #byte PMD1 = 0xF3E 
                    19419 .................... #bit    CCP1MD = PMD1.0 
                    19420 .................... #bit    CCP2MD = PMD1.1 
                    19421 .................... #bit    CCP3MD = PMD1.2 
                    19422 .................... #bit    CCP4MD = PMD1.3 
                    19423 .................... #bit    CCP5MD = PMD1.4 
                    19424 .................... #bit    MSSP1MD = PMD1.6 
                    19425 .................... #bit    MSSP2MD = PMD1.7 
                    19426 .................... #byte PMD2 = 0xF3D 
                    19427 .................... #bit    ADCMD = PMD2.0 
                    19428 .................... #bit    CMP1MD = PMD2.1 
                    19429 .................... #bit    CMP2MD = PMD2.2 
                    19430 .................... #bit    CTMUMD = PMD2.3 
                    19431 .................... #byte ANSELE = 0xF3C 
                    19432 .................... #byte ANSELD = 0xF3B 
                    19433 .................... #byte ANSELC = 0xF3A 
                    19434 .................... #bit    ANSC2 = ANSELC.2 
                    19435 .................... #bit    ANSC3 = ANSELC.3 
                    19436 .................... #bit    ANSC4 = ANSELC.4 
                    19437 .................... #bit    ANSC5 = ANSELC.5 
                    19438 .................... #bit    ANSC6 = ANSELC.6 
                    19439 .................... #bit    ANSC7 = ANSELC.7 
                    19440 .................... #byte ANSELB = 0xF39 
                    19441 .................... #byte ANSELA = 0xF38 
                    19442 .................... #bit    ANSA0 = ANSELA.0 
                    19443 .................... #bit    ANSA1 = ANSELA.1 
                    19444 .................... #bit    ANSA2 = ANSELA.2 
                    19445 .................... #bit    ANSA3 = ANSELA.3 
                    19446 .................... #bit    ANSA5 = ANSELA.5 
                    19447 ....................  
                    19448 ....................  
                    19449 ....................  
                    19450 .................... /////////////////////////////////////////////////////////////////////////// 
                    19451 .................... ////                                                                   //// 
                    19452 .................... ////                           stdint.h                                //// 
                    19453 .................... ////                                                                   //// 
                    19454 .................... //// Standard integer definitions.                                     //// 
                    19455 .................... ////                                                                   //// 
                    19456 .................... /////////////////////////////////////////////////////////////////////////// 
                    19457 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    19458 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    19459 .................... //// compiler.  This source code may only be distributed to other      //// 
                    19460 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    19461 .................... //// or distribution is permitted without written permission.          //// 
                    19462 .................... //// Derivative programs created using this software in object code    //// 
                    19463 .................... //// form are not restricted in any way.                               //// 
                    19464 .................... /////////////////////////////////////////////////////////////////////////// 
                    19465 ....................  
                    19466 .................... #ifndef _STDINT 
                    19467 ....................  
                    19468 .................... #define _STDINT 
                    19469 ....................  
                    19470 .................... //////////// exact width 
                    19471 ....................  
                    19472 .................... typedef signed int8 int8_t; 
                    19473 .................... typedef unsigned int8 uint8_t; 
                    19474 .................... typedef signed int16 int16_t; 
                    19475 .................... typedef unsigned int16 uint16_t; 
                    19476 .................... typedef signed int32 int32_t; 
                    19477 .................... typedef unsigned int32 uint32_t; 
                    19478 ....................  
                    19479 .................... #if defined(__PCD__) 
                    19480 .................... //typedef signed int24 int24_t; 
                    19481 .................... //typedef unsigned int24 uint24_t; 
                    19482 .................... typedef signed int64 int64_t; 
                    19483 .................... typedef unsigned int64 uint64_t; 
                    19484 .................... #endif 
                    19485 ....................  
                    19486 .................... #define INT8_MAX  (128) 
                    19487 .................... #define INT8_MIN  (-127) 
                    19488 .................... #define UINT8_MAX (255) 
                    19489 ....................  
                    19490 .................... #define INT16_MAX  (32767) 
                    19491 .................... #define INT16_MIN  (-32768) 
                    19492 .................... #define UINT16_MAX (65535) 
                    19493 ....................  
                    19494 .................... #define INT32_MAX  (2147483647) 
                    19495 .................... #define INT32_MIN  (-2147483648) 
                    19496 .................... #define UINT32_MAX (4294967295) 
                    19497 ....................  
                    19498 .................... #if defined(__PCD__) 
                    19499 .................... //#define INT24_MAX  (8388607) 
                    19500 .................... //#define INT24_MIN  (-8388608) 
                    19501 .................... //#define UINT24_MAX (16777215) 
                    19502 ....................  
                    19503 .................... #define INT64_MAX  (9223372036854775807) 
                    19504 .................... #define INT64_MIN  (-9223372036854775808) 
                    19505 .................... #define UINT64_MAX (18446744073709551615) 
                    19506 .................... #endif 
                    19507 ....................  
                    19508 .................... ///////// minimum width 
                    19509 ....................  
                    19510 .................... typedef signed int8 int_least8_t; 
                    19511 .................... typedef unsigned int8 uint_least8_t; 
                    19512 .................... typedef signed int16 int_least16_t; 
                    19513 .................... typedef unsigned int16 uint_least16_t; 
                    19514 .................... typedef signed int32 int_least32_t; 
                    19515 .................... typedef unsigned int32 uint_least32_t; 
                    19516 ....................  
                    19517 .................... #if defined(__PCD__) 
                    19518 .................... //typedef signed int24 int_least24_t; 
                    19519 .................... //typedef unsigned int24 uint_least24_t; 
                    19520 .................... typedef signed int64 int_least64_t; 
                    19521 .................... typedef unsigned int64 uint_least64_t; 
                    19522 .................... #endif 
                    19523 ....................  
                    19524 .................... #define INT_LEAST8_MAX  (128) 
                    19525 .................... #define INT_LEAST8_MIN  (-127) 
                    19526 .................... #define UINT_LEAST8_MAX (255) 
                    19527 ....................  
                    19528 .................... #define INT_LEAST16_MAX  (32767) 
                    19529 .................... #define INT_LEAST16_MIN  (-32768) 
                    19530 .................... #define UINT_LEAST16_MAX (65535) 
                    19531 ....................  
                    19532 .................... #define INT_LEAST32_MAX  (2147483647) 
                    19533 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    19534 .................... #define UINT_LEAST32_MAX (4294967295) 
                    19535 ....................  
                    19536 .................... #if defined(__PCD__) 
                    19537 .................... //#define INT_LEAST24_MAX  (8388607) 
                    19538 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    19539 .................... //#define UINT_LEAST24_MAX (16777215) 
                    19540 ....................  
                    19541 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    19542 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    19543 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    19544 .................... #endif 
                    19545 ....................  
                    19546 .................... ///////// fastest width 
                    19547 ....................  
                    19548 .................... #if defined(__PCD__) 
                    19549 .................... typedef signed int16 int_fast8_t; 
                    19550 .................... typedef unsigned int16 uint_fast8_t; 
                    19551 .................... #define INT_FAST8_MAX  (32767) 
                    19552 .................... #define INT_FAST8_MIN  (-32768) 
                    19553 .................... #define UINT_FAST8_MAX (65535) 
                    19554 .................... typedef signed int16 int_fast16_t; 
                    19555 .................... typedef unsigned int16 uint_fast16_t; 
                    19556 .................... //typedef signed int24 int_fast24_t; 
                    19557 .................... //typedef unsigned int24 uint_fast24_t; 
                    19558 .................... typedef signed int64 int_fast64_t; 
                    19559 .................... typedef unsigned int64 uint_fast64_t; 
                    19560 .................... #else 
                    19561 .................... typedef signed int8 int_fast8_t; 
                    19562 .................... typedef unsigned int8 uint_fast8_t; 
                    19563 .................... #define INT_FAST8_MAX  (128) 
                    19564 .................... #define INT_FAST8_MIN  (-127) 
                    19565 .................... #define UINT_FAST8_MAX (255) 
                    19566 .................... typedef signed int16 int_fast16_t; 
                    19567 .................... typedef unsigned int16 uint_fast16_t; 
                    19568 .................... #endif 
                    19569 ....................  
                    19570 .................... typedef signed int32 int_fast32_t; 
                    19571 .................... typedef unsigned int32 uint_fast32_t; 
                    19572 ....................  
                    19573 .................... #define INT_FAST16_MAX  (32767) 
                    19574 .................... #define INT_FAST16_MIN  (-32768) 
                    19575 .................... #define UINT_FAST16_MAX (65535) 
                    19576 ....................  
                    19577 .................... #define INT_FAST32_MAX  (2147483647) 
                    19578 .................... #define INT_FAST32_MIN  (-2147483648) 
                    19579 .................... #define UINT_FAST32_MAX (4294967295) 
                    19580 ....................  
                    19581 .................... #if defined(__PCD__) 
                    19582 .................... //#define INT_FAST24_MAX  (8388607) 
                    19583 .................... //#define INT_FAST24_MIN  (-8388608) 
                    19584 .................... //#define UINT_FAST24_MAX (16777215) 
                    19585 ....................  
                    19586 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    19587 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    19588 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    19589 .................... #endif 
                    19590 ....................  
                    19591 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    19592 ....................  
                    19593 .................... /// TODO 
                    19594 ....................  
                    19595 .................... /// intptr_t uintptr_t 
                    19596 ....................  
                    19597 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    19598 ....................  
                    19599 ....................  
                    19600 .................... /////////// greatest width (OPTIONAL) 
                    19601 ....................  
                    19602 .................... /// TODO 
                    19603 ....................  
                    19604 .................... /// intmax_t uintmax_t 
                    19605 ....................  
                    19606 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    19607 ....................  
                    19608 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    19609 ....................  
                    19610 ....................  
                    19611 .................... #endif 
                    19612 ....................  
                    19613 ....................  
                    19614 ....................  
                    19615 ....................  
                    19616 ....................  
                    19617 ....................  
                    19618 ....................  
                    19619 ....................  
                    19620 ....................  
                    19621 ....................  
                    19622 ....................  
                    19623 ....................  
                    19624 ....................  
                    19625 ....................  
                    19626 ....................  
                    19627 ....................  
386A 0103           19628 MOVLB  3
386C 6B18           19629 CLRF   x18
                    19630 ....................  
386E 6B19           19631 CLRF   x19
                    19632 ....................  
3870 6BCE           19633 CLRF   xCE
                    19634 ....................  
3872 6BCF           19635 CLRF   xCF
                    19636 ....................  
3874 8A9D           19637 BSF    F9D.5
                    19638 ....................  
3876 0100           19639 MOVLB  0
3878 EF3F F01C      19640 GOTO   387E (RETURN)
                    19641 ....................  
                    19642 ....................  
                    19643 ....................  
                    19644 ....................  
                    19645 ....................  
                    19646 ....................  
                    19647 ....................  
3F82 0103           19648 MOVLB  3
3F84 5119           19649 MOVF   x19,W
3F86 2B19           19650 INCF   x19,F
3F88 6A03           19651 CLRF   03
3F8A 0F64           19652 ADDLW  64
3F8C 6EE9           19653 MOVWF  FE9
3F8E 0E02           19654 MOVLW  02
3F90 2003           19655 ADDWFC 03,W
3F92 6EEA           19656 MOVWF  FEA
3F94 CFEF F3E1      19657 MOVFF  FEF,3E1
                    19658 ....................  
                    19659 ....................  
3F98 5119           19660 MOVF   x19,W
3F9A 08B3           19661 SUBLW  B3
3F9C E201           19662 BC    3FA0
                    19663 ....................  
3F9E 6B19           19664 CLRF   x19
                    19665 ....................  
                    19666 ....................  
3FA0 C3E1 F001      19667 MOVFF  3E1,01
                    19668 ....................  
3FA4 0100           19669 MOVLB  0
3FA6 EFE4 F01F      19670 GOTO   3FC8 (RETURN)
                    19671 ....................  
                    19672 ....................  
                    19673 ....................  
559E 0EB4           19674 MOVLW  B4
55A0 80D8           19675 BSF    FD8.0
55A2 0103           19676 MOVLB  3
55A4 55CE           19677 SUBFWB xCE,W
55A6 0104           19678 MOVLB  4
55A8 6F33           19679 MOVWF  x33
                    19680 ....................  
                    19681 ....................  
55AA 5332           19682 MOVF   x32,F
55AC E103           19683 BNZ   55B4
55AE 5131           19684 MOVF   x31,W
55B0 5D33           19685 SUBWF  x33,W
55B2 E23D           19686 BC    562E
                    19687 ....................  
55B4 0E1A           19688 MOVLW  1A
55B6 0103           19689 MOVLB  3
55B8 25CE           19690 ADDWF  xCE,W
55BA 0104           19691 MOVLB  4
55BC 6F34           19692 MOVWF  x34
55BE 0E03           19693 MOVLW  03
55C0 6F35           19694 MOVWF  x35
55C2 B0D8           19695 BTFSC  FD8.0
55C4 2B35           19696 INCF   x35,F
55C6 C435 FFEA      19697 MOVFF  435,FEA
55CA C434 FFE9      19698 MOVFF  434,FE9
55CE C430 FFE2      19699 MOVFF  430,FE2
55D2 C42F FFE1      19700 MOVFF  42F,FE1
55D6 5133           19701 MOVF   x33,W
55D8 6E01           19702 MOVWF  01
55DA E004           19703 BZ    55E4
55DC CFE6 FFEE      19704 MOVFF  FE6,FEE
55E0 2E01           19705 DECFSZ 01,F
55E2 D7FC           19706 BRA    55DC
                    19707 ....................  
55E4 5133           19708 MOVF   x33,W
55E6 5F31           19709 SUBWF  x31,F
55E8 0E00           19710 MOVLW  00
55EA 5B32           19711 SUBWFB x32,F
                    19712 ....................  
55EC 5133           19713 MOVF   x33,W
55EE 252F           19714 ADDWF  x2F,W
55F0 6F34           19715 MOVWF  x34
55F2 0E00           19716 MOVLW  00
55F4 2130           19717 ADDWFC x30,W
55F6 6F35           19718 MOVWF  x35
55F8 0E03           19719 MOVLW  03
55FA 6EEA           19720 MOVWF  FEA
55FC 0E1A           19721 MOVLW  1A
55FE 6EE9           19722 MOVWF  FE9
5600 C435 FFE2      19723 MOVFF  435,FE2
5604 C434 FFE1      19724 MOVFF  434,FE1
5608 C432 F002      19725 MOVFF  432,02
560C C431 F001      19726 MOVFF  431,01
5610 5201           19727 MOVF   01,F
5612 E002           19728 BZ    5618
5614 2A02           19729 INCF   02,F
5616 D002           19730 BRA    561C
5618 5202           19731 MOVF   02,F
561A E006           19732 BZ    5628
561C CFE6 FFEE      19733 MOVFF  FE6,FEE
5620 2E01           19734 DECFSZ 01,F
5622 D7FC           19735 BRA    561C
5624 2E02           19736 DECFSZ 02,F
5626 D7FA           19737 BRA    561C
                    19738 ....................  
5628 C431 F3CE      19739 MOVFF  431,3CE
                    19740 ....................  
562C D024           19741 BRA    5676
                    19742 ....................  
562E 0E1A           19743 MOVLW  1A
5630 0103           19744 MOVLB  3
5632 25CE           19745 ADDWF  xCE,W
5634 0104           19746 MOVLB  4
5636 6F34           19747 MOVWF  x34
5638 0E03           19748 MOVLW  03
563A 6F35           19749 MOVWF  x35
563C B0D8           19750 BTFSC  FD8.0
563E 2B35           19751 INCF   x35,F
5640 C435 FFEA      19752 MOVFF  435,FEA
5644 C434 FFE9      19753 MOVFF  434,FE9
5648 C430 FFE2      19754 MOVFF  430,FE2
564C C42F FFE1      19755 MOVFF  42F,FE1
5650 C432 F002      19756 MOVFF  432,02
5654 C431 F001      19757 MOVFF  431,01
5658 5201           19758 MOVF   01,F
565A E002           19759 BZ    5660
565C 2A02           19760 INCF   02,F
565E D002           19761 BRA    5664
5660 5202           19762 MOVF   02,F
5662 E006           19763 BZ    5670
5664 CFE6 FFEE      19764 MOVFF  FE6,FEE
5668 2E01           19765 DECFSZ 01,F
566A D7FC           19766 BRA    5664
566C 2E02           19767 DECFSZ 02,F
566E D7FA           19768 BRA    5664
                    19769 ....................  
5670 5131           19770 MOVF   x31,W
5672 0103           19771 MOVLB  3
5674 27CE           19772 ADDWF  xCE,F
                    19773 ....................  
                    19774 ....................  
5676 0103           19775 MOVLB  3
5678 51CE           19776 MOVF   xCE,W
567A 08B4           19777 SUBLW  B4
567C E101           19778 BNZ   5680
                    19779 ....................  
567E 6BCE           19780 CLRF   xCE
                    19781 ....................  
                    19782 ....................  
5680 0100           19783 MOVLB  0
5682 EFFB F01F      19784 GOTO   3FF6 (RETURN)
                    19785 ....................  
                    19786 ....................  
                    19787 ....................  
                    19788 ....................  
                    19789 ....................  
                    19790 ....................  
                    19791 ....................  
                    19792 ....................  
                    19793 ....................  
                    19794 ....................  
3FAA 0103           19795 MOVLB  3
3FAC 5119           19796 MOVF   x19,W
3FAE 5D18           19797 SUBWF  x18,W
3FB0 E103           19798 BNZ   3FB8
                    19799 ....................  
3FB2 0E00           19800 MOVLW  00
3FB4 6E01           19801 MOVWF  01
3FB6 D011           19802 BRA    3FDA
                    19803 ....................  
                    19804 ....................  
3FB8 C3DE F003      19805 MOVFF  3DE,03
3FBC C3DD F3DF      19806 MOVFF  3DD,3DF
3FC0 C3DE F3E0      19807 MOVFF  3DE,3E0
3FC4 0100           19808 MOVLB  0
3FC6 D7DD           19809 BRA    3F82
3FC8 C3E0 FFEA      19810 MOVFF  3E0,FEA
3FCC C3DF FFE9      19811 MOVFF  3DF,FE9
3FD0 C001 FFEF      19812 MOVFF  01,FEF
                    19813 ....................  
3FD4 0E01           19814 MOVLW  01
3FD6 6E01           19815 MOVWF  01
3FD8 0103           19816 MOVLB  3
                    19817 ....................  
3FDA 0100           19818 MOVLB  0
3FDC EFC8 F029      19819 GOTO   5390 (RETURN)
                    19820 ....................  
                    19821 ....................  
                    19822 ....................  
3FE0 C42D F430      19823 MOVFF  42D,430
3FE4 C42C F42F      19824 MOVFF  42C,42F
3FE8 0104           19825 MOVLB  4
3FEA 6B32           19826 CLRF   x32
3FEC C42E F431      19827 MOVFF  42E,431
3FF0 0100           19828 MOVLB  0
3FF2 EFCF F02A      19829 GOTO   559E
                    19830 ....................  
3FF6 889D           19831 BSF    F9D.4
                    19832 ....................  
                    19833 ....................  
                    19834 ....................  
                    19835 ....................  
3FF8 EF5B F02B      19836 GOTO   56B6 (RETURN)
                    19837 ....................  
                    19838 ....................  
                    19839 ....................  
                    19840 ....................  
                    19841 ....................  
                    19842 ....................  
                    19843 ....................  
                    19844 ....................  
                    19845 ....................  
26A2 0103           19846 MOVLB  3
26A4 5118           19847 MOVF   x18,W
26A6 2B18           19848 INCF   x18,F
26A8 6A03           19849 CLRF   03
26AA 0F64           19850 ADDLW  64
26AC 6EE9           19851 MOVWF  FE9
26AE 0E02           19852 MOVLW  02
26B0 2003           19853 ADDWFC 03,W
26B2 6EEA           19854 MOVWF  FEA
26B4 CFAE FFEF      19855 MOVFF  FAE,FEF
                    19856 ....................  
26B8 5118           19857 MOVF   x18,W
26BA 08B4           19858 SUBLW  B4
26BC E101           19859 BNZ   26C0
                    19860 ....................  
26BE 6B18           19861 CLRF   x18
                    19862 ....................  
                    19863 ....................  
26C0 0100           19864 MOVLB  0
26C2 D7E9           19865 BRA    2696
                    19866 ....................  
26C4 BA9E           19867 BTFSC  F9E.5
26C6 D7ED           19868 BRA    26A2
                    19869 ....................  
26C8 8A9D           19870 BSF    F9D.5
                    19871 ....................  
                    19872 ....................  
26CA 9A9E           19873 BCF    F9E.5
26CC EF3C F010      19874 GOTO   2078
                    19875 ....................  
                    19876 ....................  
                    19877 ....................  
                    19878 ....................  
26D0 0103           19879 MOVLB  3
26D2 51CE           19880 MOVF   xCE,W
26D4 5DCF           19881 SUBWF  xCF,W
26D6 E00F           19882 BZ    26F6
                    19883 ....................  
26D8 51CF           19884 MOVF   xCF,W
26DA 2BCF           19885 INCF   xCF,F
26DC 6A03           19886 CLRF   03
26DE 0F1A           19887 ADDLW  1A
26E0 6EE9           19888 MOVWF  FE9
26E2 0E03           19889 MOVLW  03
26E4 2003           19890 ADDWFC 03,W
26E6 6EEA           19891 MOVWF  FEA
26E8 CFEF FFAD      19892 MOVFF  FEF,FAD
                    19893 ....................  
26EC 51CF           19894 MOVF   xCF,W
26EE 08B4           19895 SUBLW  B4
26F0 E101           19896 BNZ   26F4
                    19897 ....................  
26F2 6BCF           19898 CLRF   xCF
                    19899 ....................  
                    19900 ....................  
26F4 D001           19901 BRA    26F8
                    19902 ....................  
26F6 989D           19903 BCF    F9D.4
                    19904 ....................  
                    19905 ....................  
                    19906 ....................  
26F8 989E           19907 BCF    F9E.4
26FA 0100           19908 MOVLB  0
26FC EF3C F010      19909 GOTO   2078
                    19910 ....................  
                    19911 ....................  
                    19912 ....................  
                    19913 ....................  
                    19914 ....................  
2696 A2AB           19915 BTFSS  FAB.1
2698 D002           19916 BRA    269E
                    19917 ....................  
269A 98AB           19918 BCF    FAB.4
                    19919 ....................  
269C 88AB           19920 BSF    FAB.4
                    19921 ....................  
                    19922 ....................  
269E EF62 F013      19923 GOTO   26C4 (RETURN)
                    19924 ....................  
                    19925 ....................  
                    19926 ....................  
                    19927 ....................  
                    19928 ....................  
                    19929 ....................  
                    19930 ....................  
                    19931 ....................  
                    19932 ....................  
                    19933 .................... #include <18F45K22.h> 
                    19934 .................... //////// Standard Header file for the PIC18F45K22 device //////////////// 
                    19935 .................... #device PIC18F45K22 
                    20560 .................... #list 
                    20561 ....................  
                    20562 .................... #device adc=10 
                    20563 .................... #device pass_strings=in_ram 
                    20564 ....................  
                    20565 .................... #define LOADER_END 0x1FFF 
                    20566 .................... #include <boot.h> 
                    20567 .................... #undef LOADER_END 
                    20568 .................... #define FLASH_SIZE getenv("FLASH_ERASE_SIZE") 
                    20569 .................... #define LOADER_END   0x1FFF 
                    20570 .................... #define LOADER_SIZE  0x3FF 
                    20571 ....................  
                    20572 .................... #ifndef _bootloader 
                    20573 .................... #build(reset=LOADER_END+1, interrupt=LOADER_END+9) 
                    20574 ....................  
                    20575 .................... /* when in operational software, keep out of the bootloader sections */ 
                    20576 .................... #org 0, 0xfff {} 
                    20577 .................... #org 0x1000, 0x1ffe {} 
                    20578 ....................  
                    20579 .................... #else 
                    20580 ....................  
                    20581 .................... /* when in the bootloader, keep out of the operational sections */ 
                    20582 .................... #org 0x2000, 0x7ffe {} 
                    20583 ....................  
                    20584 .................... #endif 
                    20585 ....................  
                    20586 ....................  
                    20587 .................... #FUSES NOWDT                   //No Watch Dog Timer 
                    20588 .................... #FUSES WDT128                  //Watch Dog Timer uses 1:128 Postscale 
                    20589 .................... #FUSES INTRC_IO                //Internal RC Osc, no CLKOUT 
                    20590 .................... #FUSES NOBROWNOUT              //No brownout reset 
                    20591 .................... #FUSES WDT_SW                  //No Watch Dog Timer, enabled in Software 
                    20592 .................... #FUSES NOLVP                   //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
                    20593 .................... #FUSES NOPUT 
                    20594 .................... #FUSES NOXINST                 //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
                    20595 ....................  
                    20596 .................... #use delay(clock=64000000) 
                    20597 .................... #use rs232(baud=921600,xmit=PIN_C6,rcv=PIN_C7,ERRORS) 
                    20598 .................... #USE TIMER(TIMER=1,TICK=1us,BITS=32,NOISR) 
                    20599 .................... #use spi(DO=PIN_A4, CLK=PIN_A3, ENABLE=PIN_A2, ENABLE_ACTIVE=0, DATA_HOLD=20, BITS=16) 
                    20600 ....................  
                    20601 .................... #opt 9 
                    20602 ....................  
                    20603 .................... #use fast_io(a) 
                    20604 .................... #use fast_io(b) 
                    20605 .................... #use fast_io(c) 
                    20606 .................... #use fast_io(d) 
                    20607 .................... #use fast_io(e) 
                    20608 ....................  
                    20609 .................... #define safe_write_program_memory(address, pointer, size) \ 
                    20610 ....................   do { disable_interrupts(GLOBAL); write_program_memory(address, pointer, size); enable_interrupts(GLOBAL); delay_us(1000); } while (0) 
                    20611 ....................  
                    20612 ....................  
                    20613 ....................  
                    20614 ....................  
                    20615 .................... /////////////////////////////////////////////////////////////////////////// 
                    20616 .................... ////                                                                   //// 
                    20617 .................... ////                           stdint.h                                //// 
                    20618 .................... ////                                                                   //// 
                    20619 .................... //// Standard integer definitions.                                     //// 
                    20620 .................... ////                                                                   //// 
                    20621 .................... /////////////////////////////////////////////////////////////////////////// 
                    20622 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    20623 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    20624 .................... //// compiler.  This source code may only be distributed to other      //// 
                    20625 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    20626 .................... //// or distribution is permitted without written permission.          //// 
                    20627 .................... //// Derivative programs created using this software in object code    //// 
                    20628 .................... //// form are not restricted in any way.                               //// 
                    20629 .................... /////////////////////////////////////////////////////////////////////////// 
                    20630 ....................  
                    20631 .................... #ifndef _STDINT 
                    20632 ....................  
                    20633 .................... #define _STDINT 
                    20634 ....................  
                    20635 .................... //////////// exact width 
                    20636 ....................  
                    20637 .................... typedef signed int8 int8_t; 
                    20638 .................... typedef unsigned int8 uint8_t; 
                    20639 .................... typedef signed int16 int16_t; 
                    20640 .................... typedef unsigned int16 uint16_t; 
                    20641 .................... typedef signed int32 int32_t; 
                    20642 .................... typedef unsigned int32 uint32_t; 
                    20643 ....................  
                    20644 .................... #if defined(__PCD__) 
                    20645 .................... //typedef signed int24 int24_t; 
                    20646 .................... //typedef unsigned int24 uint24_t; 
                    20647 .................... typedef signed int64 int64_t; 
                    20648 .................... typedef unsigned int64 uint64_t; 
                    20649 .................... #endif 
                    20650 ....................  
                    20651 .................... #define INT8_MAX  (128) 
                    20652 .................... #define INT8_MIN  (-127) 
                    20653 .................... #define UINT8_MAX (255) 
                    20654 ....................  
                    20655 .................... #define INT16_MAX  (32767) 
                    20656 .................... #define INT16_MIN  (-32768) 
                    20657 .................... #define UINT16_MAX (65535) 
                    20658 ....................  
                    20659 .................... #define INT32_MAX  (2147483647) 
                    20660 .................... #define INT32_MIN  (-2147483648) 
                    20661 .................... #define UINT32_MAX (4294967295) 
                    20662 ....................  
                    20663 .................... #if defined(__PCD__) 
                    20664 .................... //#define INT24_MAX  (8388607) 
                    20665 .................... //#define INT24_MIN  (-8388608) 
                    20666 .................... //#define UINT24_MAX (16777215) 
                    20667 ....................  
                    20668 .................... #define INT64_MAX  (9223372036854775807) 
                    20669 .................... #define INT64_MIN  (-9223372036854775808) 
                    20670 .................... #define UINT64_MAX (18446744073709551615) 
                    20671 .................... #endif 
                    20672 ....................  
                    20673 .................... ///////// minimum width 
                    20674 ....................  
                    20675 .................... typedef signed int8 int_least8_t; 
                    20676 .................... typedef unsigned int8 uint_least8_t; 
                    20677 .................... typedef signed int16 int_least16_t; 
                    20678 .................... typedef unsigned int16 uint_least16_t; 
                    20679 .................... typedef signed int32 int_least32_t; 
                    20680 .................... typedef unsigned int32 uint_least32_t; 
                    20681 ....................  
                    20682 .................... #if defined(__PCD__) 
                    20683 .................... //typedef signed int24 int_least24_t; 
                    20684 .................... //typedef unsigned int24 uint_least24_t; 
                    20685 .................... typedef signed int64 int_least64_t; 
                    20686 .................... typedef unsigned int64 uint_least64_t; 
                    20687 .................... #endif 
                    20688 ....................  
                    20689 .................... #define INT_LEAST8_MAX  (128) 
                    20690 .................... #define INT_LEAST8_MIN  (-127) 
                    20691 .................... #define UINT_LEAST8_MAX (255) 
                    20692 ....................  
                    20693 .................... #define INT_LEAST16_MAX  (32767) 
                    20694 .................... #define INT_LEAST16_MIN  (-32768) 
                    20695 .................... #define UINT_LEAST16_MAX (65535) 
                    20696 ....................  
                    20697 .................... #define INT_LEAST32_MAX  (2147483647) 
                    20698 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    20699 .................... #define UINT_LEAST32_MAX (4294967295) 
                    20700 ....................  
                    20701 .................... #if defined(__PCD__) 
                    20702 .................... //#define INT_LEAST24_MAX  (8388607) 
                    20703 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    20704 .................... //#define UINT_LEAST24_MAX (16777215) 
                    20705 ....................  
                    20706 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    20707 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    20708 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    20709 .................... #endif 
                    20710 ....................  
                    20711 .................... ///////// fastest width 
                    20712 ....................  
                    20713 .................... #if defined(__PCD__) 
                    20714 .................... typedef signed int16 int_fast8_t; 
                    20715 .................... typedef unsigned int16 uint_fast8_t; 
                    20716 .................... #define INT_FAST8_MAX  (32767) 
                    20717 .................... #define INT_FAST8_MIN  (-32768) 
                    20718 .................... #define UINT_FAST8_MAX (65535) 
                    20719 .................... typedef signed int16 int_fast16_t; 
                    20720 .................... typedef unsigned int16 uint_fast16_t; 
                    20721 .................... //typedef signed int24 int_fast24_t; 
                    20722 .................... //typedef unsigned int24 uint_fast24_t; 
                    20723 .................... typedef signed int64 int_fast64_t; 
                    20724 .................... typedef unsigned int64 uint_fast64_t; 
                    20725 .................... #else 
                    20726 .................... typedef signed int8 int_fast8_t; 
                    20727 .................... typedef unsigned int8 uint_fast8_t; 
                    20728 .................... #define INT_FAST8_MAX  (128) 
                    20729 .................... #define INT_FAST8_MIN  (-127) 
                    20730 .................... #define UINT_FAST8_MAX (255) 
                    20731 .................... typedef signed int16 int_fast16_t; 
                    20732 .................... typedef unsigned int16 uint_fast16_t; 
                    20733 .................... #endif 
                    20734 ....................  
                    20735 .................... typedef signed int32 int_fast32_t; 
                    20736 .................... typedef unsigned int32 uint_fast32_t; 
                    20737 ....................  
                    20738 .................... #define INT_FAST16_MAX  (32767) 
                    20739 .................... #define INT_FAST16_MIN  (-32768) 
                    20740 .................... #define UINT_FAST16_MAX (65535) 
                    20741 ....................  
                    20742 .................... #define INT_FAST32_MAX  (2147483647) 
                    20743 .................... #define INT_FAST32_MIN  (-2147483648) 
                    20744 .................... #define UINT_FAST32_MAX (4294967295) 
                    20745 ....................  
                    20746 .................... #if defined(__PCD__) 
                    20747 .................... //#define INT_FAST24_MAX  (8388607) 
                    20748 .................... //#define INT_FAST24_MIN  (-8388608) 
                    20749 .................... //#define UINT_FAST24_MAX (16777215) 
                    20750 ....................  
                    20751 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    20752 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    20753 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    20754 .................... #endif 
                    20755 ....................  
                    20756 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    20757 ....................  
                    20758 .................... /// TODO 
                    20759 ....................  
                    20760 .................... /// intptr_t uintptr_t 
                    20761 ....................  
                    20762 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    20763 ....................  
                    20764 ....................  
                    20765 .................... /////////// greatest width (OPTIONAL) 
                    20766 ....................  
                    20767 .................... /// TODO 
                    20768 ....................  
                    20769 .................... /// intmax_t uintmax_t 
                    20770 ....................  
                    20771 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    20772 ....................  
                    20773 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    20774 ....................  
                    20775 ....................  
                    20776 .................... #endif 
                    20777 ....................  
                    20778 ....................  
                    20779 ....................  
                    20780 .................... /* 
                    20781 ....................  * ad5312.h 
                    20782 ....................  * 
                    20783 ....................  *  Created on: Oct 13, 2016 
                    20784 ....................  *      Author: asaf 
                    20785 ....................  */ 
                    20786 ....................  
                    20787 .................... #ifndef AD5312_H_ 
                    20788 .................... #define AD5312_H_ 
                    20789 ....................  
                    20790 .................... enum { 
                    20791 .................... 	DAC_SELECT_BIT = 15, 
                    20792 .................... 	REF_BUF_BIT = 14, 
                    20793 .................... 	PD1_BIT = 13, 
                    20794 .................... 	PD2_BIT = 12, 
                    20795 .................... 	PD_ARR_START_BIT = PD2_BIT, 
                    20796 .................... }; 
                    20797 ....................  
                    20798 .................... enum { 
                    20799 .................... 	DAC_A = 0, 
                    20800 .................... 	DAC_B = 1, 
                    20801 .................... }; 
                    20802 ....................  
                    20803 .................... enum { 
                    20804 .................... 	REF_UNBUFFERED = 0, 
                    20805 .................... 	REF_BUFFERED = 1, 
                    20806 .................... }; 
                    20807 ....................  
                    20808 .................... /* Power Down Modes */ 
                    20809 .................... enum { 
                    20810 .................... 	PD_NORMAL = 0, 
                    20811 .................... 	PD_1K_TO_GND = 1, 
                    20812 .................... 	PD_100K_TO_GND = 2, 
                    20813 .................... 	PD_HIGH_IMPEDANCE_OUTPUT = 3, 
                    20814 .................... }; 
                    20815 ....................  
                    20816 .................... enum { 
                    20817 .................... 	VREF_FULL_SCALE = 5000, /* mV */ 
                    20818 .................... 	DAC_PRECISION = 1024 , /* bits */ 
                    20819 .................... }; 
                    20820 ....................  
                    20821 .................... #INLINE 
                    20822 .................... void ad5312_setVout(int dac, uint16_t mV); 
                    20823 .................... void ad5312_init(); 
                    20824 .................... #INLINE 
                    20825 .................... void ad5312_latch(); 
                    20826 ....................  
                    20827 .................... #endif /* AD5312_H_ */ 
                    20828 ....................  
                    20829 ....................  
                    20830 .................... /* 
                    20831 ....................  * gpio.h 
                    20832 ....................  * 
                    20833 ....................  *  Created on: Mar 8, 2017 
                    20834 ....................  *      Author: asafe 
                    20835 ....................  */ 
                    20836 ....................  
                    20837 .................... #ifndef INCLUDE_GPIO_H_ 
                    20838 .................... #define INCLUDE_GPIO_H_ 
                    20839 ....................  
                    20840 .................... #include <stdint.h> 
                    20841 .................... /////////////////////////////////////////////////////////////////////////// 
                    20842 .................... ////                                                                   //// 
                    20843 .................... ////                           stdint.h                                //// 
                    20844 .................... ////                                                                   //// 
                    20845 .................... //// Standard integer definitions.                                     //// 
                    20846 .................... ////                                                                   //// 
                    20847 .................... /////////////////////////////////////////////////////////////////////////// 
                    20848 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    20849 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    20850 .................... //// compiler.  This source code may only be distributed to other      //// 
                    20851 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    20852 .................... //// or distribution is permitted without written permission.          //// 
                    20853 .................... //// Derivative programs created using this software in object code    //// 
                    20854 .................... //// form are not restricted in any way.                               //// 
                    20855 .................... /////////////////////////////////////////////////////////////////////////// 
                    20856 ....................  
                    20857 .................... #ifndef _STDINT 
                    20858 ....................  
                    20859 .................... #define _STDINT 
                    20860 ....................  
                    20861 .................... //////////// exact width 
                    20862 ....................  
                    20863 .................... typedef signed int8 int8_t; 
                    20864 .................... typedef unsigned int8 uint8_t; 
                    20865 .................... typedef signed int16 int16_t; 
                    20866 .................... typedef unsigned int16 uint16_t; 
                    20867 .................... typedef signed int32 int32_t; 
                    20868 .................... typedef unsigned int32 uint32_t; 
                    20869 ....................  
                    20870 .................... #if defined(__PCD__) 
                    20871 .................... //typedef signed int24 int24_t; 
                    20872 .................... //typedef unsigned int24 uint24_t; 
                    20873 .................... typedef signed int64 int64_t; 
                    20874 .................... typedef unsigned int64 uint64_t; 
                    20875 .................... #endif 
                    20876 ....................  
                    20877 .................... #define INT8_MAX  (128) 
                    20878 .................... #define INT8_MIN  (-127) 
                    20879 .................... #define UINT8_MAX (255) 
                    20880 ....................  
                    20881 .................... #define INT16_MAX  (32767) 
                    20882 .................... #define INT16_MIN  (-32768) 
                    20883 .................... #define UINT16_MAX (65535) 
                    20884 ....................  
                    20885 .................... #define INT32_MAX  (2147483647) 
                    20886 .................... #define INT32_MIN  (-2147483648) 
                    20887 .................... #define UINT32_MAX (4294967295) 
                    20888 ....................  
                    20889 .................... #if defined(__PCD__) 
                    20890 .................... //#define INT24_MAX  (8388607) 
                    20891 .................... //#define INT24_MIN  (-8388608) 
                    20892 .................... //#define UINT24_MAX (16777215) 
                    20893 ....................  
                    20894 .................... #define INT64_MAX  (9223372036854775807) 
                    20895 .................... #define INT64_MIN  (-9223372036854775808) 
                    20896 .................... #define UINT64_MAX (18446744073709551615) 
                    20897 .................... #endif 
                    20898 ....................  
                    20899 .................... ///////// minimum width 
                    20900 ....................  
                    20901 .................... typedef signed int8 int_least8_t; 
                    20902 .................... typedef unsigned int8 uint_least8_t; 
                    20903 .................... typedef signed int16 int_least16_t; 
                    20904 .................... typedef unsigned int16 uint_least16_t; 
                    20905 .................... typedef signed int32 int_least32_t; 
                    20906 .................... typedef unsigned int32 uint_least32_t; 
                    20907 ....................  
                    20908 .................... #if defined(__PCD__) 
                    20909 .................... //typedef signed int24 int_least24_t; 
                    20910 .................... //typedef unsigned int24 uint_least24_t; 
                    20911 .................... typedef signed int64 int_least64_t; 
                    20912 .................... typedef unsigned int64 uint_least64_t; 
                    20913 .................... #endif 
                    20914 ....................  
                    20915 .................... #define INT_LEAST8_MAX  (128) 
                    20916 .................... #define INT_LEAST8_MIN  (-127) 
                    20917 .................... #define UINT_LEAST8_MAX (255) 
                    20918 ....................  
                    20919 .................... #define INT_LEAST16_MAX  (32767) 
                    20920 .................... #define INT_LEAST16_MIN  (-32768) 
                    20921 .................... #define UINT_LEAST16_MAX (65535) 
                    20922 ....................  
                    20923 .................... #define INT_LEAST32_MAX  (2147483647) 
                    20924 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    20925 .................... #define UINT_LEAST32_MAX (4294967295) 
                    20926 ....................  
                    20927 .................... #if defined(__PCD__) 
                    20928 .................... //#define INT_LEAST24_MAX  (8388607) 
                    20929 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    20930 .................... //#define UINT_LEAST24_MAX (16777215) 
                    20931 ....................  
                    20932 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    20933 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    20934 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    20935 .................... #endif 
                    20936 ....................  
                    20937 .................... ///////// fastest width 
                    20938 ....................  
                    20939 .................... #if defined(__PCD__) 
                    20940 .................... typedef signed int16 int_fast8_t; 
                    20941 .................... typedef unsigned int16 uint_fast8_t; 
                    20942 .................... #define INT_FAST8_MAX  (32767) 
                    20943 .................... #define INT_FAST8_MIN  (-32768) 
                    20944 .................... #define UINT_FAST8_MAX (65535) 
                    20945 .................... typedef signed int16 int_fast16_t; 
                    20946 .................... typedef unsigned int16 uint_fast16_t; 
                    20947 .................... //typedef signed int24 int_fast24_t; 
                    20948 .................... //typedef unsigned int24 uint_fast24_t; 
                    20949 .................... typedef signed int64 int_fast64_t; 
                    20950 .................... typedef unsigned int64 uint_fast64_t; 
                    20951 .................... #else 
                    20952 .................... typedef signed int8 int_fast8_t; 
                    20953 .................... typedef unsigned int8 uint_fast8_t; 
                    20954 .................... #define INT_FAST8_MAX  (128) 
                    20955 .................... #define INT_FAST8_MIN  (-127) 
                    20956 .................... #define UINT_FAST8_MAX (255) 
                    20957 .................... typedef signed int16 int_fast16_t; 
                    20958 .................... typedef unsigned int16 uint_fast16_t; 
                    20959 .................... #endif 
                    20960 ....................  
                    20961 .................... typedef signed int32 int_fast32_t; 
                    20962 .................... typedef unsigned int32 uint_fast32_t; 
                    20963 ....................  
                    20964 .................... #define INT_FAST16_MAX  (32767) 
                    20965 .................... #define INT_FAST16_MIN  (-32768) 
                    20966 .................... #define UINT_FAST16_MAX (65535) 
                    20967 ....................  
                    20968 .................... #define INT_FAST32_MAX  (2147483647) 
                    20969 .................... #define INT_FAST32_MIN  (-2147483648) 
                    20970 .................... #define UINT_FAST32_MAX (4294967295) 
                    20971 ....................  
                    20972 .................... #if defined(__PCD__) 
                    20973 .................... //#define INT_FAST24_MAX  (8388607) 
                    20974 .................... //#define INT_FAST24_MIN  (-8388608) 
                    20975 .................... //#define UINT_FAST24_MAX (16777215) 
                    20976 ....................  
                    20977 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    20978 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    20979 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    20980 .................... #endif 
                    20981 ....................  
                    20982 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    20983 ....................  
                    20984 .................... /// TODO 
                    20985 ....................  
                    20986 .................... /// intptr_t uintptr_t 
                    20987 ....................  
                    20988 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    20989 ....................  
                    20990 ....................  
                    20991 .................... /////////// greatest width (OPTIONAL) 
                    20992 ....................  
                    20993 .................... /// TODO 
                    20994 ....................  
                    20995 .................... /// intmax_t uintmax_t 
                    20996 ....................  
                    20997 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    20998 ....................  
                    20999 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    21000 ....................  
                    21001 ....................  
                    21002 .................... #endif 
                    21003 ....................  
                    21004 .................... #include "gpio.h" 
                    21005 .................... /* 
                    21006 ....................  * gpio.h 
                    21007 ....................  * 
                    21008 ....................  *  Created on: Mar 8, 2017 
                    21009 ....................  *      Author: asafe 
                    21010 ....................  */ 
                    21011 ....................  
                    21012 .................... #ifndef INCLUDE_GPIO_H_ 
                    21013 .................... #define INCLUDE_GPIO_H_ 
                    21014 ....................  
                    21015 .................... #include <stdint.h> 
                    21016 .................... #include "gpio.h" 
                    21017 ....................  
                    21018 .................... enum { 
                    21019 ....................     GPIO_DIR_IN     = 0, 
                    21020 ....................     GPIO_DIR_OUT    = 1, 
                    21021 ....................     GPIO_ANALOG     = 2, 
                    21022 ....................  
                    21023 ....................     GPIO_VALUE_LOW = 0, 
                    21024 ....................     GPIO_VALUE_HIGH = 1, 
                    21025 .................... }; 
                    21026 ....................  
                    21027 .................... typedef struct gpio_st { 
                    21028 ....................     uint32_t pin; 
                    21029 ....................     int dir; 
                    21030 ....................     char *gpio_name; 
                    21031 .................... } st_gpio; 
                    21032 ....................  
                    21033 .................... /* this is the deceleration that a developer will use to access a specific GPIO */ 
                    21034 .................... /* this list should be identical in order to the <Bold> st_gpio gpios [] </Bold> list in gpio.c */ 
                    21035 ....................  
                    21036 .................... enum { 
                    21037 ....................     GPIO_DAC_CLK        = 0, 
                    21038 ....................     GPIO_DAC_CS         = 1, 
                    21039 ....................     GPIO_DAC_DATA_OUT   = 2, 
                    21040 ....................     GPIO_DAC_LDAC       = 3, 
                    21041 ....................  
                    21042 ....................     GPIO_LED            = 4, 
                    21043 ....................  
                    21044 ....................     GPIO_PA1_ISENSE     = 5, 
                    21045 ....................     GPIO_PA2_ISENSE     = 6, 
                    21046 ....................     GPIO_FFWR           = 7, 
                    21047 ....................     GPIO_RREV           = 8, 
                    21048 ....................     GPIO_RF_INDET       = 9, 
                    21049 ....................     GPIO_TMP            = 10, 
                    21050 ....................     GPIO_PREAMP_DET     = 11, 
                    21051 ....................  
                    21052 ....................     GPIO_ANT_SEL        = 12, 
                    21053 ....................     GPIO_ANT_SELN       = 13, 
                    21054 ....................     GPIO_TX_RX_SEL      = 14, 
                    21055 ....................     GPIO_TX_RX_ENV      = 15, 
                    21056 ....................     GPIO_TX_RX_ENVM     = 16, 
                    21057 ....................  
                    21058 ....................     GPIO_5V_EN          = 17, 
                    21059 ....................  
                    21060 .................... }; 
                    21061 ....................  
                    21062 .................... /* Inputs */ 
                    21063 .................... enum { 
                    21064 ....................  
                    21065 .................... }; 
                    21066 ....................  
                    21067 ....................  
                    21068 .................... void gpio_init(); 
                    21069 .................... int gpio_toggle(int gpio); 
                    21070 .................... #INLINE 
                    21071 .................... void gpio_set(int gpio); 
                    21072 .................... void gpio_clear(int gpio); 
                    21073 .................... #INLINE 
                    21074 .................... void gpio_set_value(int gpio, int value); 
                    21075 .................... int gpio_get(int gpio); 
                    21076 .................... #INLINE 
                    21077 .................... uint32_t gpio_get_analog(int gpio); 
                    21078 ....................  
                    21079 .................... #endif /* INCLUDE_GPIO_H_ */ 
                    21080 ....................  
                    21081 ....................  
                    21082 .................... enum { 
                    21083 ....................     GPIO_DIR_IN     = 0, 
                    21084 ....................     GPIO_DIR_OUT    = 1, 
                    21085 ....................     GPIO_ANALOG     = 2, 
                    21086 ....................  
                    21087 ....................     GPIO_VALUE_LOW = 0, 
                    21088 ....................     GPIO_VALUE_HIGH = 1, 
                    21089 .................... }; 
                    21090 ....................  
                    21091 .................... typedef struct gpio_st { 
                    21092 ....................     uint32_t pin; 
                    21093 ....................     int dir; 
                    21094 ....................     char *gpio_name; 
                    21095 .................... } st_gpio; 
                    21096 ....................  
                    21097 .................... /* this is the deceleration that a developer will use to access a specific GPIO */ 
                    21098 .................... /* this list should be identical in order to the <Bold> st_gpio gpios [] </Bold> list in gpio.c */ 
                    21099 ....................  
                    21100 .................... enum { 
                    21101 ....................     GPIO_DAC_CLK        = 0, 
                    21102 ....................     GPIO_DAC_CS         = 1, 
                    21103 ....................     GPIO_DAC_DATA_OUT   = 2, 
                    21104 ....................     GPIO_DAC_LDAC       = 3, 
                    21105 ....................  
                    21106 ....................     GPIO_LED            = 4, 
                    21107 ....................  
                    21108 ....................     GPIO_PA1_ISENSE     = 5, 
                    21109 ....................     GPIO_PA2_ISENSE     = 6, 
                    21110 ....................     GPIO_FFWR           = 7, 
                    21111 ....................     GPIO_RREV           = 8, 
                    21112 ....................     GPIO_RF_INDET       = 9, 
                    21113 ....................     GPIO_TMP            = 10, 
                    21114 ....................     GPIO_PREAMP_DET     = 11, 
                    21115 ....................  
                    21116 ....................     GPIO_ANT_SEL        = 12, 
                    21117 ....................     GPIO_ANT_SELN       = 13, 
                    21118 ....................     GPIO_TX_RX_SEL      = 14, 
                    21119 ....................     GPIO_TX_RX_ENV      = 15, 
                    21120 ....................     GPIO_TX_RX_ENVM     = 16, 
                    21121 ....................  
                    21122 ....................     GPIO_5V_EN          = 17, 
                    21123 ....................  
                    21124 .................... }; 
                    21125 ....................  
                    21126 .................... /* Inputs */ 
                    21127 .................... enum { 
                    21128 ....................  
                    21129 .................... }; 
                    21130 ....................  
                    21131 ....................  
                    21132 .................... void gpio_init(); 
                    21133 .................... int gpio_toggle(int gpio); 
                    21134 .................... #INLINE 
                    21135 .................... void gpio_set(int gpio); 
                    21136 .................... void gpio_clear(int gpio); 
                    21137 .................... #INLINE 
                    21138 .................... void gpio_set_value(int gpio, int value); 
                    21139 .................... int gpio_get(int gpio); 
                    21140 .................... #INLINE 
                    21141 .................... uint32_t gpio_get_analog(int gpio); 
                    21142 ....................  
                    21143 .................... #endif /* INCLUDE_GPIO_H_ */ 
                    21144 ....................  
                    21145 ....................  
                    21146 ....................  
                    21147 ....................  
                    21148 ....................  
                    21149 ....................  
                    21150 ....................  
                    21151 ....................  
                    21152 ....................  
                    21153 ....................  
                    21154 ....................  
                    21155 ....................  
                    21156 ....................  
                    21157 ....................  
                    21158 ....................  
3F2E 0104           21159 MOVLB  4
3F30 6B11           21160 CLRF   x11
3F32 6A02           21161 CLRF   02
3F34 6A03           21162 CLRF   03
3F36 B10B           21163 BTFSC  x0B.0
3F38 8E03           21164 BSF    03.7
3F3A 5002           21165 MOVF   02,W
3F3C 0103           21166 MOVLB  3
3F3E 25D0           21167 ADDWF  xD0,W
3F40 0104           21168 MOVLB  4
3F42 6F10           21169 MOVWF  x10
3F44 5003           21170 MOVF   03,W
3F46 0103           21171 MOVLB  3
3F48 21D1           21172 ADDWFC xD1,W
3F4A 0104           21173 MOVLB  4
3F4C 6F11           21174 MOVWF  x11
3F4E 510D           21175 MOVF   x0D,W
3F50 0B03           21176 ANDLW  03
3F52 6F13           21177 MOVWF  x13
3F54 350C           21178 RLCF   x0C,W
3F56 6E02           21179 MOVWF  02
3F58 3513           21180 RLCF   x13,W
3F5A 6E03           21181 MOVWF  03
3F5C 3602           21182 RLCF   02,F
3F5E 3603           21183 RLCF   03,F
3F60 0EFC           21184 MOVLW  FC
3F62 1602           21185 ANDWF  02,F
3F64 5002           21186 MOVF   02,W
3F66 2510           21187 ADDWF  x10,W
3F68 6F0E           21188 MOVWF  x0E
3F6A 5003           21189 MOVF   03,W
3F6C 2111           21190 ADDWFC x11,W
3F6E 6F0F           21191 MOVWF  x0F
                    21192 ....................  
                    21193 ....................  
                    21194 ....................  
                    21195 ....................  
3F70 C40F F411      21196 MOVFF  40F,411
3F74 C40E F410      21197 MOVFF  40E,410
3F78 0E10           21198 MOVLW  10
3F7A 6F12           21199 MOVWF  x12
3F7C 0100           21200 MOVLB  0
3F7E D7AD           21201 BRA    3EDA
                    21202 ....................  
3F80 0012           21203 RETURN 0
                    21204 ....................  
                    21205 ....................  
                    21206 ....................  
                    21207 ....................  
                    21208 ....................  
                    21209 ....................  
3274 0E03           21210 MOVLW  03
3276 6F4B           21211 MOVWF  x4B
3278 0100           21212 MOVLB  0
327A EC5C F011      21213 CALL   22B8
3A8E 0E03           21214 MOVLW  03
3A90 6F4B           21215 MOVWF  x4B
3A92 0100           21216 MOVLB  0
3A94 EC5C F011      21217 CALL   22B8
518A 0E03           21218 MOVLW  03
518C 0104           21219 MOVLB  4
518E 6F4B           21220 MOVWF  x4B
5190 0100           21221 MOVLB  0
5192 EC5C F011      21222 CALL   22B8
5C8E 0E03           21223 MOVLW  03
5C90 6F4B           21224 MOVWF  x4B
5C92 0100           21225 MOVLB  0
5C94 EC5C F011      21226 CALL   22B8
6114 0E03           21227 MOVLW  03
6116 0104           21228 MOVLB  4
6118 6F4B           21229 MOVWF  x4B
611A 0100           21230 MOVLB  0
611C EC5C F011      21231 CALL   22B8
                    21232 ....................  
327E 0104           21233 MOVLB  4
3280 6B46           21234 CLRF   x46
3282 5146           21235 MOVF   x46,W
3284 0809           21236 SUBLW  09
3286 E302           21237 BNC   328C
3288 2B46           21238 INCF   x46,F
328A D7FB           21239 BRA    3282
3A98 0104           21240 MOVLB  4
3A9A 6B46           21241 CLRF   x46
3A9C 5146           21242 MOVF   x46,W
3A9E 0809           21243 SUBLW  09
3AA0 E302           21244 BNC   3AA6
3AA2 2B46           21245 INCF   x46,F
3AA4 D7FB           21246 BRA    3A9C
5196 0104           21247 MOVLB  4
5198 6B46           21248 CLRF   x46
519A 5146           21249 MOVF   x46,W
519C 0809           21250 SUBLW  09
519E E302           21251 BNC   51A4
51A0 2B46           21252 INCF   x46,F
51A2 D7FB           21253 BRA    519A
5C98 0104           21254 MOVLB  4
5C9A 6B46           21255 CLRF   x46
5C9C 5146           21256 MOVF   x46,W
5C9E 0809           21257 SUBLW  09
5CA0 E302           21258 BNC   5CA6
5CA2 2B46           21259 INCF   x46,F
5CA4 D7FB           21260 BRA    5C9C
6120 0104           21261 MOVLB  4
6122 6B46           21262 CLRF   x46
6124 5146           21263 MOVF   x46,W
6126 0809           21264 SUBLW  09
6128 E302           21265 BNC   612E
612A 2B46           21266 INCF   x46,F
612C D7FB           21267 BRA    6124
                    21268 ....................  
328C 0E03           21269 MOVLW  03
328E 6F4B           21270 MOVWF  x4B
32E4 0000           21271 NOP   
3AA6 0E03           21272 MOVLW  03
3AA8 6F4B           21273 MOVWF  x4B
3AFE 0000           21274 NOP   
51A4 0E03           21275 MOVLW  03
51A6 6F4B           21276 MOVWF  x4B
51FC 0000           21277 NOP   
5CA6 0E03           21278 MOVLW  03
5CA8 6F4B           21279 MOVWF  x4B
5CFE 0000           21280 NOP   
612E 0E03           21281 MOVLW  03
6130 6F4B           21282 MOVWF  x4B
6186 0000           21283 NOP   
6188 0101           21284 MOVLB  1
618A 0103           21285 MOVLB  3
                    21286 ....................  
                    21287 ....................  
                    21288 ....................  
                    21289 ....................  
5068 C408 F40C      21290 MOVFF  408,40C
506C C407 F40B      21291 MOVFF  407,40B
5070 0100           21292 MOVLB  0
5072 EC52 F01F      21293 CALL   3EA4
5076 6A19           21294 CLRF   19
5078 BEF2           21295 BTFSC  FF2.7
507A 8E19           21296 BSF    19.7
507C 9EF2           21297 BCF    FF2.7
507E C003 F44D      21298 MOVFF  03,44D
5082 C002 F44C      21299 MOVFF  02,44C
5086 C001 F44B      21300 MOVFF  01,44B
508A C000 F44A      21301 MOVFF  00,44A
508E 0E17           21302 MOVLW  17
5090 0104           21303 MOVLB  4
5092 6F51           21304 MOVWF  x51
5094 0EB7           21305 MOVLW  B7
5096 6F50           21306 MOVWF  x50
5098 0E51           21307 MOVLW  51
509A 6F4F           21308 MOVWF  x4F
509C 0E7C           21309 MOVLW  7C
509E 6F4E           21310 MOVWF  x4E
50A0 0100           21311 MOVLB  0
50A2 EC19 F018      21312 CALL   3032
50A6 BE19           21313 BTFSC  19.7
50A8 8EF2           21314 BSF    FF2.7
50AA 6A19           21315 CLRF   19
50AC BEF2           21316 BTFSC  FF2.7
50AE 8E19           21317 BSF    19.7
50B0 9EF2           21318 BCF    FF2.7
50B2 C003 F449      21319 MOVFF  03,449
50B6 C002 F448      21320 MOVFF  02,448
50BA C001 F447      21321 MOVFF  01,447
50BE C000 F446      21322 MOVFF  00,446
50C2 EC2D F013      21323 CALL   265A
50C6 BE19           21324 BTFSC  19.7
50C8 8EF2           21325 BSF    FF2.7
50CA C002 F40A      21326 MOVFF  02,40A
50CE C001 F409      21327 MOVFF  01,409
50FE C408 F40C      21328 MOVFF  408,40C
5102 C407 F40B      21329 MOVFF  407,40B
5106 0100           21330 MOVLB  0
5108 EC52 F01F      21331 CALL   3EA4
510C 6A19           21332 CLRF   19
510E BEF2           21333 BTFSC  FF2.7
5110 8E19           21334 BSF    19.7
5112 9EF2           21335 BCF    FF2.7
5114 C003 F44D      21336 MOVFF  03,44D
5118 C002 F44C      21337 MOVFF  02,44C
511C C001 F44B      21338 MOVFF  01,44B
5120 C000 F44A      21339 MOVFF  00,44A
5124 0E17           21340 MOVLW  17
5126 0104           21341 MOVLB  4
5128 6F51           21342 MOVWF  x51
512A 0EB7           21343 MOVLW  B7
512C 6F50           21344 MOVWF  x50
512E 0E51           21345 MOVLW  51
5130 6F4F           21346 MOVWF  x4F
5132 0E7C           21347 MOVLW  7C
5134 6F4E           21348 MOVWF  x4E
5136 0100           21349 MOVLB  0
5138 EC19 F018      21350 CALL   3032
513C BE19           21351 BTFSC  19.7
513E 8EF2           21352 BSF    FF2.7
5140 6A19           21353 CLRF   19
5142 BEF2           21354 BTFSC  FF2.7
5144 8E19           21355 BSF    19.7
5146 9EF2           21356 BCF    FF2.7
5148 C003 F449      21357 MOVFF  03,449
514C C002 F448      21358 MOVFF  02,448
5150 C001 F447      21359 MOVFF  01,447
5154 C000 F446      21360 MOVFF  00,446
5158 EC2D F013      21361 CALL   265A
515C BE19           21362 BTFSC  19.7
515E 8EF2           21363 BSF    FF2.7
5160 C002 F40A      21364 MOVFF  02,40A
5164 C001 F409      21365 MOVFF  01,409
5740 C408 F40C      21366 MOVFF  408,40C
5744 C407 F40B      21367 MOVFF  407,40B
5748 0100           21368 MOVLB  0
574A EC52 F01F      21369 CALL   3EA4
574E 6A19           21370 CLRF   19
5750 BEF2           21371 BTFSC  FF2.7
5752 8E19           21372 BSF    19.7
5754 9EF2           21373 BCF    FF2.7
5756 C003 F44D      21374 MOVFF  03,44D
575A C002 F44C      21375 MOVFF  02,44C
575E C001 F44B      21376 MOVFF  01,44B
5762 C000 F44A      21377 MOVFF  00,44A
5766 0E17           21378 MOVLW  17
5768 0104           21379 MOVLB  4
576A 6F51           21380 MOVWF  x51
576C 0EB7           21381 MOVLW  B7
576E 6F50           21382 MOVWF  x50
5770 0E51           21383 MOVLW  51
5772 6F4F           21384 MOVWF  x4F
5774 0E7C           21385 MOVLW  7C
5776 6F4E           21386 MOVWF  x4E
5778 0100           21387 MOVLB  0
577A EC19 F018      21388 CALL   3032
577E BE19           21389 BTFSC  19.7
5780 8EF2           21390 BSF    FF2.7
5782 6A19           21391 CLRF   19
5784 BEF2           21392 BTFSC  FF2.7
5786 8E19           21393 BSF    19.7
5788 9EF2           21394 BCF    FF2.7
578A C003 F449      21395 MOVFF  03,449
578E C002 F448      21396 MOVFF  02,448
5792 C001 F447      21397 MOVFF  01,447
5796 C000 F446      21398 MOVFF  00,446
579A EC2D F013      21399 CALL   265A
579E BE19           21400 BTFSC  19.7
57A0 8EF2           21401 BSF    FF2.7
57A2 C002 F40A      21402 MOVFF  02,40A
57A6 C001 F409      21403 MOVFF  01,409
585C C408 F40C      21404 MOVFF  408,40C
5860 C407 F40B      21405 MOVFF  407,40B
5864 0100           21406 MOVLB  0
5866 EC52 F01F      21407 CALL   3EA4
586A 6A19           21408 CLRF   19
586C BEF2           21409 BTFSC  FF2.7
586E 8E19           21410 BSF    19.7
5870 9EF2           21411 BCF    FF2.7
5872 C003 F44D      21412 MOVFF  03,44D
5876 C002 F44C      21413 MOVFF  02,44C
587A C001 F44B      21414 MOVFF  01,44B
587E C000 F44A      21415 MOVFF  00,44A
5882 0E17           21416 MOVLW  17
5884 0104           21417 MOVLB  4
5886 6F51           21418 MOVWF  x51
5888 0EB7           21419 MOVLW  B7
588A 6F50           21420 MOVWF  x50
588C 0E51           21421 MOVLW  51
588E 6F4F           21422 MOVWF  x4F
5890 0E7C           21423 MOVLW  7C
5892 6F4E           21424 MOVWF  x4E
5894 0100           21425 MOVLB  0
5896 EC19 F018      21426 CALL   3032
589A BE19           21427 BTFSC  19.7
589C 8EF2           21428 BSF    FF2.7
589E 6A19           21429 CLRF   19
58A0 BEF2           21430 BTFSC  FF2.7
58A2 8E19           21431 BSF    19.7
58A4 9EF2           21432 BCF    FF2.7
58A6 C003 F449      21433 MOVFF  03,449
58AA C002 F448      21434 MOVFF  02,448
58AE C001 F447      21435 MOVFF  01,447
58B2 C000 F446      21436 MOVFF  00,446
58B6 EC2D F013      21437 CALL   265A
58BA BE19           21438 BTFSC  19.7
58BC 8EF2           21439 BSF    FF2.7
58BE C002 F40A      21440 MOVFF  02,40A
58C2 C001 F409      21441 MOVFF  01,409
                    21442 ....................  
                    21443 ....................  
50D2 0104           21444 MOVLB  4
50D4 510A           21445 MOVF   x0A,W
50D6 0803           21446 SUBLW  03
50D8 E203           21447 BC    50E0
5168 0104           21448 MOVLB  4
516A 510A           21449 MOVF   x0A,W
516C 0803           21450 SUBLW  03
516E E203           21451 BC    5176
57AA 0104           21452 MOVLB  4
57AC 510A           21453 MOVF   x0A,W
57AE 0803           21454 SUBLW  03
57B0 E203           21455 BC    57B8
58C6 0104           21456 MOVLB  4
58C8 510A           21457 MOVF   x0A,W
58CA 0803           21458 SUBLW  03
58CC E203           21459 BC    58D4
                    21460 ....................  
50DA 0E03           21461 MOVLW  03
50DC 6F0A           21462 MOVWF  x0A
50DE 6909           21463 SETF   x09
5170 0E03           21464 MOVLW  03
5172 6F0A           21465 MOVWF  x0A
5174 6909           21466 SETF   x09
57B2 0E03           21467 MOVLW  03
57B4 6F0A           21468 MOVWF  x0A
57B6 6909           21469 SETF   x09
58CE 0E03           21470 MOVLW  03
58D0 6F0A           21471 MOVWF  x0A
58D2 6909           21472 SETF   x09
                    21473 ....................  
                    21474 ....................  
50E0 C406 F40B      21475 MOVFF  406,40B
50E4 C40A F40D      21476 MOVFF  40A,40D
50E8 C409 F40C      21477 MOVFF  409,40C
50EC 0100           21478 MOVLB  0
50EE EC97 F01F      21479 CALL   3F2E
50F2 0000           21480 NOP   
5176 C406 F40B      21481 MOVFF  406,40B
517A C40A F40D      21482 MOVFF  40A,40D
517E C409 F40C      21483 MOVFF  409,40C
5182 0100           21484 MOVLB  0
5184 EC97 F01F      21485 CALL   3F2E
5188 0000           21486 NOP   
57B8 C406 F40B      21487 MOVFF  406,40B
57BC C40A F40D      21488 MOVFF  40A,40D
57C0 C409 F40C      21489 MOVFF  409,40C
57C4 0100           21490 MOVLB  0
57C6 EC97 F01F      21491 CALL   3F2E
57CA 0000           21492 NOP   
58D4 C406 F40B      21493 MOVFF  406,40B
58D8 C40A F40D      21494 MOVFF  40A,40D
58DC C409 F40C      21495 MOVFF  409,40C
58E0 0100           21496 MOVLB  0
58E2 EC97 F01F      21497 CALL   3F2E
58E6 0000           21498 NOP   
                    21499 ....................  
                    21500 ....................  
                    21501 ....................  
                    21502 ....................  
                    21503 ....................  
                    21504 ....................  
5000 0103           21505 MOVLB  3
5002 6BD1           21506 CLRF   xD1
5004 6BD0           21507 CLRF   xD0
                    21508 ....................  
                    21509 ....................  
                    21510 ....................  
5006 0E03           21511 MOVLW  03
5008 0104           21512 MOVLB  4
500A 6F4B           21513 MOVWF  x4B
                    21514 ....................  
                    21515 ....................  
                    21516 ....................  
5060 0104           21517 MOVLB  4
5062 6B06           21518 CLRF   x06
5064 6B08           21519 CLRF   x08
5066 6B07           21520 CLRF   x07
                    21521 ....................  
50F4 0E01           21522 MOVLW  01
50F6 0104           21523 MOVLB  4
50F8 6F06           21524 MOVWF  x06
50FA 6B08           21525 CLRF   x08
50FC 6B07           21526 CLRF   x07
                    21527 ....................  
                    21528 ....................  
51FE EFFC F016      21529 GOTO   2DF8 (RETURN)
                    21530 ....................  
                    21531 ....................  
                    21532 .................... #include <18F45K22.h> 
                    21533 .................... //////// Standard Header file for the PIC18F45K22 device //////////////// 
                    21534 .................... #device PIC18F45K22 
                    22135 .................... #list 
                    22136 ....................  
                    22137 .................... #device adc=10 
                    22138 .................... #device pass_strings=in_ram 
                    22139 ....................  
                    22140 .................... #define LOADER_END 0x1FFF 
                    22141 .................... #include <boot.h> 
                    22142 .................... #undef LOADER_END 
                    22143 .................... #define FLASH_SIZE getenv("FLASH_ERASE_SIZE") 
                    22144 .................... #define LOADER_END   0x1FFF 
                    22145 .................... #define LOADER_SIZE  0x3FF 
                    22146 ....................  
                    22147 .................... #ifndef _bootloader 
                    22148 .................... #build(reset=LOADER_END+1, interrupt=LOADER_END+9) 
                    22149 ....................  
                    22150 .................... /* when in operational software, keep out of the bootloader sections */ 
                    22151 .................... #org 0, 0xfff {} 
                    22152 .................... #org 0x1000, 0x1ffe {} 
                    22153 ....................  
                    22154 .................... #else 
                    22155 ....................  
                    22156 .................... /* when in the bootloader, keep out of the operational sections */ 
                    22157 .................... #org 0x2000, 0x7ffe {} 
                    22158 ....................  
                    22159 .................... #endif 
                    22160 ....................  
                    22161 ....................  
                    22162 .................... #FUSES NOWDT                   //No Watch Dog Timer 
                    22163 .................... #FUSES WDT128                  //Watch Dog Timer uses 1:128 Postscale 
                    22164 .................... #FUSES INTRC_IO                //Internal RC Osc, no CLKOUT 
                    22165 .................... #FUSES NOBROWNOUT              //No brownout reset 
                    22166 .................... #FUSES WDT_SW                  //No Watch Dog Timer, enabled in Software 
                    22167 .................... #FUSES NOLVP                   //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
                    22168 .................... #FUSES NOPUT 
                    22169 .................... #FUSES NOXINST                 //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
                    22170 ....................  
                    22171 .................... #use delay(clock=64000000) 
                    22172 .................... #use rs232(baud=921600,xmit=PIN_C6,rcv=PIN_C7,ERRORS) 
                    22173 .................... #USE TIMER(TIMER=1,TICK=1us,BITS=32,NOISR) 
                    22174 .................... #use spi(DO=PIN_A4, CLK=PIN_A3, ENABLE=PIN_A2, ENABLE_ACTIVE=0, DATA_HOLD=20, BITS=16) 
                    22175 ....................  
                    22176 .................... #opt 9 
                    22177 ....................  
                    22178 .................... #use fast_io(a) 
                    22179 .................... #use fast_io(b) 
                    22180 .................... #use fast_io(c) 
                    22181 .................... #use fast_io(d) 
                    22182 .................... #use fast_io(e) 
                    22183 ....................  
                    22184 .................... #define safe_write_program_memory(address, pointer, size) \ 
                    22185 ....................   do { disable_interrupts(GLOBAL); write_program_memory(address, pointer, size); enable_interrupts(GLOBAL); delay_us(1000); } while (0) 
                    22186 ....................  
                    22187 ....................  
                    22188 ....................  
                    22189 ....................  
                    22190 .................... #ifndef CALIBRATION_H_ 
                    22191 .................... #define CALIBRATION_H_ 
                    22192 ....................  
                    22193 .................... #include <stdint.h> 
                    22194 .................... /////////////////////////////////////////////////////////////////////////// 
                    22195 .................... ////                                                                   //// 
                    22196 .................... ////                           stdint.h                                //// 
                    22197 .................... ////                                                                   //// 
                    22198 .................... //// Standard integer definitions.                                     //// 
                    22199 .................... ////                                                                   //// 
                    22200 .................... /////////////////////////////////////////////////////////////////////////// 
                    22201 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    22202 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    22203 .................... //// compiler.  This source code may only be distributed to other      //// 
                    22204 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    22205 .................... //// or distribution is permitted without written permission.          //// 
                    22206 .................... //// Derivative programs created using this software in object code    //// 
                    22207 .................... //// form are not restricted in any way.                               //// 
                    22208 .................... /////////////////////////////////////////////////////////////////////////// 
                    22209 ....................  
                    22210 .................... #ifndef _STDINT 
                    22211 ....................  
                    22212 .................... #define _STDINT 
                    22213 ....................  
                    22214 .................... //////////// exact width 
                    22215 ....................  
                    22216 .................... typedef signed int8 int8_t; 
                    22217 .................... typedef unsigned int8 uint8_t; 
                    22218 .................... typedef signed int16 int16_t; 
                    22219 .................... typedef unsigned int16 uint16_t; 
                    22220 .................... typedef signed int32 int32_t; 
                    22221 .................... typedef unsigned int32 uint32_t; 
                    22222 ....................  
                    22223 .................... #if defined(__PCD__) 
                    22224 .................... //typedef signed int24 int24_t; 
                    22225 .................... //typedef unsigned int24 uint24_t; 
                    22226 .................... typedef signed int64 int64_t; 
                    22227 .................... typedef unsigned int64 uint64_t; 
                    22228 .................... #endif 
                    22229 ....................  
                    22230 .................... #define INT8_MAX  (128) 
                    22231 .................... #define INT8_MIN  (-127) 
                    22232 .................... #define UINT8_MAX (255) 
                    22233 ....................  
                    22234 .................... #define INT16_MAX  (32767) 
                    22235 .................... #define INT16_MIN  (-32768) 
                    22236 .................... #define UINT16_MAX (65535) 
                    22237 ....................  
                    22238 .................... #define INT32_MAX  (2147483647) 
                    22239 .................... #define INT32_MIN  (-2147483648) 
                    22240 .................... #define UINT32_MAX (4294967295) 
                    22241 ....................  
                    22242 .................... #if defined(__PCD__) 
                    22243 .................... //#define INT24_MAX  (8388607) 
                    22244 .................... //#define INT24_MIN  (-8388608) 
                    22245 .................... //#define UINT24_MAX (16777215) 
                    22246 ....................  
                    22247 .................... #define INT64_MAX  (9223372036854775807) 
                    22248 .................... #define INT64_MIN  (-9223372036854775808) 
                    22249 .................... #define UINT64_MAX (18446744073709551615) 
                    22250 .................... #endif 
                    22251 ....................  
                    22252 .................... ///////// minimum width 
                    22253 ....................  
                    22254 .................... typedef signed int8 int_least8_t; 
                    22255 .................... typedef unsigned int8 uint_least8_t; 
                    22256 .................... typedef signed int16 int_least16_t; 
                    22257 .................... typedef unsigned int16 uint_least16_t; 
                    22258 .................... typedef signed int32 int_least32_t; 
                    22259 .................... typedef unsigned int32 uint_least32_t; 
                    22260 ....................  
                    22261 .................... #if defined(__PCD__) 
                    22262 .................... //typedef signed int24 int_least24_t; 
                    22263 .................... //typedef unsigned int24 uint_least24_t; 
                    22264 .................... typedef signed int64 int_least64_t; 
                    22265 .................... typedef unsigned int64 uint_least64_t; 
                    22266 .................... #endif 
                    22267 ....................  
                    22268 .................... #define INT_LEAST8_MAX  (128) 
                    22269 .................... #define INT_LEAST8_MIN  (-127) 
                    22270 .................... #define UINT_LEAST8_MAX (255) 
                    22271 ....................  
                    22272 .................... #define INT_LEAST16_MAX  (32767) 
                    22273 .................... #define INT_LEAST16_MIN  (-32768) 
                    22274 .................... #define UINT_LEAST16_MAX (65535) 
                    22275 ....................  
                    22276 .................... #define INT_LEAST32_MAX  (2147483647) 
                    22277 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    22278 .................... #define UINT_LEAST32_MAX (4294967295) 
                    22279 ....................  
                    22280 .................... #if defined(__PCD__) 
                    22281 .................... //#define INT_LEAST24_MAX  (8388607) 
                    22282 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    22283 .................... //#define UINT_LEAST24_MAX (16777215) 
                    22284 ....................  
                    22285 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    22286 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    22287 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    22288 .................... #endif 
                    22289 ....................  
                    22290 .................... ///////// fastest width 
                    22291 ....................  
                    22292 .................... #if defined(__PCD__) 
                    22293 .................... typedef signed int16 int_fast8_t; 
                    22294 .................... typedef unsigned int16 uint_fast8_t; 
                    22295 .................... #define INT_FAST8_MAX  (32767) 
                    22296 .................... #define INT_FAST8_MIN  (-32768) 
                    22297 .................... #define UINT_FAST8_MAX (65535) 
                    22298 .................... typedef signed int16 int_fast16_t; 
                    22299 .................... typedef unsigned int16 uint_fast16_t; 
                    22300 .................... //typedef signed int24 int_fast24_t; 
                    22301 .................... //typedef unsigned int24 uint_fast24_t; 
                    22302 .................... typedef signed int64 int_fast64_t; 
                    22303 .................... typedef unsigned int64 uint_fast64_t; 
                    22304 .................... #else 
                    22305 .................... typedef signed int8 int_fast8_t; 
                    22306 .................... typedef unsigned int8 uint_fast8_t; 
                    22307 .................... #define INT_FAST8_MAX  (128) 
                    22308 .................... #define INT_FAST8_MIN  (-127) 
                    22309 .................... #define UINT_FAST8_MAX (255) 
                    22310 .................... typedef signed int16 int_fast16_t; 
                    22311 .................... typedef unsigned int16 uint_fast16_t; 
                    22312 .................... #endif 
                    22313 ....................  
                    22314 .................... typedef signed int32 int_fast32_t; 
                    22315 .................... typedef unsigned int32 uint_fast32_t; 
                    22316 ....................  
                    22317 .................... #define INT_FAST16_MAX  (32767) 
                    22318 .................... #define INT_FAST16_MIN  (-32768) 
                    22319 .................... #define UINT_FAST16_MAX (65535) 
                    22320 ....................  
                    22321 .................... #define INT_FAST32_MAX  (2147483647) 
                    22322 .................... #define INT_FAST32_MIN  (-2147483648) 
                    22323 .................... #define UINT_FAST32_MAX (4294967295) 
                    22324 ....................  
                    22325 .................... #if defined(__PCD__) 
                    22326 .................... //#define INT_FAST24_MAX  (8388607) 
                    22327 .................... //#define INT_FAST24_MIN  (-8388608) 
                    22328 .................... //#define UINT_FAST24_MAX (16777215) 
                    22329 ....................  
                    22330 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    22331 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    22332 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    22333 .................... #endif 
                    22334 ....................  
                    22335 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    22336 ....................  
                    22337 .................... /// TODO 
                    22338 ....................  
                    22339 .................... /// intptr_t uintptr_t 
                    22340 ....................  
                    22341 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    22342 ....................  
                    22343 ....................  
                    22344 .................... /////////// greatest width (OPTIONAL) 
                    22345 ....................  
                    22346 .................... /// TODO 
                    22347 ....................  
                    22348 .................... /// intmax_t uintmax_t 
                    22349 ....................  
                    22350 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    22351 ....................  
                    22352 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    22353 ....................  
                    22354 ....................  
                    22355 .................... #endif 
                    22356 ....................  
                    22357 .................... #include <stdbool.h> 
                    22358 .................... /////////////////////////////////////////////////////////////////////////// 
                    22359 .................... ////                                                                   //// 
                    22360 .................... ////                          stdbool.h                                //// 
                    22361 .................... ////                                                                   //// 
                    22362 .................... //// Standard boolean definitions                                      //// 
                    22363 .................... ////                                                                   //// 
                    22364 .................... /////////////////////////////////////////////////////////////////////////// 
                    22365 .................... ////        (C) Copyright 1996,2012 Custom Computer Services           //// 
                    22366 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    22367 .................... //// compiler.  This source code may only be distributed to other      //// 
                    22368 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    22369 .................... //// or distribution is permitted without written permission.          //// 
                    22370 .................... //// Derivative programs created using this software in object code    //// 
                    22371 .................... //// form are not restricted in any way.                               //// 
                    22372 .................... /////////////////////////////////////////////////////////////////////////// 
                    22373 ....................  
                    22374 .................... #ifndef __STDBOOL_H__ 
                    22375 .................... #define __STDBOOL_H__ 
                    22376 ....................  
                    22377 .................... //remove TRUE and FALSE added by CCS's device .h file 
                    22378 .................... #if defined(TRUE) 
                    22379 .................... #undef TRUE 
                    22380 .................... #endif 
                    22381 .................... #if defined(FALSE) 
                    22382 .................... #undef FALSE 
                    22383 .................... #endif 
                    22384 ....................  
                    22385 .................... typedef int1   bool; 
                    22386 .................... #define true   1 
                    22387 .................... #define false  0 
                    22388 .................... #define __bool_true_false_are_defined  1 
                    22389 ....................  
                    22390 .................... #endif 
                    22391 ....................  
                    22392 ....................  
                    22393 .................... #define CALIBRATION_AREA_START 0x4000 
                    22394 .................... #define CALIBRATION_AREA_END 0x4FFF 
                    22395 ....................  
                    22396 .................... typedef enum { 
                    22397 ....................   CALIBRATION_TABLE_PARAMS = 0, 
                    22398 ....................   CALIBRATION_TABLE_PA_GAINS_1 = 1, 
                    22399 ....................   CALIBRATION_TABLE_PA_GAINS_2 = 2, 
                    22400 ....................   CALIBRATION_TABLE_MAX = 3 
                    22401 .................... } calibration_table_id_t; 
                    22402 ....................  
                    22403 .................... typedef enum { 
                    22404 ....................   PARAM_CAL_TBL_VERSION = 0, 
                    22405 ....................   PARAM_SERIAL_NUM = 1, 
                    22406 ....................   PARAM_TEMP_MULT = 2, 
                    22407 ....................   PARAM_FWD_MULT = 3, 
                    22408 ....................   PARAM_REV_TRESH = 4, 
                    22409 ....................   PARAM_INP_PWR_MULT = 5, 
                    22410 ....................   PARAM_PWR_CURRENT_MULT = 6, 
                    22411 ....................   PARAM_PRE_AMP_MULT = 7, 
                    22412 ....................   PARAM_ISENSE_PA1_MULT = 8, 
                    22413 ....................   PARAM_ISENSE_PA2_MULT = 9, 
                    22414 ....................   PARAM_BOOT_WAIT_TIME_USEC = 10, 
                    22415 ....................   PARAM_TX_ON_TIMING_USEC = 11, 
                    22416 ....................   PARAM_TX_OFF_TIMING_USEC = 12, 
                    22417 ....................   PARAM_PA_ON_TIMING_USEC = 13, 
                    22418 ....................   PARAM_PA_OFF_TIMING_USEC = 14, 
                    22419 ....................   PARAM_ANT_SEL_TIMING_USEC = 15, 
                    22420 ....................   PARAM_FWD_SAMP_TIMING_USEC = 16, 
                    22421 ....................   PARAM_REV_SAMP_TIMING_USEC = 17, 
                    22422 ....................   PARAM_INP_PWR_SAMP_TIMING_USEC = 18, 
                    22423 .................... } calibration_param_t; 
                    22424 ....................  
                    22425 .................... #define CALIBRATION_TABLE_INDEX_MAX 32 
                    22426 ....................  
                    22427 .................... void get_calibration_table_data(calibration_table_id_t table_id, void* table_data); 
                    22428 .................... void set_calibration_table_data(calibration_table_id_t table_id, void* table_data); 
                    22429 .................... #INLINE 
                    22430 .................... uint16_t get_calibration_param(calibration_table_id_t table, uint8_t index); 
                    22431 .................... void set_calibration_param(calibration_table_id_t table, uint8_t index, uint16_t value); 
                    22432 ....................  
                    22433 .................... #endif /* CALIBRATION_H_ */ 
                    22434 ....................  
                    22435 ....................  
                    22436 ....................  
                    22437 ....................  
                    22438 ....................  
                    22439 ....................  
                    22440 ....................  
                    22441 ....................  
                    22442 ....................  
                    22443 ....................  
                    22444 ....................  
                    22445 ....................  
                    22446 ....................  
                    22447 ....................  
                    22448 ....................  
                    22449 ....................  
652A 0104           22450 MOVLB  4
652C 5126           22451 MOVF   x26,W
652E 0D40           22452 MULLW  40
6530 CFF3 F429      22453 MOVFF  FF3,429
6534 0E40           22454 MOVLW  40
6536 6F2A           22455 MOVWF  x2A
6538 6A19           22456 CLRF   19
653A BEF2           22457 BTFSC  FF2.7
653C 8E19           22458 BSF    19.7
653E 9EF2           22459 BCF    FF2.7
6540 6AF8           22460 CLRF   FF8
6542 6EF7           22461 MOVWF  FF7
6544 C429 FFF6      22462 MOVFF  429,FF6
6548 C428 FFEA      22463 MOVFF  428,FEA
654C C427 FFE9      22464 MOVFF  427,FE9
6550 6B4F           22465 CLRF   x4F
6552 0E40           22466 MOVLW  40
6554 6F4E           22467 MOVWF  x4E
6556 0100           22468 MOVLB  0
6558 EC42 F012      22469 CALL   2484
655C BE19           22470 BTFSC  19.7
655E 8EF2           22471 BSF    FF2.7
                    22472 ....................  
6560 EF1A F033      22473 GOTO   6634 (RETURN)
                    22474 ....................  
                    22475 ....................  
                    22476 ....................  
                    22477 ....................  
648A 9CF2           22478 BCF    FF2.6
648C 9EF2           22479 BCF    FF2.7
648E BEF2           22480 BTFSC  FF2.7
6490 D7FD           22481 BRA    648C
6492 0103           22482 MOVLB  3
6494 51E6           22483 MOVF   xE6,W
6496 0D40           22484 MULLW  40
6498 50F3           22485 MOVF   FF3,W
649A 6FE9           22486 MOVWF  xE9
649C 0E40           22487 MOVLW  40
649E 6FEA           22488 MOVWF  xEA
64A0 6AF8           22489 CLRF   FF8
64A2 C3EA FFF7      22490 MOVFF  3EA,FF7
64A6 C3E9 FFF6      22491 MOVFF  3E9,FF6
64AA C3E8 FFEA      22492 MOVFF  3E8,FEA
64AE C3E7 FFE9      22493 MOVFF  3E7,FE9
64B2 0104           22494 MOVLB  4
64B4 6F22           22495 MOVWF  x22
64B6 0100           22496 MOVLB  0
64B8 EC97 F01B      22497 CALL   372E
64BC 0EC0           22498 MOVLW  C0
64BE 12F2           22499 IORWF  FF2,F
64C0 0E01           22500 MOVLW  01
64C2 0103           22501 MOVLB  3
64C4 6FE9           22502 MOVWF  xE9
64C6 0100           22503 MOVLB  0
64C8 D7CA           22504 BRA    645E
                    22505 ....................  
64CA EF91 F032      22506 GOTO   6522 (RETURN)
                    22507 ....................  
                    22508 ....................  
                    22509 ....................  
2F0A 6B4B           22510 CLRF   x4B
2F0C 6B4A           22511 CLRF   x4A
3320 6B4B           22512 CLRF   x4B
3322 6B4A           22513 CLRF   x4A
33AE 6B4B           22514 CLRF   x4B
33B0 6B4A           22515 CLRF   x4A
3B3A 6B4B           22516 CLRF   x4B
3B3C 6B4A           22517 CLRF   x4A
3BC8 6B4B           22518 CLRF   x4B
3BCA 6B4A           22519 CLRF   x4A
56CE 6B4B           22520 CLRF   x4B
56D0 6B4A           22521 CLRF   x4A
57E8 6B4B           22522 CLRF   x4B
57EA 6B4A           22523 CLRF   x4A
5960 6B4B           22524 CLRF   x4B
5962 6B4A           22525 CLRF   x4A
59C8 6B4B           22526 CLRF   x4B
59CA 6B4A           22527 CLRF   x4A
5A72 6B4B           22528 CLRF   x4B
5A74 6B4A           22529 CLRF   x4A
5ADA 6B4B           22530 CLRF   x4B
5ADC 6B4A           22531 CLRF   x4A
5D3A 6B4B           22532 CLRF   x4B
5D3C 6B4A           22533 CLRF   x4A
5DC8 6B4B           22534 CLRF   x4B
5DCA 6B4A           22535 CLRF   x4A
638A 6B4B           22536 CLRF   x4B
638C 6B4A           22537 CLRF   x4A
                    22538 ....................  
                    22539 ....................  
2F0E 5148           22540 MOVF   x48,W
2F10 0D40           22541 MULLW  40
2F12 CFF3 F44C      22542 MOVFF  FF3,44C
2F16 0E40           22543 MOVLW  40
2F18 6F4D           22544 MOVWF  x4D
2F1A 90D8           22545 BCF    FD8.0
2F1C 3549           22546 RLCF   x49,W
2F1E 274C           22547 ADDWF  x4C,F
2F20 0E00           22548 MOVLW  00
2F22 234D           22549 ADDWFC x4D,F
2F24 6AF8           22550 CLRF   FF8
2F26 C44D FFF7      22551 MOVFF  44D,FF7
2F2A C44C FFF6      22552 MOVFF  44C,FF6
2F2E 0E04           22553 MOVLW  04
2F30 6EEA           22554 MOVWF  FEA
2F32 0E4A           22555 MOVLW  4A
2F34 6EE9           22556 MOVWF  FE9
2F36 6B4F           22557 CLRF   x4F
2F38 0E02           22558 MOVLW  02
2F3A 6F4E           22559 MOVWF  x4E
2F3C 0100           22560 MOVLB  0
2F3E EC42 F012      22561 CALL   2484
3324 5148           22562 MOVF   x48,W
3326 0D40           22563 MULLW  40
3328 CFF3 F44C      22564 MOVFF  FF3,44C
332C 0E40           22565 MOVLW  40
332E 6F4D           22566 MOVWF  x4D
3330 90D8           22567 BCF    FD8.0
3332 3549           22568 RLCF   x49,W
3334 274C           22569 ADDWF  x4C,F
3336 0E00           22570 MOVLW  00
3338 234D           22571 ADDWFC x4D,F
333A 6AF8           22572 CLRF   FF8
333C C44D FFF7      22573 MOVFF  44D,FF7
3340 C44C FFF6      22574 MOVFF  44C,FF6
3344 0E04           22575 MOVLW  04
3346 6EEA           22576 MOVWF  FEA
3348 0E4A           22577 MOVLW  4A
334A 6EE9           22578 MOVWF  FE9
334C 6B4F           22579 CLRF   x4F
334E 0E02           22580 MOVLW  02
3350 6F4E           22581 MOVWF  x4E
3352 0100           22582 MOVLB  0
3354 EC42 F012      22583 CALL   2484
33B2 5148           22584 MOVF   x48,W
33B4 0D40           22585 MULLW  40
33B6 CFF3 F44C      22586 MOVFF  FF3,44C
33BA 0E40           22587 MOVLW  40
33BC 6F4D           22588 MOVWF  x4D
33BE 90D8           22589 BCF    FD8.0
33C0 3549           22590 RLCF   x49,W
33C2 274C           22591 ADDWF  x4C,F
33C4 0E00           22592 MOVLW  00
33C6 234D           22593 ADDWFC x4D,F
33C8 6AF8           22594 CLRF   FF8
33CA C44D FFF7      22595 MOVFF  44D,FF7
33CE C44C FFF6      22596 MOVFF  44C,FF6
33D2 0E04           22597 MOVLW  04
33D4 6EEA           22598 MOVWF  FEA
33D6 0E4A           22599 MOVLW  4A
33D8 6EE9           22600 MOVWF  FE9
33DA 6B4F           22601 CLRF   x4F
33DC 0E02           22602 MOVLW  02
33DE 6F4E           22603 MOVWF  x4E
33E0 0100           22604 MOVLB  0
33E2 EC42 F012      22605 CALL   2484
3B3E 5148           22606 MOVF   x48,W
3B40 0D40           22607 MULLW  40
3B42 CFF3 F44C      22608 MOVFF  FF3,44C
3B46 0E40           22609 MOVLW  40
3B48 6F4D           22610 MOVWF  x4D
3B4A 90D8           22611 BCF    FD8.0
3B4C 3549           22612 RLCF   x49,W
3B4E 274C           22613 ADDWF  x4C,F
3B50 0E00           22614 MOVLW  00
3B52 234D           22615 ADDWFC x4D,F
3B54 6AF8           22616 CLRF   FF8
3B56 C44D FFF7      22617 MOVFF  44D,FF7
3B5A C44C FFF6      22618 MOVFF  44C,FF6
3B5E 0E04           22619 MOVLW  04
3B60 6EEA           22620 MOVWF  FEA
3B62 0E4A           22621 MOVLW  4A
3B64 6EE9           22622 MOVWF  FE9
3B66 6B4F           22623 CLRF   x4F
3B68 0E02           22624 MOVLW  02
3B6A 6F4E           22625 MOVWF  x4E
3B6C 0100           22626 MOVLB  0
3B6E EC42 F012      22627 CALL   2484
3BCC 5148           22628 MOVF   x48,W
3BCE 0D40           22629 MULLW  40
3BD0 CFF3 F44C      22630 MOVFF  FF3,44C
3BD4 0E40           22631 MOVLW  40
3BD6 6F4D           22632 MOVWF  x4D
3BD8 90D8           22633 BCF    FD8.0
3BDA 3549           22634 RLCF   x49,W
3BDC 274C           22635 ADDWF  x4C,F
3BDE 0E00           22636 MOVLW  00
3BE0 234D           22637 ADDWFC x4D,F
3BE2 6AF8           22638 CLRF   FF8
3BE4 C44D FFF7      22639 MOVFF  44D,FF7
3BE8 C44C FFF6      22640 MOVFF  44C,FF6
3BEC 0E04           22641 MOVLW  04
3BEE 6EEA           22642 MOVWF  FEA
3BF0 0E4A           22643 MOVLW  4A
3BF2 6EE9           22644 MOVWF  FE9
3BF4 6B4F           22645 CLRF   x4F
3BF6 0E02           22646 MOVLW  02
3BF8 6F4E           22647 MOVWF  x4E
3BFA 0100           22648 MOVLB  0
3BFC EC42 F012      22649 CALL   2484
56D2 5148           22650 MOVF   x48,W
56D4 0D40           22651 MULLW  40
56D6 CFF3 F44C      22652 MOVFF  FF3,44C
56DA 0E40           22653 MOVLW  40
56DC 6F4D           22654 MOVWF  x4D
56DE 90D8           22655 BCF    FD8.0
56E0 3549           22656 RLCF   x49,W
56E2 274C           22657 ADDWF  x4C,F
56E4 0E00           22658 MOVLW  00
56E6 234D           22659 ADDWFC x4D,F
56E8 6AF8           22660 CLRF   FF8
56EA C44D FFF7      22661 MOVFF  44D,FF7
56EE C44C FFF6      22662 MOVFF  44C,FF6
56F2 0E04           22663 MOVLW  04
56F4 6EEA           22664 MOVWF  FEA
56F6 0E4A           22665 MOVLW  4A
56F8 6EE9           22666 MOVWF  FE9
56FA 6B4F           22667 CLRF   x4F
56FC 0E02           22668 MOVLW  02
56FE 6F4E           22669 MOVWF  x4E
5700 0100           22670 MOVLB  0
5702 EC42 F012      22671 CALL   2484
57EC 5148           22672 MOVF   x48,W
57EE 0D40           22673 MULLW  40
57F0 CFF3 F44C      22674 MOVFF  FF3,44C
57F4 0E40           22675 MOVLW  40
57F6 6F4D           22676 MOVWF  x4D
57F8 90D8           22677 BCF    FD8.0
57FA 3549           22678 RLCF   x49,W
57FC 274C           22679 ADDWF  x4C,F
57FE 0E00           22680 MOVLW  00
5800 234D           22681 ADDWFC x4D,F
5802 6AF8           22682 CLRF   FF8
5804 C44D FFF7      22683 MOVFF  44D,FF7
5808 C44C FFF6      22684 MOVFF  44C,FF6
580C 0E04           22685 MOVLW  04
580E 6EEA           22686 MOVWF  FEA
5810 0E4A           22687 MOVLW  4A
5812 6EE9           22688 MOVWF  FE9
5814 6B4F           22689 CLRF   x4F
5816 0E02           22690 MOVLW  02
5818 6F4E           22691 MOVWF  x4E
581A 0100           22692 MOVLB  0
581C EC42 F012      22693 CALL   2484
5964 5148           22694 MOVF   x48,W
5966 0D40           22695 MULLW  40
5968 CFF3 F44C      22696 MOVFF  FF3,44C
596C 0E40           22697 MOVLW  40
596E 6F4D           22698 MOVWF  x4D
5970 90D8           22699 BCF    FD8.0
5972 3549           22700 RLCF   x49,W
5974 274C           22701 ADDWF  x4C,F
5976 0E00           22702 MOVLW  00
5978 234D           22703 ADDWFC x4D,F
597A 6AF8           22704 CLRF   FF8
597C C44D FFF7      22705 MOVFF  44D,FF7
5980 C44C FFF6      22706 MOVFF  44C,FF6
5984 0E04           22707 MOVLW  04
5986 6EEA           22708 MOVWF  FEA
5988 0E4A           22709 MOVLW  4A
598A 6EE9           22710 MOVWF  FE9
598C 6B4F           22711 CLRF   x4F
598E 0E02           22712 MOVLW  02
5990 6F4E           22713 MOVWF  x4E
5992 0100           22714 MOVLB  0
5994 EC42 F012      22715 CALL   2484
59CC 5148           22716 MOVF   x48,W
59CE 0D40           22717 MULLW  40
59D0 CFF3 F44C      22718 MOVFF  FF3,44C
59D4 0E40           22719 MOVLW  40
59D6 6F4D           22720 MOVWF  x4D
59D8 90D8           22721 BCF    FD8.0
59DA 3549           22722 RLCF   x49,W
59DC 274C           22723 ADDWF  x4C,F
59DE 0E00           22724 MOVLW  00
59E0 234D           22725 ADDWFC x4D,F
59E2 6AF8           22726 CLRF   FF8
59E4 C44D FFF7      22727 MOVFF  44D,FF7
59E8 C44C FFF6      22728 MOVFF  44C,FF6
59EC 0E04           22729 MOVLW  04
59EE 6EEA           22730 MOVWF  FEA
59F0 0E4A           22731 MOVLW  4A
59F2 6EE9           22732 MOVWF  FE9
59F4 6B4F           22733 CLRF   x4F
59F6 0E02           22734 MOVLW  02
59F8 6F4E           22735 MOVWF  x4E
59FA 0100           22736 MOVLB  0
59FC EC42 F012      22737 CALL   2484
5A76 5148           22738 MOVF   x48,W
5A78 0D40           22739 MULLW  40
5A7A CFF3 F44C      22740 MOVFF  FF3,44C
5A7E 0E40           22741 MOVLW  40
5A80 6F4D           22742 MOVWF  x4D
5A82 90D8           22743 BCF    FD8.0
5A84 3549           22744 RLCF   x49,W
5A86 274C           22745 ADDWF  x4C,F
5A88 0E00           22746 MOVLW  00
5A8A 234D           22747 ADDWFC x4D,F
5A8C 6AF8           22748 CLRF   FF8
5A8E C44D FFF7      22749 MOVFF  44D,FF7
5A92 C44C FFF6      22750 MOVFF  44C,FF6
5A96 0E04           22751 MOVLW  04
5A98 6EEA           22752 MOVWF  FEA
5A9A 0E4A           22753 MOVLW  4A
5A9C 6EE9           22754 MOVWF  FE9
5A9E 6B4F           22755 CLRF   x4F
5AA0 0E02           22756 MOVLW  02
5AA2 6F4E           22757 MOVWF  x4E
5AA4 0100           22758 MOVLB  0
5AA6 EC42 F012      22759 CALL   2484
5ADE 5148           22760 MOVF   x48,W
5AE0 0D40           22761 MULLW  40
5AE2 CFF3 F44C      22762 MOVFF  FF3,44C
5AE6 0E40           22763 MOVLW  40
5AE8 6F4D           22764 MOVWF  x4D
5AEA 90D8           22765 BCF    FD8.0
5AEC 3549           22766 RLCF   x49,W
5AEE 274C           22767 ADDWF  x4C,F
5AF0 0E00           22768 MOVLW  00
5AF2 234D           22769 ADDWFC x4D,F
5AF4 6AF8           22770 CLRF   FF8
5AF6 C44D FFF7      22771 MOVFF  44D,FF7
5AFA C44C FFF6      22772 MOVFF  44C,FF6
5AFE 0E04           22773 MOVLW  04
5B00 6EEA           22774 MOVWF  FEA
5B02 0E4A           22775 MOVLW  4A
5B04 6EE9           22776 MOVWF  FE9
5B06 6B4F           22777 CLRF   x4F
5B08 0E02           22778 MOVLW  02
5B0A 6F4E           22779 MOVWF  x4E
5B0C 0100           22780 MOVLB  0
5B0E EC42 F012      22781 CALL   2484
5D3E 5148           22782 MOVF   x48,W
5D40 0D40           22783 MULLW  40
5D42 CFF3 F44C      22784 MOVFF  FF3,44C
5D46 0E40           22785 MOVLW  40
5D48 6F4D           22786 MOVWF  x4D
5D4A 90D8           22787 BCF    FD8.0
5D4C 3549           22788 RLCF   x49,W
5D4E 274C           22789 ADDWF  x4C,F
5D50 0E00           22790 MOVLW  00
5D52 234D           22791 ADDWFC x4D,F
5D54 6AF8           22792 CLRF   FF8
5D56 C44D FFF7      22793 MOVFF  44D,FF7
5D5A C44C FFF6      22794 MOVFF  44C,FF6
5D5E 0E04           22795 MOVLW  04
5D60 6EEA           22796 MOVWF  FEA
5D62 0E4A           22797 MOVLW  4A
5D64 6EE9           22798 MOVWF  FE9
5D66 6B4F           22799 CLRF   x4F
5D68 0E02           22800 MOVLW  02
5D6A 6F4E           22801 MOVWF  x4E
5D6C 0100           22802 MOVLB  0
5D6E EC42 F012      22803 CALL   2484
5DCC 5148           22804 MOVF   x48,W
5DCE 0D40           22805 MULLW  40
5DD0 CFF3 F44C      22806 MOVFF  FF3,44C
5DD4 0E40           22807 MOVLW  40
5DD6 6F4D           22808 MOVWF  x4D
5DD8 90D8           22809 BCF    FD8.0
5DDA 3549           22810 RLCF   x49,W
5DDC 274C           22811 ADDWF  x4C,F
5DDE 0E00           22812 MOVLW  00
5DE0 234D           22813 ADDWFC x4D,F
5DE2 6AF8           22814 CLRF   FF8
5DE4 C44D FFF7      22815 MOVFF  44D,FF7
5DE8 C44C FFF6      22816 MOVFF  44C,FF6
5DEC 0E04           22817 MOVLW  04
5DEE 6EEA           22818 MOVWF  FEA
5DF0 0E4A           22819 MOVLW  4A
5DF2 6EE9           22820 MOVWF  FE9
5DF4 6B4F           22821 CLRF   x4F
5DF6 0E02           22822 MOVLW  02
5DF8 6F4E           22823 MOVWF  x4E
5DFA 0100           22824 MOVLB  0
5DFC EC42 F012      22825 CALL   2484
638E 5148           22826 MOVF   x48,W
6390 0D40           22827 MULLW  40
6392 CFF3 F44C      22828 MOVFF  FF3,44C
6396 0E40           22829 MOVLW  40
6398 6F4D           22830 MOVWF  x4D
639A 90D8           22831 BCF    FD8.0
639C 3549           22832 RLCF   x49,W
639E 274C           22833 ADDWF  x4C,F
63A0 0E00           22834 MOVLW  00
63A2 234D           22835 ADDWFC x4D,F
63A4 6AF8           22836 CLRF   FF8
63A6 C44D FFF7      22837 MOVFF  44D,FF7
63AA C44C FFF6      22838 MOVFF  44C,FF6
63AE 0E04           22839 MOVLW  04
63B0 6EEA           22840 MOVWF  FEA
63B2 0E4A           22841 MOVLW  4A
63B4 6EE9           22842 MOVWF  FE9
63B6 6B4F           22843 CLRF   x4F
63B8 0E02           22844 MOVLW  02
63BA 6F4E           22845 MOVWF  x4E
63BC 0100           22846 MOVLB  0
63BE EC42 F012      22847 CALL   2484
                    22848 ....................  
2F42 0104           22849 MOVLB  4
2F44 3D4A           22850 INCFSZ x4A,W
2F46 D005           22851 BRA    2F52
2F48 3D4B           22852 INCFSZ x4B,W
2F4A D003           22853 BRA    2F52
2F4C 6A03           22854 CLRF   03
2F4E 0E00           22855 MOVLW  00
2F50 D003           22856 BRA    2F58
2F52 C44B F003      22857 MOVFF  44B,03
2F56 514A           22858 MOVF   x4A,W
2F58 6E01           22859 MOVWF  01
2F5A C003 F002      22860 MOVFF  03,02
3358 0104           22861 MOVLB  4
335A 3D4A           22862 INCFSZ x4A,W
335C D005           22863 BRA    3368
335E 3D4B           22864 INCFSZ x4B,W
3360 D003           22865 BRA    3368
3362 6A03           22866 CLRF   03
3364 0E00           22867 MOVLW  00
3366 D003           22868 BRA    336E
3368 C44B F003      22869 MOVFF  44B,03
336C 514A           22870 MOVF   x4A,W
336E 6E01           22871 MOVWF  01
3370 C003 F002      22872 MOVFF  03,02
33E6 0104           22873 MOVLB  4
33E8 3D4A           22874 INCFSZ x4A,W
33EA D005           22875 BRA    33F6
33EC 3D4B           22876 INCFSZ x4B,W
33EE D003           22877 BRA    33F6
33F0 6A03           22878 CLRF   03
33F2 0E00           22879 MOVLW  00
33F4 D003           22880 BRA    33FC
33F6 C44B F003      22881 MOVFF  44B,03
33FA 514A           22882 MOVF   x4A,W
33FC 6E01           22883 MOVWF  01
33FE C003 F002      22884 MOVFF  03,02
3B72 0104           22885 MOVLB  4
3B74 3D4A           22886 INCFSZ x4A,W
3B76 D005           22887 BRA    3B82
3B78 3D4B           22888 INCFSZ x4B,W
3B7A D003           22889 BRA    3B82
3B7C 6A03           22890 CLRF   03
3B7E 0E00           22891 MOVLW  00
3B80 D003           22892 BRA    3B88
3B82 C44B F003      22893 MOVFF  44B,03
3B86 514A           22894 MOVF   x4A,W
3B88 6E01           22895 MOVWF  01
3B8A C003 F002      22896 MOVFF  03,02
3C00 0104           22897 MOVLB  4
3C02 3D4A           22898 INCFSZ x4A,W
3C04 D005           22899 BRA    3C10
3C06 3D4B           22900 INCFSZ x4B,W
3C08 D003           22901 BRA    3C10
3C0A 6A03           22902 CLRF   03
3C0C 0E00           22903 MOVLW  00
3C0E D003           22904 BRA    3C16
3C10 C44B F003      22905 MOVFF  44B,03
3C14 514A           22906 MOVF   x4A,W
3C16 6E01           22907 MOVWF  01
3C18 C003 F002      22908 MOVFF  03,02
5706 0104           22909 MOVLB  4
5708 3D4A           22910 INCFSZ x4A,W
570A D005           22911 BRA    5716
570C 3D4B           22912 INCFSZ x4B,W
570E D003           22913 BRA    5716
5710 6A03           22914 CLRF   03
5712 0E00           22915 MOVLW  00
5714 D003           22916 BRA    571C
5716 C44B F003      22917 MOVFF  44B,03
571A 514A           22918 MOVF   x4A,W
571C 6E01           22919 MOVWF  01
571E C003 F002      22920 MOVFF  03,02
5820 0104           22921 MOVLB  4
5822 3D4A           22922 INCFSZ x4A,W
5824 D005           22923 BRA    5830
5826 3D4B           22924 INCFSZ x4B,W
5828 D003           22925 BRA    5830
582A 6A03           22926 CLRF   03
582C 0E00           22927 MOVLW  00
582E D003           22928 BRA    5836
5830 C44B F003      22929 MOVFF  44B,03
5834 514A           22930 MOVF   x4A,W
5836 6E01           22931 MOVWF  01
5838 C003 F002      22932 MOVFF  03,02
5998 0104           22933 MOVLB  4
599A 3D4A           22934 INCFSZ x4A,W
599C D005           22935 BRA    59A8
599E 3D4B           22936 INCFSZ x4B,W
59A0 D003           22937 BRA    59A8
59A2 6A03           22938 CLRF   03
59A4 0E00           22939 MOVLW  00
59A6 D003           22940 BRA    59AE
59A8 C44B F003      22941 MOVFF  44B,03
59AC 514A           22942 MOVF   x4A,W
59AE 6E01           22943 MOVWF  01
59B0 C003 F002      22944 MOVFF  03,02
5A00 0104           22945 MOVLB  4
5A02 3D4A           22946 INCFSZ x4A,W
5A04 D005           22947 BRA    5A10
5A06 3D4B           22948 INCFSZ x4B,W
5A08 D003           22949 BRA    5A10
5A0A 6A03           22950 CLRF   03
5A0C 0E00           22951 MOVLW  00
5A0E D003           22952 BRA    5A16
5A10 C44B F003      22953 MOVFF  44B,03
5A14 514A           22954 MOVF   x4A,W
5A16 6E01           22955 MOVWF  01
5A18 C003 F002      22956 MOVFF  03,02
5AAA 0104           22957 MOVLB  4
5AAC 3D4A           22958 INCFSZ x4A,W
5AAE D005           22959 BRA    5ABA
5AB0 3D4B           22960 INCFSZ x4B,W
5AB2 D003           22961 BRA    5ABA
5AB4 6A03           22962 CLRF   03
5AB6 0E00           22963 MOVLW  00
5AB8 D003           22964 BRA    5AC0
5ABA C44B F003      22965 MOVFF  44B,03
5ABE 514A           22966 MOVF   x4A,W
5AC0 6E01           22967 MOVWF  01
5AC2 C003 F002      22968 MOVFF  03,02
5B12 0104           22969 MOVLB  4
5B14 3D4A           22970 INCFSZ x4A,W
5B16 D005           22971 BRA    5B22
5B18 3D4B           22972 INCFSZ x4B,W
5B1A D003           22973 BRA    5B22
5B1C 6A03           22974 CLRF   03
5B1E 0E00           22975 MOVLW  00
5B20 D003           22976 BRA    5B28
5B22 C44B F003      22977 MOVFF  44B,03
5B26 514A           22978 MOVF   x4A,W
5B28 6E01           22979 MOVWF  01
5B2A C003 F002      22980 MOVFF  03,02
5D72 0104           22981 MOVLB  4
5D74 3D4A           22982 INCFSZ x4A,W
5D76 D005           22983 BRA    5D82
5D78 3D4B           22984 INCFSZ x4B,W
5D7A D003           22985 BRA    5D82
5D7C 6A03           22986 CLRF   03
5D7E 0E00           22987 MOVLW  00
5D80 D003           22988 BRA    5D88
5D82 C44B F003      22989 MOVFF  44B,03
5D86 514A           22990 MOVF   x4A,W
5D88 6E01           22991 MOVWF  01
5D8A C003 F002      22992 MOVFF  03,02
5E00 0104           22993 MOVLB  4
5E02 3D4A           22994 INCFSZ x4A,W
5E04 D005           22995 BRA    5E10
5E06 3D4B           22996 INCFSZ x4B,W
5E08 D003           22997 BRA    5E10
5E0A 6A03           22998 CLRF   03
5E0C 0E00           22999 MOVLW  00
5E0E D003           23000 BRA    5E16
5E10 C44B F003      23001 MOVFF  44B,03
5E14 514A           23002 MOVF   x4A,W
5E16 6E01           23003 MOVWF  01
5E18 C003 F002      23004 MOVFF  03,02
63C2 0104           23005 MOVLB  4
63C4 3D4A           23006 INCFSZ x4A,W
63C6 D005           23007 BRA    63D2
63C8 3D4B           23008 INCFSZ x4B,W
63CA D003           23009 BRA    63D2
63CC 6A03           23010 CLRF   03
63CE 0E00           23011 MOVLW  00
63D0 D003           23012 BRA    63D8
63D2 C44B F003      23013 MOVFF  44B,03
63D6 514A           23014 MOVF   x4A,W
63D8 6E01           23015 MOVWF  01
63DA C003 F002      23016 MOVFF  03,02
                    23017 ....................  
                    23018 ....................  
                    23019 ....................  
                    23020 ....................  
                    23021 ....................  
                    23022 ....................  
                    23023 ....................  
                    23024 ....................  
                    23025 ....................  

Configuration Fuses:
   Word  1: F800   INTRC_IO PLLEN PRIMARY_ON FCMEN IESO
   Word  2: 1C19   NOPUT NOBROWNOUT BORV19 NOWDT WDT128
   Word  3: BF00   CCP2C1 PBADEN CCP3B5 HFOFST TIMER3C0 CCP2D2 MCLR
   Word  4: 0000   NOSTVREN NOLVP NOXINST DEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB

   Some fuses have been forced to be compatible with the ICD debugger.

SYMBOL TABLE
  LABEL                             VALUE

_RETURN_                          00000001
rs232_errors                      0000001A
UPPER_TICKS_1                     0000001B
strtok.save                       0000001F
message_buffer                    00000021
rfcBuff                           00000071
tti_counter                       00000113
software_mode                     00000115
prev_control_message              00000116
last_control_message              00000119
final_sf_status_response          0000011C
in_progress_sf_status_response    00000137
ant_delay                         00000152
pa_delay                          00000154
delay_tx_time                     00000156
commands                          00000158
timerTasks                        00000170
timerTriggered                    00000260
rbuf                              00000264
rbuf_wr_idx                       00000318
rbuf_rd_idx                       00000319
wbuf                              0000031A
wbuf_wr_idx                       000003CE
wbuf_rd_idx                       000003CF
ad5312_default_conf_word          000003D0
MAIN.size                         000003D2
MAIN.res                          000003D4
comm_receive_message.buffer       000003D5
process_message.message_buffer    000003D5
fix_boot.should_write             000003D5
fix_boot.start_bytes              000003D6
comm_receive_message.size         000003D7
process_message.length            000003D7
comm_receive_message.handleMessag 000003D9
process_message.message           000003D9
comm_receive_message.buffIdx      000003DA
process_message.i                 000003DB
comm_receive_message.c            000003DB
comm_receive_message.len          000003DC
uart_get_byte_nonblocking.dst     000003DD
rfc1662_unpack.data               000003DD
handle_control_message.payload_bu 000003DF
handle_change_mode_message.payloa 000003DF
handle_get_calibration_table_mess 000003DF
handle_version_request_message.pa 000003DF
handle_set_calibration_table_mess 000003DF
h_test_set_data.payload_buffer    000003DF
h_test_get_data.payload_buffer    000003DF
handle_bit_status_request_message 000003DF
rfc1662_unpack.len                000003DF
rfc1662_unpack.dest               000003E0
handle_control_message.i          000003E1
handle_get_calibration_table_mess 000003E1
handle_version_request_message.re 000003E1
handle_change_mode_message.payloa 000003E1
get_next_byte.c                   000003E1
h_test_get_data.response          000003E1
handle_bit_status_request_message 000003E1
handle_set_calibration_table_mess 000003E1
handle_bit_status_request_message 000003E2
handle_control_message.is_pa_gain 000003E2
rfc1662_unpack.restored_data_size 000003E2
handle_control_message.is_pa_gain 000003E2
handle_control_message.response   000003E3
send_ack.response                 000003E3
handle_get_calibration_table_mess 000003E3
rfc1662_unpack.calculated_crc     000003E3
rfc1662_unpack.message_crc        000003E4
restoreFlagAndEscape.data         000003E5
set_calibration_table_data.table_ 000003E6
set_calibration_table_data.table_ 000003E7
restoreFlagAndEscape.dest         000003E7
restoreFlagAndEscape.dataLen      000003E9
restoreFlagAndEscape.datai        000003EA
restoreFlagAndEscape.desti        000003EB
handle_control_message.payload    000003FE
set_pa_gain.amplifier_operation_f 00000402
set_pa_gain.gain                  00000403
set_pa_gain.value                 00000404
ad5312_setVout.dac                00000406
ad5312_setVout.mV                 00000407
ad5312_setVout.vout               00000409
writeData.device                  0000040B
writeData.value                   0000040C
writeData.data                    0000040E
fix_boot.clear_flash              00000416
fix_boot.jump_to_0x2700           0000041A
fix_boot.jump_to_0x2008           0000041E
memcmp.s1                         00000422
memcmp.s2                         00000424
get_calibration_table_data.table_ 00000426
memcmp.n                          00000426
comm_send_message.buffer          00000426
get_calibration_table_data.table_ 00000427
memcmp.su1                        00000428
comm_send_message.size            00000428
memcmp.su2                        0000042A
comm_send_message.rfc_len         0000042A
uart_send.buffer                  0000042C
rfc1662_pack.data                 0000042C
uart_send.size                    0000042E
rfc1662_pack.dataLen              0000042E
push_bytes.src                    0000042F
rfc1662_pack.dest                 0000042F
push_bytes.len                    00000431
rfc1662_pack.changed_data_size    00000431
rfc1662_pack.changed_crc_size     00000432
push_bytes.D                      00000433
rfc1662_pack.crc                  00000433
crc8.buffer                       00000434
replaceFlagAndEscape.data         00000436
crc8.size                         00000436
replaceFlagAndEscape.dest         00000438
crc8.crc                          00000438
crc8.pos                          00000439
replaceFlagAndEscape.dataLen      0000043A
replaceFlagAndEscape.datai        0000043B
replaceFlagAndEscape.desti        0000043C
perform_last_control_message.i    00000440
perform_last_control_message.is_p 00000441
perform_last_control_message.pa1_ 00000442
perform_last_control_message.pa2_ 00000444
ad5312_latch.i                    00000446
sample_rev_power.rev_pass_tresh   00000446
sample_adc_inputs.n               00000446
sample_fwd_power.n                00000447
select_antenna.antenna            00000447
set_tx_state.on                   00000447
sample_input_power.n              00000447
get_calibration_param.table_id    00000448
gpio_set_value.gpio               00000449
get_calibration_param.index       00000449
gpio_set_value.value              0000044A
get_calibration_param.value       0000044A
gpio_get_analog.gpio              0000044A
gpio_clear.gpio                   0000044B
gpio_set.gpio                     0000044B
gpio_get_analog.done              0000044B
ANSELA                            00000F38
ANSA0                             00000F38
ANSA1                             00000F38
ANSA2                             00000F38
ANSA3                             00000F38
ANSA5                             00000F38
ANSELB                            00000F39
ANSELC                            00000F3A
ANSC2                             00000F3A
ANSC3                             00000F3A
ANSC4                             00000F3A
ANSC5                             00000F3A
ANSC6                             00000F3A
ANSC7                             00000F3A
ANSELD                            00000F3B
ANSELE                            00000F3C
PMD2                              00000F3D
ADCMD                             00000F3D
CMP1MD                            00000F3D
CMP2MD                            00000F3D
CTMUMD                            00000F3D
CCP1MD                            00000F3E
PMD1                              00000F3E
CCP2MD                            00000F3E
CCP3MD                            00000F3E
CCP4MD                            00000F3E
CCP5MD                            00000F3E
MSSP1MD                           00000F3E
MSSP2MD                           00000F3E
PMD0                              00000F3F
TMR1MD                            00000F3F
TMR2MD                            00000F3F
TMR3MD                            00000F3F
TMR4MD                            00000F3F
TMR5MD                            00000F3F
TMR6MD                            00000F3F
UART1MD                           00000F3F
UART2MD                           00000F3F
VREFCON2                          00000F40
DACNSS                            00000F41
VREFCON1                          00000F41
DACPSS0                           00000F41
DACPSS1                           00000F41
DACOE                             00000F41
DACLPS                            00000F41
DACEN                             00000F41
VREFCON0                          00000F42
FVRS0                             00000F42
FVRS1                             00000F42
FVRST                             00000F42
FVREN                             00000F42
IRNG0                             00000F43
CTMUICON                          00000F43
IRNG1                             00000F43
ITRIM0                            00000F43
ITRIM1                            00000F43
ITRIM2                            00000F43
ITRIM3                            00000F43
ITRIM4                            00000F43
ITRIM5                            00000F43
CTMUCON                           00000F45
SRRC1E                            00000F46
SRCON1                            00000F46
SRRC2E                            00000F46
SRRCKE                            00000F46
SRRPE                             00000F46
SRSC1E                            00000F46
SRSC2E                            00000F46
SRSCKE                            00000F46
SRSPE                             00000F46
SRPR                              00000F47
SRCON0                            00000F47
SRPS                              00000F47
SRNQEN                            00000F47
SRQEN                             00000F47
SRCLK0                            00000F47
SRCLK1                            00000F47
SRCLK2                            00000F47
SRLEN                             00000F47
C4TSEL0                           00000F48
CCPTMRS1                          00000F48
C4TSEL1                           00000F48
C5TSEL0                           00000F48
C5TSEL1                           00000F48
C1TSEL0                           00000F49
CCPTMRS0                          00000F49
C1TSEL1                           00000F49
C2TSEL0                           00000F49
C2TSEL1                           00000F49
C3TSEL0                           00000F49
C3TSEL1                           00000F49
T6CON                             00000F4A
T6CKPS0                           00000F4A
T6CKPS1                           00000F4A
TMR6ON                            00000F4A
T6OUTPS0                          00000F4A
T6OUTPS1                          00000F4A
T6OUTPS2                          00000F4A
T6OUTPS3                          00000F4A
PR6                               00000F4B
TMR6                              00000F4C
T5GCON                            00000F4D
T5GSS0                            00000F4D
T5GSS1                            00000F4D
T5GVAL                            00000F4D
T5GGO                             00000F4D
T5GSPM                            00000F4D
T5GTM                             00000F4D
T5GPOL                            00000F4D
TMR5GE                            00000F4D
TMR5ON                            00000F4E
T5CON                             00000F4E
T5RD16                            00000F4E
T5SYNC                            00000F4E
T5SOSCEN                          00000F4E
T5CKPS0                           00000F4E
T5CKPS1                           00000F4E
TMR5CS0                           00000F4E
TMR5CS1                           00000F4E
TMR5                              00000F50
T4CON                             00000F51
T4CKPS0                           00000F51
T4CKPS1                           00000F51
TMR4ON                            00000F51
T4OUTPS0                          00000F51
T4OUTPS1                          00000F51
T4OUTPS2                          00000F51
T4OUTPS3                          00000F51
PR4                               00000F52
TMR4                              00000F53
CCP5CON                           00000F54
CCP5M0                            00000F54
CCP5M1                            00000F54
CCP5M2                            00000F54
CCP5M3                            00000F54
CCP5DC5B0                         00000F54
CCP5DC5B1                         00000F54
CCP_5_LOW                         00000F55
CCP_5                             00000F55
CCPR5                             00000F56
CCP_5_HIGH                        00000F56
CCP4M0                            00000F57
CCP4CON                           00000F57
CCP4M1                            00000F57
CCP4M2                            00000F57
CCP4M3                            00000F57
CCP4DC4B0                         00000F57
CCP4DC4B1                         00000F57
CCP_4                             00000F58
CCP_4_LOW                         00000F58
CCP_4_HIGH                        00000F59
CCPR4                             00000F59
STR3A                             00000F5A
PSTR3CON                          00000F5A
STR3B                             00000F5A
STR3C                             00000F5A
STR3D                             00000F5A
STR3SYNC                          00000F5A
P3SSBD0                           00000F5B
ECCP3AS                           00000F5B
P3SSBD1                           00000F5B
P3SSAC0                           00000F5B
P3SSAC1                           00000F5B
CCP3AS0                           00000F5B
CCP3AS1                           00000F5B
CCP3AS2                           00000F5B
CCP3ASE                           00000F5B
P3DC0                             00000F5C
PWM3CON                           00000F5C
P3DC1                             00000F5C
P3DC2                             00000F5C
P3DC3                             00000F5C
P3DC4                             00000F5C
P3DC5                             00000F5C
P3DC6                             00000F5C
P3RSEN                            00000F5C
CCP3M0                            00000F5D
CCP3CON                           00000F5D
CCP3M1                            00000F5D
CCP3M2                            00000F5D
CCP3M3                            00000F5D
CCP3DC3B0                         00000F5D
CCP3DC3B1                         00000F5D
CCP3P3M0                          00000F5D
CCP3P3M1                          00000F5D
CCP_3_LOW                         00000F5E
CCP_3                             00000F5E
CCP_3_HIGH                        00000F5F
CCPR3                             00000F5F
SLRA                              00000F60
SLRCON                            00000F60
SLRB                              00000F60
SLRC                              00000F60
SLRD                              00000F60
SLRE                              00000F60
WPUB                              00000F61
IOCB                              00000F62
IOCB4                             00000F62
IOCB5                             00000F62
IOCB6                             00000F62
IOCB7                             00000F62
STR2A                             00000F63
PSTR2CON                          00000F63
STR2B                             00000F63
STR2C                             00000F63
STR2D                             00000F63
STR2SYNC                          00000F63
P2SSBD0                           00000F64
ECCP2AS                           00000F64
P2SSBD1                           00000F64
P2SSAC0                           00000F64
P2SSAC1                           00000F64
CCP2AS0                           00000F64
CCP2AS1                           00000F64
CCP2AS2                           00000F64
CCP2ASE                           00000F64
P2DC0                             00000F65
PWM2CON                           00000F65
P2DC1                             00000F65
P2DC2                             00000F65
P2DC3                             00000F65
P2DC4                             00000F65
P2DC5                             00000F65
P2DC6                             00000F65
P2RSEN                            00000F65
CCP2CON                           00000F66
CCP2M0                            00000F66
CCP2M1                            00000F66
CCP2M2                            00000F66
CCP2M3                            00000F66
CCP2DC2B0                         00000F66
CCP2DC2B1                         00000F66
CCP2P2M0                          00000F66
CCP2P2M1                          00000F66
CCP_2_LOW                         00000F67
CCP_2                             00000F67
CCPR2                             00000F68
CCP_2_HIGH                        00000F68
SSP2CON3                          00000F69
SP2DHEN                           00000F69
SP2AHEN                           00000F69
SP2SBCDE                          00000F69
SP2SDAHT                          00000F69
SP2BOEN                           00000F69
SP2SCIE                           00000F69
SP2PCIE                           00000F69
SP2ACKTIM                         00000F69
SSP2MSK                           00000F6A
SSP2CON2                          00000F6B
SP2SEN                            00000F6B
SP2RSEN                           00000F6B
SP2PEN                            00000F6B
SP2RCEN                           00000F6B
SP2ACKEN                          00000F6B
SP2ACKDT                          00000F6B
SP2ACKSTAT                        00000F6B
SP2GCEN                           00000F6B
SSP2CON1                          00000F6C
SP2SSPM0                          00000F6C
SP2SSPM1                          00000F6C
SP2SSPM2                          00000F6C
SP2SSPM3                          00000F6C
SP2CKP                            00000F6C
SP2SSPEN                          00000F6C
SP2SSPOV                          00000F6C
SP2WCOL                           00000F6C
SP2BF                             00000F6D
SSP2STAT                          00000F6D
SP2UA                             00000F6D
SP2R                              00000F6D
SP2S                              00000F6D
SP2P                              00000F6D
SP2D                              00000F6D
SP2CKE                            00000F6D
SP2SMP                            00000F6D
SSP2ADD                           00000F6E
SSP2BUF                           00000F6F
BAUDCON2                          00000F70
U1ABDEN                           00000F70
U1WUE                             00000F70
U1BRG16                           00000F70
U1CKTXP                           00000F70
U1DTRXP                           00000F70
U1RCIDL                           00000F70
U1ABDOVF                          00000F70
U1RX9D                            00000F71
RCSTA2                            00000F71
U1OERR                            00000F71
U1FERR                            00000F71
U1ADDEN                           00000F71
U1CREN                            00000F71
U1SREN                            00000F71
U1RX9                             00000F71
U1SPEN                            00000F71
TXSTA2                            00000F72
U2TX9D                            00000F72
U2TRMT                            00000F72
U2BRGH                            00000F72
U2SENDB                           00000F72
U2SYNC                            00000F72
U2TXEN                            00000F72
U2TX9                             00000F72
U2CSRC                            00000F72
TXREG2                            00000F73
RCREG2                            00000F74
SPBRG2                            00000F75
SPBRGH2                           00000F76
CM2CON1                           00000F77
C2SYNC                            00000F77
C1SYNC                            00000F77
C2HYS                             00000F77
C1HYS                             00000F77
C2RSEL                            00000F77
C1RSEL                            00000F77
MC2OUT                            00000F77
MC1OUT                            00000F77
C2CH0                             00000F78
CM2CON0                           00000F78
C2CH1                             00000F78
C2R                               00000F78
C2SP                              00000F78
C2POL                             00000F78
C2OE                              00000F78
C2OUT                             00000F78
C2ON                              00000F78
C1CH0                             00000F79
CM1CON0                           00000F79
C1CH1                             00000F79
C1R                               00000F79
C1SP                              00000F79
C1POL                             00000F79
C1OE                              00000F79
C1OUT                             00000F79
C1ON                              00000F79
CCP3IE                            00000F7A
PIE4                              00000F7A
CCP4IE                            00000F7A
CCP5IE                            00000F7A
PIR4                              00000F7B
CCP3IF                            00000F7B
CCP4IF                            00000F7B
CCP5IF                            00000F7B
CCP3IP                            00000F7C
IPR4                              00000F7C
CCP4IP                            00000F7C
CCP5IP                            00000F7C
TMR4IE                            00000F7D
PIE5                              00000F7D
TMR5IE                            00000F7D
TMR6IE                            00000F7D
PIR5                              00000F7E
TMR4IF                            00000F7E
TMR5IF                            00000F7E
TMR6IF                            00000F7E
IPR5                              00000F7F
TMR4IP                            00000F7F
TMR5IP                            00000F7F
TMR6IP                            00000F7F
PORTA                             00000F80
PORTB                             00000F81
PORTC                             00000F82
PORTD                             00000F83
PORTE                             00000F84
LATA                              00000F89
LATB                              00000F8A
LATC                              00000F8B
LATD                              00000F8C
LATE                              00000F8D
TRISA                             00000F92
TRISB                             00000F93
TRISC                             00000F94
TRISD                             00000F95
TRISE0                            00000F96
TRISE                             00000F96
TRISE1                            00000F96
TRISE2                            00000F96
WPUE3                             00000F96
TUN0                              00000F9B
OSCTUNE                           00000F9B
TUN1                              00000F9B
TUN2                              00000F9B
TUN3                              00000F9B
TUN4                              00000F9B
TUN5                              00000F9B
PLLEN                             00000F9B
INTSRC                            00000F9B
HLVDCON                           00000F9C
HLVDL0                            00000F9C
HLVDL1                            00000F9C
HLVDL2                            00000F9C
HLVDL3                            00000F9C
HLVDEN                            00000F9C
IRVST                             00000F9C
BGVST                             00000F9C
VDIRMAG                           00000F9C
TMR1IE                            00000F9D
PIE1                              00000F9D
TMR2IE                            00000F9D
CCP1IE                            00000F9D
SSP1IE                            00000F9D
TX1IE                             00000F9D
RC1IE                             00000F9D
ADIE                              00000F9D
PIR1                              00000F9E
TMR1IF                            00000F9E
TMR2IF                            00000F9E
CCP1IF                            00000F9E
SSP1IF                            00000F9E
TX1IF                             00000F9E
RC1IF                             00000F9E
ADIF                              00000F9E
TMR1IP                            00000F9F
IPR1                              00000F9F
TMR2IP                            00000F9F
CCP1IP                            00000F9F
SSP1IP                            00000F9F
TX1IP                             00000F9F
RC1IP                             00000F9F
ADIP                              00000F9F
CCP2IE                            00000FA0
PIE2                              00000FA0
TMR3IE                            00000FA0
HLVDIE                            00000FA0
BCL1IE                            00000FA0
EEIE                              00000FA0
C2IE                              00000FA0
C1IE                              00000FA0
OSCFIE                            00000FA0
PIR2                              00000FA1
CCP2IF                            00000FA1
TMR3IF                            00000FA1
HLVDIF                            00000FA1
BCL1IF                            00000FA1
EEIF                              00000FA1
C2IF                              00000FA1
C1IF                              00000FA1
OSCFIF                            00000FA1
CCP2IP                            00000FA2
IPR2                              00000FA2
TMR3IP                            00000FA2
HLVDIP                            00000FA2
BCL1IP                            00000FA2
EEIP                              00000FA2
C2IP                              00000FA2
C1IP                              00000FA2
OSCFIP                            00000FA2
TMR1GIE                           00000FA3
PIE3                              00000FA3
TMR3GIE                           00000FA3
TMR5GIE                           00000FA3
CTMUIE                            00000FA3
TX2IE                             00000FA3
RC2IE                             00000FA3
BCL2IE                            00000FA3
SSP2IE                            00000FA3
TMR1GIF                           00000FA4
PIR3                              00000FA4
TMR3GIF                           00000FA4
TMR5GIF                           00000FA4
CTMUIF                            00000FA4
TX2IF                             00000FA4
RC2IF                             00000FA4
BCL2IF                            00000FA4
SSP2IF                            00000FA4
IPR3                              00000FA5
TMR1GIP                           00000FA5
TMR3GIP                           00000FA5
TMR5GIP                           00000FA5
CTMUIP                            00000FA5
TX2IP                             00000FA5
RC2IP                             00000FA5
BCL2IP                            00000FA5
SSP2IP                            00000FA5
EECON1                            00000FA6
RD                                00000FA6
WR                                00000FA6
WREN                              00000FA6
WRERR                             00000FA6
FREE                              00000FA6
CFGS                              00000FA6
EEPGD                             00000FA6
EECON2                            00000FA7
EEDATA                            00000FA8
EEADR                             00000FA9
RX9D                              00000FAB
RCSTA1                            00000FAB
OERR                              00000FAB
FERR                              00000FAB
ADDEN                             00000FAB
CREN                              00000FAB
SREN                              00000FAB
RX9                               00000FAB
SPEN                              00000FAB
TX9D                              00000FAC
TXSTA1                            00000FAC
TRMT                              00000FAC
BRGH                              00000FAC
SENDB                             00000FAC
SYNC                              00000FAC
TXEN                              00000FAC
TX9                               00000FAC
CSRC                              00000FAC
TXREG1                            00000FAD
RCREG1                            00000FAE
SPBRG1                            00000FAF
SPBRGH1                           00000FB0
T3CON                             00000FB1
TMR3ON                            00000FB1
T3RD16                            00000FB1
T3SYNC                            00000FB1
T3SOSCEN                          00000FB1
T3CKPS0                           00000FB1
T3CKPS1                           00000FB1
TMR3CS0                           00000FB1
TMR3CS1                           00000FB1
TMR3                              00000FB3
T3GSS0                            00000FB4
T3GCON                            00000FB4
T3GSS1                            00000FB4
T3GVAL                            00000FB4
T3GGO                             00000FB4
T3GSPM                            00000FB4
T3GTM                             00000FB4
T3GPOL                            00000FB4
TMR3GE                            00000FB4
P1SSBD0                           00000FB6
ECCP1AS                           00000FB6
P1SSBD1                           00000FB6
P1SSAC0                           00000FB6
P1SSAC1                           00000FB6
CCP1AS0                           00000FB6
CCP1AS1                           00000FB6
CCP1AS2                           00000FB6
CCP1ASE                           00000FB6
P1DC0                             00000FB7
PWM1CON                           00000FB7
P1DC1                             00000FB7
P1DC2                             00000FB7
P1DC3                             00000FB7
P1DC4                             00000FB7
P1DC5                             00000FB7
P1DC6                             00000FB7
P1RSEN                            00000FB7
BAUDCON1                          00000FB8
ABDEN                             00000FB8
WUE                               00000FB8
BRG16                             00000FB8
CKTXP                             00000FB8
DTRXP                             00000FB8
RCIDL                             00000FB8
ABDOVF                            00000FB8
STR1A                             00000FB9
PSTR1CON                          00000FB9
STR1B                             00000FB9
STR1C                             00000FB9
STR1D                             00000FB9
STR1SYNC                          00000FB9
T2CKPS0                           00000FBA
T2CON                             00000FBA
T2CKPS1                           00000FBA
TMR2ON                            00000FBA
T2OUTPS0                          00000FBA
T2OUTPS1                          00000FBA
T2OUTPS2                          00000FBA
T2OUTPS3                          00000FBA
PR2                               00000FBB
TMR2                              00000FBC
CCP1M0                            00000FBD
CCP1CON                           00000FBD
CCP1M1                            00000FBD
CCP1M2                            00000FBD
CCP1M3                            00000FBD
DC1B0                             00000FBD
DC1B1                             00000FBD
P1M0                              00000FBD
P1M1                              00000FBD
CCP_1_LOW                         00000FBE
CCP_1                             00000FBE
CCP_1_HIGH                        00000FBF
CCPR1                             00000FBF
ADCS0                             00000FC0
ADCON2                            00000FC0
ADCS1                             00000FC0
ADCS2                             00000FC0
ACQT0                             00000FC0
ACQT1                             00000FC0
ACQT2                             00000FC0
ADFM                              00000FC0
NVCFG0                            00000FC1
ADCON1                            00000FC1
NVCFG1                            00000FC1
PVCFG0                            00000FC1
PVCFG1                            00000FC1
TRIGSEL                           00000FC1
ADCON0                            00000FC2
ADON                              00000FC2
GO                                00000FC2
CHS0                              00000FC2
CHS1                              00000FC2
CHS2                              00000FC2
CHS3                              00000FC2
CHS4                              00000FC2
ADRES                             00000FC4
SEN                               00000FC5
SSP1CON2                          00000FC5
RSEN                              00000FC5
PEN                               00000FC5
RCEN                              00000FC5
ACKEN                             00000FC5
ACKDT                             00000FC5
ACKSTAT                           00000FC5
GCEN                              00000FC5
SSP1CON1                          00000FC6
SSPM0                             00000FC6
SSPM1                             00000FC6
SSPM2                             00000FC6
SSPM3                             00000FC6
CKP                               00000FC6
SSPEN                             00000FC6
SSPOV                             00000FC6
WCOL                              00000FC6
BF                                00000FC7
SSP1STAT                          00000FC7
UA                                00000FC7
R                                 00000FC7
s                                 00000FC7
p                                 00000FC7
D                                 00000FC7
CKE                               00000FC7
SMP                               00000FC7
SSP1ADD                           00000FC8
SSP1BUF                           00000FC9
SSP1MSK                           00000FCA
DHEN                              00000FCB
SSP1CON3                          00000FCB
AHEN                              00000FCB
SBCDE                             00000FCB
SDAHT                             00000FCB
BOEN                              00000FCB
SCIE                              00000FCB
PCIE                              00000FCB
ACKTIM                            00000FCB
T1GSS0                            00000FCC
T1GCON                            00000FCC
T1GSS1                            00000FCC
T1GVAL                            00000FCC
T1GGO                             00000FCC
T1GSPM                            00000FCC
T1GTM                             00000FCC
T1GPOL                            00000FCC
TMR1GE                            00000FCC
TMR1ON                            00000FCD
T1CON                             00000FCD
T1RD16                            00000FCD
T1SYNC                            00000FCD
T1SOSCEN                          00000FCD
T1CKPS0                           00000FCD
T1CKPS1                           00000FCD
TMR1CS0                           00000FCD
TMR1CS1                           00000FCD
TMR1                              00000FCF
RCON                              00000FD0
BOR                               00000FD0
POR                               00000FD0
PD                                00000FD0
TO                                00000FD0
RI                                00000FD0
SBOREN                            00000FD0
IPEN                              00000FD0
WDTCON                            00000FD1
SWDTEN                            00000FD1
LFIOFS                            00000FD2
OSCCON2                           00000FD2
MFIOFS                            00000FD2
PRISD                             00000FD2
SOSCGO                            00000FD2
MFIOSEL                           00000FD2
SOSCRUN                           00000FD2
PLLRDY                            00000FD2
SCS0                              00000FD3
OSCCON                            00000FD3
SCS1                              00000FD3
HFIOFS                            00000FD3
OSTS                              00000FD3
IRCF0                             00000FD3
IRCF1                             00000FD3
IRCF2                             00000FD3
IDLEN                             00000FD3
T0CON                             00000FD5
T0PS0                             00000FD5
T0PS1                             00000FD5
T0PS2                             00000FD5
PSA                               00000FD5
T0SE                              00000FD5
T0CS                              00000FD5
T08BIT                            00000FD5
TMR0ON                            00000FD5
TMR0                              00000FD7
status                            00000FD8
c                                 00000FD8
DC                                00000FD8
Z                                 00000FD8
OV                                00000FD8
n                                 00000FD8
FSR2                              00000FDA
PLUSW2                            00000FDB
PREINC2                           00000FDC
POSTDEC2                          00000FDD
POSTINC2                          00000FDE
INDF2                             00000FDF
BSR                               00000FE0
FSR1                              00000FE2
PLUSW1                            00000FE3
PREINC1                           00000FE4
POSTDEC1                          00000FE5
POSTINC1                          00000FE6
INDF1                             00000FE7
WREG                              00000FE8
FSR0                              00000FEA
PLUSW0                            00000FEB
PREINC0                           00000FEC
POSTDEC0                          00000FED
POSTINC0                          00000FEE
INDF0                             00000FEF
INTCON3                           00000FF0
INT1IF                            00000FF0
INT2IF                            00000FF0
INT1IE                            00000FF0
INT2IE                            00000FF0
INT1IP                            00000FF0
INT2IP                            00000FF0
RBIP                              00000FF1
INTCON2                           00000FF1
TMR0IP                            00000FF1
INTEDG2                           00000FF1
INTEDG1                           00000FF1
INTEDG0                           00000FF1
RBPU                              00000FF1
RBIF                              00000FF2
INTCON                            00000FF2
INT0IF                            00000FF2
TMR0IF                            00000FF2
RBIE                              00000FF2
INT0IE                            00000FF2
TMR0IE                            00000FF2
PEIE_GIEL                         00000FF2
GIE_GIEH                          00000FF2
PROD                              00000FF4
TABLAT                            00000FF5
TBLPTR                            00000FF7
TBLPTRU                           00000FF8
PCL                               00000FF9
PCLATH                            00000FFA
PCLATU                            00000FFB
STKPTR0                           00000FFC
STKPTR                            00000FFC
STKPTR1                           00000FFC
STKPTR2                           00000FFC
STKPTR3                           00000FFC
STKPTR4                           00000FFC
STKUNF                            00000FFC
STKFUL                            00000FFC
TOS                               00000FFE
TOSU                              00000FFF
Allocation:                       0000EEEF
memcmp                            00000036
fix_boot                          00000037
MAIN                              00000027
crc8_table                        00000020
crc8                              00000052
gpios                             00000021
gpio_init                         00000038
gpio_set                          0000002D
gpio_clear                        00000022
gpio_set_value                    0000005B
gpio_get_analog                   00000062
comm_init                         00000038
comm_receive_message              00000053
comm_send_message                 00000056
send_ack                          00000063
set_tx_state                      00000023
set_pa_gain                       00000056
select_antenna                    0000005B
sample_fwd_power                  00000024
sample_rev_power                  0000002F
sample_input_power                00000025
finalize_sf_status_request_respon 00000024
sample_adc_inputs                 0000005D
perform_last_control_message      0000005B
handle_control_message            00000058
handle_bit_status_request_message 00000061
handle_version_request_message    00000063
handle_change_mode_message        00000064
handle_set_calibration_table_mess 00000064
handle_get_calibration_table_mess 00000065
h_test_set_data                   00000066
h_test_get_data                   00000066
process_message                   00000067
init_message_handlers             00000038
ext_isr                           00000031
replaceFlagAndEscape              00000054
restoreFlagAndEscape              00000052
rfc1662_pack                      00000054
rfc1662_unpack                    00000053
uart_init                         00000038
get_next_byte                     0000003F
push_bytes                        00000055
uart_get_byte_nonblocking         0000003F
uart_send                         0000003F
RDA_isr                           00000026
TBE_isr                           00000026
uart_clear_errors                 00000026
writeData                         0000003F
ad5312_latch                      00000061
ad5312_setVout                    00000058
ad5312_init                       00000050
get_calibration_table_data        00000065
set_calibration_table_data        00000064
get_calibration_param             00000063
Memory space:                     0000EEEF

MEMORY USAGE
