MPASM

CCS PCH C Compiler, Version 4.137, 5967               18-Jun-18 18:20

               Filename: D:\Projects\BA\BA1510\embedded\project\BA1510.lst

               ROM used: 13708 bytes (42%)
                         Largest free fragment is 6442
               RAM used: 1010 (66%) at main() level
                         1143 (74%) worst case
               Stack:    11 worst case (7 in main + 4 for interrupts)

2000 EF80 F013      00001 GOTO   2700
2008 6E04           00002 MOVWF  04
200A CFD8 F005      00003 MOVFF  FD8,05
200E CFE0 F006      00004 MOVFF  FE0,06
2012 0100           00005 MOVLB  0
2014 CFE9 F00C      00006 MOVFF  FE9,0C
2018 CFEA F007      00007 MOVFF  FEA,07
201C CFE1 F008      00008 MOVFF  FE1,08
2020 CFE2 F009      00009 MOVFF  FE2,09
2024 CFD9 F00A      00010 MOVFF  FD9,0A
2028 CFDA F00B      00011 MOVFF  FDA,0B
202C CFF3 F012      00012 MOVFF  FF3,12
2030 CFF4 F013      00013 MOVFF  FF4,13
2034 CFFA F014      00014 MOVFF  FFA,14
2038 CFF5 F015      00015 MOVFF  FF5,15
203C CFF6 F016      00016 MOVFF  FF6,16
2040 CFF7 F017      00017 MOVFF  FF7,17
2044 C000 F00E      00018 MOVFF  00,0E
2048 C001 F00F      00019 MOVFF  01,0F
204C C002 F010      00020 MOVFF  02,10
2050 C003 F011      00021 MOVFF  03,11
2054 A8F2           00022 BTFSS  FF2.4
2056 EF30 F010      00023 GOTO   2060
205A B2F2           00024 BTFSC  FF2.1
205C EFD6 F017      00025 GOTO   2FAC
2060 AA9D           00026 BTFSS  F9D.5
2062 EF36 F010      00027 GOTO   206C
2066 BA9E           00028 BTFSC  F9E.5
2068 EF97 F01A      00029 GOTO   352E
206C A89D           00030 BTFSS  F9D.4
206E EF3C F010      00031 GOTO   2078
2072 B89E           00032 BTFSC  F9E.4
2074 EFAF F01A      00033 GOTO   355E
2078 C00E F000      00034 MOVFF  0E,00
207C C00F F001      00035 MOVFF  0F,01
2080 C010 F002      00036 MOVFF  10,02
2084 C011 F003      00037 MOVFF  11,03
2088 C00C FFE9      00038 MOVFF  0C,FE9
208C C007 FFEA      00039 MOVFF  07,FEA
2090 8E07           00040 BSF    07.7
2092 C008 FFE1      00041 MOVFF  08,FE1
2096 C009 FFE2      00042 MOVFF  09,FE2
209A C00A FFD9      00043 MOVFF  0A,FD9
209E C00B FFDA      00044 MOVFF  0B,FDA
20A2 C012 FFF3      00045 MOVFF  12,FF3
20A6 C013 FFF4      00046 MOVFF  13,FF4
20AA C014 FFFA      00047 MOVFF  14,FFA
20AE C015 FFF5      00048 MOVFF  15,FF5
20B2 C016 FFF6      00049 MOVFF  16,FF6
20B6 C017 FFF7      00050 MOVFF  17,FF7
20BA 5004           00051 MOVF   04,W
20BC C006 FFE0      00052 MOVFF  06,FE0
20C0 C005 FFD8      00053 MOVFF  05,FD8
20C4 0010           00054 RETFIE 0
                    00055 ....................  
                    00056 .................... #include "BA1474.h" 
                    00057 .................... #include <18F45K22.h> 
                    00058 .................... //////// Standard Header file for the PIC18F45K22 device //////////////// 
                    00059 .................... #device PIC18F45K22 
                    00719 .................... #list 
                    00720 ....................  
                    00721 .................... #device adc=10 
                    00722 .................... #device pass_strings=in_ram 
                    00723 ....................  
                    00724 .................... #define LOADER_END 0x1FFF 
                    00725 .................... #include <boot.h> 
                    00726 .................... #undef LOADER_END 
                    00727 .................... #define FLASH_SIZE getenv("FLASH_ERASE_SIZE") 
                    00728 .................... #define LOADER_END   0x1FFF 
                    00729 .................... #define LOADER_SIZE  0x3FF 
                    00730 ....................  
                    00731 .................... #ifndef _bootloader 
                    00732 .................... #build(reset=LOADER_END+1, interrupt=LOADER_END+9) 
                    00733 ....................  
                    00734 .................... /* when in operational software, keep out of the bootloader sections */ 
                    00735 .................... #org 0, 0xfff {} 
                    00736 .................... #org 0x1000, 0x1ffe {} 
                    00737 ....................  
                    00738 .................... #else 
                    00739 ....................  
                    00740 .................... /* when in the bootloader, keep out of the operational sections */ 
                    00741 .................... #org 0x2000, 0x7ffe {} 
                    00742 ....................  
                    00743 .................... #endif 
                    00744 ....................  
                    00745 ....................  
                    00746 .................... #FUSES NOWDT                   //No Watch Dog Timer 
                    00747 .................... #FUSES WDT128                  //Watch Dog Timer uses 1:128 Postscale 
                    00748 .................... #FUSES INTRC_IO                //Internal RC Osc, no CLKOUT 
                    00749 .................... #FUSES NOBROWNOUT              //No brownout reset 
                    00750 .................... #FUSES WDT_SW                  //No Watch Dog Timer, enabled in Software 
                    00751 .................... #FUSES NOLVP                   //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
                    00752 .................... #FUSES NOPUT 
                    00753 .................... #FUSES NOXINST                 //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
                    00754 ....................  
                    00755 .................... #use delay(clock=64000000) 
24A2 0E01           00756 MOVLW  01
24A4 0104           00757 MOVLB  4
24A6 5F68           00758 SUBWF  x68,F
24A8 E30C           00759 BNC   24C2
24AA 0E04           00760 MOVLW  04
24AC 6EEA           00761 MOVWF  FEA
24AE 0E68           00762 MOVLW  68
24B0 6EE9           00763 MOVWF  FE9
24B2 50EF           00764 MOVF   FEF,W
24B4 E006           00765 BZ    24C2
24B6 0E04           00766 MOVLW  04
24B8 6E00           00767 MOVWF  00
24BA 2E00           00768 DECFSZ 00,F
24BC D7FE           00769 BRA    24BA
24BE 2EEF           00770 DECFSZ FEF,F
24C0 D7FA           00771 BRA    24B6
24C2 0100           00772 MOVLB  0
24C4 0012           00773 RETURN 0
62BC 0E04           00774 MOVLW  04
62BE 6EEA           00775 MOVWF  FEA
62C0 0E07           00776 MOVLW  07
62C2 6EE9           00777 MOVWF  FE9
62C4 50EF           00778 MOVF   FEF,W
62C6 E00E           00779 BZ    62E4
62C8 0E14           00780 MOVLW  14
62CA 6E01           00781 MOVWF  01
62CC 6A00           00782 CLRF   00
62CE 2E00           00783 DECFSZ 00,F
62D0 D7FE           00784 BRA    62CE
62D2 2E01           00785 DECFSZ 01,F
62D4 D7FB           00786 BRA    62CC
62D6 0EBF           00787 MOVLW  BF
62D8 6E00           00788 MOVWF  00
62DA 2E00           00789 DECFSZ 00,F
62DC D7FE           00790 BRA    62DA
62DE D000           00791 BRA    62E0
62E0 2EEF           00792 DECFSZ FEF,F
62E2 D7F2           00793 BRA    62C8
62E4 EF93 F031      00794 GOTO   6326 (RETURN)
                    00795 .................... #use rs232(baud=921600,xmit=PIN_C6,rcv=PIN_C7,ERRORS) 
                    00796 .................... #USE TIMER(TIMER=1,TICK=1us,BITS=32,NOISR) 
                    00797 .................... #use spi(DO=PIN_A4, CLK=PIN_A3, ENABLE=PIN_A2, ENABLE_ACTIVE=0, DATA_HOLD=20, BITS=16) 
3F12 0104           00798 MOVLB  4
3F14 513F           00799 MOVF   x3F,W
3F16 0810           00800 SUBLW  10
3F18 E005           00801 BZ    3F24
3F1A 6F40           00802 MOVWF  x40
3F1C 373D           00803 RLCF   x3D,F
3F1E 373E           00804 RLCF   x3E,F
3F20 2F40           00805 DECFSZ x40,F
3F22 D7FC           00806 BRA    3F1C
3F24 9892           00807 BCF    F92.4
3F26 9692           00808 BCF    F92.3
3F28 9689           00809 BCF    F89.3
3F2A 9492           00810 BCF    F92.2
3F2C 9489           00811 BCF    F89.2
3F2E C43F F440      00812 MOVFF  43F,440
3F32 8689           00813 BSF    F89.3
3F34 0E05           00814 MOVLW  05
3F36 6F41           00815 MOVWF  x41
3F38 2F41           00816 DECFSZ x41,F
3F3A D7FE           00817 BRA    3F38
3F3C AF3E           00818 BTFSS  x3E.7
3F3E 9889           00819 BCF    F89.4
3F40 BF3E           00820 BTFSC  x3E.7
3F42 8889           00821 BSF    F89.4
3F44 373D           00822 RLCF   x3D,F
3F46 373E           00823 RLCF   x3E,F
3F48 0E16           00824 MOVLW  16
3F4A 6F41           00825 MOVWF  x41
3F4C 2F41           00826 DECFSZ x41,F
3F4E D7FE           00827 BRA    3F4C
3F50 9689           00828 BCF    F89.3
3F52 0E06           00829 MOVLW  06
3F54 6F41           00830 MOVWF  x41
3F56 2F41           00831 DECFSZ x41,F
3F58 D7FE           00832 BRA    3F56
3F5A 2F40           00833 DECFSZ x40,F
3F5C D7EA           00834 BRA    3F32
3F5E 8489           00835 BSF    F89.2
3F60 0100           00836 MOVLB  0
3F62 EFDC F01F      00837 GOTO   3FB8 (RETURN)
                    00838 ....................  
                    00839 .................... #opt 9 
                    00840 ....................  
                    00841 .................... #use fast_io(a) 
                    00842 .................... #use fast_io(b) 
                    00843 .................... #use fast_io(c) 
                    00844 .................... #use fast_io(d) 
                    00845 .................... #use fast_io(e) 
                    00846 ....................  
                    00847 .................... #define safe_write_program_memory(address, pointer, size) \ 
                    00848 ....................   do { disable_interrupts(GLOBAL); write_program_memory(address, pointer, size); enable_interrupts(GLOBAL); delay_us(1000); } while (0) 
                    00849 ....................  
                    00850 ....................  
                    00851 ....................  
                    00852 .................... #include <stdio.h> 
                    00853 .................... /////////////////////////////////////////////////////////////////////////// 
                    00854 .................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
                    00855 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    00856 .................... //// compiler.  This source code may only be distributed to other      //// 
                    00857 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    00858 .................... //// or distribution is permitted without written permission.          //// 
                    00859 .................... //// Derivative programs created using this software in object code    //// 
                    00860 .................... //// form are not restricted in any way.                               //// 
                    00861 .................... /////////////////////////////////////////////////////////////////////////// 
                    00862 ....................  
                    00863 .................... #ifndef _STDIO 
                    00864 .................... #define _STDIO 
                    00865 .................... #include <string.h> 
                    00866 .................... //////////////////////////////////////////////////////////////////////////// 
                    00867 .................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
                    00868 .................... //// This source code may only be used by licensed users of the CCS C   //// 
                    00869 .................... //// compiler.  This source code may only be distributed to other       //// 
                    00870 .................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
                    00871 .................... //// or distribution is permitted without written permission.           //// 
                    00872 .................... //// Derivative programs created using this software in object code     //// 
                    00873 .................... //// form are not restricted in any way.                                //// 
                    00874 .................... //////////////////////////////////////////////////////////////////////////// 
                    00875 ....................  
                    00876 .................... #ifndef _STRING 
                    00877 .................... #define _STRING 
                    00878 .................... #include <stddef.h> 
                    00879 .................... /////////////////////////////////////////////////////////////////////////// 
                    00880 .................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
                    00881 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    00882 .................... //// compiler.  This source code may only be distributed to other      //// 
                    00883 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    00884 .................... //// or distribution is permitted without written permission.          //// 
                    00885 .................... //// Derivative programs created using this software in object code    //// 
                    00886 .................... //// form are not restricted in any way.                               //// 
                    00887 .................... /////////////////////////////////////////////////////////////////////////// 
                    00888 ....................  
                    00889 .................... #ifndef _STDDEF 
                    00890 ....................  
                    00891 .................... #define _STDDEF 
                    00892 ....................  
                    00893 .................... #if sizeof(unsigned int8 *)==1 
                    00894 .................... #define ptrdiff_t unsigned int8 
                    00895 .................... #else 
                    00896 .................... #define ptrdiff_t unsigned int16 
                    00897 .................... #endif 
                    00898 ....................  
                    00899 .................... #if defined(__PCB__) 
                    00900 .................... #define size_t unsigned int8 
                    00901 .................... #else 
                    00902 .................... #define size_t unsigned int16 
                    00903 .................... #endif 
                    00904 .................... #define wchar_t char 
                    00905 .................... #define NULL 0 
                    00906 ....................  
                    00907 .................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
                    00908 ....................  
                    00909 .................... #endif 
                    00910 ....................  
                    00911 .................... #include <ctype.h> 
                    00912 .................... //////////////////////////////////////////////////////////////////////////// 
                    00913 .................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
                    00914 .................... //// This source code may only be used by licensed users of the CCS C   //// 
                    00915 .................... //// compiler.  This source code may only be distributed to other       //// 
                    00916 .................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
                    00917 .................... //// or distribution is permitted without written permission.           //// 
                    00918 .................... //// Derivative programs created using this software in object code     //// 
                    00919 .................... //// form are not restricted in any way.                                //// 
                    00920 .................... //////////////////////////////////////////////////////////////////////////// 
                    00921 ....................  
                    00922 .................... #ifndef _CTYPE 
                    00923 .................... #define _CTYPE 
                    00924 ....................  
                    00925 .................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
                    00926 .................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
                    00927 .................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
                    00928 .................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
                    00929 .................... #define isdigit(x)  isamong(x,"0123456789") 
                    00930 .................... #define isspace(x)  ((x)==' ') 
                    00931 .................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
                    00932 .................... #define iscntrl(x)  ((x)<' ') 
                    00933 .................... #define isprint(x)  ((x)>=' ') 
                    00934 .................... #define isgraph(x)  ((x)>' ') 
                    00935 .................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
                    00936 ....................  
                    00937 .................... #endif 
                    00938 ....................  
                    00939 ....................  
                    00940 ....................  
                    00941 ....................  
                    00942 ....................  
                    00943 .................... ////////////////////////////////////////////// 
                    00944 .................... //// Uncomment the following define to    //// 
                    00945 .................... //// allow some functions to use a        //// 
                    00946 .................... //// quicker algorithm, but use more ROM  //// 
                    00947 .................... ////                                      //// 
                    00948 .................... //// #define FASTER_BUT_MORE_ROM          //// 
                    00949 .................... ////////////////////////////////////////////// 
                    00950 ....................  
                    00951 ....................  
                    00952 ....................  
                    00953 .................... /*Copying functions*/ 
                    00954 .................... /* standard template: 
                    00955 ....................    void *memmove(void *s1, void *s2, size_t n). 
                    00956 ....................    Copies max of n characters safely (not following ending '\0') 
                    00957 ....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
                    00958 ....................  
                    00959 .................... char *memmove(void *s1,char *s2,size_t n) 
                    00960 .................... { 
                    00961 ....................    char *sc1; 
                    00962 ....................    char *sc2; 
                    00963 ....................    sc1=s1; 
                    00964 ....................    sc2=s2; 
                    00965 ....................    if(sc2<sc1 && sc1 <sc2 +n) 
                    00966 ....................       for(sc1+=n,sc2+=n;0<n;--n) 
                    00967 ....................          *--sc1=*--sc2; 
                    00968 ....................    else 
                    00969 ....................       for(;0<n;--n) 
                    00970 ....................          *sc1++=*sc2++; 
                    00971 ....................   return s1; 
                    00972 ....................   } 
                    00973 ....................  
                    00974 .................... /* Standard template: char *strcpy(char *s1, const char *s2) 
                    00975 ....................    copies the string s2 including the null character to s1. 
                    00976 ....................    This is a compiler built in to handle the different address 
                    00977 ....................    spaces */ 
                    00978 ....................  
                    00979 .................... #define strcopy strcpy 
                    00980 ....................  
                    00981 .................... /* standard template: 
                    00982 ....................    char *strncpy(char *s1, const char *s2, size_t n). 
                    00983 ....................    Copies max of n characters (not following ending '\0') 
                    00984 ....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
                    00985 ....................  
                    00986 .................... char *strncpy(char *s1, char *s2, size_t n) 
                    00987 .................... { 
                    00988 ....................   char *s; 
                    00989 ....................  
                    00990 ....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
                    00991 ....................      *s++ = *s2++; 
                    00992 ....................   for (; n > 0; n--) 
                    00993 ....................      *s++ = '\0'; 
                    00994 ....................  
                    00995 ....................   return(s1); 
                    00996 .................... } 
                    00997 .................... /***********************************************************/ 
                    00998 ....................  
                    00999 .................... /*concatenation functions*/ 
                    01000 .................... /* standard template: char *strcat(char *s1, const char *s2) 
                    01001 .................... appends s2 to s1*/ 
                    01002 ....................  
                    01003 .................... char *strcat(char *s1, char *s2) 
                    01004 .................... { 
                    01005 ....................    char *s; 
                    01006 ....................  
                    01007 ....................    for (s = s1; *s != '\0'; ++s); 
                    01008 ....................    while(*s2 != '\0') 
                    01009 ....................    { 
                    01010 ....................       *s = *s2; 
                    01011 ....................       ++s; 
                    01012 ....................       ++s2; 
                    01013 ....................    } 
                    01014 ....................  
                    01015 ....................    *s = '\0'; 
                    01016 ....................    return(s1); 
                    01017 .................... } 
                    01018 .................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
                    01019 .................... appends not more than n characters from s2 to s1*/ 
                    01020 ....................  
                    01021 .................... char *strncat(char *s1, char *s2, size_t n) 
                    01022 .................... { 
                    01023 ....................    char *s; 
                    01024 ....................  
                    01025 ....................    for (s = s1; *s != '\0'; ++s); 
                    01026 ....................    while(*s2 != '\0' && 0<n) 
                    01027 ....................    { 
                    01028 ....................       *s = *s2; 
                    01029 ....................       ++s; 
                    01030 ....................       ++s2; 
                    01031 ....................       --n; 
                    01032 ....................    } 
                    01033 ....................  
                    01034 ....................    *s = '\0'; 
                    01035 ....................    return(s1); 
                    01036 .................... } 
                    01037 ....................  
                    01038 .................... /***********************************************************/ 
                    01039 ....................  
                    01040 ....................  
                    01041 .................... /*comparison functions*/ 
                    01042 .................... /* standard template: signed int memcmp(void *s1, void *s2). 
                    01043 ....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
                    01044 ....................  
                    01045 .................... signed int8 memcmp(void * s1,char *s2,size_t n) 
                    01046 .................... { 
                    01047 .................... char *su1, *su2; 
                    01048 .................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
358E C441 F447      01049 MOVFF  441,447
3592 C440 F446      01050 MOVFF  440,446
3596 C443 F449      01051 MOVFF  443,449
359A C442 F448      01052 MOVFF  442,448
359E 0104           01053 MOVLB  4
35A0 5345           01054 MOVF   x45,F
35A2 E103           01055 BNZ   35AA
35A4 5144           01056 MOVF   x44,W
35A6 0800           01057 SUBLW  00
35A8 E230           01058 BC    360A
                    01059 .................... { 
                    01060 ....................    if(*su1!=*su2) 
35AA C446 FFE9      01061 MOVFF  446,FE9
35AE C447 FFEA      01062 MOVFF  447,FEA
35B2 CFEF F44A      01063 MOVFF  FEF,44A
35B6 C449 F003      01064 MOVFF  449,03
35BA C448 FFE9      01065 MOVFF  448,FE9
35BE C449 FFEA      01066 MOVFF  449,FEA
35C2 50EF           01067 MOVF   FEF,W
35C4 5D4A           01068 SUBWF  x4A,W
35C6 E016           01069 BZ    35F4
                    01070 ....................       return ((*su1<*su2)?-1:+1); 
35C8 C447 F003      01071 MOVFF  447,03
35CC C446 FFE9      01072 MOVFF  446,FE9
35D0 C447 FFEA      01073 MOVFF  447,FEA
35D4 CFEF F44A      01074 MOVFF  FEF,44A
35D8 C449 F003      01075 MOVFF  449,03
35DC C448 FFE9      01076 MOVFF  448,FE9
35E0 C449 FFEA      01077 MOVFF  449,FEA
35E4 50EF           01078 MOVF   FEF,W
35E6 5D4A           01079 SUBWF  x4A,W
35E8 E202           01080 BC    35EE
35EA 0EFF           01081 MOVLW  FF
35EC D001           01082 BRA    35F0
35EE 0E01           01083 MOVLW  01
35F0 6E01           01084 MOVWF  01
35F2 D00D           01085 BRA    360E
                    01086 .................... } 
35F4 2B46           01087 INCF   x46,F
35F6 B4D8           01088 BTFSC  FD8.2
35F8 2B47           01089 INCF   x47,F
35FA 2B48           01090 INCF   x48,F
35FC B4D8           01091 BTFSC  FD8.2
35FE 2B49           01092 INCF   x49,F
3600 5144           01093 MOVF   x44,W
3602 B4D8           01094 BTFSC  FD8.2
3604 0745           01095 DECF   x45,F
3606 0744           01096 DECF   x44,F
3608 D7CB           01097 BRA    35A0
                    01098 .................... return 0; 
360A 0E00           01099 MOVLW  00
360C 6E01           01100 MOVWF  01
                    01101 .................... } 
360E 0100           01102 MOVLB  0
3610 0012           01103 RETURN 0
                    01104 ....................  
                    01105 .................... /* standard template: int strcmp(const char *s1, const char *s2). 
                    01106 ....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
                    01107 ....................  
                    01108 .................... signed int8 strcmp(char *s1, char *s2) 
                    01109 .................... { 
                    01110 ....................    for (; *s1 == *s2; s1++, s2++) 
                    01111 ....................       if (*s1 == '\0') 
                    01112 ....................          return(0); 
                    01113 ....................    return((*s1 < *s2) ? -1: 1); 
                    01114 .................... } 
                    01115 .................... /* standard template: int strcoll(const char *s1, const char *s2). 
                    01116 ....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
                    01117 ....................  
                    01118 .................... signed int8 strcoll(char *s1, char *s2) 
                    01119 .................... { 
                    01120 ....................    for (; *s1 == *s2; s1++, s2++) 
                    01121 ....................       if (*s1 == '\0') 
                    01122 ....................          return(0); 
                    01123 ....................    return((*s1 < *s2) ? -1: 1); 
                    01124 .................... } 
                    01125 ....................  
                    01126 .................... /* standard template: 
                    01127 ....................    int strncmp(const char *s1, const char *s2, size_t n). 
                    01128 ....................    Compares max of n characters (not following 0) from s1 to s2; 
                    01129 ....................    returns same as strcmp */ 
                    01130 ....................  
                    01131 .................... signed int8 strncmp(char *s1, char *s2, size_t n) 
                    01132 .................... { 
                    01133 ....................    for (; n > 0; s1++, s2++, n--) 
                    01134 ....................       if (*s1 != *s2) 
                    01135 ....................          return((*s1 <*s2) ? -1: 1); 
                    01136 ....................       else if (*s1 == '\0') 
                    01137 ....................          return(0); 
                    01138 ....................    return(0); 
                    01139 .................... } 
                    01140 .................... /* standard template: 
                    01141 ....................    int strxfrm(const char *s1, const char *s2, size_t n). 
                    01142 ....................    transforms maximum of n characters from s2 and places them into s1*/ 
                    01143 .................... size_t strxfrm(char *s1, char *s2, size_t n) 
                    01144 .................... { 
                    01145 ....................   char *s; 
                    01146 ....................   unsigned int8 n1; 
                    01147 ....................   n1=n; 
                    01148 ....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
                    01149 ....................      *s++ = *s2++; 
                    01150 ....................   for (; n > 0; n--) 
                    01151 ....................      *s++ = '\0'; 
                    01152 ....................  
                    01153 ....................   return(n1); 
                    01154 .................... } 
                    01155 ....................  
                    01156 ....................  
                    01157 ....................  
                    01158 ....................  
                    01159 ....................  
                    01160 .................... /***********************************************************/ 
                    01161 .................... /*Search functions*/ 
                    01162 .................... /* standard template: void *memchr(const char *s, int c). 
                    01163 ....................    Finds first occurrence of c in n characters of s */ 
                    01164 ....................  
                    01165 .................... char *memchr(void *s,unsigned int8 c,size_t n) 
                    01166 .................... { 
                    01167 ....................    char uc; 
                    01168 ....................    char *su; 
                    01169 ....................    uc=c; 
                    01170 ....................    for(su=s;0<n;++su,--n) 
                    01171 ....................       if(*su==uc) 
                    01172 ....................       return su; 
                    01173 ....................    return NULL; 
                    01174 .................... } 
                    01175 ....................  
                    01176 .................... /* standard template: char *strchr(const char *s, int c). 
                    01177 ....................    Finds first occurrence of c in s */ 
                    01178 ....................  
                    01179 .................... char *strchr(char *s, unsigned int8 c) 
                    01180 .................... { 
                    01181 ....................    for (; *s != c; s++) 
                    01182 ....................       if (*s == '\0') 
                    01183 ....................          return(0); 
                    01184 ....................    return(s); 
                    01185 .................... } 
                    01186 .................... /* standard template: 
                    01187 ....................    size_t strcspn(const char *s1, const char *s2). 
                    01188 ....................    Computes length of max initial segment of s1 that 
                    01189 ....................    consists entirely of characters NOT from s2*/ 
                    01190 ....................  
                    01191 .................... unsigned int8  strcspn(char *s1, char *s2) 
                    01192 .................... { 
                    01193 ....................    char *sc1, *sc2; 
                    01194 ....................  
                    01195 ....................    for (sc1 = s1; *sc1 != 0; sc1++) 
                    01196 ....................       for (sc2 = s2; *sc2 != 0; sc2++) 
                    01197 ....................          if (*sc1 == *sc2) 
                    01198 ....................             return(sc1 - s1); 
                    01199 ....................    return(sc1 - s1); 
                    01200 .................... } 
                    01201 .................... /* standard template: 
                    01202 ....................    char *strpbrk(const char *s1, const char *s2). 
                    01203 ....................    Locates first occurence of any character from s2 in s1; 
                    01204 ....................    returns s1 if s2 is empty string */ 
                    01205 ....................  
                    01206 .................... char *strpbrk(char *s1, char *s2) 
                    01207 .................... { 
                    01208 ....................    char *sc1, *sc2; 
                    01209 ....................  
                    01210 ....................    for (sc1 = s1; *sc1 != 0; sc1++) 
                    01211 ....................       for (sc2 = s2; *sc2 != 0; sc2++) 
                    01212 ....................          if (*sc1 == *sc2) 
                    01213 ....................             return(sc1); 
                    01214 ....................    return(0); 
                    01215 .................... } 
                    01216 ....................  
                    01217 ....................  
                    01218 .................... /* standard template: char *strrchr(const char *s, int c). 
                    01219 ....................    Finds last occurrence of c in s */ 
                    01220 ....................  
                    01221 .................... char *strrchr(char *s, unsigned int8 c) 
                    01222 .................... { 
                    01223 ....................    char *p; 
                    01224 ....................  
                    01225 ....................    for (p = 0; ; s++) 
                    01226 ....................    { 
                    01227 ....................       if (*s == c) 
                    01228 ....................          p = s; 
                    01229 ....................       if (*s == '\0') 
                    01230 ....................          return(p); 
                    01231 ....................    } 
                    01232 .................... } 
                    01233 .................... /* computes length of max initial segment of s1 consisting 
                    01234 ....................    entirely of characters from s2 */ 
                    01235 ....................  
                    01236 .................... unsigned int8  strspn(char *s1, char *s2) 
                    01237 .................... { 
                    01238 ....................    char *sc1, *sc2; 
                    01239 ....................  
                    01240 ....................    for (sc1 = s1; *sc1 != 0; sc1++) 
                    01241 ....................       for (sc2 = s2; ; sc2++) 
                    01242 ....................     if (*sc2 == '\0') 
                    01243 ....................        return(sc1 - s1); 
                    01244 ....................          else if (*sc1 == *sc2) 
                    01245 ....................             break; 
                    01246 ....................    return(sc1 - s1); 
                    01247 .................... } 
                    01248 .................... /* standard template: 
                    01249 ....................    char *strstr(const char *s1, const char *s2); 
                    01250 ....................    Locates first occurence of character sequence s2 in s1; 
                    01251 ....................    returns 0 if s2 is empty string 
                    01252 ....................  
                    01253 ....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
                    01254 ....................    file to use the faster algorithm */ 
                    01255 .................... char *strstr(char *s1, char *s2) 
                    01256 .................... { 
                    01257 ....................    char *s, *t; 
                    01258 ....................  
                    01259 ....................    #ifdef FASTER_BUT_MORE_ROM 
                    01260 ....................    if (*s2 == '\0') 
                    01261 ....................          return(s1); 
                    01262 ....................    #endif 
                    01263 ....................  
                    01264 ....................    while (*s1) 
                    01265 ....................    { 
                    01266 ....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
                    01267 ....................  
                    01268 ....................       if (*t == '\0') 
                    01269 ....................          return s1; 
                    01270 ....................       ++s1; 
                    01271 ....................       #ifdef FASTER_BUT_MORE_ROM 
                    01272 ....................          while(*s1 != '\0' && *s1 != *s2) 
                    01273 ....................             ++s1; 
                    01274 ....................       #endif 
                    01275 ....................    } 
                    01276 ....................    return 0; 
                    01277 .................... } 
                    01278 ....................  
                    01279 .................... /* standard template: char *strtok(char *s1, const char *s2). 
                    01280 ....................  
                    01281 ....................    Finds next token in s1 delimited by a character from separator 
                    01282 ....................    string s2 (which can be different from call to call).  First call 
                    01283 ....................    starts at beginning of s1 searching for first character NOT 
                    01284 ....................    contained in s2; returns 0 if none is found. 
                    01285 ....................    If one is found, it is the start of first token (return value). 
                    01286 ....................    Function then searches from there for a character contained in s2. 
                    01287 ....................    If none is found, current token extends to end of s1, and subsequent 
                    01288 ....................    searches for a token will return 0.  If one is found, it is 
                    01289 ....................    overwritten by '\0', which terminates current token.  Function saves 
                    01290 ....................    pointer to following character from which next search will start. 
                    01291 ....................    Each subsequent call, with 0 as first argument, starts searching 
                    01292 ....................    from saved pointer */ 
                    01293 ....................  
                    01294 .................... char *strtok(char *s1, char *s2) 
                    01295 .................... { 
                    01296 ....................    char *beg, *end; 
                    01297 ....................    static char *save; 
                    01298 ....................  
                    01299 ....................    beg = (s1)? s1: save; 
                    01300 ....................    beg += strspn(beg, s2); 
                    01301 ....................    if (*beg == '\0') 
                    01302 ....................    { 
                    01303 ....................       *save = ' '; 
                    01304 ....................       return(0); 
                    01305 ....................    } 
                    01306 ....................    end = strpbrk(beg, s2); 
                    01307 ....................    if (*end != '\0') 
                    01308 ....................    { 
                    01309 ....................       *end = '\0'; 
                    01310 ....................       end++; 
                    01311 ....................    } 
                    01312 ....................    save = end; 
                    01313 ....................    return(beg); 
                    01314 .................... } 
                    01315 ....................  
                    01316 .................... /*****************************************************************/ 
                    01317 .................... /*Miscellaneous functions*/ 
                    01318 .................... /* standard template 
                    01319 .................... maps error number in errnum to an error message string 
                    01320 .................... Returns: Pointer to string 
                    01321 .................... */ 
                    01322 .................... #ifdef _ERRNO 
                    01323 .................... char * strerror(unsigned int8 errnum) 
                    01324 .................... { 
                    01325 .................... static char s[13]; 
                    01326 .................... switch( errnum) 
                    01327 .................... { 
                    01328 .................... case 0: 
                    01329 ....................    strcpy(s,"no errors"); 
                    01330 ....................    return s; 
                    01331 .................... case EDOM : 
                    01332 ....................    strcpy(s,"domain error"); 
                    01333 ....................    return s; 
                    01334 .................... case ERANGE: 
                    01335 ....................    strcpy(s,"range error"); 
                    01336 ....................    return s; 
                    01337 .................... } 
                    01338 .................... } 
                    01339 .................... #ENDIF 
                    01340 .................... /* standard template: size_t strlen(const char *s). 
                    01341 ....................    Computes length of s1 (preceding terminating 0) */ 
                    01342 ....................  
                    01343 .................... unsigned int8 strlen(char *s) 
                    01344 .................... { 
                    01345 ....................    char *sc; 
                    01346 ....................  
                    01347 ....................    for (sc = s; *sc != 0; sc++); 
                    01348 ....................    return(sc - s); 
                    01349 .................... } 
                    01350 ....................  
                    01351 .................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
                    01352 ....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
                    01353 ....................  
                    01354 .................... signed int8 stricmp(char *s1, char *s2) 
                    01355 .................... { 
                    01356 ....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
                    01357 ....................     s1++, s2++) 
                    01358 ....................     if (*s1 == '\0') 
                    01359 ....................        return(0); 
                    01360 ....................  return((*s1 < *s2) ? -1: 1); 
                    01361 .................... } 
                    01362 ....................  
                    01363 ....................  
                    01364 .................... /* standard template: char *strlwr(char *s). 
                    01365 ....................    Replaces uppercase letters by lowercase; 
                    01366 ....................    returns pointer to new string s */ 
                    01367 ....................  
                    01368 .................... char *strlwr(char *s) 
                    01369 .................... { 
                    01370 ....................    char *p; 
                    01371 ....................  
                    01372 ....................    for (p = s; *p != '\0'; p++) 
                    01373 ....................       if (*p >= 'A' && *p <='Z') 
                    01374 ....................          *p += 'a' - 'A'; 
                    01375 ....................    return(s); 
                    01376 .................... } 
                    01377 ....................  
                    01378 .................... /* standard template: char *strupr(char *s). 
                    01379 ....................    Replaces lowercase letters by upercase; 
                    01380 ....................    returns pointer to new string s */ 
                    01381 ....................  
                    01382 .................... char *strupr(char *s) 
                    01383 .................... { 
                    01384 ....................    char *p; 
                    01385 ....................  
                    01386 ....................    for (p = s; *p != '\0'; p++) 
                    01387 ....................       if (*p >= 'a' && *p <='z') 
                    01388 ....................          *p -= 'a' - 'A'; 
                    01389 ....................    return(s); 
                    01390 .................... } 
                    01391 ....................  
                    01392 ....................  
                    01393 .................... /************************************************************/ 
                    01394 ....................  
                    01395 ....................  
                    01396 .................... #endif 
                    01397 ....................  
                    01398 .................... #ifndef getc 
                    01399 .................... #define getc getch 
                    01400 .................... #define getchar getch 
                    01401 .................... #define puts(s) {printf(s); putchar(13); putchar(10);} 
                    01402 .................... #define putc putchar 
                    01403 .................... #endif 
                    01404 .................... /* maps error number to an error message. Writes a sequence of characters to 
                    01405 .................... stderr stream thus: if s is not null then string pointed to by s follwed by 
                    01406 .................... a colon (:) and a space and the appropriate error message returned by strerror 
                    01407 .................... function with argument errno 
                    01408 ....................  
                    01409 .................... Returns: no value 
                    01410 .................... */ 
                    01411 ....................  
                    01412 .................... #ifdef _ERRNO 
                    01413 .................... void perror(char *s) 
                    01414 .................... { 
                    01415 ....................   if(s) 
                    01416 ....................   fprintf(STDERR,"%s: ",s); 
                    01417 ....................   fprintf(STDERR,"%s\r\n",strerror(errno)); 
                    01418 .................... } 
                    01419 .................... #endif 
                    01420 .................... #endif 
                    01421 ....................  
                    01422 .................... #include <stdint.h> 
                    01423 .................... /////////////////////////////////////////////////////////////////////////// 
                    01424 .................... ////                                                                   //// 
                    01425 .................... ////                           stdint.h                                //// 
                    01426 .................... ////                                                                   //// 
                    01427 .................... //// Standard integer definitions.                                     //// 
                    01428 .................... ////                                                                   //// 
                    01429 .................... /////////////////////////////////////////////////////////////////////////// 
                    01430 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    01431 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    01432 .................... //// compiler.  This source code may only be distributed to other      //// 
                    01433 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    01434 .................... //// or distribution is permitted without written permission.          //// 
                    01435 .................... //// Derivative programs created using this software in object code    //// 
                    01436 .................... //// form are not restricted in any way.                               //// 
                    01437 .................... /////////////////////////////////////////////////////////////////////////// 
                    01438 ....................  
                    01439 .................... #ifndef _STDINT 
                    01440 ....................  
                    01441 .................... #define _STDINT 
                    01442 ....................  
                    01443 .................... //////////// exact width 
                    01444 ....................  
                    01445 .................... typedef signed int8 int8_t; 
                    01446 .................... typedef unsigned int8 uint8_t; 
                    01447 .................... typedef signed int16 int16_t; 
                    01448 .................... typedef unsigned int16 uint16_t; 
                    01449 .................... typedef signed int32 int32_t; 
                    01450 .................... typedef unsigned int32 uint32_t; 
                    01451 ....................  
                    01452 .................... #if defined(__PCD__) 
                    01453 .................... //typedef signed int24 int24_t; 
                    01454 .................... //typedef unsigned int24 uint24_t; 
                    01455 .................... typedef signed int64 int64_t; 
                    01456 .................... typedef unsigned int64 uint64_t; 
                    01457 .................... #endif 
                    01458 ....................  
                    01459 .................... #define INT8_MAX  (128) 
                    01460 .................... #define INT8_MIN  (-127) 
                    01461 .................... #define UINT8_MAX (255) 
                    01462 ....................  
                    01463 .................... #define INT16_MAX  (32767) 
                    01464 .................... #define INT16_MIN  (-32768) 
                    01465 .................... #define UINT16_MAX (65535) 
                    01466 ....................  
                    01467 .................... #define INT32_MAX  (2147483647) 
                    01468 .................... #define INT32_MIN  (-2147483648) 
                    01469 .................... #define UINT32_MAX (4294967295) 
                    01470 ....................  
                    01471 .................... #if defined(__PCD__) 
                    01472 .................... //#define INT24_MAX  (8388607) 
                    01473 .................... //#define INT24_MIN  (-8388608) 
                    01474 .................... //#define UINT24_MAX (16777215) 
                    01475 ....................  
                    01476 .................... #define INT64_MAX  (9223372036854775807) 
                    01477 .................... #define INT64_MIN  (-9223372036854775808) 
                    01478 .................... #define UINT64_MAX (18446744073709551615) 
                    01479 .................... #endif 
                    01480 ....................  
                    01481 .................... ///////// minimum width 
                    01482 ....................  
                    01483 .................... typedef signed int8 int_least8_t; 
                    01484 .................... typedef unsigned int8 uint_least8_t; 
                    01485 .................... typedef signed int16 int_least16_t; 
                    01486 .................... typedef unsigned int16 uint_least16_t; 
                    01487 .................... typedef signed int32 int_least32_t; 
                    01488 .................... typedef unsigned int32 uint_least32_t; 
                    01489 ....................  
                    01490 .................... #if defined(__PCD__) 
                    01491 .................... //typedef signed int24 int_least24_t; 
                    01492 .................... //typedef unsigned int24 uint_least24_t; 
                    01493 .................... typedef signed int64 int_least64_t; 
                    01494 .................... typedef unsigned int64 uint_least64_t; 
                    01495 .................... #endif 
                    01496 ....................  
                    01497 .................... #define INT_LEAST8_MAX  (128) 
                    01498 .................... #define INT_LEAST8_MIN  (-127) 
                    01499 .................... #define UINT_LEAST8_MAX (255) 
                    01500 ....................  
                    01501 .................... #define INT_LEAST16_MAX  (32767) 
                    01502 .................... #define INT_LEAST16_MIN  (-32768) 
                    01503 .................... #define UINT_LEAST16_MAX (65535) 
                    01504 ....................  
                    01505 .................... #define INT_LEAST32_MAX  (2147483647) 
                    01506 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    01507 .................... #define UINT_LEAST32_MAX (4294967295) 
                    01508 ....................  
                    01509 .................... #if defined(__PCD__) 
                    01510 .................... //#define INT_LEAST24_MAX  (8388607) 
                    01511 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    01512 .................... //#define UINT_LEAST24_MAX (16777215) 
                    01513 ....................  
                    01514 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    01515 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    01516 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    01517 .................... #endif 
                    01518 ....................  
                    01519 .................... ///////// fastest width 
                    01520 ....................  
                    01521 .................... #if defined(__PCD__) 
                    01522 .................... typedef signed int16 int_fast8_t; 
                    01523 .................... typedef unsigned int16 uint_fast8_t; 
                    01524 .................... #define INT_FAST8_MAX  (32767) 
                    01525 .................... #define INT_FAST8_MIN  (-32768) 
                    01526 .................... #define UINT_FAST8_MAX (65535) 
                    01527 .................... typedef signed int16 int_fast16_t; 
                    01528 .................... typedef unsigned int16 uint_fast16_t; 
                    01529 .................... //typedef signed int24 int_fast24_t; 
                    01530 .................... //typedef unsigned int24 uint_fast24_t; 
                    01531 .................... typedef signed int64 int_fast64_t; 
                    01532 .................... typedef unsigned int64 uint_fast64_t; 
                    01533 .................... #else 
                    01534 .................... typedef signed int8 int_fast8_t; 
                    01535 .................... typedef unsigned int8 uint_fast8_t; 
                    01536 .................... #define INT_FAST8_MAX  (128) 
                    01537 .................... #define INT_FAST8_MIN  (-127) 
                    01538 .................... #define UINT_FAST8_MAX (255) 
                    01539 .................... typedef signed int16 int_fast16_t; 
                    01540 .................... typedef unsigned int16 uint_fast16_t; 
                    01541 .................... #endif 
                    01542 ....................  
                    01543 .................... typedef signed int32 int_fast32_t; 
                    01544 .................... typedef unsigned int32 uint_fast32_t; 
                    01545 ....................  
                    01546 .................... #define INT_FAST16_MAX  (32767) 
                    01547 .................... #define INT_FAST16_MIN  (-32768) 
                    01548 .................... #define UINT_FAST16_MAX (65535) 
                    01549 ....................  
                    01550 .................... #define INT_FAST32_MAX  (2147483647) 
                    01551 .................... #define INT_FAST32_MIN  (-2147483648) 
                    01552 .................... #define UINT_FAST32_MAX (4294967295) 
                    01553 ....................  
                    01554 .................... #if defined(__PCD__) 
                    01555 .................... //#define INT_FAST24_MAX  (8388607) 
                    01556 .................... //#define INT_FAST24_MIN  (-8388608) 
                    01557 .................... //#define UINT_FAST24_MAX (16777215) 
                    01558 ....................  
                    01559 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    01560 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    01561 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    01562 .................... #endif 
                    01563 ....................  
                    01564 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    01565 ....................  
                    01566 .................... /// TODO 
                    01567 ....................  
                    01568 .................... /// intptr_t uintptr_t 
                    01569 ....................  
                    01570 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    01571 ....................  
                    01572 ....................  
                    01573 .................... /////////// greatest width (OPTIONAL) 
                    01574 ....................  
                    01575 .................... /// TODO 
                    01576 ....................  
                    01577 .................... /// intmax_t uintmax_t 
                    01578 ....................  
                    01579 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    01580 ....................  
                    01581 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    01582 ....................  
                    01583 ....................  
                    01584 .................... #endif 
                    01585 ....................  
                    01586 .................... #include <ctype.h> 
                    01587 .................... //////////////////////////////////////////////////////////////////////////// 
                    01588 .................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
                    01589 .................... //// This source code may only be used by licensed users of the CCS C   //// 
                    01590 .................... //// compiler.  This source code may only be distributed to other       //// 
                    01591 .................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
                    01592 .................... //// or distribution is permitted without written permission.           //// 
                    01593 .................... //// Derivative programs created using this software in object code     //// 
                    01594 .................... //// form are not restricted in any way.                                //// 
                    01595 .................... //////////////////////////////////////////////////////////////////////////// 
                    01596 ....................  
                    01597 .................... #ifndef _CTYPE 
                    01598 .................... #define _CTYPE 
                    01599 ....................  
                    01600 .................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
                    01601 .................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
                    01602 .................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
                    01603 .................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
                    01604 .................... #define isdigit(x)  isamong(x,"0123456789") 
                    01605 .................... #define isspace(x)  ((x)==' ') 
                    01606 .................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
                    01607 .................... #define iscntrl(x)  ((x)<' ') 
                    01608 .................... #define isprint(x)  ((x)>=' ') 
                    01609 .................... #define isgraph(x)  ((x)>' ') 
                    01610 .................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
                    01611 ....................  
                    01612 .................... #endif 
                    01613 ....................  
                    01614 ....................  
                    01615 ....................  
                    01616 .................... #include "comm.h" 
                    01617 .................... /* 
                    01618 ....................  * comm.h 
                    01619 ....................  * 
                    01620 ....................  *  Created on: Mar 23, 2017 
                    01621 ....................  *      Author: asaf 
                    01622 ....................  */ 
                    01623 ....................  
                    01624 .................... #ifndef COMM_H_ 
                    01625 .................... #define COMM_H_ 
                    01626 ....................  
                    01627 .................... #include <stdint.h> 
                    01628 .................... /////////////////////////////////////////////////////////////////////////// 
                    01629 .................... ////                                                                   //// 
                    01630 .................... ////                           stdint.h                                //// 
                    01631 .................... ////                                                                   //// 
                    01632 .................... //// Standard integer definitions.                                     //// 
                    01633 .................... ////                                                                   //// 
                    01634 .................... /////////////////////////////////////////////////////////////////////////// 
                    01635 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    01636 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    01637 .................... //// compiler.  This source code may only be distributed to other      //// 
                    01638 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    01639 .................... //// or distribution is permitted without written permission.          //// 
                    01640 .................... //// Derivative programs created using this software in object code    //// 
                    01641 .................... //// form are not restricted in any way.                               //// 
                    01642 .................... /////////////////////////////////////////////////////////////////////////// 
                    01643 ....................  
                    01644 .................... #ifndef _STDINT 
                    01645 ....................  
                    01646 .................... #define _STDINT 
                    01647 ....................  
                    01648 .................... //////////// exact width 
                    01649 ....................  
                    01650 .................... typedef signed int8 int8_t; 
                    01651 .................... typedef unsigned int8 uint8_t; 
                    01652 .................... typedef signed int16 int16_t; 
                    01653 .................... typedef unsigned int16 uint16_t; 
                    01654 .................... typedef signed int32 int32_t; 
                    01655 .................... typedef unsigned int32 uint32_t; 
                    01656 ....................  
                    01657 .................... #if defined(__PCD__) 
                    01658 .................... //typedef signed int24 int24_t; 
                    01659 .................... //typedef unsigned int24 uint24_t; 
                    01660 .................... typedef signed int64 int64_t; 
                    01661 .................... typedef unsigned int64 uint64_t; 
                    01662 .................... #endif 
                    01663 ....................  
                    01664 .................... #define INT8_MAX  (128) 
                    01665 .................... #define INT8_MIN  (-127) 
                    01666 .................... #define UINT8_MAX (255) 
                    01667 ....................  
                    01668 .................... #define INT16_MAX  (32767) 
                    01669 .................... #define INT16_MIN  (-32768) 
                    01670 .................... #define UINT16_MAX (65535) 
                    01671 ....................  
                    01672 .................... #define INT32_MAX  (2147483647) 
                    01673 .................... #define INT32_MIN  (-2147483648) 
                    01674 .................... #define UINT32_MAX (4294967295) 
                    01675 ....................  
                    01676 .................... #if defined(__PCD__) 
                    01677 .................... //#define INT24_MAX  (8388607) 
                    01678 .................... //#define INT24_MIN  (-8388608) 
                    01679 .................... //#define UINT24_MAX (16777215) 
                    01680 ....................  
                    01681 .................... #define INT64_MAX  (9223372036854775807) 
                    01682 .................... #define INT64_MIN  (-9223372036854775808) 
                    01683 .................... #define UINT64_MAX (18446744073709551615) 
                    01684 .................... #endif 
                    01685 ....................  
                    01686 .................... ///////// minimum width 
                    01687 ....................  
                    01688 .................... typedef signed int8 int_least8_t; 
                    01689 .................... typedef unsigned int8 uint_least8_t; 
                    01690 .................... typedef signed int16 int_least16_t; 
                    01691 .................... typedef unsigned int16 uint_least16_t; 
                    01692 .................... typedef signed int32 int_least32_t; 
                    01693 .................... typedef unsigned int32 uint_least32_t; 
                    01694 ....................  
                    01695 .................... #if defined(__PCD__) 
                    01696 .................... //typedef signed int24 int_least24_t; 
                    01697 .................... //typedef unsigned int24 uint_least24_t; 
                    01698 .................... typedef signed int64 int_least64_t; 
                    01699 .................... typedef unsigned int64 uint_least64_t; 
                    01700 .................... #endif 
                    01701 ....................  
                    01702 .................... #define INT_LEAST8_MAX  (128) 
                    01703 .................... #define INT_LEAST8_MIN  (-127) 
                    01704 .................... #define UINT_LEAST8_MAX (255) 
                    01705 ....................  
                    01706 .................... #define INT_LEAST16_MAX  (32767) 
                    01707 .................... #define INT_LEAST16_MIN  (-32768) 
                    01708 .................... #define UINT_LEAST16_MAX (65535) 
                    01709 ....................  
                    01710 .................... #define INT_LEAST32_MAX  (2147483647) 
                    01711 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    01712 .................... #define UINT_LEAST32_MAX (4294967295) 
                    01713 ....................  
                    01714 .................... #if defined(__PCD__) 
                    01715 .................... //#define INT_LEAST24_MAX  (8388607) 
                    01716 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    01717 .................... //#define UINT_LEAST24_MAX (16777215) 
                    01718 ....................  
                    01719 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    01720 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    01721 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    01722 .................... #endif 
                    01723 ....................  
                    01724 .................... ///////// fastest width 
                    01725 ....................  
                    01726 .................... #if defined(__PCD__) 
                    01727 .................... typedef signed int16 int_fast8_t; 
                    01728 .................... typedef unsigned int16 uint_fast8_t; 
                    01729 .................... #define INT_FAST8_MAX  (32767) 
                    01730 .................... #define INT_FAST8_MIN  (-32768) 
                    01731 .................... #define UINT_FAST8_MAX (65535) 
                    01732 .................... typedef signed int16 int_fast16_t; 
                    01733 .................... typedef unsigned int16 uint_fast16_t; 
                    01734 .................... //typedef signed int24 int_fast24_t; 
                    01735 .................... //typedef unsigned int24 uint_fast24_t; 
                    01736 .................... typedef signed int64 int_fast64_t; 
                    01737 .................... typedef unsigned int64 uint_fast64_t; 
                    01738 .................... #else 
                    01739 .................... typedef signed int8 int_fast8_t; 
                    01740 .................... typedef unsigned int8 uint_fast8_t; 
                    01741 .................... #define INT_FAST8_MAX  (128) 
                    01742 .................... #define INT_FAST8_MIN  (-127) 
                    01743 .................... #define UINT_FAST8_MAX (255) 
                    01744 .................... typedef signed int16 int_fast16_t; 
                    01745 .................... typedef unsigned int16 uint_fast16_t; 
                    01746 .................... #endif 
                    01747 ....................  
                    01748 .................... typedef signed int32 int_fast32_t; 
                    01749 .................... typedef unsigned int32 uint_fast32_t; 
                    01750 ....................  
                    01751 .................... #define INT_FAST16_MAX  (32767) 
                    01752 .................... #define INT_FAST16_MIN  (-32768) 
                    01753 .................... #define UINT_FAST16_MAX (65535) 
                    01754 ....................  
                    01755 .................... #define INT_FAST32_MAX  (2147483647) 
                    01756 .................... #define INT_FAST32_MIN  (-2147483648) 
                    01757 .................... #define UINT_FAST32_MAX (4294967295) 
                    01758 ....................  
                    01759 .................... #if defined(__PCD__) 
                    01760 .................... //#define INT_FAST24_MAX  (8388607) 
                    01761 .................... //#define INT_FAST24_MIN  (-8388608) 
                    01762 .................... //#define UINT_FAST24_MAX (16777215) 
                    01763 ....................  
                    01764 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    01765 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    01766 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    01767 .................... #endif 
                    01768 ....................  
                    01769 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    01770 ....................  
                    01771 .................... /// TODO 
                    01772 ....................  
                    01773 .................... /// intptr_t uintptr_t 
                    01774 ....................  
                    01775 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    01776 ....................  
                    01777 ....................  
                    01778 .................... /////////// greatest width (OPTIONAL) 
                    01779 ....................  
                    01780 .................... /// TODO 
                    01781 ....................  
                    01782 .................... /// intmax_t uintmax_t 
                    01783 ....................  
                    01784 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    01785 ....................  
                    01786 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    01787 ....................  
                    01788 ....................  
                    01789 .................... #endif 
                    01790 ....................  
                    01791 .................... #include <stdbool.h> 
                    01792 .................... /////////////////////////////////////////////////////////////////////////// 
                    01793 .................... ////                                                                   //// 
                    01794 .................... ////                          stdbool.h                                //// 
                    01795 .................... ////                                                                   //// 
                    01796 .................... //// Standard boolean definitions                                      //// 
                    01797 .................... ////                                                                   //// 
                    01798 .................... /////////////////////////////////////////////////////////////////////////// 
                    01799 .................... ////        (C) Copyright 1996,2012 Custom Computer Services           //// 
                    01800 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    01801 .................... //// compiler.  This source code may only be distributed to other      //// 
                    01802 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    01803 .................... //// or distribution is permitted without written permission.          //// 
                    01804 .................... //// Derivative programs created using this software in object code    //// 
                    01805 .................... //// form are not restricted in any way.                               //// 
                    01806 .................... /////////////////////////////////////////////////////////////////////////// 
                    01807 ....................  
                    01808 .................... #ifndef __STDBOOL_H__ 
                    01809 .................... #define __STDBOOL_H__ 
                    01810 ....................  
                    01811 .................... //remove TRUE and FALSE added by CCS's device .h file 
                    01812 .................... #if defined(TRUE) 
                    01813 .................... #undef TRUE 
                    01814 .................... #endif 
                    01815 .................... #if defined(FALSE) 
                    01816 .................... #undef FALSE 
                    01817 .................... #endif 
                    01818 ....................  
                    01819 .................... typedef int1   bool; 
                    01820 .................... #define true   1 
                    01821 .................... #define false  0 
                    01822 .................... #define __bool_true_false_are_defined  1 
                    01823 ....................  
                    01824 .................... #endif 
                    01825 ....................  
                    01826 ....................  
                    01827 .................... #define MSG_MAX_MESSAGE_LEN 80 
                    01828 ....................  
                    01829 .................... #ifndef MIN 
                    01830 .................... #define MIN(x,y) ((x)<(y)?(x):(y)) 
                    01831 .................... #endif 
                    01832 .................... #ifndef MAX 
                    01833 .................... #define	MAX(a,b) (((a)>(b))?(a):(b)) 
                    01834 .................... #endif 
                    01835 ....................  
                    01836 .................... #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0])) 
                    01837 .................... #define MAX_INDEX_IN_ARRAY(x) (ARRAY_SIZE(x)-1) 
                    01838 ....................  
                    01839 .................... void comm_init(); 
                    01840 .................... bool comm_receive_message(void* buffer, uint16_t* size); 
                    01841 .................... void comm_send_message(void* buffer, uint16_t size); 
                    01842 ....................  
                    01843 ....................  
                    01844 ....................  
                    01845 .................... #endif /* COMM_H_ */ 
                    01846 ....................  
                    01847 .................... #include "gpio.h" 
                    01848 .................... /* 
                    01849 ....................  * gpio.h 
                    01850 ....................  * 
                    01851 ....................  *  Created on: Mar 8, 2017 
                    01852 ....................  *      Author: asafe 
                    01853 ....................  */ 
                    01854 ....................  
                    01855 .................... #ifndef INCLUDE_GPIO_H_ 
                    01856 .................... #define INCLUDE_GPIO_H_ 
                    01857 ....................  
                    01858 .................... #include <stdint.h> 
                    01859 .................... /////////////////////////////////////////////////////////////////////////// 
                    01860 .................... ////                                                                   //// 
                    01861 .................... ////                           stdint.h                                //// 
                    01862 .................... ////                                                                   //// 
                    01863 .................... //// Standard integer definitions.                                     //// 
                    01864 .................... ////                                                                   //// 
                    01865 .................... /////////////////////////////////////////////////////////////////////////// 
                    01866 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    01867 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    01868 .................... //// compiler.  This source code may only be distributed to other      //// 
                    01869 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    01870 .................... //// or distribution is permitted without written permission.          //// 
                    01871 .................... //// Derivative programs created using this software in object code    //// 
                    01872 .................... //// form are not restricted in any way.                               //// 
                    01873 .................... /////////////////////////////////////////////////////////////////////////// 
                    01874 ....................  
                    01875 .................... #ifndef _STDINT 
                    01876 ....................  
                    01877 .................... #define _STDINT 
                    01878 ....................  
                    01879 .................... //////////// exact width 
                    01880 ....................  
                    01881 .................... typedef signed int8 int8_t; 
                    01882 .................... typedef unsigned int8 uint8_t; 
                    01883 .................... typedef signed int16 int16_t; 
                    01884 .................... typedef unsigned int16 uint16_t; 
                    01885 .................... typedef signed int32 int32_t; 
                    01886 .................... typedef unsigned int32 uint32_t; 
                    01887 ....................  
                    01888 .................... #if defined(__PCD__) 
                    01889 .................... //typedef signed int24 int24_t; 
                    01890 .................... //typedef unsigned int24 uint24_t; 
                    01891 .................... typedef signed int64 int64_t; 
                    01892 .................... typedef unsigned int64 uint64_t; 
                    01893 .................... #endif 
                    01894 ....................  
                    01895 .................... #define INT8_MAX  (128) 
                    01896 .................... #define INT8_MIN  (-127) 
                    01897 .................... #define UINT8_MAX (255) 
                    01898 ....................  
                    01899 .................... #define INT16_MAX  (32767) 
                    01900 .................... #define INT16_MIN  (-32768) 
                    01901 .................... #define UINT16_MAX (65535) 
                    01902 ....................  
                    01903 .................... #define INT32_MAX  (2147483647) 
                    01904 .................... #define INT32_MIN  (-2147483648) 
                    01905 .................... #define UINT32_MAX (4294967295) 
                    01906 ....................  
                    01907 .................... #if defined(__PCD__) 
                    01908 .................... //#define INT24_MAX  (8388607) 
                    01909 .................... //#define INT24_MIN  (-8388608) 
                    01910 .................... //#define UINT24_MAX (16777215) 
                    01911 ....................  
                    01912 .................... #define INT64_MAX  (9223372036854775807) 
                    01913 .................... #define INT64_MIN  (-9223372036854775808) 
                    01914 .................... #define UINT64_MAX (18446744073709551615) 
                    01915 .................... #endif 
                    01916 ....................  
                    01917 .................... ///////// minimum width 
                    01918 ....................  
                    01919 .................... typedef signed int8 int_least8_t; 
                    01920 .................... typedef unsigned int8 uint_least8_t; 
                    01921 .................... typedef signed int16 int_least16_t; 
                    01922 .................... typedef unsigned int16 uint_least16_t; 
                    01923 .................... typedef signed int32 int_least32_t; 
                    01924 .................... typedef unsigned int32 uint_least32_t; 
                    01925 ....................  
                    01926 .................... #if defined(__PCD__) 
                    01927 .................... //typedef signed int24 int_least24_t; 
                    01928 .................... //typedef unsigned int24 uint_least24_t; 
                    01929 .................... typedef signed int64 int_least64_t; 
                    01930 .................... typedef unsigned int64 uint_least64_t; 
                    01931 .................... #endif 
                    01932 ....................  
                    01933 .................... #define INT_LEAST8_MAX  (128) 
                    01934 .................... #define INT_LEAST8_MIN  (-127) 
                    01935 .................... #define UINT_LEAST8_MAX (255) 
                    01936 ....................  
                    01937 .................... #define INT_LEAST16_MAX  (32767) 
                    01938 .................... #define INT_LEAST16_MIN  (-32768) 
                    01939 .................... #define UINT_LEAST16_MAX (65535) 
                    01940 ....................  
                    01941 .................... #define INT_LEAST32_MAX  (2147483647) 
                    01942 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    01943 .................... #define UINT_LEAST32_MAX (4294967295) 
                    01944 ....................  
                    01945 .................... #if defined(__PCD__) 
                    01946 .................... //#define INT_LEAST24_MAX  (8388607) 
                    01947 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    01948 .................... //#define UINT_LEAST24_MAX (16777215) 
                    01949 ....................  
                    01950 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    01951 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    01952 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    01953 .................... #endif 
                    01954 ....................  
                    01955 .................... ///////// fastest width 
                    01956 ....................  
                    01957 .................... #if defined(__PCD__) 
                    01958 .................... typedef signed int16 int_fast8_t; 
                    01959 .................... typedef unsigned int16 uint_fast8_t; 
                    01960 .................... #define INT_FAST8_MAX  (32767) 
                    01961 .................... #define INT_FAST8_MIN  (-32768) 
                    01962 .................... #define UINT_FAST8_MAX (65535) 
                    01963 .................... typedef signed int16 int_fast16_t; 
                    01964 .................... typedef unsigned int16 uint_fast16_t; 
                    01965 .................... //typedef signed int24 int_fast24_t; 
                    01966 .................... //typedef unsigned int24 uint_fast24_t; 
                    01967 .................... typedef signed int64 int_fast64_t; 
                    01968 .................... typedef unsigned int64 uint_fast64_t; 
                    01969 .................... #else 
                    01970 .................... typedef signed int8 int_fast8_t; 
                    01971 .................... typedef unsigned int8 uint_fast8_t; 
                    01972 .................... #define INT_FAST8_MAX  (128) 
                    01973 .................... #define INT_FAST8_MIN  (-127) 
                    01974 .................... #define UINT_FAST8_MAX (255) 
                    01975 .................... typedef signed int16 int_fast16_t; 
                    01976 .................... typedef unsigned int16 uint_fast16_t; 
                    01977 .................... #endif 
                    01978 ....................  
                    01979 .................... typedef signed int32 int_fast32_t; 
                    01980 .................... typedef unsigned int32 uint_fast32_t; 
                    01981 ....................  
                    01982 .................... #define INT_FAST16_MAX  (32767) 
                    01983 .................... #define INT_FAST16_MIN  (-32768) 
                    01984 .................... #define UINT_FAST16_MAX (65535) 
                    01985 ....................  
                    01986 .................... #define INT_FAST32_MAX  (2147483647) 
                    01987 .................... #define INT_FAST32_MIN  (-2147483648) 
                    01988 .................... #define UINT_FAST32_MAX (4294967295) 
                    01989 ....................  
                    01990 .................... #if defined(__PCD__) 
                    01991 .................... //#define INT_FAST24_MAX  (8388607) 
                    01992 .................... //#define INT_FAST24_MIN  (-8388608) 
                    01993 .................... //#define UINT_FAST24_MAX (16777215) 
                    01994 ....................  
                    01995 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    01996 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    01997 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    01998 .................... #endif 
                    01999 ....................  
                    02000 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    02001 ....................  
                    02002 .................... /// TODO 
                    02003 ....................  
                    02004 .................... /// intptr_t uintptr_t 
                    02005 ....................  
                    02006 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    02007 ....................  
                    02008 ....................  
                    02009 .................... /////////// greatest width (OPTIONAL) 
                    02010 ....................  
                    02011 .................... /// TODO 
                    02012 ....................  
                    02013 .................... /// intmax_t uintmax_t 
                    02014 ....................  
                    02015 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    02016 ....................  
                    02017 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    02018 ....................  
                    02019 ....................  
                    02020 .................... #endif 
                    02021 ....................  
                    02022 .................... #include "gpio.h" 
                    02023 .................... /* 
                    02024 ....................  * gpio.h 
                    02025 ....................  * 
                    02026 ....................  *  Created on: Mar 8, 2017 
                    02027 ....................  *      Author: asafe 
                    02028 ....................  */ 
                    02029 ....................  
                    02030 .................... #ifndef INCLUDE_GPIO_H_ 
                    02031 .................... #define INCLUDE_GPIO_H_ 
                    02032 ....................  
                    02033 .................... #include <stdint.h> 
                    02034 .................... #include "gpio.h" 
                    02035 ....................  
                    02036 .................... enum { 
                    02037 ....................     GPIO_DIR_IN     = 0, 
                    02038 ....................     GPIO_DIR_OUT    = 1, 
                    02039 ....................     GPIO_ANALOG     = 2, 
                    02040 ....................  
                    02041 ....................     GPIO_VALUE_LOW = 0, 
                    02042 ....................     GPIO_VALUE_HIGH = 1, 
                    02043 .................... }; 
                    02044 ....................  
                    02045 .................... typedef struct gpio_st { 
                    02046 ....................     uint32_t pin; 
                    02047 ....................     int dir; 
                    02048 ....................     char *gpio_name; 
                    02049 .................... } st_gpio; 
                    02050 ....................  
                    02051 .................... /* this is the deceleration that a developer will use to access a specific GPIO */ 
                    02052 .................... /* this list should be identical in order to the <Bold> st_gpio gpios [] </Bold> list in gpio.c */ 
                    02053 ....................  
                    02054 .................... enum { 
                    02055 ....................     GPIO_DAC_CLK        = 0, 
                    02056 ....................     GPIO_DAC_CS         = 1, 
                    02057 ....................     GPIO_DAC_DATA_OUT   = 2, 
                    02058 ....................     GPIO_DAC_LDAC       = 3, 
                    02059 ....................  
                    02060 ....................     GPIO_LED            = 4, 
                    02061 ....................  
                    02062 ....................     GPIO_PA1_ISENSE     = 5, 
                    02063 ....................     GPIO_PA2_ISENSE     = 6, 
                    02064 ....................     GPIO_FFWR           = 7, 
                    02065 ....................     GPIO_RREV           = 8, 
                    02066 ....................     GPIO_RF_INDET       = 9, 
                    02067 ....................     GPIO_TMP            = 10, 
                    02068 ....................     GPIO_PREAMP_DET     = 11, 
                    02069 ....................  
                    02070 ....................     GPIO_ANT_SEL        = 12, 
                    02071 ....................     GPIO_ANT_SELN       = 13, 
                    02072 ....................     GPIO_TX_RX_SEL      = 14, 
                    02073 ....................     GPIO_TX_RX_ENV      = 15, 
                    02074 ....................     GPIO_TX_RX_ENVM     = 16, 
                    02075 ....................  
                    02076 ....................     GPIO_5V_EN          = 17, 
                    02077 ....................  
                    02078 .................... }; 
                    02079 ....................  
                    02080 .................... /* Inputs */ 
                    02081 .................... enum { 
                    02082 ....................  
                    02083 .................... }; 
                    02084 ....................  
                    02085 ....................  
                    02086 .................... void gpio_init(); 
                    02087 .................... int gpio_toggle(int gpio); 
                    02088 .................... #INLINE 
                    02089 .................... void gpio_set(int gpio); 
                    02090 .................... void gpio_clear(int gpio); 
                    02091 .................... #INLINE 
                    02092 .................... void gpio_set_value(int gpio, int value); 
                    02093 .................... int gpio_get(int gpio); 
                    02094 .................... #INLINE 
                    02095 .................... uint32_t gpio_get_analog(int gpio); 
                    02096 ....................  
                    02097 .................... #endif /* INCLUDE_GPIO_H_ */ 
                    02098 ....................  
                    02099 ....................  
                    02100 .................... enum { 
                    02101 ....................     GPIO_DIR_IN     = 0, 
                    02102 ....................     GPIO_DIR_OUT    = 1, 
                    02103 ....................     GPIO_ANALOG     = 2, 
                    02104 ....................  
                    02105 ....................     GPIO_VALUE_LOW = 0, 
                    02106 ....................     GPIO_VALUE_HIGH = 1, 
                    02107 .................... }; 
                    02108 ....................  
                    02109 .................... typedef struct gpio_st { 
                    02110 ....................     uint32_t pin; 
                    02111 ....................     int dir; 
                    02112 ....................     char *gpio_name; 
                    02113 .................... } st_gpio; 
                    02114 ....................  
                    02115 .................... /* this is the deceleration that a developer will use to access a specific GPIO */ 
                    02116 .................... /* this list should be identical in order to the <Bold> st_gpio gpios [] </Bold> list in gpio.c */ 
                    02117 ....................  
                    02118 .................... enum { 
                    02119 ....................     GPIO_DAC_CLK        = 0, 
                    02120 ....................     GPIO_DAC_CS         = 1, 
                    02121 ....................     GPIO_DAC_DATA_OUT   = 2, 
                    02122 ....................     GPIO_DAC_LDAC       = 3, 
                    02123 ....................  
                    02124 ....................     GPIO_LED            = 4, 
                    02125 ....................  
                    02126 ....................     GPIO_PA1_ISENSE     = 5, 
                    02127 ....................     GPIO_PA2_ISENSE     = 6, 
                    02128 ....................     GPIO_FFWR           = 7, 
                    02129 ....................     GPIO_RREV           = 8, 
                    02130 ....................     GPIO_RF_INDET       = 9, 
                    02131 ....................     GPIO_TMP            = 10, 
                    02132 ....................     GPIO_PREAMP_DET     = 11, 
                    02133 ....................  
                    02134 ....................     GPIO_ANT_SEL        = 12, 
                    02135 ....................     GPIO_ANT_SELN       = 13, 
                    02136 ....................     GPIO_TX_RX_SEL      = 14, 
                    02137 ....................     GPIO_TX_RX_ENV      = 15, 
                    02138 ....................     GPIO_TX_RX_ENVM     = 16, 
                    02139 ....................  
                    02140 ....................     GPIO_5V_EN          = 17, 
                    02141 ....................  
                    02142 .................... }; 
                    02143 ....................  
                    02144 .................... /* Inputs */ 
                    02145 .................... enum { 
                    02146 ....................  
                    02147 .................... }; 
                    02148 ....................  
                    02149 ....................  
                    02150 .................... void gpio_init(); 
                    02151 .................... int gpio_toggle(int gpio); 
                    02152 .................... #INLINE 
                    02153 .................... void gpio_set(int gpio); 
                    02154 .................... void gpio_clear(int gpio); 
                    02155 .................... #INLINE 
                    02156 .................... void gpio_set_value(int gpio, int value); 
                    02157 .................... int gpio_get(int gpio); 
                    02158 .................... #INLINE 
                    02159 .................... uint32_t gpio_get_analog(int gpio); 
                    02160 ....................  
                    02161 .................... #endif /* INCLUDE_GPIO_H_ */ 
                    02162 ....................  
                    02163 .................... #include "main.h" 
                    02164 .................... #ifndef MAIN_H_ 
                    02165 .................... #define MAIN_H_ 
                    02166 ....................  
                    02167 .................... #define MAIN_ADDRESS 0x2700 
                    02168 ....................  
                    02169 .................... #define ATOMIC_SET(var, val)    do { \ 
                    02170 ....................                                       disable_interrupts(GLOBAL); \ 
                    02171 ....................                                       var = val; \ 
                    02172 ....................                                       enable_interrupts(GLOBAL); \ 
                    02173 ....................                                 } while(0); 
                    02174 ....................  
                    02175 .................... #endif /* MAIN_H_ */ 
                    02176 ....................  
                    02177 .................... #include "message.h" 
                    02178 .................... /* 
                    02179 ....................  * message.h 
                    02180 ....................  * 
                    02181 ....................  *  Created on: Mar 23, 2017 
                    02182 ....................  *      Author: asaf 
                    02183 ....................  */ 
                    02184 ....................  
                    02185 .................... #ifndef MESSAGE_H_ 
                    02186 .................... #define MESSAGE_H_ 
                    02187 ....................  
                    02188 .................... #include <stdint.h> 
                    02189 .................... /////////////////////////////////////////////////////////////////////////// 
                    02190 .................... ////                                                                   //// 
                    02191 .................... ////                           stdint.h                                //// 
                    02192 .................... ////                                                                   //// 
                    02193 .................... //// Standard integer definitions.                                     //// 
                    02194 .................... ////                                                                   //// 
                    02195 .................... /////////////////////////////////////////////////////////////////////////// 
                    02196 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    02197 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    02198 .................... //// compiler.  This source code may only be distributed to other      //// 
                    02199 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    02200 .................... //// or distribution is permitted without written permission.          //// 
                    02201 .................... //// Derivative programs created using this software in object code    //// 
                    02202 .................... //// form are not restricted in any way.                               //// 
                    02203 .................... /////////////////////////////////////////////////////////////////////////// 
                    02204 ....................  
                    02205 .................... #ifndef _STDINT 
                    02206 ....................  
                    02207 .................... #define _STDINT 
                    02208 ....................  
                    02209 .................... //////////// exact width 
                    02210 ....................  
                    02211 .................... typedef signed int8 int8_t; 
                    02212 .................... typedef unsigned int8 uint8_t; 
                    02213 .................... typedef signed int16 int16_t; 
                    02214 .................... typedef unsigned int16 uint16_t; 
                    02215 .................... typedef signed int32 int32_t; 
                    02216 .................... typedef unsigned int32 uint32_t; 
                    02217 ....................  
                    02218 .................... #if defined(__PCD__) 
                    02219 .................... //typedef signed int24 int24_t; 
                    02220 .................... //typedef unsigned int24 uint24_t; 
                    02221 .................... typedef signed int64 int64_t; 
                    02222 .................... typedef unsigned int64 uint64_t; 
                    02223 .................... #endif 
                    02224 ....................  
                    02225 .................... #define INT8_MAX  (128) 
                    02226 .................... #define INT8_MIN  (-127) 
                    02227 .................... #define UINT8_MAX (255) 
                    02228 ....................  
                    02229 .................... #define INT16_MAX  (32767) 
                    02230 .................... #define INT16_MIN  (-32768) 
                    02231 .................... #define UINT16_MAX (65535) 
                    02232 ....................  
                    02233 .................... #define INT32_MAX  (2147483647) 
                    02234 .................... #define INT32_MIN  (-2147483648) 
                    02235 .................... #define UINT32_MAX (4294967295) 
                    02236 ....................  
                    02237 .................... #if defined(__PCD__) 
                    02238 .................... //#define INT24_MAX  (8388607) 
                    02239 .................... //#define INT24_MIN  (-8388608) 
                    02240 .................... //#define UINT24_MAX (16777215) 
                    02241 ....................  
                    02242 .................... #define INT64_MAX  (9223372036854775807) 
                    02243 .................... #define INT64_MIN  (-9223372036854775808) 
                    02244 .................... #define UINT64_MAX (18446744073709551615) 
                    02245 .................... #endif 
                    02246 ....................  
                    02247 .................... ///////// minimum width 
                    02248 ....................  
                    02249 .................... typedef signed int8 int_least8_t; 
                    02250 .................... typedef unsigned int8 uint_least8_t; 
                    02251 .................... typedef signed int16 int_least16_t; 
                    02252 .................... typedef unsigned int16 uint_least16_t; 
                    02253 .................... typedef signed int32 int_least32_t; 
                    02254 .................... typedef unsigned int32 uint_least32_t; 
                    02255 ....................  
                    02256 .................... #if defined(__PCD__) 
                    02257 .................... //typedef signed int24 int_least24_t; 
                    02258 .................... //typedef unsigned int24 uint_least24_t; 
                    02259 .................... typedef signed int64 int_least64_t; 
                    02260 .................... typedef unsigned int64 uint_least64_t; 
                    02261 .................... #endif 
                    02262 ....................  
                    02263 .................... #define INT_LEAST8_MAX  (128) 
                    02264 .................... #define INT_LEAST8_MIN  (-127) 
                    02265 .................... #define UINT_LEAST8_MAX (255) 
                    02266 ....................  
                    02267 .................... #define INT_LEAST16_MAX  (32767) 
                    02268 .................... #define INT_LEAST16_MIN  (-32768) 
                    02269 .................... #define UINT_LEAST16_MAX (65535) 
                    02270 ....................  
                    02271 .................... #define INT_LEAST32_MAX  (2147483647) 
                    02272 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    02273 .................... #define UINT_LEAST32_MAX (4294967295) 
                    02274 ....................  
                    02275 .................... #if defined(__PCD__) 
                    02276 .................... //#define INT_LEAST24_MAX  (8388607) 
                    02277 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    02278 .................... //#define UINT_LEAST24_MAX (16777215) 
                    02279 ....................  
                    02280 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    02281 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    02282 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    02283 .................... #endif 
                    02284 ....................  
                    02285 .................... ///////// fastest width 
                    02286 ....................  
                    02287 .................... #if defined(__PCD__) 
                    02288 .................... typedef signed int16 int_fast8_t; 
                    02289 .................... typedef unsigned int16 uint_fast8_t; 
                    02290 .................... #define INT_FAST8_MAX  (32767) 
                    02291 .................... #define INT_FAST8_MIN  (-32768) 
                    02292 .................... #define UINT_FAST8_MAX (65535) 
                    02293 .................... typedef signed int16 int_fast16_t; 
                    02294 .................... typedef unsigned int16 uint_fast16_t; 
                    02295 .................... //typedef signed int24 int_fast24_t; 
                    02296 .................... //typedef unsigned int24 uint_fast24_t; 
                    02297 .................... typedef signed int64 int_fast64_t; 
                    02298 .................... typedef unsigned int64 uint_fast64_t; 
                    02299 .................... #else 
                    02300 .................... typedef signed int8 int_fast8_t; 
                    02301 .................... typedef unsigned int8 uint_fast8_t; 
                    02302 .................... #define INT_FAST8_MAX  (128) 
                    02303 .................... #define INT_FAST8_MIN  (-127) 
                    02304 .................... #define UINT_FAST8_MAX (255) 
                    02305 .................... typedef signed int16 int_fast16_t; 
                    02306 .................... typedef unsigned int16 uint_fast16_t; 
                    02307 .................... #endif 
                    02308 ....................  
                    02309 .................... typedef signed int32 int_fast32_t; 
                    02310 .................... typedef unsigned int32 uint_fast32_t; 
                    02311 ....................  
                    02312 .................... #define INT_FAST16_MAX  (32767) 
                    02313 .................... #define INT_FAST16_MIN  (-32768) 
                    02314 .................... #define UINT_FAST16_MAX (65535) 
                    02315 ....................  
                    02316 .................... #define INT_FAST32_MAX  (2147483647) 
                    02317 .................... #define INT_FAST32_MIN  (-2147483648) 
                    02318 .................... #define UINT_FAST32_MAX (4294967295) 
                    02319 ....................  
                    02320 .................... #if defined(__PCD__) 
                    02321 .................... //#define INT_FAST24_MAX  (8388607) 
                    02322 .................... //#define INT_FAST24_MIN  (-8388608) 
                    02323 .................... //#define UINT_FAST24_MAX (16777215) 
                    02324 ....................  
                    02325 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    02326 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    02327 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    02328 .................... #endif 
                    02329 ....................  
                    02330 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    02331 ....................  
                    02332 .................... /// TODO 
                    02333 ....................  
                    02334 .................... /// intptr_t uintptr_t 
                    02335 ....................  
                    02336 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    02337 ....................  
                    02338 ....................  
                    02339 .................... /////////// greatest width (OPTIONAL) 
                    02340 ....................  
                    02341 .................... /// TODO 
                    02342 ....................  
                    02343 .................... /// intmax_t uintmax_t 
                    02344 ....................  
                    02345 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    02346 ....................  
                    02347 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    02348 ....................  
                    02349 ....................  
                    02350 .................... #endif 
                    02351 ....................  
                    02352 .................... #include "calibration.h" 
                    02353 .................... #ifndef CALIBRATION_H_ 
                    02354 .................... #define CALIBRATION_H_ 
                    02355 ....................  
                    02356 .................... #include <stdint.h> 
                    02357 .................... /////////////////////////////////////////////////////////////////////////// 
                    02358 .................... ////                                                                   //// 
                    02359 .................... ////                           stdint.h                                //// 
                    02360 .................... ////                                                                   //// 
                    02361 .................... //// Standard integer definitions.                                     //// 
                    02362 .................... ////                                                                   //// 
                    02363 .................... /////////////////////////////////////////////////////////////////////////// 
                    02364 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    02365 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    02366 .................... //// compiler.  This source code may only be distributed to other      //// 
                    02367 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    02368 .................... //// or distribution is permitted without written permission.          //// 
                    02369 .................... //// Derivative programs created using this software in object code    //// 
                    02370 .................... //// form are not restricted in any way.                               //// 
                    02371 .................... /////////////////////////////////////////////////////////////////////////// 
                    02372 ....................  
                    02373 .................... #ifndef _STDINT 
                    02374 ....................  
                    02375 .................... #define _STDINT 
                    02376 ....................  
                    02377 .................... //////////// exact width 
                    02378 ....................  
                    02379 .................... typedef signed int8 int8_t; 
                    02380 .................... typedef unsigned int8 uint8_t; 
                    02381 .................... typedef signed int16 int16_t; 
                    02382 .................... typedef unsigned int16 uint16_t; 
                    02383 .................... typedef signed int32 int32_t; 
                    02384 .................... typedef unsigned int32 uint32_t; 
                    02385 ....................  
                    02386 .................... #if defined(__PCD__) 
                    02387 .................... //typedef signed int24 int24_t; 
                    02388 .................... //typedef unsigned int24 uint24_t; 
                    02389 .................... typedef signed int64 int64_t; 
                    02390 .................... typedef unsigned int64 uint64_t; 
                    02391 .................... #endif 
                    02392 ....................  
                    02393 .................... #define INT8_MAX  (128) 
                    02394 .................... #define INT8_MIN  (-127) 
                    02395 .................... #define UINT8_MAX (255) 
                    02396 ....................  
                    02397 .................... #define INT16_MAX  (32767) 
                    02398 .................... #define INT16_MIN  (-32768) 
                    02399 .................... #define UINT16_MAX (65535) 
                    02400 ....................  
                    02401 .................... #define INT32_MAX  (2147483647) 
                    02402 .................... #define INT32_MIN  (-2147483648) 
                    02403 .................... #define UINT32_MAX (4294967295) 
                    02404 ....................  
                    02405 .................... #if defined(__PCD__) 
                    02406 .................... //#define INT24_MAX  (8388607) 
                    02407 .................... //#define INT24_MIN  (-8388608) 
                    02408 .................... //#define UINT24_MAX (16777215) 
                    02409 ....................  
                    02410 .................... #define INT64_MAX  (9223372036854775807) 
                    02411 .................... #define INT64_MIN  (-9223372036854775808) 
                    02412 .................... #define UINT64_MAX (18446744073709551615) 
                    02413 .................... #endif 
                    02414 ....................  
                    02415 .................... ///////// minimum width 
                    02416 ....................  
                    02417 .................... typedef signed int8 int_least8_t; 
                    02418 .................... typedef unsigned int8 uint_least8_t; 
                    02419 .................... typedef signed int16 int_least16_t; 
                    02420 .................... typedef unsigned int16 uint_least16_t; 
                    02421 .................... typedef signed int32 int_least32_t; 
                    02422 .................... typedef unsigned int32 uint_least32_t; 
                    02423 ....................  
                    02424 .................... #if defined(__PCD__) 
                    02425 .................... //typedef signed int24 int_least24_t; 
                    02426 .................... //typedef unsigned int24 uint_least24_t; 
                    02427 .................... typedef signed int64 int_least64_t; 
                    02428 .................... typedef unsigned int64 uint_least64_t; 
                    02429 .................... #endif 
                    02430 ....................  
                    02431 .................... #define INT_LEAST8_MAX  (128) 
                    02432 .................... #define INT_LEAST8_MIN  (-127) 
                    02433 .................... #define UINT_LEAST8_MAX (255) 
                    02434 ....................  
                    02435 .................... #define INT_LEAST16_MAX  (32767) 
                    02436 .................... #define INT_LEAST16_MIN  (-32768) 
                    02437 .................... #define UINT_LEAST16_MAX (65535) 
                    02438 ....................  
                    02439 .................... #define INT_LEAST32_MAX  (2147483647) 
                    02440 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    02441 .................... #define UINT_LEAST32_MAX (4294967295) 
                    02442 ....................  
                    02443 .................... #if defined(__PCD__) 
                    02444 .................... //#define INT_LEAST24_MAX  (8388607) 
                    02445 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    02446 .................... //#define UINT_LEAST24_MAX (16777215) 
                    02447 ....................  
                    02448 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    02449 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    02450 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    02451 .................... #endif 
                    02452 ....................  
                    02453 .................... ///////// fastest width 
                    02454 ....................  
                    02455 .................... #if defined(__PCD__) 
                    02456 .................... typedef signed int16 int_fast8_t; 
                    02457 .................... typedef unsigned int16 uint_fast8_t; 
                    02458 .................... #define INT_FAST8_MAX  (32767) 
                    02459 .................... #define INT_FAST8_MIN  (-32768) 
                    02460 .................... #define UINT_FAST8_MAX (65535) 
                    02461 .................... typedef signed int16 int_fast16_t; 
                    02462 .................... typedef unsigned int16 uint_fast16_t; 
                    02463 .................... //typedef signed int24 int_fast24_t; 
                    02464 .................... //typedef unsigned int24 uint_fast24_t; 
                    02465 .................... typedef signed int64 int_fast64_t; 
                    02466 .................... typedef unsigned int64 uint_fast64_t; 
                    02467 .................... #else 
                    02468 .................... typedef signed int8 int_fast8_t; 
                    02469 .................... typedef unsigned int8 uint_fast8_t; 
                    02470 .................... #define INT_FAST8_MAX  (128) 
                    02471 .................... #define INT_FAST8_MIN  (-127) 
                    02472 .................... #define UINT_FAST8_MAX (255) 
                    02473 .................... typedef signed int16 int_fast16_t; 
                    02474 .................... typedef unsigned int16 uint_fast16_t; 
                    02475 .................... #endif 
                    02476 ....................  
                    02477 .................... typedef signed int32 int_fast32_t; 
                    02478 .................... typedef unsigned int32 uint_fast32_t; 
                    02479 ....................  
                    02480 .................... #define INT_FAST16_MAX  (32767) 
                    02481 .................... #define INT_FAST16_MIN  (-32768) 
                    02482 .................... #define UINT_FAST16_MAX (65535) 
                    02483 ....................  
                    02484 .................... #define INT_FAST32_MAX  (2147483647) 
                    02485 .................... #define INT_FAST32_MIN  (-2147483648) 
                    02486 .................... #define UINT_FAST32_MAX (4294967295) 
                    02487 ....................  
                    02488 .................... #if defined(__PCD__) 
                    02489 .................... //#define INT_FAST24_MAX  (8388607) 
                    02490 .................... //#define INT_FAST24_MIN  (-8388608) 
                    02491 .................... //#define UINT_FAST24_MAX (16777215) 
                    02492 ....................  
                    02493 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    02494 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    02495 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    02496 .................... #endif 
                    02497 ....................  
                    02498 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    02499 ....................  
                    02500 .................... /// TODO 
                    02501 ....................  
                    02502 .................... /// intptr_t uintptr_t 
                    02503 ....................  
                    02504 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    02505 ....................  
                    02506 ....................  
                    02507 .................... /////////// greatest width (OPTIONAL) 
                    02508 ....................  
                    02509 .................... /// TODO 
                    02510 ....................  
                    02511 .................... /// intmax_t uintmax_t 
                    02512 ....................  
                    02513 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    02514 ....................  
                    02515 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    02516 ....................  
                    02517 ....................  
                    02518 .................... #endif 
                    02519 ....................  
                    02520 .................... #include <stdbool.h> 
                    02521 .................... /////////////////////////////////////////////////////////////////////////// 
                    02522 .................... ////                                                                   //// 
                    02523 .................... ////                          stdbool.h                                //// 
                    02524 .................... ////                                                                   //// 
                    02525 .................... //// Standard boolean definitions                                      //// 
                    02526 .................... ////                                                                   //// 
                    02527 .................... /////////////////////////////////////////////////////////////////////////// 
                    02528 .................... ////        (C) Copyright 1996,2012 Custom Computer Services           //// 
                    02529 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    02530 .................... //// compiler.  This source code may only be distributed to other      //// 
                    02531 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    02532 .................... //// or distribution is permitted without written permission.          //// 
                    02533 .................... //// Derivative programs created using this software in object code    //// 
                    02534 .................... //// form are not restricted in any way.                               //// 
                    02535 .................... /////////////////////////////////////////////////////////////////////////// 
                    02536 ....................  
                    02537 .................... #ifndef __STDBOOL_H__ 
                    02538 .................... #define __STDBOOL_H__ 
                    02539 ....................  
                    02540 .................... //remove TRUE and FALSE added by CCS's device .h file 
                    02541 .................... #if defined(TRUE) 
                    02542 .................... #undef TRUE 
                    02543 .................... #endif 
                    02544 .................... #if defined(FALSE) 
                    02545 .................... #undef FALSE 
                    02546 .................... #endif 
                    02547 ....................  
                    02548 .................... typedef int1   bool; 
                    02549 .................... #define true   1 
                    02550 .................... #define false  0 
                    02551 .................... #define __bool_true_false_are_defined  1 
                    02552 ....................  
                    02553 .................... #endif 
                    02554 ....................  
                    02555 ....................  
                    02556 .................... #define CALIBRATION_AREA_START 0x4000 
                    02557 .................... #define CALIBRATION_AREA_END 0x4FFF 
                    02558 ....................  
                    02559 .................... typedef enum { 
                    02560 ....................   CALIBRATION_TABLE_PARAMS = 0, 
                    02561 ....................   CALIBRATION_TABLE_PA_GAINS_1 = 1, 
                    02562 ....................   CALIBRATION_TABLE_PA_GAINS_2 = 2, 
                    02563 ....................   CALIBRATION_TABLE_MAX = 3 
                    02564 .................... } calibration_table_id_t; 
                    02565 ....................  
                    02566 .................... typedef enum { 
                    02567 ....................   PARAM_CAL_TBL_VERSION = 0, 
                    02568 ....................   PARAM_SERIAL_NUM = 1, 
                    02569 ....................   PARAM_TEMP_MULT = 2, 
                    02570 ....................   PARAM_FWD_MULT = 3, 
                    02571 ....................   PARAM_REV_MULT = 4, 
                    02572 ....................   PARAM_INP_PWR_MULT = 5, 
                    02573 ....................   PARAM_PWR_CURRENT_MULT = 6, 
                    02574 ....................   PARAM_PRE_AMP_MULT = 7, 
                    02575 ....................   PARAM_ISENSE_PA1_MULT = 8, 
                    02576 ....................   PARAM_ISENSE_PA2_MULT = 9, 
                    02577 ....................   PARAM_BOOT_WAIT_TIME_USEC = 10, 
                    02578 ....................   PARAM_TX_ON_TIMING_USEC = 11, 
                    02579 ....................   PARAM_TX_OFF_TIMING_USEC = 12, 
                    02580 ....................   PARAM_PA_ON_TIMING_USEC = 13, 
                    02581 ....................   PARAM_PA_OFF_TIMING_USEC = 14, 
                    02582 ....................   PARAM_ANT_SEL_TIMING_USEC = 15, 
                    02583 ....................   PARAM_FWD_SAMP_TIMING_USEC = 16, 
                    02584 ....................   PARAM_REV_SAMP_TIMING_USEC = 17, 
                    02585 ....................   PARAM_INP_PWR_SAMP_TIMING_USEC = 18, 
                    02586 .................... } calibration_param_t; 
                    02587 ....................  
                    02588 .................... #define CALIBRATION_TABLE_INDEX_MAX 32 
                    02589 ....................  
                    02590 .................... void get_calibration_table_data(calibration_table_id_t table_id, void* table_data); 
                    02591 .................... void set_calibration_table_data(calibration_table_id_t table_id, void* table_data); 
                    02592 .................... #INLINE 
                    02593 .................... uint16_t get_calibration_param(calibration_table_id_t table, uint8_t index); 
                    02594 .................... void set_calibration_param(calibration_table_id_t table, uint8_t index, uint16_t value); 
                    02595 ....................  
                    02596 .................... #endif /* CALIBRATION_H_ */ 
                    02597 ....................  
                    02598 ....................  
                    02599 .................... enum { 
                    02600 ....................   NUM_ADC_SAMPLES = 4, 
                    02601 .................... }; 
                    02602 ....................  
                    02603 .................... enum { 
                    02604 ....................   OP_CONTROL_MESSAGE = 0x00, 
                    02605 ....................   OP_VERSION_REQUEST_MESSAGE = 0x02, 
                    02606 ....................   OP_CHANGE_MODE_MESSAGE = 0x03, 
                    02607 ....................   OP_SET_CALIBRATION_TABLE_MESSAGE = 0x04, 
                    02608 ....................   OP_GET_CALIBRATION_TABLE_MESSAGE = 0x05, 
                    02609 ....................   OP_SET_DATA_LINE_MESSAGE = 0x06, 
                    02610 ....................   OP_GET_DATA_LINE_MESSAGE = 0x07, 
                    02611 ....................   OP_FINISH_UPDATE_PROCESS_MESSAGE = 0x08, 
                    02612 ....................   OP_BIT_STATUS_REQUEST_MESSAGE = 0x09, 
                    02613 .................... }; 
                    02614 ....................  
                    02615 .................... enum { 
                    02616 ....................   OP_ACK_RESPONSE = 0x80, 
                    02617 ....................   OP_SF_STATUS_RESPONSE = 0x81, 
                    02618 ....................   OP_VERSION_RESPONSE = 0x82, 
                    02619 ....................   OP_GET_CALIBRATION_TABLE_RESPONSE = 0x85, 
                    02620 ....................   OP_SET_DATA_LINE_RESPONSE = 0x86, 
                    02621 ....................   OP_GET_DATA_LINE_RESPONSE = 0x87, 
                    02622 ....................   OP_BIT_STATUS_RESPONSE = 0x89, 
                    02623 .................... }; 
                    02624 ....................  
                    02625 .................... typedef enum { 
                    02626 ....................   MODE_OPERATIONAL = 0, 
                    02627 ....................   MODE_TECHNICIAN = 1, 
                    02628 ....................   MODE_MAINTENANCE = 2, 
                    02629 .................... } software_mode_t; 
                    02630 ....................  
                    02631 .................... enum { 
                    02632 ....................   CALIBRATION_TABLE_TEMP = 0, 
                    02633 ....................   CALIBRATION_TABLE_FWD = 1, 
                    02634 ....................   CALIBRATION_TABLE_REV = 2, 
                    02635 ....................   CALIBRATION_TABLE_INP = 3, 
                    02636 ....................   CALIBRATION_TABLE_CURRENT = 4, 
                    02637 ....................   CALIBRATION_TABLE_PA_BIAS = 5, 
                    02638 ....................   CALIBRATION_TABLE_TIMING = 6, 
                    02639 ....................   CALIBRATION_TABLE_GENERAL = 7, 
                    02640 .................... }; 
                    02641 ....................  
                    02642 .................... enum { 
                    02643 ....................   PROGRAMMING_STATUS_OK = 0, 
                    02644 ....................   PROGRAMMING_STATUS_ERROR = 1, 
                    02645 .................... }; 
                    02646 ....................  
                    02647 .................... typedef struct message_t { 
                    02648 ....................   uint8_t opcode; 
                    02649 ....................   uint8_t payload[]; /* this will include the payload and the crc */ 
                    02650 .................... } message_t; 
                    02651 ....................  
                    02652 .................... typedef struct generic_response_t { 
                    02653 ....................   uint8_t opcode; 
                    02654 .................... } generic_response_t; 
                    02655 ....................  
                    02656 .................... /* message payloads*/ 
                    02657 ....................  
                    02658 .................... typedef struct control_bits_t { 
                    02659 ....................   uint8_t tx_on : 1; 
                    02660 ....................   uint8_t pa_gain : 3; 
                    02661 ....................   uint8_t tx_ant : 1; 
                    02662 ....................   uint8_t amplifier_operation_frequency : 1; 
                    02663 ....................   uint8_t reset : 1; 
                    02664 ....................   uint8_t dont_change : 1; 
                    02665 .................... } control_bits_t; 
                    02666 ....................  
                    02667 .................... typedef struct control_message_payload_t { 
                    02668 ....................   control_bits_t bits; 
                    02669 ....................   uint16_t control_identifier; 
                    02670 .................... } control_message_payload_t; 
                    02671 ....................  
                    02672 .................... typedef struct change_mode_message_payload_t { 
                    02673 ....................   uint8_t mode; 
                    02674 .................... } change_mode_message_payload_t; 
                    02675 ....................  
                    02676 ....................  
                    02677 .................... typedef struct set_calibration_table_message_payload_t { 
                    02678 ....................   uint8_t table_id; 
                    02679 ....................   uint16_t params[CALIBRATION_TABLE_INDEX_MAX]; 
                    02680 .................... } set_calibration_table_message_payload_t; 
                    02681 ....................  
                    02682 .................... typedef struct get_calibration_table_message_payload_t { 
                    02683 ....................   uint8_t table_id; 
                    02684 .................... } get_calibration_table_message_payload_t; 
                    02685 ....................  
                    02686 .................... typedef struct set_data_line_payload_t { 
                    02687 ....................   uint32_t address; 
                    02688 ....................   uint8_t data[64]; 
                    02689 .................... } set_data_line_payload_t; 
                    02690 ....................  
                    02691 .................... typedef struct get_data_line_payload_t { 
                    02692 ....................   uint32_t address; 
                    02693 .................... } get_data_line_payload_t; 
                    02694 ....................  
                    02695 .................... /* responses */ 
                    02696 ....................  
                    02697 .................... typedef struct ack_response_t { 
                    02698 ....................   generic_response_t generic; 
                    02699 .................... } ack_response_t; 
                    02700 ....................  
                    02701 .................... typedef struct sf_status_response_t { 
                    02702 ....................   generic_response_t generic; 
                    02703 ....................   control_bits_t last_control_bits; 
                    02704 ....................   uint16_t tti_counter; 
                    02705 ....................   uint16_t control_identifier; 
                    02706 ....................   uint16_t fwd_power_values[NUM_ADC_SAMPLES]; 
                    02707 ....................   uint16_t reverse_power_values[NUM_ADC_SAMPLES]; 
                    02708 ....................   uint16_t input_power_values[NUM_ADC_SAMPLES]; 
                    02709 ....................   uint16_t pre_amp_power_values[NUM_ADC_SAMPLES]; 
                    02710 ....................   uint16_t temperature; 
                    02711 ....................   uint16_t power_amplifier_current; 
                    02712 .................... } sf_status_response_t; 
                    02713 ....................  
                    02714 .................... typedef struct bit_status_response_t { 
                    02715 ....................   generic_response_t generic; 
                    02716 ....................   control_bits_t last_control_bits; 
                    02717 ....................   uint16_t tti_counter; 
                    02718 ....................   uint8_t mode; 
                    02719 .................... } bit_status_response_t; 
                    02720 ....................  
                    02721 .................... typedef struct version_response_t { 
                    02722 ....................   generic_response_t generic; 
                    02723 ....................   uint8_t day; 
                    02724 ....................   uint8_t month; 
                    02725 ....................   uint16_t year; 
                    02726 ....................   uint8_t major; 
                    02727 ....................   uint8_t minor; 
                    02728 ....................   uint16_t serial_number; 
                    02729 .................... } version_response_t; 
                    02730 ....................  
                    02731 .................... typedef struct calibration_table_response_t { 
                    02732 ....................   generic_response_t generic; 
                    02733 ....................   uint8_t table_id; 
                    02734 ....................   uint16_t params[CALIBRATION_TABLE_INDEX_MAX]; 
                    02735 .................... } calibration_table_response_t; 
                    02736 ....................  
                    02737 .................... typedef struct set_data_line_response_t { 
                    02738 ....................   generic_response_t generic; 
                    02739 ....................   uint32_t address; 
                    02740 ....................   uint8_t status; 
                    02741 .................... } set_data_line_response_t; 
                    02742 ....................  
                    02743 .................... typedef struct get_data_line_response_t { 
                    02744 ....................   generic_response_t generic; 
                    02745 ....................   uint32_t address; 
                    02746 ....................   uint8_t data[64]; 
                    02747 .................... } get_data_line_response_t; 
                    02748 ....................  
                    02749 .................... #endif /* MESSAGE_H_ */ 
                    02750 ....................  
                    02751 .................... #include "message_handlers.h" 
                    02752 .................... /* 
                    02753 ....................  * message_handlers.h 
                    02754 ....................  * 
                    02755 ....................  *  Created on: Mar 26, 2017 
                    02756 ....................  *      Author: asaf 
                    02757 ....................  */ 
                    02758 ....................  
                    02759 .................... #ifndef MESSAGE_HANDLERS_H_ 
                    02760 .................... #define MESSAGE_HANDLERS_H_ 
                    02761 ....................  
                    02762 .................... void init_message_handlers(); 
                    02763 .................... void process_message(uint8_t* message, uint16_t length); 
                    02764 .................... #INLINE 
                    02765 .................... void perform_last_control_message(); 
                    02766 .................... void control_handle_timer(); 
                    02767 .................... void samp_if_needed(); 
                    02768 ....................  
                    02769 .................... #endif /* MESSAGE_HANDLERS_H_ */ 
                    02770 ....................  
                    02771 .................... #include "ad5312.h" 
                    02772 .................... /* 
                    02773 ....................  * ad5312.h 
                    02774 ....................  * 
                    02775 ....................  *  Created on: Oct 13, 2016 
                    02776 ....................  *      Author: asaf 
                    02777 ....................  */ 
                    02778 ....................  
                    02779 .................... #ifndef AD5312_H_ 
                    02780 .................... #define AD5312_H_ 
                    02781 ....................  
                    02782 .................... enum { 
                    02783 .................... 	DAC_SELECT_BIT = 15, 
                    02784 .................... 	REF_BUF_BIT = 14, 
                    02785 .................... 	PD1_BIT = 13, 
                    02786 .................... 	PD2_BIT = 12, 
                    02787 .................... 	PD_ARR_START_BIT = PD2_BIT, 
                    02788 .................... }; 
                    02789 ....................  
                    02790 .................... enum { 
                    02791 .................... 	DAC_A = 0, 
                    02792 .................... 	DAC_B = 1, 
                    02793 .................... }; 
                    02794 ....................  
                    02795 .................... enum { 
                    02796 .................... 	REF_UNBUFFERED = 0, 
                    02797 .................... 	REF_BUFFERED = 1, 
                    02798 .................... }; 
                    02799 ....................  
                    02800 .................... /* Power Down Modes */ 
                    02801 .................... enum { 
                    02802 .................... 	PD_NORMAL = 0, 
                    02803 .................... 	PD_1K_TO_GND = 1, 
                    02804 .................... 	PD_100K_TO_GND = 2, 
                    02805 .................... 	PD_HIGH_IMPEDANCE_OUTPUT = 3, 
                    02806 .................... }; 
                    02807 ....................  
                    02808 .................... enum { 
                    02809 .................... 	VREF_FULL_SCALE = 5000, /* mV */ 
                    02810 .................... 	DAC_PRECISION = 1024 , /* bits */ 
                    02811 .................... }; 
                    02812 ....................  
                    02813 .................... #INLINE 
                    02814 .................... void ad5312_setVout(int dac, uint16_t mV); 
                    02815 .................... void ad5312_init(); 
                    02816 .................... #INLINE 
                    02817 .................... void ad5312_latch(); 
                    02818 ....................  
                    02819 .................... #endif /* AD5312_H_ */ 
                    02820 ....................  
                    02821 .................... #include "timer.h" 
                    02822 .................... #ifndef INCLUDE_TIMER_H_ 
                    02823 .................... #define INCLUDE_TIMER_H_ 
                    02824 ....................  
                    02825 .................... #include <stdint.h> 
                    02826 .................... /////////////////////////////////////////////////////////////////////////// 
                    02827 .................... ////                                                                   //// 
                    02828 .................... ////                           stdint.h                                //// 
                    02829 .................... ////                                                                   //// 
                    02830 .................... //// Standard integer definitions.                                     //// 
                    02831 .................... ////                                                                   //// 
                    02832 .................... /////////////////////////////////////////////////////////////////////////// 
                    02833 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    02834 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    02835 .................... //// compiler.  This source code may only be distributed to other      //// 
                    02836 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    02837 .................... //// or distribution is permitted without written permission.          //// 
                    02838 .................... //// Derivative programs created using this software in object code    //// 
                    02839 .................... //// form are not restricted in any way.                               //// 
                    02840 .................... /////////////////////////////////////////////////////////////////////////// 
                    02841 ....................  
                    02842 .................... #ifndef _STDINT 
                    02843 ....................  
                    02844 .................... #define _STDINT 
                    02845 ....................  
                    02846 .................... //////////// exact width 
                    02847 ....................  
                    02848 .................... typedef signed int8 int8_t; 
                    02849 .................... typedef unsigned int8 uint8_t; 
                    02850 .................... typedef signed int16 int16_t; 
                    02851 .................... typedef unsigned int16 uint16_t; 
                    02852 .................... typedef signed int32 int32_t; 
                    02853 .................... typedef unsigned int32 uint32_t; 
                    02854 ....................  
                    02855 .................... #if defined(__PCD__) 
                    02856 .................... //typedef signed int24 int24_t; 
                    02857 .................... //typedef unsigned int24 uint24_t; 
                    02858 .................... typedef signed int64 int64_t; 
                    02859 .................... typedef unsigned int64 uint64_t; 
                    02860 .................... #endif 
                    02861 ....................  
                    02862 .................... #define INT8_MAX  (128) 
                    02863 .................... #define INT8_MIN  (-127) 
                    02864 .................... #define UINT8_MAX (255) 
                    02865 ....................  
                    02866 .................... #define INT16_MAX  (32767) 
                    02867 .................... #define INT16_MIN  (-32768) 
                    02868 .................... #define UINT16_MAX (65535) 
                    02869 ....................  
                    02870 .................... #define INT32_MAX  (2147483647) 
                    02871 .................... #define INT32_MIN  (-2147483648) 
                    02872 .................... #define UINT32_MAX (4294967295) 
                    02873 ....................  
                    02874 .................... #if defined(__PCD__) 
                    02875 .................... //#define INT24_MAX  (8388607) 
                    02876 .................... //#define INT24_MIN  (-8388608) 
                    02877 .................... //#define UINT24_MAX (16777215) 
                    02878 ....................  
                    02879 .................... #define INT64_MAX  (9223372036854775807) 
                    02880 .................... #define INT64_MIN  (-9223372036854775808) 
                    02881 .................... #define UINT64_MAX (18446744073709551615) 
                    02882 .................... #endif 
                    02883 ....................  
                    02884 .................... ///////// minimum width 
                    02885 ....................  
                    02886 .................... typedef signed int8 int_least8_t; 
                    02887 .................... typedef unsigned int8 uint_least8_t; 
                    02888 .................... typedef signed int16 int_least16_t; 
                    02889 .................... typedef unsigned int16 uint_least16_t; 
                    02890 .................... typedef signed int32 int_least32_t; 
                    02891 .................... typedef unsigned int32 uint_least32_t; 
                    02892 ....................  
                    02893 .................... #if defined(__PCD__) 
                    02894 .................... //typedef signed int24 int_least24_t; 
                    02895 .................... //typedef unsigned int24 uint_least24_t; 
                    02896 .................... typedef signed int64 int_least64_t; 
                    02897 .................... typedef unsigned int64 uint_least64_t; 
                    02898 .................... #endif 
                    02899 ....................  
                    02900 .................... #define INT_LEAST8_MAX  (128) 
                    02901 .................... #define INT_LEAST8_MIN  (-127) 
                    02902 .................... #define UINT_LEAST8_MAX (255) 
                    02903 ....................  
                    02904 .................... #define INT_LEAST16_MAX  (32767) 
                    02905 .................... #define INT_LEAST16_MIN  (-32768) 
                    02906 .................... #define UINT_LEAST16_MAX (65535) 
                    02907 ....................  
                    02908 .................... #define INT_LEAST32_MAX  (2147483647) 
                    02909 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    02910 .................... #define UINT_LEAST32_MAX (4294967295) 
                    02911 ....................  
                    02912 .................... #if defined(__PCD__) 
                    02913 .................... //#define INT_LEAST24_MAX  (8388607) 
                    02914 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    02915 .................... //#define UINT_LEAST24_MAX (16777215) 
                    02916 ....................  
                    02917 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    02918 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    02919 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    02920 .................... #endif 
                    02921 ....................  
                    02922 .................... ///////// fastest width 
                    02923 ....................  
                    02924 .................... #if defined(__PCD__) 
                    02925 .................... typedef signed int16 int_fast8_t; 
                    02926 .................... typedef unsigned int16 uint_fast8_t; 
                    02927 .................... #define INT_FAST8_MAX  (32767) 
                    02928 .................... #define INT_FAST8_MIN  (-32768) 
                    02929 .................... #define UINT_FAST8_MAX (65535) 
                    02930 .................... typedef signed int16 int_fast16_t; 
                    02931 .................... typedef unsigned int16 uint_fast16_t; 
                    02932 .................... //typedef signed int24 int_fast24_t; 
                    02933 .................... //typedef unsigned int24 uint_fast24_t; 
                    02934 .................... typedef signed int64 int_fast64_t; 
                    02935 .................... typedef unsigned int64 uint_fast64_t; 
                    02936 .................... #else 
                    02937 .................... typedef signed int8 int_fast8_t; 
                    02938 .................... typedef unsigned int8 uint_fast8_t; 
                    02939 .................... #define INT_FAST8_MAX  (128) 
                    02940 .................... #define INT_FAST8_MIN  (-127) 
                    02941 .................... #define UINT_FAST8_MAX (255) 
                    02942 .................... typedef signed int16 int_fast16_t; 
                    02943 .................... typedef unsigned int16 uint_fast16_t; 
                    02944 .................... #endif 
                    02945 ....................  
                    02946 .................... typedef signed int32 int_fast32_t; 
                    02947 .................... typedef unsigned int32 uint_fast32_t; 
                    02948 ....................  
                    02949 .................... #define INT_FAST16_MAX  (32767) 
                    02950 .................... #define INT_FAST16_MIN  (-32768) 
                    02951 .................... #define UINT_FAST16_MAX (65535) 
                    02952 ....................  
                    02953 .................... #define INT_FAST32_MAX  (2147483647) 
                    02954 .................... #define INT_FAST32_MIN  (-2147483648) 
                    02955 .................... #define UINT_FAST32_MAX (4294967295) 
                    02956 ....................  
                    02957 .................... #if defined(__PCD__) 
                    02958 .................... //#define INT_FAST24_MAX  (8388607) 
                    02959 .................... //#define INT_FAST24_MIN  (-8388608) 
                    02960 .................... //#define UINT_FAST24_MAX (16777215) 
                    02961 ....................  
                    02962 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    02963 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    02964 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    02965 .................... #endif 
                    02966 ....................  
                    02967 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    02968 ....................  
                    02969 .................... /// TODO 
                    02970 ....................  
                    02971 .................... /// intptr_t uintptr_t 
                    02972 ....................  
                    02973 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    02974 ....................  
                    02975 ....................  
                    02976 .................... /////////// greatest width (OPTIONAL) 
                    02977 ....................  
                    02978 .................... /// TODO 
                    02979 ....................  
                    02980 .................... /// intmax_t uintmax_t 
                    02981 ....................  
                    02982 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    02983 ....................  
                    02984 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    02985 ....................  
                    02986 ....................  
                    02987 .................... #endif 
                    02988 ....................  
                    02989 .................... #include <stdbool.h> 
                    02990 .................... /////////////////////////////////////////////////////////////////////////// 
                    02991 .................... ////                                                                   //// 
                    02992 .................... ////                          stdbool.h                                //// 
                    02993 .................... ////                                                                   //// 
                    02994 .................... //// Standard boolean definitions                                      //// 
                    02995 .................... ////                                                                   //// 
                    02996 .................... /////////////////////////////////////////////////////////////////////////// 
                    02997 .................... ////        (C) Copyright 1996,2012 Custom Computer Services           //// 
                    02998 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    02999 .................... //// compiler.  This source code may only be distributed to other      //// 
                    03000 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    03001 .................... //// or distribution is permitted without written permission.          //// 
                    03002 .................... //// Derivative programs created using this software in object code    //// 
                    03003 .................... //// form are not restricted in any way.                               //// 
                    03004 .................... /////////////////////////////////////////////////////////////////////////// 
                    03005 ....................  
                    03006 .................... #ifndef __STDBOOL_H__ 
                    03007 .................... #define __STDBOOL_H__ 
                    03008 ....................  
                    03009 .................... //remove TRUE and FALSE added by CCS's device .h file 
                    03010 .................... #if defined(TRUE) 
                    03011 .................... #undef TRUE 
                    03012 .................... #endif 
                    03013 .................... #if defined(FALSE) 
                    03014 .................... #undef FALSE 
                    03015 .................... #endif 
                    03016 ....................  
                    03017 .................... typedef int1   bool; 
                    03018 .................... #define true   1 
                    03019 .................... #define false  0 
                    03020 .................... #define __bool_true_false_are_defined  1 
                    03021 ....................  
                    03022 .................... #endif 
                    03023 ....................  
                    03024 ....................  
                    03025 .................... typedef void (*timer_func)(void* arg); 
                    03026 ....................  
                    03027 .................... typedef struct { 
                    03028 ....................   //bool triggred; 
                    03029 ....................   uint32_t expTime; 
                    03030 ....................   void *arg; 
                    03031 ....................   timer_func func; 
                    03032 .................... } timer_task_t; 
                    03033 ....................  
                    03034 .................... #INLINE 
                    03035 .................... uint32_t timer_get_us_count(); 
                    03036 .................... bool timer_registerTask(uint32_t expTime, timer_func func, void *arg); 
                    03037 .................... void timer_yield(); 
                    03038 ....................  
                    03039 .................... #endif /* INCLUDE_TIMER_H_ */ 
                    03040 ....................  
                    03041 ....................  
                    03042 .................... #include "uart.h" 
                    03043 .................... /* 
                    03044 ....................  * uart.h 
                    03045 ....................  * 
                    03046 ....................  *  Created on: Mar 23, 2017 
                    03047 ....................  *      Author: asaf 
                    03048 ....................  */ 
                    03049 ....................  
                    03050 .................... #ifndef UART_H_ 
                    03051 .................... #define UART_H_ 
                    03052 ....................  
                    03053 .................... #include <stdint.h> 
                    03054 .................... /////////////////////////////////////////////////////////////////////////// 
                    03055 .................... ////                                                                   //// 
                    03056 .................... ////                           stdint.h                                //// 
                    03057 .................... ////                                                                   //// 
                    03058 .................... //// Standard integer definitions.                                     //// 
                    03059 .................... ////                                                                   //// 
                    03060 .................... /////////////////////////////////////////////////////////////////////////// 
                    03061 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    03062 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    03063 .................... //// compiler.  This source code may only be distributed to other      //// 
                    03064 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    03065 .................... //// or distribution is permitted without written permission.          //// 
                    03066 .................... //// Derivative programs created using this software in object code    //// 
                    03067 .................... //// form are not restricted in any way.                               //// 
                    03068 .................... /////////////////////////////////////////////////////////////////////////// 
                    03069 ....................  
                    03070 .................... #ifndef _STDINT 
                    03071 ....................  
                    03072 .................... #define _STDINT 
                    03073 ....................  
                    03074 .................... //////////// exact width 
                    03075 ....................  
                    03076 .................... typedef signed int8 int8_t; 
                    03077 .................... typedef unsigned int8 uint8_t; 
                    03078 .................... typedef signed int16 int16_t; 
                    03079 .................... typedef unsigned int16 uint16_t; 
                    03080 .................... typedef signed int32 int32_t; 
                    03081 .................... typedef unsigned int32 uint32_t; 
                    03082 ....................  
                    03083 .................... #if defined(__PCD__) 
                    03084 .................... //typedef signed int24 int24_t; 
                    03085 .................... //typedef unsigned int24 uint24_t; 
                    03086 .................... typedef signed int64 int64_t; 
                    03087 .................... typedef unsigned int64 uint64_t; 
                    03088 .................... #endif 
                    03089 ....................  
                    03090 .................... #define INT8_MAX  (128) 
                    03091 .................... #define INT8_MIN  (-127) 
                    03092 .................... #define UINT8_MAX (255) 
                    03093 ....................  
                    03094 .................... #define INT16_MAX  (32767) 
                    03095 .................... #define INT16_MIN  (-32768) 
                    03096 .................... #define UINT16_MAX (65535) 
                    03097 ....................  
                    03098 .................... #define INT32_MAX  (2147483647) 
                    03099 .................... #define INT32_MIN  (-2147483648) 
                    03100 .................... #define UINT32_MAX (4294967295) 
                    03101 ....................  
                    03102 .................... #if defined(__PCD__) 
                    03103 .................... //#define INT24_MAX  (8388607) 
                    03104 .................... //#define INT24_MIN  (-8388608) 
                    03105 .................... //#define UINT24_MAX (16777215) 
                    03106 ....................  
                    03107 .................... #define INT64_MAX  (9223372036854775807) 
                    03108 .................... #define INT64_MIN  (-9223372036854775808) 
                    03109 .................... #define UINT64_MAX (18446744073709551615) 
                    03110 .................... #endif 
                    03111 ....................  
                    03112 .................... ///////// minimum width 
                    03113 ....................  
                    03114 .................... typedef signed int8 int_least8_t; 
                    03115 .................... typedef unsigned int8 uint_least8_t; 
                    03116 .................... typedef signed int16 int_least16_t; 
                    03117 .................... typedef unsigned int16 uint_least16_t; 
                    03118 .................... typedef signed int32 int_least32_t; 
                    03119 .................... typedef unsigned int32 uint_least32_t; 
                    03120 ....................  
                    03121 .................... #if defined(__PCD__) 
                    03122 .................... //typedef signed int24 int_least24_t; 
                    03123 .................... //typedef unsigned int24 uint_least24_t; 
                    03124 .................... typedef signed int64 int_least64_t; 
                    03125 .................... typedef unsigned int64 uint_least64_t; 
                    03126 .................... #endif 
                    03127 ....................  
                    03128 .................... #define INT_LEAST8_MAX  (128) 
                    03129 .................... #define INT_LEAST8_MIN  (-127) 
                    03130 .................... #define UINT_LEAST8_MAX (255) 
                    03131 ....................  
                    03132 .................... #define INT_LEAST16_MAX  (32767) 
                    03133 .................... #define INT_LEAST16_MIN  (-32768) 
                    03134 .................... #define UINT_LEAST16_MAX (65535) 
                    03135 ....................  
                    03136 .................... #define INT_LEAST32_MAX  (2147483647) 
                    03137 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    03138 .................... #define UINT_LEAST32_MAX (4294967295) 
                    03139 ....................  
                    03140 .................... #if defined(__PCD__) 
                    03141 .................... //#define INT_LEAST24_MAX  (8388607) 
                    03142 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    03143 .................... //#define UINT_LEAST24_MAX (16777215) 
                    03144 ....................  
                    03145 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    03146 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    03147 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    03148 .................... #endif 
                    03149 ....................  
                    03150 .................... ///////// fastest width 
                    03151 ....................  
                    03152 .................... #if defined(__PCD__) 
                    03153 .................... typedef signed int16 int_fast8_t; 
                    03154 .................... typedef unsigned int16 uint_fast8_t; 
                    03155 .................... #define INT_FAST8_MAX  (32767) 
                    03156 .................... #define INT_FAST8_MIN  (-32768) 
                    03157 .................... #define UINT_FAST8_MAX (65535) 
                    03158 .................... typedef signed int16 int_fast16_t; 
                    03159 .................... typedef unsigned int16 uint_fast16_t; 
                    03160 .................... //typedef signed int24 int_fast24_t; 
                    03161 .................... //typedef unsigned int24 uint_fast24_t; 
                    03162 .................... typedef signed int64 int_fast64_t; 
                    03163 .................... typedef unsigned int64 uint_fast64_t; 
                    03164 .................... #else 
                    03165 .................... typedef signed int8 int_fast8_t; 
                    03166 .................... typedef unsigned int8 uint_fast8_t; 
                    03167 .................... #define INT_FAST8_MAX  (128) 
                    03168 .................... #define INT_FAST8_MIN  (-127) 
                    03169 .................... #define UINT_FAST8_MAX (255) 
                    03170 .................... typedef signed int16 int_fast16_t; 
                    03171 .................... typedef unsigned int16 uint_fast16_t; 
                    03172 .................... #endif 
                    03173 ....................  
                    03174 .................... typedef signed int32 int_fast32_t; 
                    03175 .................... typedef unsigned int32 uint_fast32_t; 
                    03176 ....................  
                    03177 .................... #define INT_FAST16_MAX  (32767) 
                    03178 .................... #define INT_FAST16_MIN  (-32768) 
                    03179 .................... #define UINT_FAST16_MAX (65535) 
                    03180 ....................  
                    03181 .................... #define INT_FAST32_MAX  (2147483647) 
                    03182 .................... #define INT_FAST32_MIN  (-2147483648) 
                    03183 .................... #define UINT_FAST32_MAX (4294967295) 
                    03184 ....................  
                    03185 .................... #if defined(__PCD__) 
                    03186 .................... //#define INT_FAST24_MAX  (8388607) 
                    03187 .................... //#define INT_FAST24_MIN  (-8388608) 
                    03188 .................... //#define UINT_FAST24_MAX (16777215) 
                    03189 ....................  
                    03190 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    03191 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    03192 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    03193 .................... #endif 
                    03194 ....................  
                    03195 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    03196 ....................  
                    03197 .................... /// TODO 
                    03198 ....................  
                    03199 .................... /// intptr_t uintptr_t 
                    03200 ....................  
                    03201 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    03202 ....................  
                    03203 ....................  
                    03204 .................... /////////// greatest width (OPTIONAL) 
                    03205 ....................  
                    03206 .................... /// TODO 
                    03207 ....................  
                    03208 .................... /// intmax_t uintmax_t 
                    03209 ....................  
                    03210 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    03211 ....................  
                    03212 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    03213 ....................  
                    03214 ....................  
                    03215 .................... #endif 
                    03216 ....................  
                    03217 .................... #include <stddef.h> 
                    03218 .................... /////////////////////////////////////////////////////////////////////////// 
                    03219 .................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
                    03220 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    03221 .................... //// compiler.  This source code may only be distributed to other      //// 
                    03222 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    03223 .................... //// or distribution is permitted without written permission.          //// 
                    03224 .................... //// Derivative programs created using this software in object code    //// 
                    03225 .................... //// form are not restricted in any way.                               //// 
                    03226 .................... /////////////////////////////////////////////////////////////////////////// 
                    03227 ....................  
                    03228 .................... #ifndef _STDDEF 
                    03229 ....................  
                    03230 .................... #define _STDDEF 
                    03231 ....................  
                    03232 .................... #if sizeof(unsigned int8 *)==1 
                    03233 .................... #define ptrdiff_t unsigned int8 
                    03234 .................... #else 
                    03235 .................... #define ptrdiff_t unsigned int16 
                    03236 .................... #endif 
                    03237 ....................  
                    03238 .................... #if defined(__PCB__) 
                    03239 .................... #define size_t unsigned int8 
                    03240 .................... #else 
                    03241 .................... #define size_t unsigned int16 
                    03242 .................... #endif 
                    03243 .................... #define wchar_t char 
                    03244 .................... #define NULL 0 
                    03245 ....................  
                    03246 .................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
                    03247 ....................  
                    03248 .................... #endif 
                    03249 ....................  
                    03250 ....................  
                    03251 .................... void uart_init(); 
                    03252 .................... void uart_disable(); 
                    03253 .................... uint8_t uart_get_byte_blocking(); 
                    03254 .................... uint8_t uart_get_byte_nonblocking(uint8_t *dst); 
                    03255 .................... void uart_send(void* buffer, uint8_t size); 
                    03256 .................... void uart_clear_errors(); 
                    03257 ....................  
                    03258 .................... #endif /* UART_H_ */ 
                    03259 ....................  
                    03260 ....................  
                    03261 .................... //allows the main program to run without a bootloader 
                    03262 .................... static void fix_boot() { 
3658 0103           03263 MOVLB  3
365A 91F3           03264 BCF    xF3.0
365C 6A19           03265 CLRF   19
365E BEF2           03266 BTFSC  FF2.7
3660 8E19           03267 BSF    19.7
3662 9EF2           03268 BCF    FF2.7
                    03269 ....................   bool should_write = false; 
                    03270 ....................  
                    03271 ....................   uint8_t start_bytes[getenv("FLASH_ERASE_SIZE")]; 
                    03272 ....................   read_program_memory(0, start_bytes, getenv("FLASH_ERASE_SIZE")); 
3664 6AF8           03273 CLRF   FF8
3666 6AF7           03274 CLRF   FF7
3668 6AF6           03275 CLRF   FF6
366A 0E03           03276 MOVLW  03
366C 6EEA           03277 MOVWF  FEA
366E 0EF4           03278 MOVLW  F4
3670 6EE9           03279 MOVWF  FE9
3672 0104           03280 MOVLB  4
3674 6B6C           03281 CLRF   x6C
3676 0E40           03282 MOVLW  40
3678 6F6B           03283 MOVWF  x6B
367A 0100           03284 MOVLB  0
367C EC42 F012      03285 CALL   2484
3680 BE19           03286 BTFSC  19.7
3682 8EF2           03287 BSF    FF2.7
                    03288 ....................  
                    03289 ....................   uint8_t clear_flash[] = { 0xFF, 0xFF, 0xFF, 0xFF }; 
3684 0104           03290 MOVLB  4
3686 6934           03291 SETF   x34
3688 6935           03292 SETF   x35
368A 6936           03293 SETF   x36
368C 6937           03294 SETF   x37
                    03295 ....................   uint8_t jump_to_0x2700[] = { 0x80, 0xEF, 0x13, 0xF0 }; 
368E 0E80           03296 MOVLW  80
3690 6F38           03297 MOVWF  x38
3692 0EEF           03298 MOVLW  EF
3694 6F39           03299 MOVWF  x39
3696 0E13           03300 MOVLW  13
3698 6F3A           03301 MOVWF  x3A
369A 0EF0           03302 MOVLW  F0
369C 6F3B           03303 MOVWF  x3B
                    03304 ....................  
                    03305 ....................   if (memcmp(start_bytes, clear_flash, sizeof(clear_flash)) == 0) { 
369E 0E03           03306 MOVLW  03
36A0 6F41           03307 MOVWF  x41
36A2 0EF4           03308 MOVLW  F4
36A4 6F40           03309 MOVWF  x40
36A6 0E04           03310 MOVLW  04
36A8 6F43           03311 MOVWF  x43
36AA 0E34           03312 MOVLW  34
36AC 6F42           03313 MOVWF  x42
36AE 6B45           03314 CLRF   x45
36B0 0E04           03315 MOVLW  04
36B2 6F44           03316 MOVWF  x44
36B4 0100           03317 MOVLB  0
36B6 DF6B           03318 RCALL  358E
36B8 5201           03319 MOVF   01,F
36BA E110           03320 BNZ   36DC
                    03321 ....................     should_write = true; 
36BC 0103           03322 MOVLB  3
36BE 81F3           03323 BSF    xF3.0
                    03324 ....................     //there's nothing at the reset vector let's put a jump to main() there. 
                    03325 ....................     //this happens when running directly without a bootloader. 
                    03326 ....................     //the debugger somehow knows to jump to the real main(), but after a reset it no longer works. 
                    03327 ....................     memcpy(start_bytes, jump_to_0x2700, sizeof(jump_to_0x2700)); 
36C0 0E03           03328 MOVLW  03
36C2 6EEA           03329 MOVWF  FEA
36C4 0EF4           03330 MOVLW  F4
36C6 6EE9           03331 MOVWF  FE9
36C8 0E04           03332 MOVLW  04
36CA 6EE2           03333 MOVWF  FE2
36CC 0E38           03334 MOVLW  38
36CE 6EE1           03335 MOVWF  FE1
36D0 0E04           03336 MOVLW  04
36D2 6E01           03337 MOVWF  01
36D4 CFE6 FFEE      03338 MOVFF  FE6,FEE
36D8 2E01           03339 DECFSZ 01,F
36DA D7FC           03340 BRA    36D4
                    03341 ....................   } 
                    03342 ....................  
                    03343 ....................   uint8_t jump_to_0x2008[] = { 0x04, 0xEF, 0x10, 0xF0 }; 
36DC 0E04           03344 MOVLW  04
36DE 0104           03345 MOVLB  4
36E0 6F3C           03346 MOVWF  x3C
36E2 0EEF           03347 MOVLW  EF
36E4 6F3D           03348 MOVWF  x3D
36E6 0E10           03349 MOVLW  10
36E8 6F3E           03350 MOVWF  x3E
36EA 0EF0           03351 MOVLW  F0
36EC 6F3F           03352 MOVWF  x3F
                    03353 ....................   //check if the interrupt handler contains the correct jump, if not, overwrite it 
                    03354 ....................   if (memcmp(start_bytes + 0x0008, jump_to_0x2008, sizeof(jump_to_0x2008)) != 0) { 
36EE 0E03           03355 MOVLW  03
36F0 6F41           03356 MOVWF  x41
36F2 0EFC           03357 MOVLW  FC
36F4 6F40           03358 MOVWF  x40
36F6 0E04           03359 MOVLW  04
36F8 6F43           03360 MOVWF  x43
36FA 0E3C           03361 MOVLW  3C
36FC 6F42           03362 MOVWF  x42
36FE 6B45           03363 CLRF   x45
3700 0E04           03364 MOVLW  04
3702 6F44           03365 MOVWF  x44
3704 0100           03366 MOVLB  0
3706 DF43           03367 RCALL  358E
3708 5201           03368 MOVF   01,F
370A E010           03369 BZ    372C
                    03370 ....................     should_write = true; 
370C 0103           03371 MOVLB  3
370E 81F3           03372 BSF    xF3.0
                    03373 ....................     memcpy(start_bytes + 0x0008, jump_to_0x2008, sizeof(jump_to_0x2008)); 
3710 0E03           03374 MOVLW  03
3712 6EEA           03375 MOVWF  FEA
3714 0EFC           03376 MOVLW  FC
3716 6EE9           03377 MOVWF  FE9
3718 0E04           03378 MOVLW  04
371A 6EE2           03379 MOVWF  FE2
371C 0E3C           03380 MOVLW  3C
371E 6EE1           03381 MOVWF  FE1
3720 0E04           03382 MOVLW  04
3722 6E01           03383 MOVWF  01
3724 CFE6 FFEE      03384 MOVFF  FE6,FEE
3728 2E01           03385 DECFSZ 01,F
372A D7FC           03386 BRA    3724
                    03387 ....................   } 
                    03388 ....................  
                    03389 ....................   if (should_write) 
372C 0103           03390 MOVLB  3
372E A1F3           03391 BTFSS  xF3.0
3730 D00D           03392 BRA    374C
                    03393 ....................     write_program_memory(0, start_bytes, getenv("FLASH_ERASE_SIZE")); 
3732 6AF8           03394 CLRF   FF8
3734 6AF7           03395 CLRF   FF7
3736 6AF6           03396 CLRF   FF6
3738 0E03           03397 MOVLW  03
373A 6EEA           03398 MOVWF  FEA
373C 0EF4           03399 MOVLW  F4
373E 6EE9           03400 MOVWF  FE9
3740 0E40           03401 MOVLW  40
3742 0104           03402 MOVLB  4
3744 6F40           03403 MOVWF  x40
3746 0100           03404 MOVLB  0
3748 DF64           03405 RCALL  3612
374A 0103           03406 MOVLB  3
                    03407 .................... } 
374C 0100           03408 MOVLB  0
374E EFBF F016      03409 GOTO   2D7E (RETURN)
                    03410 ....................  
                    03411 .................... static uint8_t message_buffer[MSG_MAX_MESSAGE_LEN]; 
                    03412 .................... #org MAIN_ADDRESS, MAIN_ADDRESS+0x800 
                    03413 .................... void main() { 
2700 6AF8           03414 CLRF   FF8
2702 9ED0           03415 BCF    FD0.7
2704 8E07           03416 BSF    07.7
2706 6AEA           03417 CLRF   FEA
2708 6AE9           03418 CLRF   FE9
270A 0E70           03419 MOVLW  70
270C 6ED3           03420 MOVWF  FD3
270E 8C9B           03421 BSF    F9B.6
2710 9E9B           03422 BCF    F9B.7
2712 6A1A           03423 CLRF   1A
2714 86B8           03424 BSF    FB8.3
2716 0E10           03425 MOVLW  10
2718 6EAF           03426 MOVWF  FAF
271A 0E00           03427 MOVLW  00
271C 6EB0           03428 MOVWF  FB0
271E 0EA6           03429 MOVLW  A6
2720 6EAC           03430 MOVWF  FAC
2722 0E90           03431 MOVLW  90
2724 6EAB           03432 MOVWF  FAB
2726 6A1E           03433 CLRF   1E
2728 6A1D           03434 CLRF   1D
272A 6A1C           03435 CLRF   1C
272C 6A1B           03436 CLRF   1B
272E 0E35           03437 MOVLW  35
2730 6ECD           03438 MOVWF  FCD
2732 6ACC           03439 CLRF   FCC
2734 6ACF           03440 CLRF   FCF
2736 6ACE           03441 CLRF   FCE
2738 909E           03442 BCF    F9E.0
273A 9892           03443 BCF    F92.4
273C 9692           03444 BCF    F92.3
273E 9689           03445 BCF    F89.3
2740 9492           03446 BCF    F92.2
2742 9489           03447 BCF    F89.2
2744 0E70           03448 MOVLW  70
2746 6ED3           03449 MOVWF  FD3
2748 8C9B           03450 BSF    F9B.6
274A 9E9B           03451 BCF    F9B.7
274C 6ED3           03452 MOVWF  FD3
274E 8C9B           03453 BSF    F9B.6
2750 9E9B           03454 BCF    F9B.7
2752 0101           03455 MOVLB  1
2754 6B71           03456 CLRF   x71
2756 6B70           03457 CLRF   x70
2758 6B73           03458 CLRF   x73
275A 6B72           03459 CLRF   x72
275C 6B75           03460 CLRF   x75
275E 6B74           03461 CLRF   x74
2760 6ED3           03462 MOVWF  FD3
2762 8C9B           03463 BSF    F9B.6
2764 9E9B           03464 BCF    F9B.7
2766 6ED3           03465 MOVWF  FD3
2768 8C9B           03466 BSF    F9B.6
276A 9E9B           03467 BCF    F9B.7
276C 0102           03468 MOVLB  2
276E 6981           03469 SETF   x81
2770 6980           03470 SETF   x80
2772 697F           03471 SETF   x7F
2774 697E           03472 SETF   x7E
2776 6ED3           03473 MOVWF  FD3
2778 8C9B           03474 BSF    F9B.6
277A 9E9B           03475 BCF    F9B.7
277C 6ED3           03476 MOVWF  FD3
277E 8C9B           03477 BSF    F9B.6
2780 9E9B           03478 BCF    F9B.7
2782 50C1           03479 MOVF   FC1,W
2784 0BF0           03480 ANDLW  F0
2786 6EC1           03481 MOVWF  FC1
2788 0E00           03482 MOVLW  00
278A 010F           03483 MOVLB  F
278C 6F38           03484 MOVWF  x38
278E 6F3C           03485 MOVWF  x3C
2790 6F39           03486 MOVWF  x39
2792 6F3A           03487 MOVWF  x3A
2794 6F3B           03488 MOVWF  x3B
2796 0101           03489 MOVLB  1
2798 6B88           03490 CLRF   x88
279A 6A77           03491 CLRF   F77
279C 6A78           03492 CLRF   F78
279E 6A79           03493 CLRF   F79
27A0 6A1F           03494 CLRF   1F
27A2 6A20           03495 CLRF   20
27A4 6A21           03496 CLRF   21
27A6 6A22           03497 CLRF   22
27A8 6A23           03498 CLRF   23
27AA 6A24           03499 CLRF   24
27AC 6A25           03500 CLRF   25
27AE 6A26           03501 CLRF   26
27B0 6A27           03502 CLRF   27
27B2 6A28           03503 CLRF   28
27B4 6A29           03504 CLRF   29
27B6 6A2A           03505 CLRF   2A
27B8 6A2B           03506 CLRF   2B
27BA 6A2C           03507 CLRF   2C
27BC 6A2D           03508 CLRF   2D
27BE 6A2E           03509 CLRF   2E
27C0 6A2F           03510 CLRF   2F
27C2 6A30           03511 CLRF   30
27C4 6A31           03512 CLRF   31
27C6 6A32           03513 CLRF   32
27C8 6A33           03514 CLRF   33
27CA 6A34           03515 CLRF   34
27CC 6A35           03516 CLRF   35
27CE 6A36           03517 CLRF   36
27D0 6A37           03518 CLRF   37
27D2 6A38           03519 CLRF   38
27D4 6A39           03520 CLRF   39
27D6 6A3A           03521 CLRF   3A
27D8 6A3B           03522 CLRF   3B
27DA 6A3C           03523 CLRF   3C
27DC 6A3D           03524 CLRF   3D
27DE 6A3E           03525 CLRF   3E
27E0 6A3F           03526 CLRF   3F
27E2 6A40           03527 CLRF   40
27E4 6A41           03528 CLRF   41
27E6 6A42           03529 CLRF   42
27E8 6A43           03530 CLRF   43
27EA 6A44           03531 CLRF   44
27EC 6A45           03532 CLRF   45
27EE 6A46           03533 CLRF   46
27F0 6A47           03534 CLRF   47
27F2 6A48           03535 CLRF   48
27F4 6A49           03536 CLRF   49
27F6 6A4A           03537 CLRF   4A
27F8 6A4B           03538 CLRF   4B
27FA 6A4C           03539 CLRF   4C
27FC 6A4D           03540 CLRF   4D
27FE 6A4E           03541 CLRF   4E
2800 6A4F           03542 CLRF   4F
2802 6A50           03543 CLRF   50
2804 6A51           03544 CLRF   51
2806 6A52           03545 CLRF   52
2808 6A53           03546 CLRF   53
280A 6A54           03547 CLRF   54
280C 6A55           03548 CLRF   55
280E 6A56           03549 CLRF   56
2810 6A57           03550 CLRF   57
2812 6A58           03551 CLRF   58
2814 6A59           03552 CLRF   59
2816 6A5A           03553 CLRF   5A
2818 6A5B           03554 CLRF   5B
281A 6A5C           03555 CLRF   5C
281C 6A5D           03556 CLRF   5D
281E 6A5E           03557 CLRF   5E
2820 6A5F           03558 CLRF   5F
2822 0100           03559 MOVLB  0
2824 6B60           03560 CLRF   x60
2826 6B61           03561 CLRF   x61
2828 6B62           03562 CLRF   x62
282A 6B63           03563 CLRF   x63
282C 6B64           03564 CLRF   x64
282E 6B65           03565 CLRF   x65
2830 6B66           03566 CLRF   x66
2832 6B67           03567 CLRF   x67
2834 6B68           03568 CLRF   x68
2836 6B69           03569 CLRF   x69
2838 6B6A           03570 CLRF   x6A
283A 6B6B           03571 CLRF   x6B
283C 6B6C           03572 CLRF   x6C
283E 6B6D           03573 CLRF   x6D
2840 6B6E           03574 CLRF   x6E
2842 6B6F           03575 CLRF   x6F
2844 6B70           03576 CLRF   x70
2846 6A1F           03577 CLRF   1F
2848 6A20           03578 CLRF   20
284A 6B71           03579 CLRF   x71
284C 6B72           03580 CLRF   x72
284E 6B73           03581 CLRF   x73
2850 6B74           03582 CLRF   x74
2852 6B75           03583 CLRF   x75
2854 6B76           03584 CLRF   x76
2856 6B77           03585 CLRF   x77
2858 6B78           03586 CLRF   x78
285A 6B79           03587 CLRF   x79
285C 6B7A           03588 CLRF   x7A
285E 6B7B           03589 CLRF   x7B
2860 6B7C           03590 CLRF   x7C
2862 6B7D           03591 CLRF   x7D
2864 6B7E           03592 CLRF   x7E
2866 6B7F           03593 CLRF   x7F
2868 6B80           03594 CLRF   x80
286A 6B81           03595 CLRF   x81
286C 6B82           03596 CLRF   x82
286E 6B83           03597 CLRF   x83
2870 6B84           03598 CLRF   x84
2872 6B85           03599 CLRF   x85
2874 6B86           03600 CLRF   x86
2876 6B87           03601 CLRF   x87
2878 6B88           03602 CLRF   x88
287A 6B89           03603 CLRF   x89
287C 6B8A           03604 CLRF   x8A
287E 6B8B           03605 CLRF   x8B
2880 6B8C           03606 CLRF   x8C
2882 6B8D           03607 CLRF   x8D
2884 6B8E           03608 CLRF   x8E
2886 6B8F           03609 CLRF   x8F
2888 6B90           03610 CLRF   x90
288A 6B91           03611 CLRF   x91
288C 6B92           03612 CLRF   x92
288E 6B93           03613 CLRF   x93
2890 6B94           03614 CLRF   x94
2892 6B95           03615 CLRF   x95
2894 6B96           03616 CLRF   x96
2896 6B97           03617 CLRF   x97
2898 6B98           03618 CLRF   x98
289A 6B99           03619 CLRF   x99
289C 6B9A           03620 CLRF   x9A
289E 6B9B           03621 CLRF   x9B
28A0 6B9C           03622 CLRF   x9C
28A2 6B9D           03623 CLRF   x9D
28A4 6B9E           03624 CLRF   x9E
28A6 6B9F           03625 CLRF   x9F
28A8 6BA0           03626 CLRF   xA0
28AA 6BA1           03627 CLRF   xA1
28AC 6BA2           03628 CLRF   xA2
28AE 6BA3           03629 CLRF   xA3
28B0 6BA4           03630 CLRF   xA4
28B2 6BA5           03631 CLRF   xA5
28B4 6BA6           03632 CLRF   xA6
28B6 6BA7           03633 CLRF   xA7
28B8 6BA8           03634 CLRF   xA8
28BA 6BA9           03635 CLRF   xA9
28BC 6BAA           03636 CLRF   xAA
28BE 6BAB           03637 CLRF   xAB
28C0 6BAC           03638 CLRF   xAC
28C2 6BAD           03639 CLRF   xAD
28C4 6BAE           03640 CLRF   xAE
28C6 6BAF           03641 CLRF   xAF
28C8 6BB0           03642 CLRF   xB0
28CA 6BB1           03643 CLRF   xB1
28CC 6BB2           03644 CLRF   xB2
28CE 6BB3           03645 CLRF   xB3
28D0 6BB4           03646 CLRF   xB4
28D2 6BB5           03647 CLRF   xB5
28D4 6BB6           03648 CLRF   xB6
28D6 6BB7           03649 CLRF   xB7
28D8 6BB8           03650 CLRF   xB8
28DA 6BB9           03651 CLRF   xB9
28DC 6BBA           03652 CLRF   xBA
28DE 6BBB           03653 CLRF   xBB
28E0 6BBC           03654 CLRF   xBC
28E2 6BBD           03655 CLRF   xBD
28E4 6BBE           03656 CLRF   xBE
28E6 6BBF           03657 CLRF   xBF
28E8 6BC0           03658 CLRF   xC0
28EA 6BC1           03659 CLRF   xC1
28EC 6BC2           03660 CLRF   xC2
28EE 6BC3           03661 CLRF   xC3
28F0 6BC4           03662 CLRF   xC4
28F2 6BC5           03663 CLRF   xC5
28F4 6BC6           03664 CLRF   xC6
28F6 6BC7           03665 CLRF   xC7
28F8 6BC8           03666 CLRF   xC8
28FA 6BC9           03667 CLRF   xC9
28FC 6BCA           03668 CLRF   xCA
28FE 6BCB           03669 CLRF   xCB
2900 6BCC           03670 CLRF   xCC
2902 6BCD           03671 CLRF   xCD
2904 6BCE           03672 CLRF   xCE
2906 6BCF           03673 CLRF   xCF
2908 6BD0           03674 CLRF   xD0
290A 6BD1           03675 CLRF   xD1
290C 6BD2           03676 CLRF   xD2
290E 6BD3           03677 CLRF   xD3
2910 6BD4           03678 CLRF   xD4
2912 6BD5           03679 CLRF   xD5
2914 6BD6           03680 CLRF   xD6
2916 6BD7           03681 CLRF   xD7
2918 6BD8           03682 CLRF   xD8
291A 6BD9           03683 CLRF   xD9
291C 6BDA           03684 CLRF   xDA
291E 6BDB           03685 CLRF   xDB
2920 6BDC           03686 CLRF   xDC
2922 6BDD           03687 CLRF   xDD
2924 6BDE           03688 CLRF   xDE
2926 6BDF           03689 CLRF   xDF
2928 6BE0           03690 CLRF   xE0
292A 6BE1           03691 CLRF   xE1
292C 6BE2           03692 CLRF   xE2
292E 6BE3           03693 CLRF   xE3
2930 6BE4           03694 CLRF   xE4
2932 6BE5           03695 CLRF   xE5
2934 6BE6           03696 CLRF   xE6
2936 6BE7           03697 CLRF   xE7
2938 6BE8           03698 CLRF   xE8
293A 6BE9           03699 CLRF   xE9
293C 6BEA           03700 CLRF   xEA
293E 6BEB           03701 CLRF   xEB
2940 6BEC           03702 CLRF   xEC
2942 6BED           03703 CLRF   xED
2944 6BEE           03704 CLRF   xEE
2946 6BEF           03705 CLRF   xEF
2948 6BF0           03706 CLRF   xF0
294A 6BF1           03707 CLRF   xF1
294C 6BF2           03708 CLRF   xF2
294E 6BF3           03709 CLRF   xF3
2950 6BF4           03710 CLRF   xF4
2952 6BF5           03711 CLRF   xF5
2954 6BF6           03712 CLRF   xF6
2956 6BF7           03713 CLRF   xF7
2958 6BF8           03714 CLRF   xF8
295A 6BF9           03715 CLRF   xF9
295C 6BFA           03716 CLRF   xFA
295E 6BFB           03717 CLRF   xFB
2960 6BFC           03718 CLRF   xFC
2962 6BFD           03719 CLRF   xFD
2964 6BFE           03720 CLRF   xFE
2966 6BFF           03721 CLRF   xFF
2968 0101           03722 MOVLB  1
296A 6B00           03723 CLRF   x00
296C 6B01           03724 CLRF   x01
296E 6B02           03725 CLRF   x02
2970 6B03           03726 CLRF   x03
2972 6B04           03727 CLRF   x04
2974 6B05           03728 CLRF   x05
2976 6B06           03729 CLRF   x06
2978 6B07           03730 CLRF   x07
297A 6B08           03731 CLRF   x08
297C 6B09           03732 CLRF   x09
297E 6B0A           03733 CLRF   x0A
2980 6B0B           03734 CLRF   x0B
2982 6B0C           03735 CLRF   x0C
2984 6B0D           03736 CLRF   x0D
2986 6B0E           03737 CLRF   x0E
2988 6B0F           03738 CLRF   x0F
298A 6B10           03739 CLRF   x10
298C 6B11           03740 CLRF   x11
298E 6B12           03741 CLRF   x12
2990 6B13           03742 CLRF   x13
2992 6B14           03743 CLRF   x14
2994 6B15           03744 CLRF   x15
2996 6B1C           03745 CLRF   x1C
2998 6B1D           03746 CLRF   x1D
299A 6B1E           03747 CLRF   x1E
299C 6B1F           03748 CLRF   x1F
299E 6B20           03749 CLRF   x20
29A0 6B21           03750 CLRF   x21
29A2 6B22           03751 CLRF   x22
29A4 6B23           03752 CLRF   x23
29A6 6B24           03753 CLRF   x24
29A8 6B25           03754 CLRF   x25
29AA 6B26           03755 CLRF   x26
29AC 6B27           03756 CLRF   x27
29AE 6B28           03757 CLRF   x28
29B0 6B29           03758 CLRF   x29
29B2 6B2A           03759 CLRF   x2A
29B4 6B2B           03760 CLRF   x2B
29B6 6B2C           03761 CLRF   x2C
29B8 6B2D           03762 CLRF   x2D
29BA 6B2E           03763 CLRF   x2E
29BC 6B2F           03764 CLRF   x2F
29BE 6B30           03765 CLRF   x30
29C0 6B31           03766 CLRF   x31
29C2 6B32           03767 CLRF   x32
29C4 6B33           03768 CLRF   x33
29C6 6B34           03769 CLRF   x34
29C8 6B35           03770 CLRF   x35
29CA 6B36           03771 CLRF   x36
29CC 6B37           03772 CLRF   x37
29CE 6B38           03773 CLRF   x38
29D0 6B39           03774 CLRF   x39
29D2 6B3A           03775 CLRF   x3A
29D4 6B3B           03776 CLRF   x3B
29D6 6B3C           03777 CLRF   x3C
29D8 6B3D           03778 CLRF   x3D
29DA 6B3E           03779 CLRF   x3E
29DC 6B3F           03780 CLRF   x3F
29DE 6B40           03781 CLRF   x40
29E0 6B41           03782 CLRF   x41
29E2 6B42           03783 CLRF   x42
29E4 6B43           03784 CLRF   x43
29E6 6B44           03785 CLRF   x44
29E8 6B45           03786 CLRF   x45
29EA 6B46           03787 CLRF   x46
29EC 6B47           03788 CLRF   x47
29EE 6B48           03789 CLRF   x48
29F0 6B49           03790 CLRF   x49
29F2 6B4A           03791 CLRF   x4A
29F4 6B4B           03792 CLRF   x4B
29F6 6B4C           03793 CLRF   x4C
29F8 6B4D           03794 CLRF   x4D
29FA 6B4E           03795 CLRF   x4E
29FC 6B4F           03796 CLRF   x4F
29FE 6B50           03797 CLRF   x50
2A00 6B51           03798 CLRF   x51
2A02 6B52           03799 CLRF   x52
2A04 6B53           03800 CLRF   x53
2A06 6B54           03801 CLRF   x54
2A08 6B55           03802 CLRF   x55
2A0A 6B56           03803 CLRF   x56
2A0C 6B57           03804 CLRF   x57
2A0E 6B58           03805 CLRF   x58
2A10 6B59           03806 CLRF   x59
2A12 6B5A           03807 CLRF   x5A
2A14 6B5B           03808 CLRF   x5B
2A16 6B5C           03809 CLRF   x5C
2A18 6B5D           03810 CLRF   x5D
2A1A 6B5E           03811 CLRF   x5E
2A1C 6B5F           03812 CLRF   x5F
2A1E 6B60           03813 CLRF   x60
2A20 6B61           03814 CLRF   x61
2A22 6B62           03815 CLRF   x62
2A24 6B63           03816 CLRF   x63
2A26 6B64           03817 CLRF   x64
2A28 6B65           03818 CLRF   x65
2A2A 6B66           03819 CLRF   x66
2A2C 6B67           03820 CLRF   x67
2A2E 6B68           03821 CLRF   x68
2A30 6B69           03822 CLRF   x69
2A32 6B6A           03823 CLRF   x6A
2A34 6B6B           03824 CLRF   x6B
2A36 6B6C           03825 CLRF   x6C
2A38 6B6D           03826 CLRF   x6D
2A3A 6B6E           03827 CLRF   x6E
2A3C 6B6F           03828 CLRF   x6F
2A3E 6B76           03829 CLRF   x76
2A40 0E58           03830 MOVLW  58
2A42 6F78           03831 MOVWF  x78
2A44 0EC6           03832 MOVLW  C6
2A46 6F77           03833 MOVWF  x77
2A48 0E09           03834 MOVLW  09
2A4A 6F79           03835 MOVWF  x79
2A4C 0E61           03836 MOVLW  61
2A4E 6F7B           03837 MOVWF  x7B
2A50 0E76           03838 MOVLW  76
2A52 6F7A           03839 MOVWF  x7A
2A54 0E02           03840 MOVLW  02
2A56 6F7C           03841 MOVWF  x7C
2A58 0E61           03842 MOVLW  61
2A5A 6F7E           03843 MOVWF  x7E
2A5C 0EB0           03844 MOVLW  B0
2A5E 6F7D           03845 MOVWF  x7D
2A60 0E03           03846 MOVLW  03
2A62 6F7F           03847 MOVWF  x7F
2A64 0E62           03848 MOVLW  62
2A66 6F81           03849 MOVWF  x81
2A68 0E78           03850 MOVLW  78
2A6A 6F80           03851 MOVWF  x80
2A6C 0E04           03852 MOVLW  04
2A6E 6F82           03853 MOVWF  x82
2A70 0E63           03854 MOVLW  63
2A72 6F84           03855 MOVWF  x84
2A74 0E2A           03856 MOVLW  2A
2A76 6F83           03857 MOVWF  x83
2A78 0E05           03858 MOVLW  05
2A7A 6F85           03859 MOVWF  x85
2A7C 0E63           03860 MOVLW  63
2A7E 6F87           03861 MOVWF  x87
2A80 0EC2           03862 MOVLW  C2
2A82 6F86           03863 MOVWF  x86
2A84 0E06           03864 MOVLW  06
2A86 6F88           03865 MOVWF  x88
2A88 0E64           03866 MOVLW  64
2A8A 6F8A           03867 MOVWF  x8A
2A8C 0EAC           03868 MOVLW  AC
2A8E 6F89           03869 MOVWF  x89
2A90 0E07           03870 MOVLW  07
2A92 6F8B           03871 MOVWF  x8B
2A94 0E64           03872 MOVLW  64
2A96 6F8D           03873 MOVWF  x8D
2A98 0EB0           03874 MOVLW  B0
2A9A 6F8C           03875 MOVWF  x8C
2A9C 0102           03876 MOVLB  2
2A9E 6B82           03877 CLRF   x82
2AA0 6B83           03878 CLRF   x83
2AA2 6B84           03879 CLRF   x84
2AA4 6B85           03880 CLRF   x85
2AA6 6B86           03881 CLRF   x86
2AA8 6B87           03882 CLRF   x87
2AAA 6B88           03883 CLRF   x88
2AAC 6B89           03884 CLRF   x89
2AAE 6B8A           03885 CLRF   x8A
2AB0 6B8B           03886 CLRF   x8B
2AB2 6B8C           03887 CLRF   x8C
2AB4 6B8D           03888 CLRF   x8D
2AB6 6B8E           03889 CLRF   x8E
2AB8 6B8F           03890 CLRF   x8F
2ABA 6B90           03891 CLRF   x90
2ABC 6B91           03892 CLRF   x91
2ABE 6B92           03893 CLRF   x92
2AC0 6B93           03894 CLRF   x93
2AC2 6B94           03895 CLRF   x94
2AC4 6B95           03896 CLRF   x95
2AC6 6B96           03897 CLRF   x96
2AC8 6B97           03898 CLRF   x97
2ACA 6B98           03899 CLRF   x98
2ACC 6B99           03900 CLRF   x99
2ACE 6B9A           03901 CLRF   x9A
2AD0 6B9B           03902 CLRF   x9B
2AD2 6B9C           03903 CLRF   x9C
2AD4 6B9D           03904 CLRF   x9D
2AD6 6B9E           03905 CLRF   x9E
2AD8 6B9F           03906 CLRF   x9F
2ADA 6BA0           03907 CLRF   xA0
2ADC 6BA1           03908 CLRF   xA1
2ADE 6BA2           03909 CLRF   xA2
2AE0 6BA3           03910 CLRF   xA3
2AE2 6BA4           03911 CLRF   xA4
2AE4 6BA5           03912 CLRF   xA5
2AE6 6BA6           03913 CLRF   xA6
2AE8 6BA7           03914 CLRF   xA7
2AEA 6BA8           03915 CLRF   xA8
2AEC 6BA9           03916 CLRF   xA9
2AEE 6BAA           03917 CLRF   xAA
2AF0 6BAB           03918 CLRF   xAB
2AF2 6BAC           03919 CLRF   xAC
2AF4 6BAD           03920 CLRF   xAD
2AF6 6BAE           03921 CLRF   xAE
2AF8 6BAF           03922 CLRF   xAF
2AFA 6BB0           03923 CLRF   xB0
2AFC 6BB1           03924 CLRF   xB1
2AFE 6BB2           03925 CLRF   xB2
2B00 6BB3           03926 CLRF   xB3
2B02 6BB4           03927 CLRF   xB4
2B04 6BB5           03928 CLRF   xB5
2B06 6BB6           03929 CLRF   xB6
2B08 6BB7           03930 CLRF   xB7
2B0A 6BB8           03931 CLRF   xB8
2B0C 6BB9           03932 CLRF   xB9
2B0E 6BBA           03933 CLRF   xBA
2B10 6BBB           03934 CLRF   xBB
2B12 6BBC           03935 CLRF   xBC
2B14 6BBD           03936 CLRF   xBD
2B16 6BBE           03937 CLRF   xBE
2B18 6BBF           03938 CLRF   xBF
2B1A 6BC0           03939 CLRF   xC0
2B1C 6BC1           03940 CLRF   xC1
2B1E 6BC2           03941 CLRF   xC2
2B20 6BC3           03942 CLRF   xC3
2B22 6BC4           03943 CLRF   xC4
2B24 6BC5           03944 CLRF   xC5
2B26 6BC6           03945 CLRF   xC6
2B28 6BC7           03946 CLRF   xC7
2B2A 6BC8           03947 CLRF   xC8
2B2C 6BC9           03948 CLRF   xC9
2B2E 6BCA           03949 CLRF   xCA
2B30 6BCB           03950 CLRF   xCB
2B32 6BCC           03951 CLRF   xCC
2B34 6BCD           03952 CLRF   xCD
2B36 6BCE           03953 CLRF   xCE
2B38 6BCF           03954 CLRF   xCF
2B3A 6BD0           03955 CLRF   xD0
2B3C 6BD1           03956 CLRF   xD1
2B3E 6BD2           03957 CLRF   xD2
2B40 6BD3           03958 CLRF   xD3
2B42 6BD4           03959 CLRF   xD4
2B44 6BD5           03960 CLRF   xD5
2B46 6BD6           03961 CLRF   xD6
2B48 6BD7           03962 CLRF   xD7
2B4A 6BD8           03963 CLRF   xD8
2B4C 6BD9           03964 CLRF   xD9
2B4E 6BDA           03965 CLRF   xDA
2B50 6BDB           03966 CLRF   xDB
2B52 6BDC           03967 CLRF   xDC
2B54 6BDD           03968 CLRF   xDD
2B56 6BDE           03969 CLRF   xDE
2B58 6BDF           03970 CLRF   xDF
2B5A 6BE0           03971 CLRF   xE0
2B5C 6BE1           03972 CLRF   xE1
2B5E 6BE2           03973 CLRF   xE2
2B60 6BE3           03974 CLRF   xE3
2B62 6BE4           03975 CLRF   xE4
2B64 6BE5           03976 CLRF   xE5
2B66 6BE6           03977 CLRF   xE6
2B68 6BE7           03978 CLRF   xE7
2B6A 6BE8           03979 CLRF   xE8
2B6C 6BE9           03980 CLRF   xE9
2B6E 6BEA           03981 CLRF   xEA
2B70 6BEB           03982 CLRF   xEB
2B72 6BEC           03983 CLRF   xEC
2B74 6BED           03984 CLRF   xED
2B76 6BEE           03985 CLRF   xEE
2B78 6BEF           03986 CLRF   xEF
2B7A 6BF0           03987 CLRF   xF0
2B7C 6BF1           03988 CLRF   xF1
2B7E 6BF2           03989 CLRF   xF2
2B80 6BF3           03990 CLRF   xF3
2B82 6BF4           03991 CLRF   xF4
2B84 6BF5           03992 CLRF   xF5
2B86 6BF6           03993 CLRF   xF6
2B88 6BF7           03994 CLRF   xF7
2B8A 6BF8           03995 CLRF   xF8
2B8C 6BF9           03996 CLRF   xF9
2B8E 6BFA           03997 CLRF   xFA
2B90 6BFB           03998 CLRF   xFB
2B92 6BFC           03999 CLRF   xFC
2B94 6BFD           04000 CLRF   xFD
2B96 6BFE           04001 CLRF   xFE
2B98 6BFF           04002 CLRF   xFF
2B9A 0103           04003 MOVLB  3
2B9C 6B00           04004 CLRF   x00
2B9E 6B01           04005 CLRF   x01
2BA0 6B02           04006 CLRF   x02
2BA2 6B03           04007 CLRF   x03
2BA4 6B04           04008 CLRF   x04
2BA6 6B05           04009 CLRF   x05
2BA8 6B06           04010 CLRF   x06
2BAA 6B07           04011 CLRF   x07
2BAC 6B08           04012 CLRF   x08
2BAE 6B09           04013 CLRF   x09
2BB0 6B0A           04014 CLRF   x0A
2BB2 6B0B           04015 CLRF   x0B
2BB4 6B0C           04016 CLRF   x0C
2BB6 6B0D           04017 CLRF   x0D
2BB8 6B0E           04018 CLRF   x0E
2BBA 6B0F           04019 CLRF   x0F
2BBC 6B10           04020 CLRF   x10
2BBE 6B11           04021 CLRF   x11
2BC0 6B12           04022 CLRF   x12
2BC2 6B13           04023 CLRF   x13
2BC4 6B14           04024 CLRF   x14
2BC6 6B15           04025 CLRF   x15
2BC8 6B16           04026 CLRF   x16
2BCA 6B17           04027 CLRF   x17
2BCC 6B18           04028 CLRF   x18
2BCE 6B19           04029 CLRF   x19
2BD0 6B1A           04030 CLRF   x1A
2BD2 6B1B           04031 CLRF   x1B
2BD4 6B1C           04032 CLRF   x1C
2BD6 6B1D           04033 CLRF   x1D
2BD8 6B1E           04034 CLRF   x1E
2BDA 6B1F           04035 CLRF   x1F
2BDC 6B20           04036 CLRF   x20
2BDE 6B21           04037 CLRF   x21
2BE0 6B22           04038 CLRF   x22
2BE2 6B23           04039 CLRF   x23
2BE4 6B24           04040 CLRF   x24
2BE6 6B25           04041 CLRF   x25
2BE8 6B26           04042 CLRF   x26
2BEA 6B27           04043 CLRF   x27
2BEC 6B28           04044 CLRF   x28
2BEE 6B29           04045 CLRF   x29
2BF0 6B2A           04046 CLRF   x2A
2BF2 6B2B           04047 CLRF   x2B
2BF4 6B2C           04048 CLRF   x2C
2BF6 6B2D           04049 CLRF   x2D
2BF8 6B2E           04050 CLRF   x2E
2BFA 6B2F           04051 CLRF   x2F
2BFC 6B30           04052 CLRF   x30
2BFE 6B31           04053 CLRF   x31
2C00 6B32           04054 CLRF   x32
2C02 6B33           04055 CLRF   x33
2C04 6B34           04056 CLRF   x34
2C06 6B35           04057 CLRF   x35
2C08 6B36           04058 CLRF   x36
2C0A 6B37           04059 CLRF   x37
2C0C 6B38           04060 CLRF   x38
2C0E 6B39           04061 CLRF   x39
2C10 6B3A           04062 CLRF   x3A
2C12 6B3B           04063 CLRF   x3B
2C14 6B3C           04064 CLRF   x3C
2C16 6B3D           04065 CLRF   x3D
2C18 6B3E           04066 CLRF   x3E
2C1A 6B3F           04067 CLRF   x3F
2C1C 6B40           04068 CLRF   x40
2C1E 6B41           04069 CLRF   x41
2C20 6B42           04070 CLRF   x42
2C22 6B43           04071 CLRF   x43
2C24 6B44           04072 CLRF   x44
2C26 6B45           04073 CLRF   x45
2C28 6B46           04074 CLRF   x46
2C2A 6B47           04075 CLRF   x47
2C2C 6B48           04076 CLRF   x48
2C2E 6B49           04077 CLRF   x49
2C30 6B4A           04078 CLRF   x4A
2C32 6B4B           04079 CLRF   x4B
2C34 6B4C           04080 CLRF   x4C
2C36 6B4D           04081 CLRF   x4D
2C38 6B4E           04082 CLRF   x4E
2C3A 6B4F           04083 CLRF   x4F
2C3C 6B50           04084 CLRF   x50
2C3E 6B51           04085 CLRF   x51
2C40 6B52           04086 CLRF   x52
2C42 6B53           04087 CLRF   x53
2C44 6B54           04088 CLRF   x54
2C46 6B55           04089 CLRF   x55
2C48 6B56           04090 CLRF   x56
2C4A 6B57           04091 CLRF   x57
2C4C 6B58           04092 CLRF   x58
2C4E 6B59           04093 CLRF   x59
2C50 6B5A           04094 CLRF   x5A
2C52 6B5B           04095 CLRF   x5B
2C54 6B5C           04096 CLRF   x5C
2C56 6B5D           04097 CLRF   x5D
2C58 6B5E           04098 CLRF   x5E
2C5A 6B5F           04099 CLRF   x5F
2C5C 6B60           04100 CLRF   x60
2C5E 6B61           04101 CLRF   x61
2C60 6B62           04102 CLRF   x62
2C62 6B63           04103 CLRF   x63
2C64 6B64           04104 CLRF   x64
2C66 6B65           04105 CLRF   x65
2C68 6B66           04106 CLRF   x66
2C6A 6B67           04107 CLRF   x67
2C6C 6B68           04108 CLRF   x68
2C6E 6B69           04109 CLRF   x69
2C70 6B6A           04110 CLRF   x6A
2C72 6B6B           04111 CLRF   x6B
2C74 6B6C           04112 CLRF   x6C
2C76 6B6D           04113 CLRF   x6D
2C78 6B6E           04114 CLRF   x6E
2C7A 6B6F           04115 CLRF   x6F
2C7C 6B70           04116 CLRF   x70
2C7E 6B71           04117 CLRF   x71
2C80 6B72           04118 CLRF   x72
2C82 6B73           04119 CLRF   x73
2C84 6B74           04120 CLRF   x74
2C86 6B75           04121 CLRF   x75
2C88 6B76           04122 CLRF   x76
2C8A 6B77           04123 CLRF   x77
2C8C 6B78           04124 CLRF   x78
2C8E 6B79           04125 CLRF   x79
2C90 6B7A           04126 CLRF   x7A
2C92 6B7B           04127 CLRF   x7B
2C94 6B7C           04128 CLRF   x7C
2C96 6B7D           04129 CLRF   x7D
2C98 6B7E           04130 CLRF   x7E
2C9A 6B7F           04131 CLRF   x7F
2C9C 6B80           04132 CLRF   x80
2C9E 6B81           04133 CLRF   x81
2CA0 6B82           04134 CLRF   x82
2CA2 6B83           04135 CLRF   x83
2CA4 6B84           04136 CLRF   x84
2CA6 6B85           04137 CLRF   x85
2CA8 6B86           04138 CLRF   x86
2CAA 6B87           04139 CLRF   x87
2CAC 6B88           04140 CLRF   x88
2CAE 6B89           04141 CLRF   x89
2CB0 6B8A           04142 CLRF   x8A
2CB2 6B8B           04143 CLRF   x8B
2CB4 6B8C           04144 CLRF   x8C
2CB6 6B8D           04145 CLRF   x8D
2CB8 6B8E           04146 CLRF   x8E
2CBA 6B8F           04147 CLRF   x8F
2CBC 6B90           04148 CLRF   x90
2CBE 6B91           04149 CLRF   x91
2CC0 6B92           04150 CLRF   x92
2CC2 6B93           04151 CLRF   x93
2CC4 6B94           04152 CLRF   x94
2CC6 6B95           04153 CLRF   x95
2CC8 6B96           04154 CLRF   x96
2CCA 6B97           04155 CLRF   x97
2CCC 6B98           04156 CLRF   x98
2CCE 6B99           04157 CLRF   x99
2CD0 6B9A           04158 CLRF   x9A
2CD2 6B9B           04159 CLRF   x9B
2CD4 6B9C           04160 CLRF   x9C
2CD6 6B9D           04161 CLRF   x9D
2CD8 6B9E           04162 CLRF   x9E
2CDA 6B9F           04163 CLRF   x9F
2CDC 6BA0           04164 CLRF   xA0
2CDE 6BA1           04165 CLRF   xA1
2CE0 6BA2           04166 CLRF   xA2
2CE2 6BA3           04167 CLRF   xA3
2CE4 6BA4           04168 CLRF   xA4
2CE6 6BA5           04169 CLRF   xA5
2CE8 6BA6           04170 CLRF   xA6
2CEA 6BA7           04171 CLRF   xA7
2CEC 6BA8           04172 CLRF   xA8
2CEE 6BA9           04173 CLRF   xA9
2CF0 6BAA           04174 CLRF   xAA
2CF2 6BAB           04175 CLRF   xAB
2CF4 6BAC           04176 CLRF   xAC
2CF6 6BAD           04177 CLRF   xAD
2CF8 6BAE           04178 CLRF   xAE
2CFA 6BAF           04179 CLRF   xAF
2CFC 6BB0           04180 CLRF   xB0
2CFE 6BB1           04181 CLRF   xB1
2D00 6BB2           04182 CLRF   xB2
2D02 6BB3           04183 CLRF   xB3
2D04 6BB4           04184 CLRF   xB4
2D06 6BB5           04185 CLRF   xB5
2D08 6BB6           04186 CLRF   xB6
2D0A 6BB7           04187 CLRF   xB7
2D0C 6BB8           04188 CLRF   xB8
2D0E 6BB9           04189 CLRF   xB9
2D10 6BBA           04190 CLRF   xBA
2D12 6BBB           04191 CLRF   xBB
2D14 6BBC           04192 CLRF   xBC
2D16 6BBD           04193 CLRF   xBD
2D18 6BBE           04194 CLRF   xBE
2D1A 6BBF           04195 CLRF   xBF
2D1C 6BC0           04196 CLRF   xC0
2D1E 6BC1           04197 CLRF   xC1
2D20 6BC2           04198 CLRF   xC2
2D22 6BC3           04199 CLRF   xC3
2D24 6BC4           04200 CLRF   xC4
2D26 6BC5           04201 CLRF   xC5
2D28 6BC6           04202 CLRF   xC6
2D2A 6BC7           04203 CLRF   xC7
2D2C 6BC8           04204 CLRF   xC8
2D2E 6BC9           04205 CLRF   xC9
2D30 6BCA           04206 CLRF   xCA
2D32 6BCB           04207 CLRF   xCB
2D34 6BCC           04208 CLRF   xCC
2D36 6BCD           04209 CLRF   xCD
2D38 6BCE           04210 CLRF   xCE
2D3A 6BCF           04211 CLRF   xCF
2D3C 6BD0           04212 CLRF   xD0
2D3E 6BD1           04213 CLRF   xD1
2D40 6BD2           04214 CLRF   xD2
2D42 6BD3           04215 CLRF   xD3
2D44 6BD4           04216 CLRF   xD4
2D46 6BD5           04217 CLRF   xD5
2D48 6BD6           04218 CLRF   xD6
2D4A 6BD7           04219 CLRF   xD7
2D4C 6BD8           04220 CLRF   xD8
2D4E 6BD9           04221 CLRF   xD9
2D50 6BDA           04222 CLRF   xDA
2D52 6BDB           04223 CLRF   xDB
2D54 6BDC           04224 CLRF   xDC
2D56 6BDD           04225 CLRF   xDD
2D58 6BDE           04226 CLRF   xDE
2D5A 6BDF           04227 CLRF   xDF
2D5C 6BE0           04228 CLRF   xE0
2D5E 6BE1           04229 CLRF   xE1
2D60 6BE2           04230 CLRF   xE2
2D62 6BE3           04231 CLRF   xE3
2D64 6BE4           04232 CLRF   xE4
2D66 6BE5           04233 CLRF   xE5
2D68 6BE6           04234 CLRF   xE6
2D6A 6BE7           04235 CLRF   xE7
2D6C 6BE8           04236 CLRF   xE8
2D6E 6BE9           04237 CLRF   xE9
2D70 6BEA           04238 CLRF   xEA
2D72 6BEB           04239 CLRF   xEB
2D74 6BEC           04240 CLRF   xEC
2D76 6BED           04241 CLRF   xED
                    04242 ....................   fix_boot(); 
2D78 0100           04243 MOVLB  0
2D7A EF2C F01B      04244 GOTO   3658
                    04245 ....................   comm_init(); 
2D7E EFB2 F01B      04246 GOTO   3764
                    04247 ....................   gpio_init(); 
2D82 EFB5 F01B      04248 GOTO   376A
                    04249 ....................   init_message_handlers(); 
2D86 EFE9 F01B      04250 GOTO   37D2
                    04251 ....................   enable_interrupts(GLOBAL); 
2D8A 0EC0           04252 MOVLW  C0
2D8C 12F2           04253 IORWF  FF2,F
                    04254 ....................  
                    04255 ....................   /* turn on the LED */ 
                    04256 ....................   gpio_set(GPIO_LED); 
2D8E 0E04           04257 MOVLW  04
2D90 0104           04258 MOVLB  4
2D92 6F69           04259 MOVWF  x69
                    04260 ....................  
                    04261 ....................   /* enable 5V power */ 
                    04262 ....................   gpio_set(GPIO_5V_EN); 
2DE8 0E11           04263 MOVLW  11
2DEA 0104           04264 MOVLB  4
2DEC 6F69           04265 MOVWF  x69
                    04266 ....................   ad5312_init(); 
2E42 EF00 F028      04267 GOTO   5000
                    04268 ....................  
                    04269 ....................   while (1) { 
                    04270 ....................     uint16_t size; 
                    04271 ....................     bool res = comm_receive_message(message_buffer, &size); 
2E46 0103           04272 MOVLB  3
2E48 6BF4           04273 CLRF   xF4
2E4A 0E21           04274 MOVLW  21
2E4C 6FF3           04275 MOVWF  xF3
2E4E 0E03           04276 MOVLW  03
2E50 6FF6           04277 MOVWF  xF6
2E52 0EF0           04278 MOVLW  F0
2E54 6FF5           04279 MOVWF  xF5
2E56 0100           04280 MOVLB  0
2E58 EFC4 F029      04281 GOTO   5388
2E5C 0103           04282 MOVLB  3
2E5E 91F2           04283 BCF    xF2.0
2E60 B001           04284 BTFSC  01.0
2E62 81F2           04285 BSF    xF2.0
                    04286 ....................     if (res) { 
2E64 A1F2           04287 BTFSS  xF2.0
2E66 D00B           04288 BRA    2E7E
                    04289 ....................       process_message(message_buffer, size); 
2E68 6BF4           04290 CLRF   xF4
2E6A 0E21           04291 MOVLW  21
2E6C 6FF3           04292 MOVWF  xF3
2E6E C3F1 F3F6      04293 MOVFF  3F1,3F6
2E72 C3F0 F3F5      04294 MOVFF  3F0,3F5
2E76 0100           04295 MOVLB  0
2E78 EFC1 F032      04296 GOTO   6582
2E7C 0103           04297 MOVLB  3
                    04298 ....................     } 
                    04299 ....................   } 
2E7E D7E4           04300 BRA    2E48
                    04301 .................... } 
                    04302 ....................  
                    04303 .................... #include "BA1474.h" 
                    04304 .................... #include <18F45K22.h> 
2E80 D7FF           04305 BRA    2E80
                    04306 .................... //////// Standard Header file for the PIC18F45K22 device //////////////// 
                    04307 .................... #device PIC18F45K22 
                    05044 .................... #list 
                    05045 ....................  
                    05046 .................... #device adc=10 
                    05047 .................... #device pass_strings=in_ram 
                    05048 ....................  
                    05049 .................... #define LOADER_END 0x1FFF 
                    05050 .................... #include <boot.h> 
                    05051 .................... #undef LOADER_END 
                    05052 .................... #define FLASH_SIZE getenv("FLASH_ERASE_SIZE") 
                    05053 .................... #define LOADER_END   0x1FFF 
                    05054 .................... #define LOADER_SIZE  0x3FF 
                    05055 ....................  
                    05056 .................... #ifndef _bootloader 
                    05057 .................... #build(reset=LOADER_END+1, interrupt=LOADER_END+9) 
                    05058 ....................  
                    05059 .................... /* when in operational software, keep out of the bootloader sections */ 
                    05060 .................... #org 0, 0xfff {} 
                    05061 .................... #org 0x1000, 0x1ffe {} 
                    05062 ....................  
                    05063 .................... #else 
                    05064 ....................  
                    05065 .................... /* when in the bootloader, keep out of the operational sections */ 
                    05066 .................... #org 0x2000, 0x7ffe {} 
                    05067 ....................  
                    05068 .................... #endif 
                    05069 ....................  
                    05070 ....................  
                    05071 .................... #FUSES NOWDT                   //No Watch Dog Timer 
                    05072 .................... #FUSES WDT128                  //Watch Dog Timer uses 1:128 Postscale 
                    05073 .................... #FUSES INTRC_IO                //Internal RC Osc, no CLKOUT 
                    05074 .................... #FUSES NOBROWNOUT              //No brownout reset 
                    05075 .................... #FUSES WDT_SW                  //No Watch Dog Timer, enabled in Software 
                    05076 .................... #FUSES NOLVP                   //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
                    05077 .................... #FUSES NOPUT 
                    05078 .................... #FUSES NOXINST                 //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
                    05079 ....................  
                    05080 .................... #use delay(clock=64000000) 
                    05081 .................... #use rs232(baud=921600,xmit=PIN_C6,rcv=PIN_C7,ERRORS) 
                    05082 .................... #USE TIMER(TIMER=1,TICK=1us,BITS=32,NOISR) 
                    05083 .................... #use spi(DO=PIN_A4, CLK=PIN_A3, ENABLE=PIN_A2, ENABLE_ACTIVE=0, DATA_HOLD=20, BITS=16) 
                    05084 ....................  
                    05085 .................... #opt 9 
                    05086 ....................  
                    05087 .................... #use fast_io(a) 
                    05088 .................... #use fast_io(b) 
                    05089 .................... #use fast_io(c) 
                    05090 .................... #use fast_io(d) 
                    05091 .................... #use fast_io(e) 
                    05092 ....................  
                    05093 .................... #define safe_write_program_memory(address, pointer, size) \ 
                    05094 ....................   do { disable_interrupts(GLOBAL); write_program_memory(address, pointer, size); enable_interrupts(GLOBAL); delay_us(1000); } while (0) 
                    05095 ....................  
                    05096 ....................  
                    05097 .................... #include <stdint.h> 
                    05098 .................... /////////////////////////////////////////////////////////////////////////// 
                    05099 .................... ////                                                                   //// 
                    05100 .................... ////                           stdint.h                                //// 
                    05101 .................... ////                                                                   //// 
                    05102 .................... //// Standard integer definitions.                                     //// 
                    05103 .................... ////                                                                   //// 
                    05104 .................... /////////////////////////////////////////////////////////////////////////// 
                    05105 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    05106 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    05107 .................... //// compiler.  This source code may only be distributed to other      //// 
                    05108 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    05109 .................... //// or distribution is permitted without written permission.          //// 
                    05110 .................... //// Derivative programs created using this software in object code    //// 
                    05111 .................... //// form are not restricted in any way.                               //// 
                    05112 .................... /////////////////////////////////////////////////////////////////////////// 
                    05113 ....................  
                    05114 .................... #ifndef _STDINT 
                    05115 ....................  
                    05116 .................... #define _STDINT 
                    05117 ....................  
                    05118 .................... //////////// exact width 
                    05119 ....................  
                    05120 .................... typedef signed int8 int8_t; 
                    05121 .................... typedef unsigned int8 uint8_t; 
                    05122 .................... typedef signed int16 int16_t; 
                    05123 .................... typedef unsigned int16 uint16_t; 
                    05124 .................... typedef signed int32 int32_t; 
                    05125 .................... typedef unsigned int32 uint32_t; 
                    05126 ....................  
                    05127 .................... #if defined(__PCD__) 
                    05128 .................... //typedef signed int24 int24_t; 
                    05129 .................... //typedef unsigned int24 uint24_t; 
                    05130 .................... typedef signed int64 int64_t; 
                    05131 .................... typedef unsigned int64 uint64_t; 
                    05132 .................... #endif 
                    05133 ....................  
                    05134 .................... #define INT8_MAX  (128) 
                    05135 .................... #define INT8_MIN  (-127) 
                    05136 .................... #define UINT8_MAX (255) 
                    05137 ....................  
                    05138 .................... #define INT16_MAX  (32767) 
                    05139 .................... #define INT16_MIN  (-32768) 
                    05140 .................... #define UINT16_MAX (65535) 
                    05141 ....................  
                    05142 .................... #define INT32_MAX  (2147483647) 
                    05143 .................... #define INT32_MIN  (-2147483648) 
                    05144 .................... #define UINT32_MAX (4294967295) 
                    05145 ....................  
                    05146 .................... #if defined(__PCD__) 
                    05147 .................... //#define INT24_MAX  (8388607) 
                    05148 .................... //#define INT24_MIN  (-8388608) 
                    05149 .................... //#define UINT24_MAX (16777215) 
                    05150 ....................  
                    05151 .................... #define INT64_MAX  (9223372036854775807) 
                    05152 .................... #define INT64_MIN  (-9223372036854775808) 
                    05153 .................... #define UINT64_MAX (18446744073709551615) 
                    05154 .................... #endif 
                    05155 ....................  
                    05156 .................... ///////// minimum width 
                    05157 ....................  
                    05158 .................... typedef signed int8 int_least8_t; 
                    05159 .................... typedef unsigned int8 uint_least8_t; 
                    05160 .................... typedef signed int16 int_least16_t; 
                    05161 .................... typedef unsigned int16 uint_least16_t; 
                    05162 .................... typedef signed int32 int_least32_t; 
                    05163 .................... typedef unsigned int32 uint_least32_t; 
                    05164 ....................  
                    05165 .................... #if defined(__PCD__) 
                    05166 .................... //typedef signed int24 int_least24_t; 
                    05167 .................... //typedef unsigned int24 uint_least24_t; 
                    05168 .................... typedef signed int64 int_least64_t; 
                    05169 .................... typedef unsigned int64 uint_least64_t; 
                    05170 .................... #endif 
                    05171 ....................  
                    05172 .................... #define INT_LEAST8_MAX  (128) 
                    05173 .................... #define INT_LEAST8_MIN  (-127) 
                    05174 .................... #define UINT_LEAST8_MAX (255) 
                    05175 ....................  
                    05176 .................... #define INT_LEAST16_MAX  (32767) 
                    05177 .................... #define INT_LEAST16_MIN  (-32768) 
                    05178 .................... #define UINT_LEAST16_MAX (65535) 
                    05179 ....................  
                    05180 .................... #define INT_LEAST32_MAX  (2147483647) 
                    05181 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    05182 .................... #define UINT_LEAST32_MAX (4294967295) 
                    05183 ....................  
                    05184 .................... #if defined(__PCD__) 
                    05185 .................... //#define INT_LEAST24_MAX  (8388607) 
                    05186 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    05187 .................... //#define UINT_LEAST24_MAX (16777215) 
                    05188 ....................  
                    05189 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    05190 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    05191 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    05192 .................... #endif 
                    05193 ....................  
                    05194 .................... ///////// fastest width 
                    05195 ....................  
                    05196 .................... #if defined(__PCD__) 
                    05197 .................... typedef signed int16 int_fast8_t; 
                    05198 .................... typedef unsigned int16 uint_fast8_t; 
                    05199 .................... #define INT_FAST8_MAX  (32767) 
                    05200 .................... #define INT_FAST8_MIN  (-32768) 
                    05201 .................... #define UINT_FAST8_MAX (65535) 
                    05202 .................... typedef signed int16 int_fast16_t; 
                    05203 .................... typedef unsigned int16 uint_fast16_t; 
                    05204 .................... //typedef signed int24 int_fast24_t; 
                    05205 .................... //typedef unsigned int24 uint_fast24_t; 
                    05206 .................... typedef signed int64 int_fast64_t; 
                    05207 .................... typedef unsigned int64 uint_fast64_t; 
                    05208 .................... #else 
                    05209 .................... typedef signed int8 int_fast8_t; 
                    05210 .................... typedef unsigned int8 uint_fast8_t; 
                    05211 .................... #define INT_FAST8_MAX  (128) 
                    05212 .................... #define INT_FAST8_MIN  (-127) 
                    05213 .................... #define UINT_FAST8_MAX (255) 
                    05214 .................... typedef signed int16 int_fast16_t; 
                    05215 .................... typedef unsigned int16 uint_fast16_t; 
                    05216 .................... #endif 
                    05217 ....................  
                    05218 .................... typedef signed int32 int_fast32_t; 
                    05219 .................... typedef unsigned int32 uint_fast32_t; 
                    05220 ....................  
                    05221 .................... #define INT_FAST16_MAX  (32767) 
                    05222 .................... #define INT_FAST16_MIN  (-32768) 
                    05223 .................... #define UINT_FAST16_MAX (65535) 
                    05224 ....................  
                    05225 .................... #define INT_FAST32_MAX  (2147483647) 
                    05226 .................... #define INT_FAST32_MIN  (-2147483648) 
                    05227 .................... #define UINT_FAST32_MAX (4294967295) 
                    05228 ....................  
                    05229 .................... #if defined(__PCD__) 
                    05230 .................... //#define INT_FAST24_MAX  (8388607) 
                    05231 .................... //#define INT_FAST24_MIN  (-8388608) 
                    05232 .................... //#define UINT_FAST24_MAX (16777215) 
                    05233 ....................  
                    05234 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    05235 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    05236 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    05237 .................... #endif 
                    05238 ....................  
                    05239 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    05240 ....................  
                    05241 .................... /// TODO 
                    05242 ....................  
                    05243 .................... /// intptr_t uintptr_t 
                    05244 ....................  
                    05245 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    05246 ....................  
                    05247 ....................  
                    05248 .................... /////////// greatest width (OPTIONAL) 
                    05249 ....................  
                    05250 .................... /// TODO 
                    05251 ....................  
                    05252 .................... /// intmax_t uintmax_t 
                    05253 ....................  
                    05254 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    05255 ....................  
                    05256 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    05257 ....................  
                    05258 ....................  
                    05259 .................... #endif 
                    05260 ....................  
                    05261 .................... #include "crc8.h" 
                    05262 .................... #ifndef __CRC8__ 
                    05263 .................... #define __CRC8__ 
                    05264 ....................  
                    05265 .................... #include <stdint.h> 
                    05266 .................... /////////////////////////////////////////////////////////////////////////// 
                    05267 .................... ////                                                                   //// 
                    05268 .................... ////                           stdint.h                                //// 
                    05269 .................... ////                                                                   //// 
                    05270 .................... //// Standard integer definitions.                                     //// 
                    05271 .................... ////                                                                   //// 
                    05272 .................... /////////////////////////////////////////////////////////////////////////// 
                    05273 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    05274 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    05275 .................... //// compiler.  This source code may only be distributed to other      //// 
                    05276 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    05277 .................... //// or distribution is permitted without written permission.          //// 
                    05278 .................... //// Derivative programs created using this software in object code    //// 
                    05279 .................... //// form are not restricted in any way.                               //// 
                    05280 .................... /////////////////////////////////////////////////////////////////////////// 
                    05281 ....................  
                    05282 .................... #ifndef _STDINT 
                    05283 ....................  
                    05284 .................... #define _STDINT 
                    05285 ....................  
                    05286 .................... //////////// exact width 
                    05287 ....................  
                    05288 .................... typedef signed int8 int8_t; 
                    05289 .................... typedef unsigned int8 uint8_t; 
                    05290 .................... typedef signed int16 int16_t; 
                    05291 .................... typedef unsigned int16 uint16_t; 
                    05292 .................... typedef signed int32 int32_t; 
                    05293 .................... typedef unsigned int32 uint32_t; 
                    05294 ....................  
                    05295 .................... #if defined(__PCD__) 
                    05296 .................... //typedef signed int24 int24_t; 
                    05297 .................... //typedef unsigned int24 uint24_t; 
                    05298 .................... typedef signed int64 int64_t; 
                    05299 .................... typedef unsigned int64 uint64_t; 
                    05300 .................... #endif 
                    05301 ....................  
                    05302 .................... #define INT8_MAX  (128) 
                    05303 .................... #define INT8_MIN  (-127) 
                    05304 .................... #define UINT8_MAX (255) 
                    05305 ....................  
                    05306 .................... #define INT16_MAX  (32767) 
                    05307 .................... #define INT16_MIN  (-32768) 
                    05308 .................... #define UINT16_MAX (65535) 
                    05309 ....................  
                    05310 .................... #define INT32_MAX  (2147483647) 
                    05311 .................... #define INT32_MIN  (-2147483648) 
                    05312 .................... #define UINT32_MAX (4294967295) 
                    05313 ....................  
                    05314 .................... #if defined(__PCD__) 
                    05315 .................... //#define INT24_MAX  (8388607) 
                    05316 .................... //#define INT24_MIN  (-8388608) 
                    05317 .................... //#define UINT24_MAX (16777215) 
                    05318 ....................  
                    05319 .................... #define INT64_MAX  (9223372036854775807) 
                    05320 .................... #define INT64_MIN  (-9223372036854775808) 
                    05321 .................... #define UINT64_MAX (18446744073709551615) 
                    05322 .................... #endif 
                    05323 ....................  
                    05324 .................... ///////// minimum width 
                    05325 ....................  
                    05326 .................... typedef signed int8 int_least8_t; 
                    05327 .................... typedef unsigned int8 uint_least8_t; 
                    05328 .................... typedef signed int16 int_least16_t; 
                    05329 .................... typedef unsigned int16 uint_least16_t; 
                    05330 .................... typedef signed int32 int_least32_t; 
                    05331 .................... typedef unsigned int32 uint_least32_t; 
                    05332 ....................  
                    05333 .................... #if defined(__PCD__) 
                    05334 .................... //typedef signed int24 int_least24_t; 
                    05335 .................... //typedef unsigned int24 uint_least24_t; 
                    05336 .................... typedef signed int64 int_least64_t; 
                    05337 .................... typedef unsigned int64 uint_least64_t; 
                    05338 .................... #endif 
                    05339 ....................  
                    05340 .................... #define INT_LEAST8_MAX  (128) 
                    05341 .................... #define INT_LEAST8_MIN  (-127) 
                    05342 .................... #define UINT_LEAST8_MAX (255) 
                    05343 ....................  
                    05344 .................... #define INT_LEAST16_MAX  (32767) 
                    05345 .................... #define INT_LEAST16_MIN  (-32768) 
                    05346 .................... #define UINT_LEAST16_MAX (65535) 
                    05347 ....................  
                    05348 .................... #define INT_LEAST32_MAX  (2147483647) 
                    05349 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    05350 .................... #define UINT_LEAST32_MAX (4294967295) 
                    05351 ....................  
                    05352 .................... #if defined(__PCD__) 
                    05353 .................... //#define INT_LEAST24_MAX  (8388607) 
                    05354 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    05355 .................... //#define UINT_LEAST24_MAX (16777215) 
                    05356 ....................  
                    05357 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    05358 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    05359 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    05360 .................... #endif 
                    05361 ....................  
                    05362 .................... ///////// fastest width 
                    05363 ....................  
                    05364 .................... #if defined(__PCD__) 
                    05365 .................... typedef signed int16 int_fast8_t; 
                    05366 .................... typedef unsigned int16 uint_fast8_t; 
                    05367 .................... #define INT_FAST8_MAX  (32767) 
                    05368 .................... #define INT_FAST8_MIN  (-32768) 
                    05369 .................... #define UINT_FAST8_MAX (65535) 
                    05370 .................... typedef signed int16 int_fast16_t; 
                    05371 .................... typedef unsigned int16 uint_fast16_t; 
                    05372 .................... //typedef signed int24 int_fast24_t; 
                    05373 .................... //typedef unsigned int24 uint_fast24_t; 
                    05374 .................... typedef signed int64 int_fast64_t; 
                    05375 .................... typedef unsigned int64 uint_fast64_t; 
                    05376 .................... #else 
                    05377 .................... typedef signed int8 int_fast8_t; 
                    05378 .................... typedef unsigned int8 uint_fast8_t; 
                    05379 .................... #define INT_FAST8_MAX  (128) 
                    05380 .................... #define INT_FAST8_MIN  (-127) 
                    05381 .................... #define UINT_FAST8_MAX (255) 
                    05382 .................... typedef signed int16 int_fast16_t; 
                    05383 .................... typedef unsigned int16 uint_fast16_t; 
                    05384 .................... #endif 
                    05385 ....................  
                    05386 .................... typedef signed int32 int_fast32_t; 
                    05387 .................... typedef unsigned int32 uint_fast32_t; 
                    05388 ....................  
                    05389 .................... #define INT_FAST16_MAX  (32767) 
                    05390 .................... #define INT_FAST16_MIN  (-32768) 
                    05391 .................... #define UINT_FAST16_MAX (65535) 
                    05392 ....................  
                    05393 .................... #define INT_FAST32_MAX  (2147483647) 
                    05394 .................... #define INT_FAST32_MIN  (-2147483648) 
                    05395 .................... #define UINT_FAST32_MAX (4294967295) 
                    05396 ....................  
                    05397 .................... #if defined(__PCD__) 
                    05398 .................... //#define INT_FAST24_MAX  (8388607) 
                    05399 .................... //#define INT_FAST24_MIN  (-8388608) 
                    05400 .................... //#define UINT_FAST24_MAX (16777215) 
                    05401 ....................  
                    05402 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    05403 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    05404 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    05405 .................... #endif 
                    05406 ....................  
                    05407 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    05408 ....................  
                    05409 .................... /// TODO 
                    05410 ....................  
                    05411 .................... /// intptr_t uintptr_t 
                    05412 ....................  
                    05413 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    05414 ....................  
                    05415 ....................  
                    05416 .................... /////////// greatest width (OPTIONAL) 
                    05417 ....................  
                    05418 .................... /// TODO 
                    05419 ....................  
                    05420 .................... /// intmax_t uintmax_t 
                    05421 ....................  
                    05422 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    05423 ....................  
                    05424 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    05425 ....................  
                    05426 ....................  
                    05427 .................... #endif 
                    05428 ....................  
                    05429 ....................  
                    05430 .................... uint8_t crc8(uint8_t* buffer, uint16_t size); 
                    05431 ....................  
                    05432 .................... #endif 
                    05433 ....................  
                    05434 ....................  
                    05435 .................... // Polynom 0x2F 
                    05436 .................... static const uint8_t crc8_table[256] = { 
                    05437 ....................   0x00, 0x2F, 0x5E, 0x71, 0xBC, 0x93, 0xE2, 0xCD, 
                    05438 ....................   0x57, 0x78, 0x09, 0x26, 0xEB, 0xC4, 0xB5, 0x9A, 
                    05439 ....................   0xAE, 0x81, 0xF0, 0xDF, 0x12, 0x3D, 0x4C, 0x63, 
                    05440 ....................   0xF9, 0xD6, 0xA7, 0x88, 0x45, 0x6A, 0x1B, 0x34, 
                    05441 ....................   0x73, 0x5C, 0x2D, 0x02, 0xCF, 0xE0, 0x91, 0xBE, 
                    05442 ....................   0x24, 0x0B, 0x7A, 0x55, 0x98, 0xB7, 0xC6, 0xE9, 
                    05443 ....................   0xDD, 0xF2, 0x83, 0xAC, 0x61, 0x4E, 0x3F, 0x10, 
                    05444 ....................   0x8A, 0xA5, 0xD4, 0xFB, 0x36, 0x19, 0x68, 0x47, 
                    05445 ....................   0xE6, 0xC9, 0xB8, 0x97, 0x5A, 0x75, 0x04, 0x2B, 
                    05446 ....................   0xB1, 0x9E, 0xEF, 0xC0, 0x0D, 0x22, 0x53, 0x7C, 
                    05447 ....................   0x48, 0x67, 0x16, 0x39, 0xF4, 0xDB, 0xAA, 0x85, 
                    05448 ....................   0x1F, 0x30, 0x41, 0x6E, 0xA3, 0x8C, 0xFD, 0xD2, 
                    05449 ....................   0x95, 0xBA, 0xCB, 0xE4, 0x29, 0x06, 0x77, 0x58, 
                    05450 ....................   0xC2, 0xED, 0x9C, 0xB3, 0x7E, 0x51, 0x20, 0x0F, 
                    05451 ....................   0x3B, 0x14, 0x65, 0x4A, 0x87, 0xA8, 0xD9, 0xF6, 
                    05452 ....................   0x6C, 0x43, 0x32, 0x1D, 0xD0, 0xFF, 0x8E, 0xA1, 
                    05453 ....................   0xE3, 0xCC, 0xBD, 0x92, 0x5F, 0x70, 0x01, 0x2E, 
                    05454 ....................   0xB4, 0x9B, 0xEA, 0xC5, 0x08, 0x27, 0x56, 0x79, 
                    05455 ....................   0x4D, 0x62, 0x13, 0x3C, 0xF1, 0xDE, 0xAF, 0x80, 
                    05456 ....................   0x1A, 0x35, 0x44, 0x6B, 0xA6, 0x89, 0xF8, 0xD7, 
                    05457 ....................   0x90, 0xBF, 0xCE, 0xE1, 0x2C, 0x03, 0x72, 0x5D, 
                    05458 ....................   0xC7, 0xE8, 0x99, 0xB6, 0x7B, 0x54, 0x25, 0x0A, 
                    05459 ....................   0x3E, 0x11, 0x60, 0x4F, 0x82, 0xAD, 0xDC, 0xF3, 
                    05460 ....................   0x69, 0x46, 0x37, 0x18, 0xD5, 0xFA, 0x8B, 0xA4, 
                    05461 ....................   0x05, 0x2A, 0x5B, 0x74, 0xB9, 0x96, 0xE7, 0xC8, 
                    05462 ....................   0x52, 0x7D, 0x0C, 0x23, 0xEE, 0xC1, 0xB0, 0x9F, 
                    05463 ....................   0xAB, 0x84, 0xF5, 0xDA, 0x17, 0x38, 0x49, 0x66, 
                    05464 ....................   0xFC, 0xD3, 0xA2, 0x8D, 0x40, 0x6F, 0x1E, 0x31, 
                    05465 ....................   0x76, 0x59, 0x28, 0x07, 0xCA, 0xE5, 0x94, 0xBB, 
                    05466 ....................   0x21, 0x0E, 0x7F, 0x50, 0x9D, 0xB2, 0xC3, 0xEC, 
                    05467 ....................   0xD8, 0xF7, 0x86, 0xA9, 0x64, 0x4B, 0x3A, 0x15, 
                    05468 ....................   0x8F, 0xA0, 0xD1, 0xFE, 0x33, 0x1C, 0x6D, 0x42 
                    05469 .................... }; 
                    05470 ....................  
                    05471 .................... uint8_t crc8(uint8_t* buffer, uint16_t size) { 
52C0 0104           05472 MOVLB  4
52C2 6B56           05473 CLRF   x56
                    05474 ....................   uint8_t crc = 0; 
                    05475 ....................  
                    05476 ....................   while (size-- > 0) { 
52C4 C455 F003      05477 MOVFF  455,03
52C8 5154           05478 MOVF   x54,W
52CA B4D8           05479 BTFSC  FD8.2
52CC 0755           05480 DECF   x55,F
52CE 0754           05481 DECF   x54,F
52D0 6F58           05482 MOVWF  x58
52D2 C003 F459      05483 MOVFF  03,459
52D6 5358           05484 MOVF   x58,F
52D8 E102           05485 BNZ   52DE
52DA 5359           05486 MOVF   x59,F
52DC E015           05487 BZ    5308
                    05488 ....................     uint8_t pos = (*buffer++) ^ crc; 
52DE C453 F003      05489 MOVFF  453,03
52E2 5152           05490 MOVF   x52,W
52E4 2B52           05491 INCF   x52,F
52E6 B4D8           05492 BTFSC  FD8.2
52E8 2B53           05493 INCF   x53,F
52EA 6EE9           05494 MOVWF  FE9
52EC C003 FFEA      05495 MOVFF  03,FEA
52F0 50EF           05496 MOVF   FEF,W
52F2 1956           05497 XORWF  x56,W
52F4 6F57           05498 MOVWF  x57
                    05499 ....................     crc = crc8_table[pos]; 
52F6 6A03           05500 CLRF   03
52F8 5157           05501 MOVF   x57,W
52FA 0100           05502 MOVLB  0
52FC EC63 F010      05503 CALL   20C6
5300 CFE8 F456      05504 MOVFF  FE8,456
                    05505 ....................   } 
5304 0104           05506 MOVLB  4
5306 D7DE           05507 BRA    52C4
                    05508 ....................   return crc; 
5308 C456 F001      05509 MOVFF  456,01
                    05510 .................... } 
530C 0100           05511 MOVLB  0
530E 0012           05512 RETURN 0
                    05513 ....................  
                    05514 .................... /* 
                    05515 ....................  * gpio.c 
                    05516 ....................  * 
                    05517 ....................  *  Created on: Mar 8, 2017 
                    05518 ....................  *      Author: asafe 
                    05519 ....................  */ 
                    05520 ....................   
                    05521 .................... #include "BA1474.h" 
                    05522 .................... #include <18F45K22.h> 
                    05523 .................... //////// Standard Header file for the PIC18F45K22 device //////////////// 
                    05524 .................... #device PIC18F45K22 
                    06231 .................... #list 
                    06232 ....................  
                    06233 .................... #device adc=10 
                    06234 .................... #device pass_strings=in_ram 
                    06235 ....................  
                    06236 .................... #define LOADER_END 0x1FFF 
                    06237 .................... #include <boot.h> 
                    06238 .................... #undef LOADER_END 
                    06239 .................... #define FLASH_SIZE getenv("FLASH_ERASE_SIZE") 
                    06240 .................... #define LOADER_END   0x1FFF 
                    06241 .................... #define LOADER_SIZE  0x3FF 
                    06242 ....................  
                    06243 .................... #ifndef _bootloader 
                    06244 .................... #build(reset=LOADER_END+1, interrupt=LOADER_END+9) 
                    06245 ....................  
                    06246 .................... /* when in operational software, keep out of the bootloader sections */ 
                    06247 .................... #org 0, 0xfff {} 
                    06248 .................... #org 0x1000, 0x1ffe {} 
                    06249 ....................  
                    06250 .................... #else 
                    06251 ....................  
                    06252 .................... /* when in the bootloader, keep out of the operational sections */ 
                    06253 .................... #org 0x2000, 0x7ffe {} 
                    06254 ....................  
                    06255 .................... #endif 
                    06256 ....................  
                    06257 ....................  
                    06258 .................... #FUSES NOWDT                   //No Watch Dog Timer 
                    06259 .................... #FUSES WDT128                  //Watch Dog Timer uses 1:128 Postscale 
                    06260 .................... #FUSES INTRC_IO                //Internal RC Osc, no CLKOUT 
                    06261 .................... #FUSES NOBROWNOUT              //No brownout reset 
                    06262 .................... #FUSES WDT_SW                  //No Watch Dog Timer, enabled in Software 
                    06263 .................... #FUSES NOLVP                   //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
                    06264 .................... #FUSES NOPUT 
                    06265 .................... #FUSES NOXINST                 //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
                    06266 ....................  
                    06267 .................... #use delay(clock=64000000) 
                    06268 .................... #use rs232(baud=921600,xmit=PIN_C6,rcv=PIN_C7,ERRORS) 
                    06269 .................... #USE TIMER(TIMER=1,TICK=1us,BITS=32,NOISR) 
                    06270 .................... #use spi(DO=PIN_A4, CLK=PIN_A3, ENABLE=PIN_A2, ENABLE_ACTIVE=0, DATA_HOLD=20, BITS=16) 
                    06271 ....................  
                    06272 .................... #opt 9 
                    06273 ....................  
                    06274 .................... #use fast_io(a) 
                    06275 .................... #use fast_io(b) 
                    06276 .................... #use fast_io(c) 
                    06277 .................... #use fast_io(d) 
                    06278 .................... #use fast_io(e) 
                    06279 ....................  
                    06280 .................... #define safe_write_program_memory(address, pointer, size) \ 
                    06281 ....................   do { disable_interrupts(GLOBAL); write_program_memory(address, pointer, size); enable_interrupts(GLOBAL); delay_us(1000); } while (0) 
                    06282 ....................  
                    06283 ....................  
                    06284 ....................  
                    06285 .................... #include <stdint.h> 
                    06286 .................... /////////////////////////////////////////////////////////////////////////// 
                    06287 .................... ////                                                                   //// 
                    06288 .................... ////                           stdint.h                                //// 
                    06289 .................... ////                                                                   //// 
                    06290 .................... //// Standard integer definitions.                                     //// 
                    06291 .................... ////                                                                   //// 
                    06292 .................... /////////////////////////////////////////////////////////////////////////// 
                    06293 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    06294 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    06295 .................... //// compiler.  This source code may only be distributed to other      //// 
                    06296 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    06297 .................... //// or distribution is permitted without written permission.          //// 
                    06298 .................... //// Derivative programs created using this software in object code    //// 
                    06299 .................... //// form are not restricted in any way.                               //// 
                    06300 .................... /////////////////////////////////////////////////////////////////////////// 
                    06301 ....................  
                    06302 .................... #ifndef _STDINT 
                    06303 ....................  
                    06304 .................... #define _STDINT 
                    06305 ....................  
                    06306 .................... //////////// exact width 
                    06307 ....................  
                    06308 .................... typedef signed int8 int8_t; 
                    06309 .................... typedef unsigned int8 uint8_t; 
                    06310 .................... typedef signed int16 int16_t; 
                    06311 .................... typedef unsigned int16 uint16_t; 
                    06312 .................... typedef signed int32 int32_t; 
                    06313 .................... typedef unsigned int32 uint32_t; 
                    06314 ....................  
                    06315 .................... #if defined(__PCD__) 
                    06316 .................... //typedef signed int24 int24_t; 
                    06317 .................... //typedef unsigned int24 uint24_t; 
                    06318 .................... typedef signed int64 int64_t; 
                    06319 .................... typedef unsigned int64 uint64_t; 
                    06320 .................... #endif 
                    06321 ....................  
                    06322 .................... #define INT8_MAX  (128) 
                    06323 .................... #define INT8_MIN  (-127) 
                    06324 .................... #define UINT8_MAX (255) 
                    06325 ....................  
                    06326 .................... #define INT16_MAX  (32767) 
                    06327 .................... #define INT16_MIN  (-32768) 
                    06328 .................... #define UINT16_MAX (65535) 
                    06329 ....................  
                    06330 .................... #define INT32_MAX  (2147483647) 
                    06331 .................... #define INT32_MIN  (-2147483648) 
                    06332 .................... #define UINT32_MAX (4294967295) 
                    06333 ....................  
                    06334 .................... #if defined(__PCD__) 
                    06335 .................... //#define INT24_MAX  (8388607) 
                    06336 .................... //#define INT24_MIN  (-8388608) 
                    06337 .................... //#define UINT24_MAX (16777215) 
                    06338 ....................  
                    06339 .................... #define INT64_MAX  (9223372036854775807) 
                    06340 .................... #define INT64_MIN  (-9223372036854775808) 
                    06341 .................... #define UINT64_MAX (18446744073709551615) 
                    06342 .................... #endif 
                    06343 ....................  
                    06344 .................... ///////// minimum width 
                    06345 ....................  
                    06346 .................... typedef signed int8 int_least8_t; 
                    06347 .................... typedef unsigned int8 uint_least8_t; 
                    06348 .................... typedef signed int16 int_least16_t; 
                    06349 .................... typedef unsigned int16 uint_least16_t; 
                    06350 .................... typedef signed int32 int_least32_t; 
                    06351 .................... typedef unsigned int32 uint_least32_t; 
                    06352 ....................  
                    06353 .................... #if defined(__PCD__) 
                    06354 .................... //typedef signed int24 int_least24_t; 
                    06355 .................... //typedef unsigned int24 uint_least24_t; 
                    06356 .................... typedef signed int64 int_least64_t; 
                    06357 .................... typedef unsigned int64 uint_least64_t; 
                    06358 .................... #endif 
                    06359 ....................  
                    06360 .................... #define INT_LEAST8_MAX  (128) 
                    06361 .................... #define INT_LEAST8_MIN  (-127) 
                    06362 .................... #define UINT_LEAST8_MAX (255) 
                    06363 ....................  
                    06364 .................... #define INT_LEAST16_MAX  (32767) 
                    06365 .................... #define INT_LEAST16_MIN  (-32768) 
                    06366 .................... #define UINT_LEAST16_MAX (65535) 
                    06367 ....................  
                    06368 .................... #define INT_LEAST32_MAX  (2147483647) 
                    06369 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    06370 .................... #define UINT_LEAST32_MAX (4294967295) 
                    06371 ....................  
                    06372 .................... #if defined(__PCD__) 
                    06373 .................... //#define INT_LEAST24_MAX  (8388607) 
                    06374 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    06375 .................... //#define UINT_LEAST24_MAX (16777215) 
                    06376 ....................  
                    06377 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    06378 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    06379 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    06380 .................... #endif 
                    06381 ....................  
                    06382 .................... ///////// fastest width 
                    06383 ....................  
                    06384 .................... #if defined(__PCD__) 
                    06385 .................... typedef signed int16 int_fast8_t; 
                    06386 .................... typedef unsigned int16 uint_fast8_t; 
                    06387 .................... #define INT_FAST8_MAX  (32767) 
                    06388 .................... #define INT_FAST8_MIN  (-32768) 
                    06389 .................... #define UINT_FAST8_MAX (65535) 
                    06390 .................... typedef signed int16 int_fast16_t; 
                    06391 .................... typedef unsigned int16 uint_fast16_t; 
                    06392 .................... //typedef signed int24 int_fast24_t; 
                    06393 .................... //typedef unsigned int24 uint_fast24_t; 
                    06394 .................... typedef signed int64 int_fast64_t; 
                    06395 .................... typedef unsigned int64 uint_fast64_t; 
                    06396 .................... #else 
                    06397 .................... typedef signed int8 int_fast8_t; 
                    06398 .................... typedef unsigned int8 uint_fast8_t; 
                    06399 .................... #define INT_FAST8_MAX  (128) 
                    06400 .................... #define INT_FAST8_MIN  (-127) 
                    06401 .................... #define UINT_FAST8_MAX (255) 
                    06402 .................... typedef signed int16 int_fast16_t; 
                    06403 .................... typedef unsigned int16 uint_fast16_t; 
                    06404 .................... #endif 
                    06405 ....................  
                    06406 .................... typedef signed int32 int_fast32_t; 
                    06407 .................... typedef unsigned int32 uint_fast32_t; 
                    06408 ....................  
                    06409 .................... #define INT_FAST16_MAX  (32767) 
                    06410 .................... #define INT_FAST16_MIN  (-32768) 
                    06411 .................... #define UINT_FAST16_MAX (65535) 
                    06412 ....................  
                    06413 .................... #define INT_FAST32_MAX  (2147483647) 
                    06414 .................... #define INT_FAST32_MIN  (-2147483648) 
                    06415 .................... #define UINT_FAST32_MAX (4294967295) 
                    06416 ....................  
                    06417 .................... #if defined(__PCD__) 
                    06418 .................... //#define INT_FAST24_MAX  (8388607) 
                    06419 .................... //#define INT_FAST24_MIN  (-8388608) 
                    06420 .................... //#define UINT_FAST24_MAX (16777215) 
                    06421 ....................  
                    06422 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    06423 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    06424 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    06425 .................... #endif 
                    06426 ....................  
                    06427 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    06428 ....................  
                    06429 .................... /// TODO 
                    06430 ....................  
                    06431 .................... /// intptr_t uintptr_t 
                    06432 ....................  
                    06433 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    06434 ....................  
                    06435 ....................  
                    06436 .................... /////////// greatest width (OPTIONAL) 
                    06437 ....................  
                    06438 .................... /// TODO 
                    06439 ....................  
                    06440 .................... /// intmax_t uintmax_t 
                    06441 ....................  
                    06442 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    06443 ....................  
                    06444 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    06445 ....................  
                    06446 ....................  
                    06447 .................... #endif 
                    06448 ....................  
                    06449 ....................   
                    06450 .................... #include "gpio.h" 
                    06451 .................... /* 
                    06452 ....................  * gpio.h 
                    06453 ....................  * 
                    06454 ....................  *  Created on: Mar 8, 2017 
                    06455 ....................  *      Author: asafe 
                    06456 ....................  */ 
                    06457 ....................  
                    06458 .................... #ifndef INCLUDE_GPIO_H_ 
                    06459 .................... #define INCLUDE_GPIO_H_ 
                    06460 ....................  
                    06461 .................... #include <stdint.h> 
                    06462 .................... /////////////////////////////////////////////////////////////////////////// 
                    06463 .................... ////                                                                   //// 
                    06464 .................... ////                           stdint.h                                //// 
                    06465 .................... ////                                                                   //// 
                    06466 .................... //// Standard integer definitions.                                     //// 
                    06467 .................... ////                                                                   //// 
                    06468 .................... /////////////////////////////////////////////////////////////////////////// 
                    06469 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    06470 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    06471 .................... //// compiler.  This source code may only be distributed to other      //// 
                    06472 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    06473 .................... //// or distribution is permitted without written permission.          //// 
                    06474 .................... //// Derivative programs created using this software in object code    //// 
                    06475 .................... //// form are not restricted in any way.                               //// 
                    06476 .................... /////////////////////////////////////////////////////////////////////////// 
                    06477 ....................  
                    06478 .................... #ifndef _STDINT 
                    06479 ....................  
                    06480 .................... #define _STDINT 
                    06481 ....................  
                    06482 .................... //////////// exact width 
                    06483 ....................  
                    06484 .................... typedef signed int8 int8_t; 
                    06485 .................... typedef unsigned int8 uint8_t; 
                    06486 .................... typedef signed int16 int16_t; 
                    06487 .................... typedef unsigned int16 uint16_t; 
                    06488 .................... typedef signed int32 int32_t; 
                    06489 .................... typedef unsigned int32 uint32_t; 
                    06490 ....................  
                    06491 .................... #if defined(__PCD__) 
                    06492 .................... //typedef signed int24 int24_t; 
                    06493 .................... //typedef unsigned int24 uint24_t; 
                    06494 .................... typedef signed int64 int64_t; 
                    06495 .................... typedef unsigned int64 uint64_t; 
                    06496 .................... #endif 
                    06497 ....................  
                    06498 .................... #define INT8_MAX  (128) 
                    06499 .................... #define INT8_MIN  (-127) 
                    06500 .................... #define UINT8_MAX (255) 
                    06501 ....................  
                    06502 .................... #define INT16_MAX  (32767) 
                    06503 .................... #define INT16_MIN  (-32768) 
                    06504 .................... #define UINT16_MAX (65535) 
                    06505 ....................  
                    06506 .................... #define INT32_MAX  (2147483647) 
                    06507 .................... #define INT32_MIN  (-2147483648) 
                    06508 .................... #define UINT32_MAX (4294967295) 
                    06509 ....................  
                    06510 .................... #if defined(__PCD__) 
                    06511 .................... //#define INT24_MAX  (8388607) 
                    06512 .................... //#define INT24_MIN  (-8388608) 
                    06513 .................... //#define UINT24_MAX (16777215) 
                    06514 ....................  
                    06515 .................... #define INT64_MAX  (9223372036854775807) 
                    06516 .................... #define INT64_MIN  (-9223372036854775808) 
                    06517 .................... #define UINT64_MAX (18446744073709551615) 
                    06518 .................... #endif 
                    06519 ....................  
                    06520 .................... ///////// minimum width 
                    06521 ....................  
                    06522 .................... typedef signed int8 int_least8_t; 
                    06523 .................... typedef unsigned int8 uint_least8_t; 
                    06524 .................... typedef signed int16 int_least16_t; 
                    06525 .................... typedef unsigned int16 uint_least16_t; 
                    06526 .................... typedef signed int32 int_least32_t; 
                    06527 .................... typedef unsigned int32 uint_least32_t; 
                    06528 ....................  
                    06529 .................... #if defined(__PCD__) 
                    06530 .................... //typedef signed int24 int_least24_t; 
                    06531 .................... //typedef unsigned int24 uint_least24_t; 
                    06532 .................... typedef signed int64 int_least64_t; 
                    06533 .................... typedef unsigned int64 uint_least64_t; 
                    06534 .................... #endif 
                    06535 ....................  
                    06536 .................... #define INT_LEAST8_MAX  (128) 
                    06537 .................... #define INT_LEAST8_MIN  (-127) 
                    06538 .................... #define UINT_LEAST8_MAX (255) 
                    06539 ....................  
                    06540 .................... #define INT_LEAST16_MAX  (32767) 
                    06541 .................... #define INT_LEAST16_MIN  (-32768) 
                    06542 .................... #define UINT_LEAST16_MAX (65535) 
                    06543 ....................  
                    06544 .................... #define INT_LEAST32_MAX  (2147483647) 
                    06545 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    06546 .................... #define UINT_LEAST32_MAX (4294967295) 
                    06547 ....................  
                    06548 .................... #if defined(__PCD__) 
                    06549 .................... //#define INT_LEAST24_MAX  (8388607) 
                    06550 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    06551 .................... //#define UINT_LEAST24_MAX (16777215) 
                    06552 ....................  
                    06553 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    06554 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    06555 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    06556 .................... #endif 
                    06557 ....................  
                    06558 .................... ///////// fastest width 
                    06559 ....................  
                    06560 .................... #if defined(__PCD__) 
                    06561 .................... typedef signed int16 int_fast8_t; 
                    06562 .................... typedef unsigned int16 uint_fast8_t; 
                    06563 .................... #define INT_FAST8_MAX  (32767) 
                    06564 .................... #define INT_FAST8_MIN  (-32768) 
                    06565 .................... #define UINT_FAST8_MAX (65535) 
                    06566 .................... typedef signed int16 int_fast16_t; 
                    06567 .................... typedef unsigned int16 uint_fast16_t; 
                    06568 .................... //typedef signed int24 int_fast24_t; 
                    06569 .................... //typedef unsigned int24 uint_fast24_t; 
                    06570 .................... typedef signed int64 int_fast64_t; 
                    06571 .................... typedef unsigned int64 uint_fast64_t; 
                    06572 .................... #else 
                    06573 .................... typedef signed int8 int_fast8_t; 
                    06574 .................... typedef unsigned int8 uint_fast8_t; 
                    06575 .................... #define INT_FAST8_MAX  (128) 
                    06576 .................... #define INT_FAST8_MIN  (-127) 
                    06577 .................... #define UINT_FAST8_MAX (255) 
                    06578 .................... typedef signed int16 int_fast16_t; 
                    06579 .................... typedef unsigned int16 uint_fast16_t; 
                    06580 .................... #endif 
                    06581 ....................  
                    06582 .................... typedef signed int32 int_fast32_t; 
                    06583 .................... typedef unsigned int32 uint_fast32_t; 
                    06584 ....................  
                    06585 .................... #define INT_FAST16_MAX  (32767) 
                    06586 .................... #define INT_FAST16_MIN  (-32768) 
                    06587 .................... #define UINT_FAST16_MAX (65535) 
                    06588 ....................  
                    06589 .................... #define INT_FAST32_MAX  (2147483647) 
                    06590 .................... #define INT_FAST32_MIN  (-2147483648) 
                    06591 .................... #define UINT_FAST32_MAX (4294967295) 
                    06592 ....................  
                    06593 .................... #if defined(__PCD__) 
                    06594 .................... //#define INT_FAST24_MAX  (8388607) 
                    06595 .................... //#define INT_FAST24_MIN  (-8388608) 
                    06596 .................... //#define UINT_FAST24_MAX (16777215) 
                    06597 ....................  
                    06598 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    06599 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    06600 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    06601 .................... #endif 
                    06602 ....................  
                    06603 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    06604 ....................  
                    06605 .................... /// TODO 
                    06606 ....................  
                    06607 .................... /// intptr_t uintptr_t 
                    06608 ....................  
                    06609 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    06610 ....................  
                    06611 ....................  
                    06612 .................... /////////// greatest width (OPTIONAL) 
                    06613 ....................  
                    06614 .................... /// TODO 
                    06615 ....................  
                    06616 .................... /// intmax_t uintmax_t 
                    06617 ....................  
                    06618 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    06619 ....................  
                    06620 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    06621 ....................  
                    06622 ....................  
                    06623 .................... #endif 
                    06624 ....................  
                    06625 .................... #include "gpio.h" 
                    06626 .................... /* 
                    06627 ....................  * gpio.h 
                    06628 ....................  * 
                    06629 ....................  *  Created on: Mar 8, 2017 
                    06630 ....................  *      Author: asafe 
                    06631 ....................  */ 
                    06632 ....................  
                    06633 .................... #ifndef INCLUDE_GPIO_H_ 
                    06634 .................... #define INCLUDE_GPIO_H_ 
                    06635 ....................  
                    06636 .................... #include <stdint.h> 
                    06637 .................... #include "gpio.h" 
                    06638 ....................  
                    06639 .................... enum { 
                    06640 ....................     GPIO_DIR_IN     = 0, 
                    06641 ....................     GPIO_DIR_OUT    = 1, 
                    06642 ....................     GPIO_ANALOG     = 2, 
                    06643 ....................  
                    06644 ....................     GPIO_VALUE_LOW = 0, 
                    06645 ....................     GPIO_VALUE_HIGH = 1, 
                    06646 .................... }; 
                    06647 ....................  
                    06648 .................... typedef struct gpio_st { 
                    06649 ....................     uint32_t pin; 
                    06650 ....................     int dir; 
                    06651 ....................     char *gpio_name; 
                    06652 .................... } st_gpio; 
                    06653 ....................  
                    06654 .................... /* this is the deceleration that a developer will use to access a specific GPIO */ 
                    06655 .................... /* this list should be identical in order to the <Bold> st_gpio gpios [] </Bold> list in gpio.c */ 
                    06656 ....................  
                    06657 .................... enum { 
                    06658 ....................     GPIO_DAC_CLK        = 0, 
                    06659 ....................     GPIO_DAC_CS         = 1, 
                    06660 ....................     GPIO_DAC_DATA_OUT   = 2, 
                    06661 ....................     GPIO_DAC_LDAC       = 3, 
                    06662 ....................  
                    06663 ....................     GPIO_LED            = 4, 
                    06664 ....................  
                    06665 ....................     GPIO_PA1_ISENSE     = 5, 
                    06666 ....................     GPIO_PA2_ISENSE     = 6, 
                    06667 ....................     GPIO_FFWR           = 7, 
                    06668 ....................     GPIO_RREV           = 8, 
                    06669 ....................     GPIO_RF_INDET       = 9, 
                    06670 ....................     GPIO_TMP            = 10, 
                    06671 ....................     GPIO_PREAMP_DET     = 11, 
                    06672 ....................  
                    06673 ....................     GPIO_ANT_SEL        = 12, 
                    06674 ....................     GPIO_ANT_SELN       = 13, 
                    06675 ....................     GPIO_TX_RX_SEL      = 14, 
                    06676 ....................     GPIO_TX_RX_ENV      = 15, 
                    06677 ....................     GPIO_TX_RX_ENVM     = 16, 
                    06678 ....................  
                    06679 ....................     GPIO_5V_EN          = 17, 
                    06680 ....................  
                    06681 .................... }; 
                    06682 ....................  
                    06683 .................... /* Inputs */ 
                    06684 .................... enum { 
                    06685 ....................  
                    06686 .................... }; 
                    06687 ....................  
                    06688 ....................  
                    06689 .................... void gpio_init(); 
                    06690 .................... int gpio_toggle(int gpio); 
                    06691 .................... #INLINE 
                    06692 .................... void gpio_set(int gpio); 
                    06693 .................... void gpio_clear(int gpio); 
                    06694 .................... #INLINE 
                    06695 .................... void gpio_set_value(int gpio, int value); 
                    06696 .................... int gpio_get(int gpio); 
                    06697 .................... #INLINE 
                    06698 .................... uint32_t gpio_get_analog(int gpio); 
                    06699 ....................  
                    06700 .................... #endif /* INCLUDE_GPIO_H_ */ 
                    06701 ....................  
                    06702 ....................  
                    06703 .................... enum { 
                    06704 ....................     GPIO_DIR_IN     = 0, 
                    06705 ....................     GPIO_DIR_OUT    = 1, 
                    06706 ....................     GPIO_ANALOG     = 2, 
                    06707 ....................  
                    06708 ....................     GPIO_VALUE_LOW = 0, 
                    06709 ....................     GPIO_VALUE_HIGH = 1, 
                    06710 .................... }; 
                    06711 ....................  
                    06712 .................... typedef struct gpio_st { 
                    06713 ....................     uint32_t pin; 
                    06714 ....................     int dir; 
                    06715 ....................     char *gpio_name; 
                    06716 .................... } st_gpio; 
                    06717 ....................  
                    06718 .................... /* this is the deceleration that a developer will use to access a specific GPIO */ 
                    06719 .................... /* this list should be identical in order to the <Bold> st_gpio gpios [] </Bold> list in gpio.c */ 
                    06720 ....................  
                    06721 .................... enum { 
                    06722 ....................     GPIO_DAC_CLK        = 0, 
                    06723 ....................     GPIO_DAC_CS         = 1, 
                    06724 ....................     GPIO_DAC_DATA_OUT   = 2, 
                    06725 ....................     GPIO_DAC_LDAC       = 3, 
                    06726 ....................  
                    06727 ....................     GPIO_LED            = 4, 
                    06728 ....................  
                    06729 ....................     GPIO_PA1_ISENSE     = 5, 
                    06730 ....................     GPIO_PA2_ISENSE     = 6, 
                    06731 ....................     GPIO_FFWR           = 7, 
                    06732 ....................     GPIO_RREV           = 8, 
                    06733 ....................     GPIO_RF_INDET       = 9, 
                    06734 ....................     GPIO_TMP            = 10, 
                    06735 ....................     GPIO_PREAMP_DET     = 11, 
                    06736 ....................  
                    06737 ....................     GPIO_ANT_SEL        = 12, 
                    06738 ....................     GPIO_ANT_SELN       = 13, 
                    06739 ....................     GPIO_TX_RX_SEL      = 14, 
                    06740 ....................     GPIO_TX_RX_ENV      = 15, 
                    06741 ....................     GPIO_TX_RX_ENVM     = 16, 
                    06742 ....................  
                    06743 ....................     GPIO_5V_EN          = 17, 
                    06744 ....................  
                    06745 .................... }; 
                    06746 ....................  
                    06747 .................... /* Inputs */ 
                    06748 .................... enum { 
                    06749 ....................  
                    06750 .................... }; 
                    06751 ....................  
                    06752 ....................  
                    06753 .................... void gpio_init(); 
                    06754 .................... int gpio_toggle(int gpio); 
                    06755 .................... #INLINE 
                    06756 .................... void gpio_set(int gpio); 
                    06757 .................... void gpio_clear(int gpio); 
                    06758 .................... #INLINE 
                    06759 .................... void gpio_set_value(int gpio, int value); 
                    06760 .................... int gpio_get(int gpio); 
                    06761 .................... #INLINE 
                    06762 .................... uint32_t gpio_get_analog(int gpio); 
                    06763 ....................  
                    06764 .................... #endif /* INCLUDE_GPIO_H_ */ 
                    06765 ....................  
                    06766 .................... #include "comm.h" 
                    06767 .................... /* 
                    06768 ....................  * comm.h 
                    06769 ....................  * 
                    06770 ....................  *  Created on: Mar 23, 2017 
                    06771 ....................  *      Author: asaf 
                    06772 ....................  */ 
                    06773 ....................  
                    06774 .................... #ifndef COMM_H_ 
                    06775 .................... #define COMM_H_ 
                    06776 ....................  
                    06777 .................... #include <stdint.h> 
                    06778 .................... /////////////////////////////////////////////////////////////////////////// 
                    06779 .................... ////                                                                   //// 
                    06780 .................... ////                           stdint.h                                //// 
                    06781 .................... ////                                                                   //// 
                    06782 .................... //// Standard integer definitions.                                     //// 
                    06783 .................... ////                                                                   //// 
                    06784 .................... /////////////////////////////////////////////////////////////////////////// 
                    06785 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    06786 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    06787 .................... //// compiler.  This source code may only be distributed to other      //// 
                    06788 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    06789 .................... //// or distribution is permitted without written permission.          //// 
                    06790 .................... //// Derivative programs created using this software in object code    //// 
                    06791 .................... //// form are not restricted in any way.                               //// 
                    06792 .................... /////////////////////////////////////////////////////////////////////////// 
                    06793 ....................  
                    06794 .................... #ifndef _STDINT 
                    06795 ....................  
                    06796 .................... #define _STDINT 
                    06797 ....................  
                    06798 .................... //////////// exact width 
                    06799 ....................  
                    06800 .................... typedef signed int8 int8_t; 
                    06801 .................... typedef unsigned int8 uint8_t; 
                    06802 .................... typedef signed int16 int16_t; 
                    06803 .................... typedef unsigned int16 uint16_t; 
                    06804 .................... typedef signed int32 int32_t; 
                    06805 .................... typedef unsigned int32 uint32_t; 
                    06806 ....................  
                    06807 .................... #if defined(__PCD__) 
                    06808 .................... //typedef signed int24 int24_t; 
                    06809 .................... //typedef unsigned int24 uint24_t; 
                    06810 .................... typedef signed int64 int64_t; 
                    06811 .................... typedef unsigned int64 uint64_t; 
                    06812 .................... #endif 
                    06813 ....................  
                    06814 .................... #define INT8_MAX  (128) 
                    06815 .................... #define INT8_MIN  (-127) 
                    06816 .................... #define UINT8_MAX (255) 
                    06817 ....................  
                    06818 .................... #define INT16_MAX  (32767) 
                    06819 .................... #define INT16_MIN  (-32768) 
                    06820 .................... #define UINT16_MAX (65535) 
                    06821 ....................  
                    06822 .................... #define INT32_MAX  (2147483647) 
                    06823 .................... #define INT32_MIN  (-2147483648) 
                    06824 .................... #define UINT32_MAX (4294967295) 
                    06825 ....................  
                    06826 .................... #if defined(__PCD__) 
                    06827 .................... //#define INT24_MAX  (8388607) 
                    06828 .................... //#define INT24_MIN  (-8388608) 
                    06829 .................... //#define UINT24_MAX (16777215) 
                    06830 ....................  
                    06831 .................... #define INT64_MAX  (9223372036854775807) 
                    06832 .................... #define INT64_MIN  (-9223372036854775808) 
                    06833 .................... #define UINT64_MAX (18446744073709551615) 
                    06834 .................... #endif 
                    06835 ....................  
                    06836 .................... ///////// minimum width 
                    06837 ....................  
                    06838 .................... typedef signed int8 int_least8_t; 
                    06839 .................... typedef unsigned int8 uint_least8_t; 
                    06840 .................... typedef signed int16 int_least16_t; 
                    06841 .................... typedef unsigned int16 uint_least16_t; 
                    06842 .................... typedef signed int32 int_least32_t; 
                    06843 .................... typedef unsigned int32 uint_least32_t; 
                    06844 ....................  
                    06845 .................... #if defined(__PCD__) 
                    06846 .................... //typedef signed int24 int_least24_t; 
                    06847 .................... //typedef unsigned int24 uint_least24_t; 
                    06848 .................... typedef signed int64 int_least64_t; 
                    06849 .................... typedef unsigned int64 uint_least64_t; 
                    06850 .................... #endif 
                    06851 ....................  
                    06852 .................... #define INT_LEAST8_MAX  (128) 
                    06853 .................... #define INT_LEAST8_MIN  (-127) 
                    06854 .................... #define UINT_LEAST8_MAX (255) 
                    06855 ....................  
                    06856 .................... #define INT_LEAST16_MAX  (32767) 
                    06857 .................... #define INT_LEAST16_MIN  (-32768) 
                    06858 .................... #define UINT_LEAST16_MAX (65535) 
                    06859 ....................  
                    06860 .................... #define INT_LEAST32_MAX  (2147483647) 
                    06861 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    06862 .................... #define UINT_LEAST32_MAX (4294967295) 
                    06863 ....................  
                    06864 .................... #if defined(__PCD__) 
                    06865 .................... //#define INT_LEAST24_MAX  (8388607) 
                    06866 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    06867 .................... //#define UINT_LEAST24_MAX (16777215) 
                    06868 ....................  
                    06869 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    06870 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    06871 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    06872 .................... #endif 
                    06873 ....................  
                    06874 .................... ///////// fastest width 
                    06875 ....................  
                    06876 .................... #if defined(__PCD__) 
                    06877 .................... typedef signed int16 int_fast8_t; 
                    06878 .................... typedef unsigned int16 uint_fast8_t; 
                    06879 .................... #define INT_FAST8_MAX  (32767) 
                    06880 .................... #define INT_FAST8_MIN  (-32768) 
                    06881 .................... #define UINT_FAST8_MAX (65535) 
                    06882 .................... typedef signed int16 int_fast16_t; 
                    06883 .................... typedef unsigned int16 uint_fast16_t; 
                    06884 .................... //typedef signed int24 int_fast24_t; 
                    06885 .................... //typedef unsigned int24 uint_fast24_t; 
                    06886 .................... typedef signed int64 int_fast64_t; 
                    06887 .................... typedef unsigned int64 uint_fast64_t; 
                    06888 .................... #else 
                    06889 .................... typedef signed int8 int_fast8_t; 
                    06890 .................... typedef unsigned int8 uint_fast8_t; 
                    06891 .................... #define INT_FAST8_MAX  (128) 
                    06892 .................... #define INT_FAST8_MIN  (-127) 
                    06893 .................... #define UINT_FAST8_MAX (255) 
                    06894 .................... typedef signed int16 int_fast16_t; 
                    06895 .................... typedef unsigned int16 uint_fast16_t; 
                    06896 .................... #endif 
                    06897 ....................  
                    06898 .................... typedef signed int32 int_fast32_t; 
                    06899 .................... typedef unsigned int32 uint_fast32_t; 
                    06900 ....................  
                    06901 .................... #define INT_FAST16_MAX  (32767) 
                    06902 .................... #define INT_FAST16_MIN  (-32768) 
                    06903 .................... #define UINT_FAST16_MAX (65535) 
                    06904 ....................  
                    06905 .................... #define INT_FAST32_MAX  (2147483647) 
                    06906 .................... #define INT_FAST32_MIN  (-2147483648) 
                    06907 .................... #define UINT_FAST32_MAX (4294967295) 
                    06908 ....................  
                    06909 .................... #if defined(__PCD__) 
                    06910 .................... //#define INT_FAST24_MAX  (8388607) 
                    06911 .................... //#define INT_FAST24_MIN  (-8388608) 
                    06912 .................... //#define UINT_FAST24_MAX (16777215) 
                    06913 ....................  
                    06914 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    06915 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    06916 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    06917 .................... #endif 
                    06918 ....................  
                    06919 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    06920 ....................  
                    06921 .................... /// TODO 
                    06922 ....................  
                    06923 .................... /// intptr_t uintptr_t 
                    06924 ....................  
                    06925 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    06926 ....................  
                    06927 ....................  
                    06928 .................... /////////// greatest width (OPTIONAL) 
                    06929 ....................  
                    06930 .................... /// TODO 
                    06931 ....................  
                    06932 .................... /// intmax_t uintmax_t 
                    06933 ....................  
                    06934 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    06935 ....................  
                    06936 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    06937 ....................  
                    06938 ....................  
                    06939 .................... #endif 
                    06940 ....................  
                    06941 .................... #include <stdbool.h> 
                    06942 .................... /////////////////////////////////////////////////////////////////////////// 
                    06943 .................... ////                                                                   //// 
                    06944 .................... ////                          stdbool.h                                //// 
                    06945 .................... ////                                                                   //// 
                    06946 .................... //// Standard boolean definitions                                      //// 
                    06947 .................... ////                                                                   //// 
                    06948 .................... /////////////////////////////////////////////////////////////////////////// 
                    06949 .................... ////        (C) Copyright 1996,2012 Custom Computer Services           //// 
                    06950 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    06951 .................... //// compiler.  This source code may only be distributed to other      //// 
                    06952 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    06953 .................... //// or distribution is permitted without written permission.          //// 
                    06954 .................... //// Derivative programs created using this software in object code    //// 
                    06955 .................... //// form are not restricted in any way.                               //// 
                    06956 .................... /////////////////////////////////////////////////////////////////////////// 
                    06957 ....................  
                    06958 .................... #ifndef __STDBOOL_H__ 
                    06959 .................... #define __STDBOOL_H__ 
                    06960 ....................  
                    06961 .................... //remove TRUE and FALSE added by CCS's device .h file 
                    06962 .................... #if defined(TRUE) 
                    06963 .................... #undef TRUE 
                    06964 .................... #endif 
                    06965 .................... #if defined(FALSE) 
                    06966 .................... #undef FALSE 
                    06967 .................... #endif 
                    06968 ....................  
                    06969 .................... typedef int1   bool; 
                    06970 .................... #define true   1 
                    06971 .................... #define false  0 
                    06972 .................... #define __bool_true_false_are_defined  1 
                    06973 ....................  
                    06974 .................... #endif 
                    06975 ....................  
                    06976 ....................  
                    06977 .................... #define MSG_MAX_MESSAGE_LEN 80 
                    06978 ....................  
                    06979 .................... #ifndef MIN 
                    06980 .................... #define MIN(x,y) ((x)<(y)?(x):(y)) 
                    06981 .................... #endif 
                    06982 .................... #ifndef MAX 
                    06983 .................... #define	MAX(a,b) (((a)>(b))?(a):(b)) 
                    06984 .................... #endif 
                    06985 ....................  
                    06986 .................... #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0])) 
                    06987 .................... #define MAX_INDEX_IN_ARRAY(x) (ARRAY_SIZE(x)-1) 
                    06988 ....................  
                    06989 .................... void comm_init(); 
                    06990 .................... bool comm_receive_message(void* buffer, uint16_t* size); 
                    06991 .................... void comm_send_message(void* buffer, uint16_t size); 
                    06992 ....................  
                    06993 ....................  
                    06994 ....................  
                    06995 .................... #endif /* COMM_H_ */ 
                    06996 ....................  
                    06997 ....................  
                    06998 .................... /* note, analog inputs pin # is their anX number */ 
                    06999 .................... static const st_gpio gpios []  = { 
                    07000 ....................       //{Pin #,     Direction,    Name} 
                    07001 ....................       {PIN_A3, GPIO_DIR_OUT, "DAC Clk"}, 
                    07002 ....................       {PIN_A2, GPIO_DIR_OUT, "DAC SYNC"}, 
                    07003 ....................       {PIN_A4, GPIO_DIR_OUT, "DAC Data"},  
                    07004 ....................       {PIN_A1, GPIO_DIR_OUT, "DAC Latch"},  
                    07005 ....................        
                    07006 ....................       {PIN_C0, GPIO_DIR_OUT, "Led 1"},  
                    07007 ....................       {8, GPIO_ANALOG, "PA1_ISENSE"}, 
                    07008 ....................       {9, GPIO_ANALOG, "PA2_ISENSE"}, 
                    07009 ....................       {5, GPIO_ANALOG, "FFWR"}, 
                    07010 ....................       {4, GPIO_ANALOG, "RREV"}, 
                    07011 ....................       {7, GPIO_ANALOG, "RF_INDET"}, 
                    07012 ....................       {6, GPIO_ANALOG, "TMP"}, 
                    07013 ....................       {17, GPIO_ANALOG, "PREAMP_DET"}, 
                    07014 ....................  
                    07015 ....................       {PIN_D7, GPIO_DIR_OUT, "ANT_SEL"}, 
                    07016 ....................       {PIN_D6, GPIO_DIR_OUT, "ANT_SELN"}, 
                    07017 ....................       {PIN_B4, GPIO_DIR_OUT, "TX_RX_SEL"}, 
                    07018 ....................       {PIN_B5, GPIO_DIR_OUT, "TX_RX_ENV"}, 
                    07019 ....................       {PIN_D0, GPIO_DIR_OUT, "TX_RX_ENVM"}, 
                    07020 ....................       {PIN_D5, GPIO_DIR_OUT, "5V_EN"}, 
                    07021 .................... }; 
                    07022 ....................  
                    07023 .................... void gpio_init() { 
                    07024 ....................   set_tris_a(0b00100000); 
376A 0E20           07025 MOVLW  20
376C 6E92           07026 MOVWF  F92
                    07027 ....................   set_tris_b(0b00001111); 
376E 0E0F           07028 MOVLW  0F
3770 6E93           07029 MOVWF  F93
                    07030 ....................   set_tris_c(0b10100000); 
3772 0EA0           07031 MOVLW  A0
3774 6E94           07032 MOVWF  F94
                    07033 ....................   set_tris_d(0b00000000); 
3776 0E00           07034 MOVLW  00
3778 6E95           07035 MOVWF  F95
                    07036 ....................   set_tris_e(0b00000111); 
377A 8096           07037 BSF    F96.0
377C 8296           07038 BSF    F96.1
377E 8496           07039 BSF    F96.2
3780 9696           07040 BCF    F96.3
                    07041 ....................  
                    07042 ....................   output_a(0); 
3782 6A89           07043 CLRF   F89
                    07044 ....................   output_b(0); 
3784 6A8A           07045 CLRF   F8A
                    07046 ....................   output_d(0); 
3786 6A8C           07047 CLRF   F8C
                    07048 ....................   output_e(0); 
3788 6A8D           07049 CLRF   F8D
                    07050 ....................  
                    07051 ....................   setup_adc_ports(sAN8 | sAN9 | sAN5 | sAN4 | sAN7 | sAN6 | sAN17);//enable analog pins 
378A 50C1           07052 MOVF   FC1,W
378C 0BF0           07053 ANDLW  F0
378E 6EC1           07054 MOVWF  FC1
3790 0E20           07055 MOVLW  20
3792 010F           07056 MOVLB  F
3794 6F38           07057 MOVWF  x38
3796 0E07           07058 MOVLW  07
3798 6F3C           07059 MOVWF  x3C
379A 0E0C           07060 MOVLW  0C
379C 6F39           07061 MOVWF  x39
379E 0E20           07062 MOVLW  20
37A0 6F3A           07063 MOVWF  x3A
37A2 0E00           07064 MOVLW  00
37A4 6F3B           07065 MOVWF  x3B
                    07066 ....................   setup_adc(ADC_CLOCK_DIV_16|ADC_TAD_MUL_8); 
37A6 50C0           07067 MOVF   FC0,W
37A8 0BC0           07068 ANDLW  C0
37AA 0925           07069 IORLW  25
37AC 6EC0           07070 MOVWF  FC0
37AE 8EC0           07071 BSF    FC0.7
37B0 80C2           07072 BSF    FC2.0
                    07073 .................... } 
37B2 0100           07074 MOVLB  0
37B4 EFC3 F016      07075 GOTO   2D86 (RETURN)
                    07076 ....................  
                    07077 .................... int gpio_toggle(int gpio) { 
                    07078 ....................     /* not implemented */ 
                    07079 ....................     return 0; 
                    07080 .................... } 
                    07081 ....................  
                    07082 .................... #INLINE 
                    07083 .................... void gpio_set(int gpio) { 
                    07084 ....................     output_high(gpios[gpio].pin); 
231A 5169           07085 MOVF   x69,W
231C 0D07           07086 MULLW  07
231E 50F3           07087 MOVF   FF3,W
2320 6B6B           07088 CLRF   x6B
2322 6F6A           07089 MOVWF  x6A
2324 C46B F003      07090 MOVFF  46B,03
2328 516A           07091 MOVF   x6A,W
232A 0100           07092 MOVLB  0
232C DF54           07093 RCALL  21D6
232E 6E00           07094 MOVWF  00
2330 0009           07095 TBLRD*+
2332 CFF5 F001      07096 MOVFF  FF5,01
2336 0009           07097 TBLRD*+
2338 CFF5 F002      07098 MOVFF  FF5,02
233C 0009           07099 TBLRD*+
233E CFF5 F003      07100 MOVFF  FF5,03
2342 C003 F46F      07101 MOVFF  03,46F
2346 C002 F46E      07102 MOVFF  02,46E
234A C001 F46D      07103 MOVFF  01,46D
234E CFE8 F46C      07104 MOVFF  FE8,46C
2352 CFE8 F470      07105 MOVFF  FE8,470
2356 0E01           07106 MOVLW  01
2358 0104           07107 MOVLB  4
235A 6F71           07108 MOVWF  x71
235C 0E0F           07109 MOVLW  0F
235E 6F73           07110 MOVWF  x73
2360 0E89           07111 MOVLW  89
2362 6F72           07112 MOVWF  x72
2364 0100           07113 MOVLB  0
2366 DF87           07114 RCALL  2276
2368 0000           07115 NOP   
238A 5169           07116 MOVF   x69,W
238C 0D07           07117 MULLW  07
238E 50F3           07118 MOVF   FF3,W
2390 6B6B           07119 CLRF   x6B
2392 6F6A           07120 MOVWF  x6A
2394 C46B F003      07121 MOVFF  46B,03
2398 516A           07122 MOVF   x6A,W
239A 0100           07123 MOVLB  0
239C DF1C           07124 RCALL  21D6
239E 6E00           07125 MOVWF  00
23A0 0009           07126 TBLRD*+
23A2 CFF5 F001      07127 MOVFF  FF5,01
23A6 0009           07128 TBLRD*+
23A8 CFF5 F002      07129 MOVFF  FF5,02
23AC 0009           07130 TBLRD*+
23AE CFF5 F003      07131 MOVFF  FF5,03
23B2 C003 F46F      07132 MOVFF  03,46F
23B6 C002 F46E      07133 MOVFF  02,46E
23BA C001 F46D      07134 MOVFF  01,46D
23BE CFE8 F46C      07135 MOVFF  FE8,46C
23C2 CFE8 F470      07136 MOVFF  FE8,470
23C6 0E01           07137 MOVLW  01
23C8 0104           07138 MOVLB  4
23CA 6F71           07139 MOVWF  x71
23CC 0E0F           07140 MOVLW  0F
23CE 6F73           07141 MOVWF  x73
23D0 0E89           07142 MOVLW  89
23D2 6F72           07143 MOVWF  x72
23D4 0100           07144 MOVLB  0
23D6 DF4F           07145 RCALL  2276
23D8 0000           07146 NOP   
2406 5169           07147 MOVF   x69,W
2408 0D07           07148 MULLW  07
240A 50F3           07149 MOVF   FF3,W
240C 6B6B           07150 CLRF   x6B
240E 6F6A           07151 MOVWF  x6A
2410 C46B F003      07152 MOVFF  46B,03
2414 516A           07153 MOVF   x6A,W
2416 0100           07154 MOVLB  0
2418 DEDE           07155 RCALL  21D6
241A 6E00           07156 MOVWF  00
241C 0009           07157 TBLRD*+
241E CFF5 F001      07158 MOVFF  FF5,01
2422 0009           07159 TBLRD*+
2424 CFF5 F002      07160 MOVFF  FF5,02
2428 0009           07161 TBLRD*+
242A CFF5 F003      07162 MOVFF  FF5,03
242E C003 F46F      07163 MOVFF  03,46F
2432 C002 F46E      07164 MOVFF  02,46E
2436 C001 F46D      07165 MOVFF  01,46D
243A CFE8 F46C      07166 MOVFF  FE8,46C
243E CFE8 F470      07167 MOVFF  FE8,470
2442 0E01           07168 MOVLW  01
2444 0104           07169 MOVLB  4
2446 6F71           07170 MOVWF  x71
2448 0E0F           07171 MOVLW  0F
244A 6F73           07172 MOVWF  x73
244C 0E89           07173 MOVLW  89
244E 6F72           07174 MOVWF  x72
2450 0100           07175 MOVLB  0
2452 DF11           07176 RCALL  2276
2454 0000           07177 NOP   
2D94 5169           07178 MOVF   x69,W
2D96 0D07           07179 MULLW  07
2D98 50F3           07180 MOVF   FF3,W
2D9A 6B6B           07181 CLRF   x6B
2D9C 6F6A           07182 MOVWF  x6A
2D9E C46B F003      07183 MOVFF  46B,03
2DA2 516A           07184 MOVF   x6A,W
2DA4 0100           07185 MOVLB  0
2DA6 ECEB F010      07186 CALL   21D6
2DAA 6E00           07187 MOVWF  00
2DAC 0009           07188 TBLRD*+
2DAE CFF5 F001      07189 MOVFF  FF5,01
2DB2 0009           07190 TBLRD*+
2DB4 CFF5 F002      07191 MOVFF  FF5,02
2DB8 0009           07192 TBLRD*+
2DBA CFF5 F003      07193 MOVFF  FF5,03
2DBE C003 F46F      07194 MOVFF  03,46F
2DC2 C002 F46E      07195 MOVFF  02,46E
2DC6 C001 F46D      07196 MOVFF  01,46D
2DCA CFE8 F46C      07197 MOVFF  FE8,46C
2DCE CFE8 F470      07198 MOVFF  FE8,470
2DD2 0E01           07199 MOVLW  01
2DD4 0104           07200 MOVLB  4
2DD6 6F71           07201 MOVWF  x71
2DD8 0E0F           07202 MOVLW  0F
2DDA 6F73           07203 MOVWF  x73
2DDC 0E89           07204 MOVLW  89
2DDE 6F72           07205 MOVWF  x72
2DE0 0100           07206 MOVLB  0
2DE2 EC3B F011      07207 CALL   2276
2DE6 0000           07208 NOP   
2DEE 5169           07209 MOVF   x69,W
2DF0 0D07           07210 MULLW  07
2DF2 50F3           07211 MOVF   FF3,W
2DF4 6B6B           07212 CLRF   x6B
2DF6 6F6A           07213 MOVWF  x6A
2DF8 C46B F003      07214 MOVFF  46B,03
2DFC 516A           07215 MOVF   x6A,W
2DFE 0100           07216 MOVLB  0
2E00 ECEB F010      07217 CALL   21D6
2E04 6E00           07218 MOVWF  00
2E06 0009           07219 TBLRD*+
2E08 CFF5 F001      07220 MOVFF  FF5,01
2E0C 0009           07221 TBLRD*+
2E0E CFF5 F002      07222 MOVFF  FF5,02
2E12 0009           07223 TBLRD*+
2E14 CFF5 F003      07224 MOVFF  FF5,03
2E18 C003 F46F      07225 MOVFF  03,46F
2E1C C002 F46E      07226 MOVFF  02,46E
2E20 C001 F46D      07227 MOVFF  01,46D
2E24 CFE8 F46C      07228 MOVFF  FE8,46C
2E28 CFE8 F470      07229 MOVFF  FE8,470
2E2C 0E01           07230 MOVLW  01
2E2E 0104           07231 MOVLB  4
2E30 6F71           07232 MOVWF  x71
2E32 0E0F           07233 MOVLW  0F
2E34 6F73           07234 MOVWF  x73
2E36 0E89           07235 MOVLW  89
2E38 6F72           07236 MOVWF  x72
2E3A 0100           07237 MOVLB  0
2E3C EC3B F011      07238 CALL   2276
2E40 0000           07239 NOP   
2FDA 5169           07240 MOVF   x69,W
2FDC 0D07           07241 MULLW  07
2FDE 50F3           07242 MOVF   FF3,W
2FE0 6B6B           07243 CLRF   x6B
2FE2 6F6A           07244 MOVWF  x6A
2FE4 C46B F003      07245 MOVFF  46B,03
2FE8 516A           07246 MOVF   x6A,W
2FEA 0100           07247 MOVLB  0
2FEC ECEB F010      07248 CALL   21D6
2FF0 6E00           07249 MOVWF  00
2FF2 0009           07250 TBLRD*+
2FF4 CFF5 F001      07251 MOVFF  FF5,01
2FF8 0009           07252 TBLRD*+
2FFA CFF5 F002      07253 MOVFF  FF5,02
2FFE 0009           07254 TBLRD*+
3000 CFF5 F003      07255 MOVFF  FF5,03
3004 C003 F46F      07256 MOVFF  03,46F
3008 C002 F46E      07257 MOVFF  02,46E
300C C001 F46D      07258 MOVFF  01,46D
3010 CFE8 F46C      07259 MOVFF  FE8,46C
3014 CFE8 F470      07260 MOVFF  FE8,470
3018 0E01           07261 MOVLW  01
301A 0104           07262 MOVLB  4
301C 6F71           07263 MOVWF  x71
301E 0E0F           07264 MOVLW  0F
3020 6F73           07265 MOVWF  x73
3022 0E89           07266 MOVLW  89
3024 6F72           07267 MOVWF  x72
3026 0100           07268 MOVLB  0
3028 EC3B F011      07269 CALL   2276
302C 0000           07270 NOP   
305C 5169           07271 MOVF   x69,W
305E 0D07           07272 MULLW  07
3060 50F3           07273 MOVF   FF3,W
3062 6B6B           07274 CLRF   x6B
3064 6F6A           07275 MOVWF  x6A
3066 C46B F003      07276 MOVFF  46B,03
306A 516A           07277 MOVF   x6A,W
306C 0100           07278 MOVLB  0
306E ECEB F010      07279 CALL   21D6
3072 6E00           07280 MOVWF  00
3074 0009           07281 TBLRD*+
3076 CFF5 F001      07282 MOVFF  FF5,01
307A 0009           07283 TBLRD*+
307C CFF5 F002      07284 MOVFF  FF5,02
3080 0009           07285 TBLRD*+
3082 CFF5 F003      07286 MOVFF  FF5,03
3086 C003 F46F      07287 MOVFF  03,46F
308A C002 F46E      07288 MOVFF  02,46E
308E C001 F46D      07289 MOVFF  01,46D
3092 CFE8 F46C      07290 MOVFF  FE8,46C
3096 CFE8 F470      07291 MOVFF  FE8,470
309A 0E01           07292 MOVLW  01
309C 0104           07293 MOVLB  4
309E 6F71           07294 MOVWF  x71
30A0 0E0F           07295 MOVLW  0F
30A2 6F73           07296 MOVWF  x73
30A4 0E89           07297 MOVLW  89
30A6 6F72           07298 MOVWF  x72
30A8 0100           07299 MOVLB  0
30AA EC3B F011      07300 CALL   2276
30AE 0000           07301 NOP   
3114 5169           07302 MOVF   x69,W
3116 0D07           07303 MULLW  07
3118 50F3           07304 MOVF   FF3,W
311A 6B6B           07305 CLRF   x6B
311C 6F6A           07306 MOVWF  x6A
311E C46B F003      07307 MOVFF  46B,03
3122 516A           07308 MOVF   x6A,W
3124 0100           07309 MOVLB  0
3126 ECEB F010      07310 CALL   21D6
312A 6E00           07311 MOVWF  00
312C 0009           07312 TBLRD*+
312E CFF5 F001      07313 MOVFF  FF5,01
3132 0009           07314 TBLRD*+
3134 CFF5 F002      07315 MOVFF  FF5,02
3138 0009           07316 TBLRD*+
313A CFF5 F003      07317 MOVFF  FF5,03
313E C003 F46F      07318 MOVFF  03,46F
3142 C002 F46E      07319 MOVFF  02,46E
3146 C001 F46D      07320 MOVFF  01,46D
314A CFE8 F46C      07321 MOVFF  FE8,46C
314E CFE8 F470      07322 MOVFF  FE8,470
3152 0E01           07323 MOVLW  01
3154 0104           07324 MOVLB  4
3156 6F71           07325 MOVWF  x71
3158 0E0F           07326 MOVLW  0F
315A 6F73           07327 MOVWF  x73
315C 0E89           07328 MOVLW  89
315E 6F72           07329 MOVWF  x72
3160 0100           07330 MOVLB  0
3162 EC3B F011      07331 CALL   2276
3166 0000           07332 NOP   
3858 5169           07333 MOVF   x69,W
385A 0D07           07334 MULLW  07
385C 50F3           07335 MOVF   FF3,W
385E 6B6B           07336 CLRF   x6B
3860 6F6A           07337 MOVWF  x6A
3862 C46B F003      07338 MOVFF  46B,03
3866 516A           07339 MOVF   x6A,W
3868 0100           07340 MOVLB  0
386A ECEB F010      07341 CALL   21D6
386E 6E00           07342 MOVWF  00
3870 0009           07343 TBLRD*+
3872 CFF5 F001      07344 MOVFF  FF5,01
3876 0009           07345 TBLRD*+
3878 CFF5 F002      07346 MOVFF  FF5,02
387C 0009           07347 TBLRD*+
387E CFF5 F003      07348 MOVFF  FF5,03
3882 C003 F46F      07349 MOVFF  03,46F
3886 C002 F46E      07350 MOVFF  02,46E
388A C001 F46D      07351 MOVFF  01,46D
388E CFE8 F46C      07352 MOVFF  FE8,46C
3892 CFE8 F470      07353 MOVFF  FE8,470
3896 0E01           07354 MOVLW  01
3898 0104           07355 MOVLB  4
389A 6F71           07356 MOVWF  x71
389C 0E0F           07357 MOVLW  0F
389E 6F73           07358 MOVWF  x73
38A0 0E89           07359 MOVLW  89
38A2 6F72           07360 MOVWF  x72
38A4 0100           07361 MOVLB  0
38A6 EC3B F011      07362 CALL   2276
38AA 0000           07363 NOP   
38DA 5169           07364 MOVF   x69,W
38DC 0D07           07365 MULLW  07
38DE 50F3           07366 MOVF   FF3,W
38E0 6B6B           07367 CLRF   x6B
38E2 6F6A           07368 MOVWF  x6A
38E4 C46B F003      07369 MOVFF  46B,03
38E8 516A           07370 MOVF   x6A,W
38EA 0100           07371 MOVLB  0
38EC ECEB F010      07372 CALL   21D6
38F0 6E00           07373 MOVWF  00
38F2 0009           07374 TBLRD*+
38F4 CFF5 F001      07375 MOVFF  FF5,01
38F8 0009           07376 TBLRD*+
38FA CFF5 F002      07377 MOVFF  FF5,02
38FE 0009           07378 TBLRD*+
3900 CFF5 F003      07379 MOVFF  FF5,03
3904 C003 F46F      07380 MOVFF  03,46F
3908 C002 F46E      07381 MOVFF  02,46E
390C C001 F46D      07382 MOVFF  01,46D
3910 CFE8 F46C      07383 MOVFF  FE8,46C
3914 CFE8 F470      07384 MOVFF  FE8,470
3918 0E01           07385 MOVLW  01
391A 0104           07386 MOVLB  4
391C 6F71           07387 MOVWF  x71
391E 0E0F           07388 MOVLW  0F
3920 6F73           07389 MOVWF  x73
3922 0E89           07390 MOVLW  89
3924 6F72           07391 MOVWF  x72
3926 0100           07392 MOVLB  0
3928 EC3B F011      07393 CALL   2276
392C 0000           07394 NOP   
3992 5169           07395 MOVF   x69,W
3994 0D07           07396 MULLW  07
3996 50F3           07397 MOVF   FF3,W
3998 6B6B           07398 CLRF   x6B
399A 6F6A           07399 MOVWF  x6A
399C C46B F003      07400 MOVFF  46B,03
39A0 516A           07401 MOVF   x6A,W
39A2 0100           07402 MOVLB  0
39A4 ECEB F010      07403 CALL   21D6
39A8 6E00           07404 MOVWF  00
39AA 0009           07405 TBLRD*+
39AC CFF5 F001      07406 MOVFF  FF5,01
39B0 0009           07407 TBLRD*+
39B2 CFF5 F002      07408 MOVFF  FF5,02
39B6 0009           07409 TBLRD*+
39B8 CFF5 F003      07410 MOVFF  FF5,03
39BC C003 F46F      07411 MOVFF  03,46F
39C0 C002 F46E      07412 MOVFF  02,46E
39C4 C001 F46D      07413 MOVFF  01,46D
39C8 CFE8 F46C      07414 MOVFF  FE8,46C
39CC CFE8 F470      07415 MOVFF  FE8,470
39D0 0E01           07416 MOVLW  01
39D2 0104           07417 MOVLB  4
39D4 6F71           07418 MOVWF  x71
39D6 0E0F           07419 MOVLW  0F
39D8 6F73           07420 MOVWF  x73
39DA 0E89           07421 MOVLW  89
39DC 6F72           07422 MOVWF  x72
39DE 0100           07423 MOVLB  0
39E0 EC3B F011      07424 CALL   2276
39E4 0000           07425 NOP   
500C 5169           07426 MOVF   x69,W
500E 0D07           07427 MULLW  07
5010 50F3           07428 MOVF   FF3,W
5012 6B6B           07429 CLRF   x6B
5014 6F6A           07430 MOVWF  x6A
5016 C46B F003      07431 MOVFF  46B,03
501A 516A           07432 MOVF   x6A,W
501C 0100           07433 MOVLB  0
501E ECEB F010      07434 CALL   21D6
5022 6E00           07435 MOVWF  00
5024 0009           07436 TBLRD*+
5026 CFF5 F001      07437 MOVFF  FF5,01
502A 0009           07438 TBLRD*+
502C CFF5 F002      07439 MOVFF  FF5,02
5030 0009           07440 TBLRD*+
5032 CFF5 F003      07441 MOVFF  FF5,03
5036 C003 F46F      07442 MOVFF  03,46F
503A C002 F46E      07443 MOVFF  02,46E
503E C001 F46D      07444 MOVFF  01,46D
5042 CFE8 F46C      07445 MOVFF  FE8,46C
5046 CFE8 F470      07446 MOVFF  FE8,470
504A 0E01           07447 MOVLW  01
504C 0104           07448 MOVLB  4
504E 6F71           07449 MOVWF  x71
5050 0E0F           07450 MOVLW  0F
5052 6F73           07451 MOVWF  x73
5054 0E89           07452 MOVLW  89
5056 6F72           07453 MOVWF  x72
5058 0100           07454 MOVLB  0
505A EC3B F011      07455 CALL   2276
505E 0000           07456 NOP   
5178 5169           07457 MOVF   x69,W
517A 0D07           07458 MULLW  07
517C 50F3           07459 MOVF   FF3,W
517E 6B6B           07460 CLRF   x6B
5180 6F6A           07461 MOVWF  x6A
5182 C46B F003      07462 MOVFF  46B,03
5186 516A           07463 MOVF   x6A,W
5188 0100           07464 MOVLB  0
518A ECEB F010      07465 CALL   21D6
518E 6E00           07466 MOVWF  00
5190 0009           07467 TBLRD*+
5192 CFF5 F001      07468 MOVFF  FF5,01
5196 0009           07469 TBLRD*+
5198 CFF5 F002      07470 MOVFF  FF5,02
519C 0009           07471 TBLRD*+
519E CFF5 F003      07472 MOVFF  FF5,03
51A2 C003 F46F      07473 MOVFF  03,46F
51A6 C002 F46E      07474 MOVFF  02,46E
51AA C001 F46D      07475 MOVFF  01,46D
51AE CFE8 F46C      07476 MOVFF  FE8,46C
51B2 CFE8 F470      07477 MOVFF  FE8,470
51B6 0E01           07478 MOVLW  01
51B8 0104           07479 MOVLB  4
51BA 6F71           07480 MOVWF  x71
51BC 0E0F           07481 MOVLW  0F
51BE 6F73           07482 MOVWF  x73
51C0 0E89           07483 MOVLW  89
51C2 6F72           07484 MOVWF  x72
51C4 0100           07485 MOVLB  0
51C6 EC3B F011      07486 CALL   2276
51CA 0000           07487 NOP   
5B3C 5169           07488 MOVF   x69,W
5B3E 0D07           07489 MULLW  07
5B40 50F3           07490 MOVF   FF3,W
5B42 6B6B           07491 CLRF   x6B
5B44 6F6A           07492 MOVWF  x6A
5B46 C46B F003      07493 MOVFF  46B,03
5B4A 516A           07494 MOVF   x6A,W
5B4C 0100           07495 MOVLB  0
5B4E ECEB F010      07496 CALL   21D6
5B52 6E00           07497 MOVWF  00
5B54 0009           07498 TBLRD*+
5B56 CFF5 F001      07499 MOVFF  FF5,01
5B5A 0009           07500 TBLRD*+
5B5C CFF5 F002      07501 MOVFF  FF5,02
5B60 0009           07502 TBLRD*+
5B62 CFF5 F003      07503 MOVFF  FF5,03
5B66 C003 F46F      07504 MOVFF  03,46F
5B6A C002 F46E      07505 MOVFF  02,46E
5B6E C001 F46D      07506 MOVFF  01,46D
5B72 CFE8 F46C      07507 MOVFF  FE8,46C
5B76 CFE8 F470      07508 MOVFF  FE8,470
5B7A 0E01           07509 MOVLW  01
5B7C 0104           07510 MOVLB  4
5B7E 6F71           07511 MOVWF  x71
5B80 0E0F           07512 MOVLW  0F
5B82 6F73           07513 MOVWF  x73
5B84 0E89           07514 MOVLW  89
5B86 6F72           07515 MOVWF  x72
5B88 0100           07516 MOVLB  0
5B8A EC3B F011      07517 CALL   2276
5B8E 0000           07518 NOP   
5BBE 5169           07519 MOVF   x69,W
5BC0 0D07           07520 MULLW  07
5BC2 50F3           07521 MOVF   FF3,W
5BC4 6B6B           07522 CLRF   x6B
5BC6 6F6A           07523 MOVWF  x6A
5BC8 C46B F003      07524 MOVFF  46B,03
5BCC 516A           07525 MOVF   x6A,W
5BCE 0100           07526 MOVLB  0
5BD0 ECEB F010      07527 CALL   21D6
5BD4 6E00           07528 MOVWF  00
5BD6 0009           07529 TBLRD*+
5BD8 CFF5 F001      07530 MOVFF  FF5,01
5BDC 0009           07531 TBLRD*+
5BDE CFF5 F002      07532 MOVFF  FF5,02
5BE2 0009           07533 TBLRD*+
5BE4 CFF5 F003      07534 MOVFF  FF5,03
5BE8 C003 F46F      07535 MOVFF  03,46F
5BEC C002 F46E      07536 MOVFF  02,46E
5BF0 C001 F46D      07537 MOVFF  01,46D
5BF4 CFE8 F46C      07538 MOVFF  FE8,46C
5BF8 CFE8 F470      07539 MOVFF  FE8,470
5BFC 0E01           07540 MOVLW  01
5BFE 0104           07541 MOVLB  4
5C00 6F71           07542 MOVWF  x71
5C02 0E0F           07543 MOVLW  0F
5C04 6F73           07544 MOVWF  x73
5C06 0E89           07545 MOVLW  89
5C08 6F72           07546 MOVWF  x72
5C0A 0100           07547 MOVLB  0
5C0C EC3B F011      07548 CALL   2276
5C10 0000           07549 NOP   
5C76 5169           07550 MOVF   x69,W
5C78 0D07           07551 MULLW  07
5C7A 50F3           07552 MOVF   FF3,W
5C7C 6B6B           07553 CLRF   x6B
5C7E 6F6A           07554 MOVWF  x6A
5C80 C46B F003      07555 MOVFF  46B,03
5C84 516A           07556 MOVF   x6A,W
5C86 0100           07557 MOVLB  0
5C88 ECEB F010      07558 CALL   21D6
5C8C 6E00           07559 MOVWF  00
5C8E 0009           07560 TBLRD*+
5C90 CFF5 F001      07561 MOVFF  FF5,01
5C94 0009           07562 TBLRD*+
5C96 CFF5 F002      07563 MOVFF  FF5,02
5C9A 0009           07564 TBLRD*+
5C9C CFF5 F003      07565 MOVFF  FF5,03
5CA0 C003 F46F      07566 MOVFF  03,46F
5CA4 C002 F46E      07567 MOVFF  02,46E
5CA8 C001 F46D      07568 MOVFF  01,46D
5CAC CFE8 F46C      07569 MOVFF  FE8,46C
5CB0 CFE8 F470      07570 MOVFF  FE8,470
5CB4 0E01           07571 MOVLW  01
5CB6 0104           07572 MOVLB  4
5CB8 6F71           07573 MOVWF  x71
5CBA 0E0F           07574 MOVLW  0F
5CBC 6F73           07575 MOVWF  x73
5CBE 0E89           07576 MOVLW  89
5CC0 6F72           07577 MOVWF  x72
5CC2 0100           07578 MOVLB  0
5CC4 EC3B F011      07579 CALL   2276
5CC8 0000           07580 NOP   
6118 5169           07581 MOVF   x69,W
611A 0D07           07582 MULLW  07
611C 50F3           07583 MOVF   FF3,W
611E 6B6B           07584 CLRF   x6B
6120 6F6A           07585 MOVWF  x6A
6122 C46B F003      07586 MOVFF  46B,03
6126 516A           07587 MOVF   x6A,W
6128 0100           07588 MOVLB  0
612A ECEB F010      07589 CALL   21D6
612E 6E00           07590 MOVWF  00
6130 0009           07591 TBLRD*+
6132 CFF5 F001      07592 MOVFF  FF5,01
6136 0009           07593 TBLRD*+
6138 CFF5 F002      07594 MOVFF  FF5,02
613C 0009           07595 TBLRD*+
613E CFF5 F003      07596 MOVFF  FF5,03
6142 C003 F46F      07597 MOVFF  03,46F
6146 C002 F46E      07598 MOVFF  02,46E
614A C001 F46D      07599 MOVFF  01,46D
614E CFE8 F46C      07600 MOVFF  FE8,46C
6152 CFE8 F470      07601 MOVFF  FE8,470
6156 0E01           07602 MOVLW  01
6158 0104           07603 MOVLB  4
615A 6F71           07604 MOVWF  x71
615C 0E0F           07605 MOVLW  0F
615E 6F73           07606 MOVWF  x73
6160 0E89           07607 MOVLW  89
6162 6F72           07608 MOVWF  x72
6164 0100           07609 MOVLB  0
6166 EC3B F011      07610 CALL   2276
616A 0000           07611 NOP   
                    07612 .................... } 
                    07613 ....................  
                    07614 .................... void gpio_clear(int gpio) { 
                    07615 ....................     output_low(gpios[gpio].pin); 
22B8 0104           07616 MOVLB  4
22BA 5169           07617 MOVF   x69,W
22BC 0D07           07618 MULLW  07
22BE 50F3           07619 MOVF   FF3,W
22C0 6B6B           07620 CLRF   x6B
22C2 6F6A           07621 MOVWF  x6A
22C4 C46B F003      07622 MOVFF  46B,03
22C8 516A           07623 MOVF   x6A,W
22CA 0100           07624 MOVLB  0
22CC DF84           07625 RCALL  21D6
22CE 6E00           07626 MOVWF  00
22D0 0009           07627 TBLRD*+
22D2 CFF5 F001      07628 MOVFF  FF5,01
22D6 0009           07629 TBLRD*+
22D8 CFF5 F002      07630 MOVFF  FF5,02
22DC 0009           07631 TBLRD*+
22DE CFF5 F003      07632 MOVFF  FF5,03
22E2 C003 F46F      07633 MOVFF  03,46F
22E6 C002 F46E      07634 MOVFF  02,46E
22EA C001 F46D      07635 MOVFF  01,46D
22EE CFE8 F46C      07636 MOVFF  FE8,46C
22F2 CFE8 F470      07637 MOVFF  FE8,470
22F6 0104           07638 MOVLB  4
22F8 6B71           07639 CLRF   x71
22FA 0E0F           07640 MOVLW  0F
22FC 6F73           07641 MOVWF  x73
22FE 0E89           07642 MOVLW  89
2300 6F72           07643 MOVWF  x72
2302 0100           07644 MOVLB  0
2304 DFB8           07645 RCALL  2276
                    07646 .................... } 
2306 0012           07647 RETURN 0
                    07648 ....................  
                    07649 .................... #INLINE 
                    07650 .................... void gpio_set_value(int gpio, int value) { 
                    07651 ....................     if(value) { 
2312 5368           07652 MOVF   x68,F
2314 E02C           07653 BZ    236E
2382 5368           07654 MOVF   x68,F
2384 E02C           07655 BZ    23DE
23FE 5368           07656 MOVF   x68,F
2400 E02C           07657 BZ    245A
2FD2 5368           07658 MOVF   x68,F
2FD4 E02E           07659 BZ    3032
3054 5368           07660 MOVF   x68,F
3056 E02E           07661 BZ    30B4
3850 5368           07662 MOVF   x68,F
3852 E02E           07663 BZ    38B0
38D2 5368           07664 MOVF   x68,F
38D4 E02E           07665 BZ    3932
5B34 5368           07666 MOVF   x68,F
5B36 E02E           07667 BZ    5B94
5BB6 5368           07668 MOVF   x68,F
5BB8 E02E           07669 BZ    5C16
                    07670 ....................       gpio_set(gpio); 
2316 C467 F469      07671 MOVFF  467,469
2386 C467 F469      07672 MOVFF  467,469
2402 C467 F469      07673 MOVFF  467,469
2FD6 C467 F469      07674 MOVFF  467,469
3058 C467 F469      07675 MOVFF  467,469
3854 C467 F469      07676 MOVFF  467,469
38D6 C467 F469      07677 MOVFF  467,469
5B38 C467 F469      07678 MOVFF  467,469
5BBA C467 F469      07679 MOVFF  467,469
                    07680 ....................     } else { 
236A D005           07681 BRA    2376
236C 0104           07682 MOVLB  4
23DA D005           07683 BRA    23E6
23DC 0104           07684 MOVLB  4
2456 D005           07685 BRA    2462
2458 0104           07686 MOVLB  4
302E D006           07687 BRA    303C
3030 0104           07688 MOVLB  4
30B0 D006           07689 BRA    30BE
30B2 0104           07690 MOVLB  4
38AC D006           07691 BRA    38BA
38AE 0104           07692 MOVLB  4
392E D006           07693 BRA    393C
3930 0104           07694 MOVLB  4
5B90 D006           07695 BRA    5B9E
5B92 0104           07696 MOVLB  4
5C12 D006           07697 BRA    5C20
5C14 0104           07698 MOVLB  4
                    07699 ....................       gpio_clear(gpio); 
236E C467 F469      07700 MOVFF  467,469
2372 0100           07701 MOVLB  0
2374 DFA1           07702 RCALL  22B8
2376 0000           07703 NOP   
23DE C467 F469      07704 MOVFF  467,469
23E2 0100           07705 MOVLB  0
23E4 DF69           07706 RCALL  22B8
23E6 0000           07707 NOP   
245A C467 F469      07708 MOVFF  467,469
245E 0100           07709 MOVLB  0
2460 DF2B           07710 RCALL  22B8
2462 0000           07711 NOP   
3032 C467 F469      07712 MOVFF  467,469
3036 0100           07713 MOVLB  0
3038 EC5C F011      07714 CALL   22B8
303C 0000           07715 NOP   
30B4 C467 F469      07716 MOVFF  467,469
30B8 0100           07717 MOVLB  0
30BA EC5C F011      07718 CALL   22B8
30BE 0000           07719 NOP   
38B0 C467 F469      07720 MOVFF  467,469
38B4 0100           07721 MOVLB  0
38B6 EC5C F011      07722 CALL   22B8
38BA 0000           07723 NOP   
3932 C467 F469      07724 MOVFF  467,469
3936 0100           07725 MOVLB  0
3938 EC5C F011      07726 CALL   22B8
393C 0000           07727 NOP   
5B94 C467 F469      07728 MOVFF  467,469
5B98 0100           07729 MOVLB  0
5B9A EC5C F011      07730 CALL   22B8
5B9E 0000           07731 NOP   
5C16 C467 F469      07732 MOVFF  467,469
5C1A 0100           07733 MOVLB  0
5C1C EC5C F011      07734 CALL   22B8
5C20 0000           07735 NOP   
                    07736 ....................     } 
                    07737 .................... } 
                    07738 ....................  
                    07739 .................... int gpio_get(int gpio) { 
                    07740 ....................     return input(gpios[gpio].pin); 
                    07741 .................... } 
                    07742 ....................  
                    07743 .................... #INLINE 
                    07744 .................... uint32_t gpio_get_analog(int gpio) { 
                    07745 ....................     set_adc_channel(gpios[gpio].pin); // select forward power input 
24E2 5168           07746 MOVF   x68,W
24E4 0D07           07747 MULLW  07
24E6 50F3           07748 MOVF   FF3,W
24E8 6B6B           07749 CLRF   x6B
24EA 6F6A           07750 MOVWF  x6A
24EC C46B F003      07751 MOVFF  46B,03
24F0 516A           07752 MOVF   x6A,W
24F2 0100           07753 MOVLB  0
24F4 DE70           07754 RCALL  21D6
24F6 6E00           07755 MOVWF  00
24F8 0009           07756 TBLRD*+
24FA CFF5 F001      07757 MOVFF  FF5,01
24FE 0009           07758 TBLRD*+
2500 CFF5 F002      07759 MOVFF  FF5,02
2504 0009           07760 TBLRD*+
2506 CFF5 F003      07761 MOVFF  FF5,03
250A C001 F46D      07762 MOVFF  01,46D
250E CFE8 F46C      07763 MOVFF  FE8,46C
2512 0104           07764 MOVLB  4
2514 3400           07765 RLCF   00,W
2516 6E00           07766 MOVWF  00
2518 3401           07767 RLCF   01,W
251A 6E01           07768 MOVWF  01
251C 3402           07769 RLCF   02,W
251E 6E01           07770 MOVWF  01
2520 3403           07771 RLCF   03,W
2522 6E01           07772 MOVWF  01
2524 3600           07773 RLCF   00,F
2526 3601           07774 RLCF   01,F
2528 3601           07775 RLCF   01,F
252A 3601           07776 RLCF   01,F
252C 0EFC           07777 MOVLW  FC
252E 1600           07778 ANDWF  00,F
2530 50C2           07779 MOVF   FC2,W
2532 0B83           07780 ANDLW  83
2534 1000           07781 IORWF  00,W
2536 6EC2           07782 MOVWF  FC2
2590 5168           07783 MOVF   x68,W
2592 0D07           07784 MULLW  07
2594 50F3           07785 MOVF   FF3,W
2596 6B6B           07786 CLRF   x6B
2598 6F6A           07787 MOVWF  x6A
259A C46B F003      07788 MOVFF  46B,03
259E 516A           07789 MOVF   x6A,W
25A0 0100           07790 MOVLB  0
25A2 DE19           07791 RCALL  21D6
25A4 6E00           07792 MOVWF  00
25A6 0009           07793 TBLRD*+
25A8 CFF5 F001      07794 MOVFF  FF5,01
25AC 0009           07795 TBLRD*+
25AE CFF5 F002      07796 MOVFF  FF5,02
25B2 0009           07797 TBLRD*+
25B4 CFF5 F003      07798 MOVFF  FF5,03
25B8 C001 F46D      07799 MOVFF  01,46D
25BC CFE8 F46C      07800 MOVFF  FE8,46C
25C0 0104           07801 MOVLB  4
25C2 3400           07802 RLCF   00,W
25C4 6E00           07803 MOVWF  00
25C6 3401           07804 RLCF   01,W
25C8 6E01           07805 MOVWF  01
25CA 3402           07806 RLCF   02,W
25CC 6E01           07807 MOVWF  01
25CE 3403           07808 RLCF   03,W
25D0 6E01           07809 MOVWF  01
25D2 3600           07810 RLCF   00,F
25D4 3601           07811 RLCF   01,F
25D6 3601           07812 RLCF   01,F
25D8 3601           07813 RLCF   01,F
25DA 0EFC           07814 MOVLW  FC
25DC 1600           07815 ANDWF  00,F
25DE 50C2           07816 MOVF   FC2,W
25E0 0B83           07817 ANDLW  83
25E2 1000           07818 IORWF  00,W
25E4 6EC2           07819 MOVWF  FC2
263E 5168           07820 MOVF   x68,W
2640 0D07           07821 MULLW  07
2642 50F3           07822 MOVF   FF3,W
2644 6B6B           07823 CLRF   x6B
2646 6F6A           07824 MOVWF  x6A
2648 C46B F003      07825 MOVFF  46B,03
264C 516A           07826 MOVF   x6A,W
264E 0100           07827 MOVLB  0
2650 DDC2           07828 RCALL  21D6
2652 6E00           07829 MOVWF  00
2654 0009           07830 TBLRD*+
2656 CFF5 F001      07831 MOVFF  FF5,01
265A 0009           07832 TBLRD*+
265C CFF5 F002      07833 MOVFF  FF5,02
2660 0009           07834 TBLRD*+
2662 CFF5 F003      07835 MOVFF  FF5,03
2666 C001 F46D      07836 MOVFF  01,46D
266A CFE8 F46C      07837 MOVFF  FE8,46C
266E 0104           07838 MOVLB  4
2670 3400           07839 RLCF   00,W
2672 6E00           07840 MOVWF  00
2674 3401           07841 RLCF   01,W
2676 6E01           07842 MOVWF  01
2678 3402           07843 RLCF   02,W
267A 6E01           07844 MOVWF  01
267C 3403           07845 RLCF   03,W
267E 6E01           07846 MOVWF  01
2680 3600           07847 RLCF   00,F
2682 3601           07848 RLCF   01,F
2684 3601           07849 RLCF   01,F
2686 3601           07850 RLCF   01,F
2688 0EFC           07851 MOVLW  FC
268A 1600           07852 ANDWF  00,F
268C 50C2           07853 MOVF   FC2,W
268E 0B83           07854 ANDLW  83
2690 1000           07855 IORWF  00,W
2692 6EC2           07856 MOVWF  FC2
2F18 5168           07857 MOVF   x68,W
2F1A 0D07           07858 MULLW  07
2F1C 50F3           07859 MOVF   FF3,W
2F1E 6B6B           07860 CLRF   x6B
2F20 6F6A           07861 MOVWF  x6A
2F22 C46B F003      07862 MOVFF  46B,03
2F26 516A           07863 MOVF   x6A,W
2F28 0100           07864 MOVLB  0
2F2A ECEB F010      07865 CALL   21D6
2F2E 6E00           07866 MOVWF  00
2F30 0009           07867 TBLRD*+
2F32 CFF5 F001      07868 MOVFF  FF5,01
2F36 0009           07869 TBLRD*+
2F38 CFF5 F002      07870 MOVFF  FF5,02
2F3C 0009           07871 TBLRD*+
2F3E CFF5 F003      07872 MOVFF  FF5,03
2F42 C001 F46D      07873 MOVFF  01,46D
2F46 CFE8 F46C      07874 MOVFF  FE8,46C
2F4A 0104           07875 MOVLB  4
2F4C 3400           07876 RLCF   00,W
2F4E 6E00           07877 MOVWF  00
2F50 3401           07878 RLCF   01,W
2F52 6E01           07879 MOVWF  01
2F54 3402           07880 RLCF   02,W
2F56 6E01           07881 MOVWF  01
2F58 3403           07882 RLCF   03,W
2F5A 6E01           07883 MOVWF  01
2F5C 3600           07884 RLCF   00,F
2F5E 3601           07885 RLCF   01,F
2F60 3601           07886 RLCF   01,F
2F62 3601           07887 RLCF   01,F
2F64 0EFC           07888 MOVLW  FC
2F66 1600           07889 ANDWF  00,F
2F68 50C2           07890 MOVF   FC2,W
2F6A 0B83           07891 ANDLW  83
2F6C 1000           07892 IORWF  00,W
2F6E 6EC2           07893 MOVWF  FC2
3358 5168           07894 MOVF   x68,W
335A 0D07           07895 MULLW  07
335C 50F3           07896 MOVF   FF3,W
335E 6B6B           07897 CLRF   x6B
3360 6F6A           07898 MOVWF  x6A
3362 C46B F003      07899 MOVFF  46B,03
3366 516A           07900 MOVF   x6A,W
3368 0100           07901 MOVLB  0
336A ECEB F010      07902 CALL   21D6
336E 6E00           07903 MOVWF  00
3370 0009           07904 TBLRD*+
3372 CFF5 F001      07905 MOVFF  FF5,01
3376 0009           07906 TBLRD*+
3378 CFF5 F002      07907 MOVFF  FF5,02
337C 0009           07908 TBLRD*+
337E CFF5 F003      07909 MOVFF  FF5,03
3382 C001 F46D      07910 MOVFF  01,46D
3386 CFE8 F46C      07911 MOVFF  FE8,46C
338A 0104           07912 MOVLB  4
338C 3400           07913 RLCF   00,W
338E 6E00           07914 MOVWF  00
3390 3401           07915 RLCF   01,W
3392 6E01           07916 MOVWF  01
3394 3402           07917 RLCF   02,W
3396 6E01           07918 MOVWF  01
3398 3403           07919 RLCF   03,W
339A 6E01           07920 MOVWF  01
339C 3600           07921 RLCF   00,F
339E 3601           07922 RLCF   01,F
33A0 3601           07923 RLCF   01,F
33A2 3601           07924 RLCF   01,F
33A4 0EFC           07925 MOVLW  FC
33A6 1600           07926 ANDWF  00,F
33A8 50C2           07927 MOVF   FC2,W
33AA 0B83           07928 ANDLW  83
33AC 1000           07929 IORWF  00,W
33AE 6EC2           07930 MOVWF  FC2
33E4 5168           07931 MOVF   x68,W
33E6 0D07           07932 MULLW  07
33E8 50F3           07933 MOVF   FF3,W
33EA 6B6B           07934 CLRF   x6B
33EC 6F6A           07935 MOVWF  x6A
33EE C46B F003      07936 MOVFF  46B,03
33F2 516A           07937 MOVF   x6A,W
33F4 0100           07938 MOVLB  0
33F6 ECEB F010      07939 CALL   21D6
33FA 6E00           07940 MOVWF  00
33FC 0009           07941 TBLRD*+
33FE CFF5 F001      07942 MOVFF  FF5,01
3402 0009           07943 TBLRD*+
3404 CFF5 F002      07944 MOVFF  FF5,02
3408 0009           07945 TBLRD*+
340A CFF5 F003      07946 MOVFF  FF5,03
340E C001 F46D      07947 MOVFF  01,46D
3412 CFE8 F46C      07948 MOVFF  FE8,46C
3416 0104           07949 MOVLB  4
3418 3400           07950 RLCF   00,W
341A 6E00           07951 MOVWF  00
341C 3401           07952 RLCF   01,W
341E 6E01           07953 MOVWF  01
3420 3402           07954 RLCF   02,W
3422 6E01           07955 MOVWF  01
3424 3403           07956 RLCF   03,W
3426 6E01           07957 MOVWF  01
3428 3600           07958 RLCF   00,F
342A 3601           07959 RLCF   01,F
342C 3601           07960 RLCF   01,F
342E 3601           07961 RLCF   01,F
3430 0EFC           07962 MOVLW  FC
3432 1600           07963 ANDWF  00,F
3434 50C2           07964 MOVF   FC2,W
3436 0B83           07965 ANDLW  83
3438 1000           07966 IORWF  00,W
343A 6EC2           07967 MOVWF  FC2
3470 5168           07968 MOVF   x68,W
3472 0D07           07969 MULLW  07
3474 50F3           07970 MOVF   FF3,W
3476 6B6B           07971 CLRF   x6B
3478 6F6A           07972 MOVWF  x6A
347A C46B F003      07973 MOVFF  46B,03
347E 516A           07974 MOVF   x6A,W
3480 0100           07975 MOVLB  0
3482 ECEB F010      07976 CALL   21D6
3486 6E00           07977 MOVWF  00
3488 0009           07978 TBLRD*+
348A CFF5 F001      07979 MOVFF  FF5,01
348E 0009           07980 TBLRD*+
3490 CFF5 F002      07981 MOVFF  FF5,02
3494 0009           07982 TBLRD*+
3496 CFF5 F003      07983 MOVFF  FF5,03
349A C001 F46D      07984 MOVFF  01,46D
349E CFE8 F46C      07985 MOVFF  FE8,46C
34A2 0104           07986 MOVLB  4
34A4 3400           07987 RLCF   00,W
34A6 6E00           07988 MOVWF  00
34A8 3401           07989 RLCF   01,W
34AA 6E01           07990 MOVWF  01
34AC 3402           07991 RLCF   02,W
34AE 6E01           07992 MOVWF  01
34B0 3403           07993 RLCF   03,W
34B2 6E01           07994 MOVWF  01
34B4 3600           07995 RLCF   00,F
34B6 3601           07996 RLCF   01,F
34B8 3601           07997 RLCF   01,F
34BA 3601           07998 RLCF   01,F
34BC 0EFC           07999 MOVLW  FC
34BE 1600           08000 ANDWF  00,F
34C0 50C2           08001 MOVF   FC2,W
34C2 0B83           08002 ANDLW  83
34C4 1000           08003 IORWF  00,W
34C6 6EC2           08004 MOVWF  FC2
3BD8 5168           08005 MOVF   x68,W
3BDA 0D07           08006 MULLW  07
3BDC 50F3           08007 MOVF   FF3,W
3BDE 6B6B           08008 CLRF   x6B
3BE0 6F6A           08009 MOVWF  x6A
3BE2 C46B F003      08010 MOVFF  46B,03
3BE6 516A           08011 MOVF   x6A,W
3BE8 0100           08012 MOVLB  0
3BEA ECEB F010      08013 CALL   21D6
3BEE 6E00           08014 MOVWF  00
3BF0 0009           08015 TBLRD*+
3BF2 CFF5 F001      08016 MOVFF  FF5,01
3BF6 0009           08017 TBLRD*+
3BF8 CFF5 F002      08018 MOVFF  FF5,02
3BFC 0009           08019 TBLRD*+
3BFE CFF5 F003      08020 MOVFF  FF5,03
3C02 C001 F46D      08021 MOVFF  01,46D
3C06 CFE8 F46C      08022 MOVFF  FE8,46C
3C0A 0104           08023 MOVLB  4
3C0C 3400           08024 RLCF   00,W
3C0E 6E00           08025 MOVWF  00
3C10 3401           08026 RLCF   01,W
3C12 6E01           08027 MOVWF  01
3C14 3402           08028 RLCF   02,W
3C16 6E01           08029 MOVWF  01
3C18 3403           08030 RLCF   03,W
3C1A 6E01           08031 MOVWF  01
3C1C 3600           08032 RLCF   00,F
3C1E 3601           08033 RLCF   01,F
3C20 3601           08034 RLCF   01,F
3C22 3601           08035 RLCF   01,F
3C24 0EFC           08036 MOVLW  FC
3C26 1600           08037 ANDWF  00,F
3C28 50C2           08038 MOVF   FC2,W
3C2A 0B83           08039 ANDLW  83
3C2C 1000           08040 IORWF  00,W
3C2E 6EC2           08041 MOVWF  FC2
3C64 5168           08042 MOVF   x68,W
3C66 0D07           08043 MULLW  07
3C68 50F3           08044 MOVF   FF3,W
3C6A 6B6B           08045 CLRF   x6B
3C6C 6F6A           08046 MOVWF  x6A
3C6E C46B F003      08047 MOVFF  46B,03
3C72 516A           08048 MOVF   x6A,W
3C74 0100           08049 MOVLB  0
3C76 ECEB F010      08050 CALL   21D6
3C7A 6E00           08051 MOVWF  00
3C7C 0009           08052 TBLRD*+
3C7E CFF5 F001      08053 MOVFF  FF5,01
3C82 0009           08054 TBLRD*+
3C84 CFF5 F002      08055 MOVFF  FF5,02
3C88 0009           08056 TBLRD*+
3C8A CFF5 F003      08057 MOVFF  FF5,03
3C8E C001 F46D      08058 MOVFF  01,46D
3C92 CFE8 F46C      08059 MOVFF  FE8,46C
3C96 0104           08060 MOVLB  4
3C98 3400           08061 RLCF   00,W
3C9A 6E00           08062 MOVWF  00
3C9C 3401           08063 RLCF   01,W
3C9E 6E01           08064 MOVWF  01
3CA0 3402           08065 RLCF   02,W
3CA2 6E01           08066 MOVWF  01
3CA4 3403           08067 RLCF   03,W
3CA6 6E01           08068 MOVWF  01
3CA8 3600           08069 RLCF   00,F
3CAA 3601           08070 RLCF   01,F
3CAC 3601           08071 RLCF   01,F
3CAE 3601           08072 RLCF   01,F
3CB0 0EFC           08073 MOVLW  FC
3CB2 1600           08074 ANDWF  00,F
3CB4 50C2           08075 MOVF   FC2,W
3CB6 0B83           08076 ANDLW  83
3CB8 1000           08077 IORWF  00,W
3CBA 6EC2           08078 MOVWF  FC2
3CF0 5168           08079 MOVF   x68,W
3CF2 0D07           08080 MULLW  07
3CF4 50F3           08081 MOVF   FF3,W
3CF6 6B6B           08082 CLRF   x6B
3CF8 6F6A           08083 MOVWF  x6A
3CFA C46B F003      08084 MOVFF  46B,03
3CFE 516A           08085 MOVF   x6A,W
3D00 0100           08086 MOVLB  0
3D02 ECEB F010      08087 CALL   21D6
3D06 6E00           08088 MOVWF  00
3D08 0009           08089 TBLRD*+
3D0A CFF5 F001      08090 MOVFF  FF5,01
3D0E 0009           08091 TBLRD*+
3D10 CFF5 F002      08092 MOVFF  FF5,02
3D14 0009           08093 TBLRD*+
3D16 CFF5 F003      08094 MOVFF  FF5,03
3D1A C001 F46D      08095 MOVFF  01,46D
3D1E CFE8 F46C      08096 MOVFF  FE8,46C
3D22 0104           08097 MOVLB  4
3D24 3400           08098 RLCF   00,W
3D26 6E00           08099 MOVWF  00
3D28 3401           08100 RLCF   01,W
3D2A 6E01           08101 MOVWF  01
3D2C 3402           08102 RLCF   02,W
3D2E 6E01           08103 MOVWF  01
3D30 3403           08104 RLCF   03,W
3D32 6E01           08105 MOVWF  01
3D34 3600           08106 RLCF   00,F
3D36 3601           08107 RLCF   01,F
3D38 3601           08108 RLCF   01,F
3D3A 3601           08109 RLCF   01,F
3D3C 0EFC           08110 MOVLW  FC
3D3E 1600           08111 ANDWF  00,F
3D40 50C2           08112 MOVF   FC2,W
3D42 0B83           08113 ANDLW  83
3D44 1000           08114 IORWF  00,W
3D46 6EC2           08115 MOVWF  FC2
5EBC 5168           08116 MOVF   x68,W
5EBE 0D07           08117 MULLW  07
5EC0 50F3           08118 MOVF   FF3,W
5EC2 6B6B           08119 CLRF   x6B
5EC4 6F6A           08120 MOVWF  x6A
5EC6 C46B F003      08121 MOVFF  46B,03
5ECA 516A           08122 MOVF   x6A,W
5ECC 0100           08123 MOVLB  0
5ECE ECEB F010      08124 CALL   21D6
5ED2 6E00           08125 MOVWF  00
5ED4 0009           08126 TBLRD*+
5ED6 CFF5 F001      08127 MOVFF  FF5,01
5EDA 0009           08128 TBLRD*+
5EDC CFF5 F002      08129 MOVFF  FF5,02
5EE0 0009           08130 TBLRD*+
5EE2 CFF5 F003      08131 MOVFF  FF5,03
5EE6 C001 F46D      08132 MOVFF  01,46D
5EEA CFE8 F46C      08133 MOVFF  FE8,46C
5EEE 0104           08134 MOVLB  4
5EF0 3400           08135 RLCF   00,W
5EF2 6E00           08136 MOVWF  00
5EF4 3401           08137 RLCF   01,W
5EF6 6E01           08138 MOVWF  01
5EF8 3402           08139 RLCF   02,W
5EFA 6E01           08140 MOVWF  01
5EFC 3403           08141 RLCF   03,W
5EFE 6E01           08142 MOVWF  01
5F00 3600           08143 RLCF   00,F
5F02 3601           08144 RLCF   01,F
5F04 3601           08145 RLCF   01,F
5F06 3601           08146 RLCF   01,F
5F08 0EFC           08147 MOVLW  FC
5F0A 1600           08148 ANDWF  00,F
5F0C 50C2           08149 MOVF   FC2,W
5F0E 0B83           08150 ANDLW  83
5F10 1000           08151 IORWF  00,W
5F12 6EC2           08152 MOVWF  FC2
5F48 5168           08153 MOVF   x68,W
5F4A 0D07           08154 MULLW  07
5F4C 50F3           08155 MOVF   FF3,W
5F4E 6B6B           08156 CLRF   x6B
5F50 6F6A           08157 MOVWF  x6A
5F52 C46B F003      08158 MOVFF  46B,03
5F56 516A           08159 MOVF   x6A,W
5F58 0100           08160 MOVLB  0
5F5A ECEB F010      08161 CALL   21D6
5F5E 6E00           08162 MOVWF  00
5F60 0009           08163 TBLRD*+
5F62 CFF5 F001      08164 MOVFF  FF5,01
5F66 0009           08165 TBLRD*+
5F68 CFF5 F002      08166 MOVFF  FF5,02
5F6C 0009           08167 TBLRD*+
5F6E CFF5 F003      08168 MOVFF  FF5,03
5F72 C001 F46D      08169 MOVFF  01,46D
5F76 CFE8 F46C      08170 MOVFF  FE8,46C
5F7A 0104           08171 MOVLB  4
5F7C 3400           08172 RLCF   00,W
5F7E 6E00           08173 MOVWF  00
5F80 3401           08174 RLCF   01,W
5F82 6E01           08175 MOVWF  01
5F84 3402           08176 RLCF   02,W
5F86 6E01           08177 MOVWF  01
5F88 3403           08178 RLCF   03,W
5F8A 6E01           08179 MOVWF  01
5F8C 3600           08180 RLCF   00,F
5F8E 3601           08181 RLCF   01,F
5F90 3601           08182 RLCF   01,F
5F92 3601           08183 RLCF   01,F
5F94 0EFC           08184 MOVLW  FC
5F96 1600           08185 ANDWF  00,F
5F98 50C2           08186 MOVF   FC2,W
5F9A 0B83           08187 ANDLW  83
5F9C 1000           08188 IORWF  00,W
5F9E 6EC2           08189 MOVWF  FC2
5FD4 5168           08190 MOVF   x68,W
5FD6 0D07           08191 MULLW  07
5FD8 50F3           08192 MOVF   FF3,W
5FDA 6B6B           08193 CLRF   x6B
5FDC 6F6A           08194 MOVWF  x6A
5FDE C46B F003      08195 MOVFF  46B,03
5FE2 516A           08196 MOVF   x6A,W
5FE4 0100           08197 MOVLB  0
5FE6 ECEB F010      08198 CALL   21D6
5FEA 6E00           08199 MOVWF  00
5FEC 0009           08200 TBLRD*+
5FEE CFF5 F001      08201 MOVFF  FF5,01
5FF2 0009           08202 TBLRD*+
5FF4 CFF5 F002      08203 MOVFF  FF5,02
5FF8 0009           08204 TBLRD*+
5FFA CFF5 F003      08205 MOVFF  FF5,03
5FFE C001 F46D      08206 MOVFF  01,46D
6002 CFE8 F46C      08207 MOVFF  FE8,46C
6006 0104           08208 MOVLB  4
6008 3400           08209 RLCF   00,W
600A 6E00           08210 MOVWF  00
600C 3401           08211 RLCF   01,W
600E 6E01           08212 MOVWF  01
6010 3402           08213 RLCF   02,W
6012 6E01           08214 MOVWF  01
6014 3403           08215 RLCF   03,W
6016 6E01           08216 MOVWF  01
6018 3600           08217 RLCF   00,F
601A 3601           08218 RLCF   01,F
601C 3601           08219 RLCF   01,F
601E 3601           08220 RLCF   01,F
6020 0EFC           08221 MOVLW  FC
6022 1600           08222 ANDWF  00,F
6024 50C2           08223 MOVF   FC2,W
6026 0B83           08224 ANDLW  83
6028 1000           08225 IORWF  00,W
602A 6EC2           08226 MOVWF  FC2
                    08227 ....................     //elay_us(20);d 
                    08228 ....................     read_adc(ADC_START_ONLY); 
2538 82C2           08229 BSF    FC2.1
25E6 82C2           08230 BSF    FC2.1
2694 82C2           08231 BSF    FC2.1
2F70 82C2           08232 BSF    FC2.1
33B0 82C2           08233 BSF    FC2.1
343C 82C2           08234 BSF    FC2.1
34C8 82C2           08235 BSF    FC2.1
3C30 82C2           08236 BSF    FC2.1
3CBC 82C2           08237 BSF    FC2.1
3D48 82C2           08238 BSF    FC2.1
5F14 82C2           08239 BSF    FC2.1
5FA0 82C2           08240 BSF    FC2.1
602C 82C2           08241 BSF    FC2.1
                    08242 ....................     int1 done = adc_done(); 
253A 9169           08243 BCF    x69.0
253C A2C2           08244 BTFSS  FC2.1
253E 8169           08245 BSF    x69.0
25E8 9169           08246 BCF    x69.0
25EA A2C2           08247 BTFSS  FC2.1
25EC 8169           08248 BSF    x69.0
2696 9169           08249 BCF    x69.0
2698 A2C2           08250 BTFSS  FC2.1
269A 8169           08251 BSF    x69.0
2F72 9169           08252 BCF    x69.0
2F74 A2C2           08253 BTFSS  FC2.1
2F76 8169           08254 BSF    x69.0
33B2 9169           08255 BCF    x69.0
33B4 A2C2           08256 BTFSS  FC2.1
33B6 8169           08257 BSF    x69.0
343E 9169           08258 BCF    x69.0
3440 A2C2           08259 BTFSS  FC2.1
3442 8169           08260 BSF    x69.0
34CA 9169           08261 BCF    x69.0
34CC A2C2           08262 BTFSS  FC2.1
34CE 8169           08263 BSF    x69.0
3C32 9169           08264 BCF    x69.0
3C34 A2C2           08265 BTFSS  FC2.1
3C36 8169           08266 BSF    x69.0
3CBE 9169           08267 BCF    x69.0
3CC0 A2C2           08268 BTFSS  FC2.1
3CC2 8169           08269 BSF    x69.0
3D4A 9169           08270 BCF    x69.0
3D4C A2C2           08271 BTFSS  FC2.1
3D4E 8169           08272 BSF    x69.0
5F16 9169           08273 BCF    x69.0
5F18 A2C2           08274 BTFSS  FC2.1
5F1A 8169           08275 BSF    x69.0
5FA2 9169           08276 BCF    x69.0
5FA4 A2C2           08277 BTFSS  FC2.1
5FA6 8169           08278 BSF    x69.0
602E 9169           08279 BCF    x69.0
6030 A2C2           08280 BTFSS  FC2.1
6032 8169           08281 BSF    x69.0
                    08282 ....................     while(!done) {    
2540 B169           08283 BTFSC  x69.0
2542 D004           08284 BRA    254C
25EE B169           08285 BTFSC  x69.0
25F0 D004           08286 BRA    25FA
269C B169           08287 BTFSC  x69.0
269E D004           08288 BRA    26A8
2F78 B169           08289 BTFSC  x69.0
2F7A D004           08290 BRA    2F84
33B8 B169           08291 BTFSC  x69.0
33BA D004           08292 BRA    33C4
3444 B169           08293 BTFSC  x69.0
3446 D004           08294 BRA    3450
34D0 B169           08295 BTFSC  x69.0
34D2 D004           08296 BRA    34DC
3C38 B169           08297 BTFSC  x69.0
3C3A D004           08298 BRA    3C44
3CC4 B169           08299 BTFSC  x69.0
3CC6 D004           08300 BRA    3CD0
3D50 B169           08301 BTFSC  x69.0
3D52 D004           08302 BRA    3D5C
5F1C B169           08303 BTFSC  x69.0
5F1E D004           08304 BRA    5F28
5FA8 B169           08305 BTFSC  x69.0
5FAA D004           08306 BRA    5FB4
6034 B169           08307 BTFSC  x69.0
6036 D004           08308 BRA    6040
                    08309 ....................       done = adc_done(); 
2544 9169           08310 BCF    x69.0
2546 A2C2           08311 BTFSS  FC2.1
2548 8169           08312 BSF    x69.0
25F2 9169           08313 BCF    x69.0
25F4 A2C2           08314 BTFSS  FC2.1
25F6 8169           08315 BSF    x69.0
26A0 9169           08316 BCF    x69.0
26A2 A2C2           08317 BTFSS  FC2.1
26A4 8169           08318 BSF    x69.0
2F7C 9169           08319 BCF    x69.0
2F7E A2C2           08320 BTFSS  FC2.1
2F80 8169           08321 BSF    x69.0
33BC 9169           08322 BCF    x69.0
33BE A2C2           08323 BTFSS  FC2.1
33C0 8169           08324 BSF    x69.0
3448 9169           08325 BCF    x69.0
344A A2C2           08326 BTFSS  FC2.1
344C 8169           08327 BSF    x69.0
34D4 9169           08328 BCF    x69.0
34D6 A2C2           08329 BTFSS  FC2.1
34D8 8169           08330 BSF    x69.0
3C3C 9169           08331 BCF    x69.0
3C3E A2C2           08332 BTFSS  FC2.1
3C40 8169           08333 BSF    x69.0
3CC8 9169           08334 BCF    x69.0
3CCA A2C2           08335 BTFSS  FC2.1
3CCC 8169           08336 BSF    x69.0
3D54 9169           08337 BCF    x69.0
3D56 A2C2           08338 BTFSS  FC2.1
3D58 8169           08339 BSF    x69.0
5F20 9169           08340 BCF    x69.0
5F22 A2C2           08341 BTFSS  FC2.1
5F24 8169           08342 BSF    x69.0
5FAC 9169           08343 BCF    x69.0
5FAE A2C2           08344 BTFSS  FC2.1
5FB0 8169           08345 BSF    x69.0
6038 9169           08346 BCF    x69.0
603A A2C2           08347 BTFSS  FC2.1
603C 8169           08348 BSF    x69.0
                    08349 ....................     } 
254A D7FA           08350 BRA    2540
25F8 D7FA           08351 BRA    25EE
26A6 D7FA           08352 BRA    269C
2F82 D7FA           08353 BRA    2F78
33C2 D7FA           08354 BRA    33B8
344E D7FA           08355 BRA    3444
34DA D7FA           08356 BRA    34D0
3C42 D7FA           08357 BRA    3C38
3CCE D7FA           08358 BRA    3CC4
3D5A D7FA           08359 BRA    3D50
5F26 D7FA           08360 BRA    5F1C
5FB2 D7FA           08361 BRA    5FA8
603E D7FA           08362 BRA    6034
                    08363 ....................     return read_adc(ADC_READ_ONLY ); 
254C B2C2           08364 BTFSC  FC2.1
254E D7FE           08365 BRA    254C
2550 CFC4 F003      08366 MOVFF  FC4,03
2554 CFC3 F000      08367 MOVFF  FC3,00
2558 CFC4 F001      08368 MOVFF  FC4,01
255C 6A02           08369 CLRF   02
255E 6A03           08370 CLRF   03
25FA B2C2           08371 BTFSC  FC2.1
25FC D7FE           08372 BRA    25FA
25FE CFC4 F003      08373 MOVFF  FC4,03
2602 CFC3 F000      08374 MOVFF  FC3,00
2606 CFC4 F001      08375 MOVFF  FC4,01
260A 6A02           08376 CLRF   02
260C 6A03           08377 CLRF   03
26A8 B2C2           08378 BTFSC  FC2.1
26AA D7FE           08379 BRA    26A8
26AC CFC4 F003      08380 MOVFF  FC4,03
26B0 CFC3 F000      08381 MOVFF  FC3,00
26B4 CFC4 F001      08382 MOVFF  FC4,01
26B8 6A02           08383 CLRF   02
26BA 6A03           08384 CLRF   03
2F84 B2C2           08385 BTFSC  FC2.1
2F86 D7FE           08386 BRA    2F84
2F88 CFC4 F003      08387 MOVFF  FC4,03
2F8C CFC3 F000      08388 MOVFF  FC3,00
2F90 CFC4 F001      08389 MOVFF  FC4,01
2F94 6A02           08390 CLRF   02
2F96 6A03           08391 CLRF   03
33C4 B2C2           08392 BTFSC  FC2.1
33C6 D7FE           08393 BRA    33C4
33C8 CFC4 F003      08394 MOVFF  FC4,03
33CC CFC3 F000      08395 MOVFF  FC3,00
33D0 CFC4 F001      08396 MOVFF  FC4,01
33D4 6A02           08397 CLRF   02
33D6 6A03           08398 CLRF   03
3450 B2C2           08399 BTFSC  FC2.1
3452 D7FE           08400 BRA    3450
3454 CFC4 F003      08401 MOVFF  FC4,03
3458 CFC3 F000      08402 MOVFF  FC3,00
345C CFC4 F001      08403 MOVFF  FC4,01
3460 6A02           08404 CLRF   02
3462 6A03           08405 CLRF   03
34DC B2C2           08406 BTFSC  FC2.1
34DE D7FE           08407 BRA    34DC
34E0 CFC4 F003      08408 MOVFF  FC4,03
34E4 CFC3 F000      08409 MOVFF  FC3,00
34E8 CFC4 F001      08410 MOVFF  FC4,01
34EC 6A02           08411 CLRF   02
34EE 6A03           08412 CLRF   03
3C44 B2C2           08413 BTFSC  FC2.1
3C46 D7FE           08414 BRA    3C44
3C48 CFC4 F003      08415 MOVFF  FC4,03
3C4C CFC3 F000      08416 MOVFF  FC3,00
3C50 CFC4 F001      08417 MOVFF  FC4,01
3C54 6A02           08418 CLRF   02
3C56 6A03           08419 CLRF   03
3CD0 B2C2           08420 BTFSC  FC2.1
3CD2 D7FE           08421 BRA    3CD0
3CD4 CFC4 F003      08422 MOVFF  FC4,03
3CD8 CFC3 F000      08423 MOVFF  FC3,00
3CDC CFC4 F001      08424 MOVFF  FC4,01
3CE0 6A02           08425 CLRF   02
3CE2 6A03           08426 CLRF   03
3D5C B2C2           08427 BTFSC  FC2.1
3D5E D7FE           08428 BRA    3D5C
3D60 CFC4 F003      08429 MOVFF  FC4,03
3D64 CFC3 F000      08430 MOVFF  FC3,00
3D68 CFC4 F001      08431 MOVFF  FC4,01
3D6C 6A02           08432 CLRF   02
3D6E 6A03           08433 CLRF   03
5F28 B2C2           08434 BTFSC  FC2.1
5F2A D7FE           08435 BRA    5F28
5F2C CFC4 F003      08436 MOVFF  FC4,03
5F30 CFC3 F000      08437 MOVFF  FC3,00
5F34 CFC4 F001      08438 MOVFF  FC4,01
5F38 6A02           08439 CLRF   02
5F3A 6A03           08440 CLRF   03
5FB4 B2C2           08441 BTFSC  FC2.1
5FB6 D7FE           08442 BRA    5FB4
5FB8 CFC4 F003      08443 MOVFF  FC4,03
5FBC CFC3 F000      08444 MOVFF  FC3,00
5FC0 CFC4 F001      08445 MOVFF  FC4,01
5FC4 6A02           08446 CLRF   02
5FC6 6A03           08447 CLRF   03
6040 B2C2           08448 BTFSC  FC2.1
6042 D7FE           08449 BRA    6040
6044 CFC4 F003      08450 MOVFF  FC4,03
6048 CFC3 F000      08451 MOVFF  FC3,00
604C CFC4 F001      08452 MOVFF  FC4,01
6050 6A02           08453 CLRF   02
6052 6A03           08454 CLRF   03
                    08455 ....................     //return read_adc(); 
                    08456 .................... } 
                    08457 ....................  
                    08458 .................... /* 
                    08459 ....................  * comm.c 
                    08460 ....................  * 
                    08461 ....................  *  Created on: Mar 23, 2017 
                    08462 ....................  *      Author: asaf 
                    08463 ....................  */ 
                    08464 ....................  
                    08465 .................... #include "BA1474.h" 
                    08466 .................... #include <18F45K22.h> 
                    08467 .................... //////// Standard Header file for the PIC18F45K22 device //////////////// 
                    08468 .................... #device PIC18F45K22 
                    09069 .................... #list 
                    09070 ....................  
                    09071 .................... #device adc=10 
                    09072 .................... #device pass_strings=in_ram 
                    09073 ....................  
                    09074 .................... #define LOADER_END 0x1FFF 
                    09075 .................... #include <boot.h> 
                    09076 .................... #undef LOADER_END 
                    09077 .................... #define FLASH_SIZE getenv("FLASH_ERASE_SIZE") 
                    09078 .................... #define LOADER_END   0x1FFF 
                    09079 .................... #define LOADER_SIZE  0x3FF 
                    09080 ....................  
                    09081 .................... #ifndef _bootloader 
                    09082 .................... #build(reset=LOADER_END+1, interrupt=LOADER_END+9) 
                    09083 ....................  
                    09084 .................... /* when in operational software, keep out of the bootloader sections */ 
                    09085 .................... #org 0, 0xfff {} 
                    09086 .................... #org 0x1000, 0x1ffe {} 
                    09087 ....................  
                    09088 .................... #else 
                    09089 ....................  
                    09090 .................... /* when in the bootloader, keep out of the operational sections */ 
                    09091 .................... #org 0x2000, 0x7ffe {} 
                    09092 ....................  
                    09093 .................... #endif 
                    09094 ....................  
                    09095 ....................  
                    09096 .................... #FUSES NOWDT                   //No Watch Dog Timer 
                    09097 .................... #FUSES WDT128                  //Watch Dog Timer uses 1:128 Postscale 
                    09098 .................... #FUSES INTRC_IO                //Internal RC Osc, no CLKOUT 
                    09099 .................... #FUSES NOBROWNOUT              //No brownout reset 
                    09100 .................... #FUSES WDT_SW                  //No Watch Dog Timer, enabled in Software 
                    09101 .................... #FUSES NOLVP                   //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
                    09102 .................... #FUSES NOPUT 
                    09103 .................... #FUSES NOXINST                 //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
                    09104 ....................  
                    09105 .................... #use delay(clock=64000000) 
                    09106 .................... #use rs232(baud=921600,xmit=PIN_C6,rcv=PIN_C7,ERRORS) 
                    09107 .................... #USE TIMER(TIMER=1,TICK=1us,BITS=32,NOISR) 
                    09108 .................... #use spi(DO=PIN_A4, CLK=PIN_A3, ENABLE=PIN_A2, ENABLE_ACTIVE=0, DATA_HOLD=20, BITS=16) 
                    09109 ....................  
                    09110 .................... #opt 9 
                    09111 ....................  
                    09112 .................... #use fast_io(a) 
                    09113 .................... #use fast_io(b) 
                    09114 .................... #use fast_io(c) 
                    09115 .................... #use fast_io(d) 
                    09116 .................... #use fast_io(e) 
                    09117 ....................  
                    09118 .................... #define safe_write_program_memory(address, pointer, size) \ 
                    09119 ....................   do { disable_interrupts(GLOBAL); write_program_memory(address, pointer, size); enable_interrupts(GLOBAL); delay_us(1000); } while (0) 
                    09120 ....................  
                    09121 ....................  
                    09122 ....................  
                    09123 .................... #include <string.h> 
                    09124 .................... //////////////////////////////////////////////////////////////////////////// 
                    09125 .................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
                    09126 .................... //// This source code may only be used by licensed users of the CCS C   //// 
                    09127 .................... //// compiler.  This source code may only be distributed to other       //// 
                    09128 .................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
                    09129 .................... //// or distribution is permitted without written permission.           //// 
                    09130 .................... //// Derivative programs created using this software in object code     //// 
                    09131 .................... //// form are not restricted in any way.                                //// 
                    09132 .................... //////////////////////////////////////////////////////////////////////////// 
                    09133 ....................  
                    09134 .................... #ifndef _STRING 
                    09135 .................... #define _STRING 
                    09136 .................... #include <stddef.h> 
                    09137 .................... /////////////////////////////////////////////////////////////////////////// 
                    09138 .................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
                    09139 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    09140 .................... //// compiler.  This source code may only be distributed to other      //// 
                    09141 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    09142 .................... //// or distribution is permitted without written permission.          //// 
                    09143 .................... //// Derivative programs created using this software in object code    //// 
                    09144 .................... //// form are not restricted in any way.                               //// 
                    09145 .................... /////////////////////////////////////////////////////////////////////////// 
                    09146 ....................  
                    09147 .................... #ifndef _STDDEF 
                    09148 ....................  
                    09149 .................... #define _STDDEF 
                    09150 ....................  
                    09151 .................... #if sizeof(unsigned int8 *)==1 
                    09152 .................... #define ptrdiff_t unsigned int8 
                    09153 .................... #else 
                    09154 .................... #define ptrdiff_t unsigned int16 
                    09155 .................... #endif 
                    09156 ....................  
                    09157 .................... #if defined(__PCB__) 
                    09158 .................... #define size_t unsigned int8 
                    09159 .................... #else 
                    09160 .................... #define size_t unsigned int16 
                    09161 .................... #endif 
                    09162 .................... #define wchar_t char 
                    09163 .................... #define NULL 0 
                    09164 ....................  
                    09165 .................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
                    09166 ....................  
                    09167 .................... #endif 
                    09168 ....................  
                    09169 .................... #include <ctype.h> 
                    09170 .................... //////////////////////////////////////////////////////////////////////////// 
                    09171 .................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
                    09172 .................... //// This source code may only be used by licensed users of the CCS C   //// 
                    09173 .................... //// compiler.  This source code may only be distributed to other       //// 
                    09174 .................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
                    09175 .................... //// or distribution is permitted without written permission.           //// 
                    09176 .................... //// Derivative programs created using this software in object code     //// 
                    09177 .................... //// form are not restricted in any way.                                //// 
                    09178 .................... //////////////////////////////////////////////////////////////////////////// 
                    09179 ....................  
                    09180 .................... #ifndef _CTYPE 
                    09181 .................... #define _CTYPE 
                    09182 ....................  
                    09183 .................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
                    09184 .................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
                    09185 .................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
                    09186 .................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
                    09187 .................... #define isdigit(x)  isamong(x,"0123456789") 
                    09188 .................... #define isspace(x)  ((x)==' ') 
                    09189 .................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
                    09190 .................... #define iscntrl(x)  ((x)<' ') 
                    09191 .................... #define isprint(x)  ((x)>=' ') 
                    09192 .................... #define isgraph(x)  ((x)>' ') 
                    09193 .................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
                    09194 ....................  
                    09195 .................... #endif 
                    09196 ....................  
                    09197 ....................  
                    09198 ....................  
                    09199 ....................  
                    09200 ....................  
                    09201 .................... ////////////////////////////////////////////// 
                    09202 .................... //// Uncomment the following define to    //// 
                    09203 .................... //// allow some functions to use a        //// 
                    09204 .................... //// quicker algorithm, but use more ROM  //// 
                    09205 .................... ////                                      //// 
                    09206 .................... //// #define FASTER_BUT_MORE_ROM          //// 
                    09207 .................... ////////////////////////////////////////////// 
                    09208 ....................  
                    09209 ....................  
                    09210 ....................  
                    09211 .................... /*Copying functions*/ 
                    09212 .................... /* standard template: 
                    09213 ....................    void *memmove(void *s1, void *s2, size_t n). 
                    09214 ....................    Copies max of n characters safely (not following ending '\0') 
                    09215 ....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
                    09216 ....................  
                    09217 .................... char *memmove(void *s1,char *s2,size_t n) 
                    09218 .................... { 
                    09219 ....................    char *sc1; 
                    09220 ....................    char *sc2; 
                    09221 ....................    sc1=s1; 
                    09222 ....................    sc2=s2; 
                    09223 ....................    if(sc2<sc1 && sc1 <sc2 +n) 
                    09224 ....................       for(sc1+=n,sc2+=n;0<n;--n) 
                    09225 ....................          *--sc1=*--sc2; 
                    09226 ....................    else 
                    09227 ....................       for(;0<n;--n) 
                    09228 ....................          *sc1++=*sc2++; 
                    09229 ....................   return s1; 
                    09230 ....................   } 
                    09231 ....................  
                    09232 .................... /* Standard template: char *strcpy(char *s1, const char *s2) 
                    09233 ....................    copies the string s2 including the null character to s1. 
                    09234 ....................    This is a compiler built in to handle the different address 
                    09235 ....................    spaces */ 
                    09236 ....................  
                    09237 .................... #define strcopy strcpy 
                    09238 ....................  
                    09239 .................... /* standard template: 
                    09240 ....................    char *strncpy(char *s1, const char *s2, size_t n). 
                    09241 ....................    Copies max of n characters (not following ending '\0') 
                    09242 ....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
                    09243 ....................  
                    09244 .................... char *strncpy(char *s1, char *s2, size_t n) 
                    09245 .................... { 
                    09246 ....................   char *s; 
                    09247 ....................  
                    09248 ....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
                    09249 ....................      *s++ = *s2++; 
                    09250 ....................   for (; n > 0; n--) 
                    09251 ....................      *s++ = '\0'; 
                    09252 ....................  
                    09253 ....................   return(s1); 
                    09254 .................... } 
                    09255 .................... /***********************************************************/ 
                    09256 ....................  
                    09257 .................... /*concatenation functions*/ 
                    09258 .................... /* standard template: char *strcat(char *s1, const char *s2) 
                    09259 .................... appends s2 to s1*/ 
                    09260 ....................  
                    09261 .................... char *strcat(char *s1, char *s2) 
                    09262 .................... { 
                    09263 ....................    char *s; 
                    09264 ....................  
                    09265 ....................    for (s = s1; *s != '\0'; ++s); 
                    09266 ....................    while(*s2 != '\0') 
                    09267 ....................    { 
                    09268 ....................       *s = *s2; 
                    09269 ....................       ++s; 
                    09270 ....................       ++s2; 
                    09271 ....................    } 
                    09272 ....................  
                    09273 ....................    *s = '\0'; 
                    09274 ....................    return(s1); 
                    09275 .................... } 
                    09276 .................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
                    09277 .................... appends not more than n characters from s2 to s1*/ 
                    09278 ....................  
                    09279 .................... char *strncat(char *s1, char *s2, size_t n) 
                    09280 .................... { 
                    09281 ....................    char *s; 
                    09282 ....................  
                    09283 ....................    for (s = s1; *s != '\0'; ++s); 
                    09284 ....................    while(*s2 != '\0' && 0<n) 
                    09285 ....................    { 
                    09286 ....................       *s = *s2; 
                    09287 ....................       ++s; 
                    09288 ....................       ++s2; 
                    09289 ....................       --n; 
                    09290 ....................    } 
                    09291 ....................  
                    09292 ....................    *s = '\0'; 
                    09293 ....................    return(s1); 
                    09294 .................... } 
                    09295 ....................  
                    09296 .................... /***********************************************************/ 
                    09297 ....................  
                    09298 ....................  
                    09299 .................... /*comparison functions*/ 
                    09300 .................... /* standard template: signed int memcmp(void *s1, void *s2). 
                    09301 ....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
                    09302 ....................  
                    09303 .................... signed int8 memcmp(void * s1,char *s2,size_t n) 
                    09304 .................... { 
                    09305 .................... char *su1, *su2; 
                    09306 .................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
                    09307 .................... { 
                    09308 ....................    if(*su1!=*su2) 
                    09309 ....................       return ((*su1<*su2)?-1:+1); 
                    09310 .................... } 
                    09311 .................... return 0; 
                    09312 .................... } 
                    09313 ....................  
                    09314 .................... /* standard template: int strcmp(const char *s1, const char *s2). 
                    09315 ....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
                    09316 ....................  
                    09317 .................... signed int8 strcmp(char *s1, char *s2) 
                    09318 .................... { 
                    09319 ....................    for (; *s1 == *s2; s1++, s2++) 
                    09320 ....................       if (*s1 == '\0') 
                    09321 ....................          return(0); 
                    09322 ....................    return((*s1 < *s2) ? -1: 1); 
                    09323 .................... } 
                    09324 .................... /* standard template: int strcoll(const char *s1, const char *s2). 
                    09325 ....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
                    09326 ....................  
                    09327 .................... signed int8 strcoll(char *s1, char *s2) 
                    09328 .................... { 
                    09329 ....................    for (; *s1 == *s2; s1++, s2++) 
                    09330 ....................       if (*s1 == '\0') 
                    09331 ....................          return(0); 
                    09332 ....................    return((*s1 < *s2) ? -1: 1); 
                    09333 .................... } 
                    09334 ....................  
                    09335 .................... /* standard template: 
                    09336 ....................    int strncmp(const char *s1, const char *s2, size_t n). 
                    09337 ....................    Compares max of n characters (not following 0) from s1 to s2; 
                    09338 ....................    returns same as strcmp */ 
                    09339 ....................  
                    09340 .................... signed int8 strncmp(char *s1, char *s2, size_t n) 
                    09341 .................... { 
                    09342 ....................    for (; n > 0; s1++, s2++, n--) 
                    09343 ....................       if (*s1 != *s2) 
                    09344 ....................          return((*s1 <*s2) ? -1: 1); 
                    09345 ....................       else if (*s1 == '\0') 
                    09346 ....................          return(0); 
                    09347 ....................    return(0); 
                    09348 .................... } 
                    09349 .................... /* standard template: 
                    09350 ....................    int strxfrm(const char *s1, const char *s2, size_t n). 
                    09351 ....................    transforms maximum of n characters from s2 and places them into s1*/ 
                    09352 .................... size_t strxfrm(char *s1, char *s2, size_t n) 
                    09353 .................... { 
                    09354 ....................   char *s; 
                    09355 ....................   unsigned int8 n1; 
                    09356 ....................   n1=n; 
                    09357 ....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
                    09358 ....................      *s++ = *s2++; 
                    09359 ....................   for (; n > 0; n--) 
                    09360 ....................      *s++ = '\0'; 
                    09361 ....................  
                    09362 ....................   return(n1); 
                    09363 .................... } 
                    09364 ....................  
                    09365 ....................  
                    09366 ....................  
                    09367 ....................  
                    09368 ....................  
                    09369 .................... /***********************************************************/ 
                    09370 .................... /*Search functions*/ 
                    09371 .................... /* standard template: void *memchr(const char *s, int c). 
                    09372 ....................    Finds first occurrence of c in n characters of s */ 
                    09373 ....................  
                    09374 .................... char *memchr(void *s,unsigned int8 c,size_t n) 
                    09375 .................... { 
                    09376 ....................    char uc; 
                    09377 ....................    char *su; 
                    09378 ....................    uc=c; 
                    09379 ....................    for(su=s;0<n;++su,--n) 
                    09380 ....................       if(*su==uc) 
                    09381 ....................       return su; 
                    09382 ....................    return NULL; 
                    09383 .................... } 
                    09384 ....................  
                    09385 .................... /* standard template: char *strchr(const char *s, int c). 
                    09386 ....................    Finds first occurrence of c in s */ 
                    09387 ....................  
                    09388 .................... char *strchr(char *s, unsigned int8 c) 
                    09389 .................... { 
                    09390 ....................    for (; *s != c; s++) 
                    09391 ....................       if (*s == '\0') 
                    09392 ....................          return(0); 
                    09393 ....................    return(s); 
                    09394 .................... } 
                    09395 .................... /* standard template: 
                    09396 ....................    size_t strcspn(const char *s1, const char *s2). 
                    09397 ....................    Computes length of max initial segment of s1 that 
                    09398 ....................    consists entirely of characters NOT from s2*/ 
                    09399 ....................  
                    09400 .................... unsigned int8  strcspn(char *s1, char *s2) 
                    09401 .................... { 
                    09402 ....................    char *sc1, *sc2; 
                    09403 ....................  
                    09404 ....................    for (sc1 = s1; *sc1 != 0; sc1++) 
                    09405 ....................       for (sc2 = s2; *sc2 != 0; sc2++) 
                    09406 ....................          if (*sc1 == *sc2) 
                    09407 ....................             return(sc1 - s1); 
                    09408 ....................    return(sc1 - s1); 
                    09409 .................... } 
                    09410 .................... /* standard template: 
                    09411 ....................    char *strpbrk(const char *s1, const char *s2). 
                    09412 ....................    Locates first occurence of any character from s2 in s1; 
                    09413 ....................    returns s1 if s2 is empty string */ 
                    09414 ....................  
                    09415 .................... char *strpbrk(char *s1, char *s2) 
                    09416 .................... { 
                    09417 ....................    char *sc1, *sc2; 
                    09418 ....................  
                    09419 ....................    for (sc1 = s1; *sc1 != 0; sc1++) 
                    09420 ....................       for (sc2 = s2; *sc2 != 0; sc2++) 
                    09421 ....................          if (*sc1 == *sc2) 
                    09422 ....................             return(sc1); 
                    09423 ....................    return(0); 
                    09424 .................... } 
                    09425 ....................  
                    09426 ....................  
                    09427 .................... /* standard template: char *strrchr(const char *s, int c). 
                    09428 ....................    Finds last occurrence of c in s */ 
                    09429 ....................  
                    09430 .................... char *strrchr(char *s, unsigned int8 c) 
                    09431 .................... { 
                    09432 ....................    char *p; 
                    09433 ....................  
                    09434 ....................    for (p = 0; ; s++) 
                    09435 ....................    { 
                    09436 ....................       if (*s == c) 
                    09437 ....................          p = s; 
                    09438 ....................       if (*s == '\0') 
                    09439 ....................          return(p); 
                    09440 ....................    } 
                    09441 .................... } 
                    09442 .................... /* computes length of max initial segment of s1 consisting 
                    09443 ....................    entirely of characters from s2 */ 
                    09444 ....................  
                    09445 .................... unsigned int8  strspn(char *s1, char *s2) 
                    09446 .................... { 
                    09447 ....................    char *sc1, *sc2; 
                    09448 ....................  
                    09449 ....................    for (sc1 = s1; *sc1 != 0; sc1++) 
                    09450 ....................       for (sc2 = s2; ; sc2++) 
                    09451 ....................     if (*sc2 == '\0') 
                    09452 ....................        return(sc1 - s1); 
                    09453 ....................          else if (*sc1 == *sc2) 
                    09454 ....................             break; 
                    09455 ....................    return(sc1 - s1); 
                    09456 .................... } 
                    09457 .................... /* standard template: 
                    09458 ....................    char *strstr(const char *s1, const char *s2); 
                    09459 ....................    Locates first occurence of character sequence s2 in s1; 
                    09460 ....................    returns 0 if s2 is empty string 
                    09461 ....................  
                    09462 ....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
                    09463 ....................    file to use the faster algorithm */ 
                    09464 .................... char *strstr(char *s1, char *s2) 
                    09465 .................... { 
                    09466 ....................    char *s, *t; 
                    09467 ....................  
                    09468 ....................    #ifdef FASTER_BUT_MORE_ROM 
                    09469 ....................    if (*s2 == '\0') 
                    09470 ....................          return(s1); 
                    09471 ....................    #endif 
                    09472 ....................  
                    09473 ....................    while (*s1) 
                    09474 ....................    { 
                    09475 ....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
                    09476 ....................  
                    09477 ....................       if (*t == '\0') 
                    09478 ....................          return s1; 
                    09479 ....................       ++s1; 
                    09480 ....................       #ifdef FASTER_BUT_MORE_ROM 
                    09481 ....................          while(*s1 != '\0' && *s1 != *s2) 
                    09482 ....................             ++s1; 
                    09483 ....................       #endif 
                    09484 ....................    } 
                    09485 ....................    return 0; 
                    09486 .................... } 
                    09487 ....................  
                    09488 .................... /* standard template: char *strtok(char *s1, const char *s2). 
                    09489 ....................  
                    09490 ....................    Finds next token in s1 delimited by a character from separator 
                    09491 ....................    string s2 (which can be different from call to call).  First call 
                    09492 ....................    starts at beginning of s1 searching for first character NOT 
                    09493 ....................    contained in s2; returns 0 if none is found. 
                    09494 ....................    If one is found, it is the start of first token (return value). 
                    09495 ....................    Function then searches from there for a character contained in s2. 
                    09496 ....................    If none is found, current token extends to end of s1, and subsequent 
                    09497 ....................    searches for a token will return 0.  If one is found, it is 
                    09498 ....................    overwritten by '\0', which terminates current token.  Function saves 
                    09499 ....................    pointer to following character from which next search will start. 
                    09500 ....................    Each subsequent call, with 0 as first argument, starts searching 
                    09501 ....................    from saved pointer */ 
                    09502 ....................  
                    09503 .................... char *strtok(char *s1, char *s2) 
                    09504 .................... { 
                    09505 ....................    char *beg, *end; 
                    09506 ....................    static char *save; 
                    09507 ....................  
                    09508 ....................    beg = (s1)? s1: save; 
                    09509 ....................    beg += strspn(beg, s2); 
                    09510 ....................    if (*beg == '\0') 
                    09511 ....................    { 
                    09512 ....................       *save = ' '; 
                    09513 ....................       return(0); 
                    09514 ....................    } 
                    09515 ....................    end = strpbrk(beg, s2); 
                    09516 ....................    if (*end != '\0') 
                    09517 ....................    { 
                    09518 ....................       *end = '\0'; 
                    09519 ....................       end++; 
                    09520 ....................    } 
                    09521 ....................    save = end; 
                    09522 ....................    return(beg); 
                    09523 .................... } 
                    09524 ....................  
                    09525 .................... /*****************************************************************/ 
                    09526 .................... /*Miscellaneous functions*/ 
                    09527 .................... /* standard template 
                    09528 .................... maps error number in errnum to an error message string 
                    09529 .................... Returns: Pointer to string 
                    09530 .................... */ 
                    09531 .................... #ifdef _ERRNO 
                    09532 .................... char * strerror(unsigned int8 errnum) 
                    09533 .................... { 
                    09534 .................... static char s[13]; 
                    09535 .................... switch( errnum) 
                    09536 .................... { 
                    09537 .................... case 0: 
                    09538 ....................    strcpy(s,"no errors"); 
                    09539 ....................    return s; 
                    09540 .................... case EDOM : 
                    09541 ....................    strcpy(s,"domain error"); 
                    09542 ....................    return s; 
                    09543 .................... case ERANGE: 
                    09544 ....................    strcpy(s,"range error"); 
                    09545 ....................    return s; 
                    09546 .................... } 
                    09547 .................... } 
                    09548 .................... #ENDIF 
                    09549 .................... /* standard template: size_t strlen(const char *s). 
                    09550 ....................    Computes length of s1 (preceding terminating 0) */ 
                    09551 ....................  
                    09552 .................... unsigned int8 strlen(char *s) 
                    09553 .................... { 
                    09554 ....................    char *sc; 
                    09555 ....................  
                    09556 ....................    for (sc = s; *sc != 0; sc++); 
                    09557 ....................    return(sc - s); 
                    09558 .................... } 
                    09559 ....................  
                    09560 .................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
                    09561 ....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
                    09562 ....................  
                    09563 .................... signed int8 stricmp(char *s1, char *s2) 
                    09564 .................... { 
                    09565 ....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
                    09566 ....................     s1++, s2++) 
                    09567 ....................     if (*s1 == '\0') 
                    09568 ....................        return(0); 
                    09569 ....................  return((*s1 < *s2) ? -1: 1); 
                    09570 .................... } 
                    09571 ....................  
                    09572 ....................  
                    09573 .................... /* standard template: char *strlwr(char *s). 
                    09574 ....................    Replaces uppercase letters by lowercase; 
                    09575 ....................    returns pointer to new string s */ 
                    09576 ....................  
                    09577 .................... char *strlwr(char *s) 
                    09578 .................... { 
                    09579 ....................    char *p; 
                    09580 ....................  
                    09581 ....................    for (p = s; *p != '\0'; p++) 
                    09582 ....................       if (*p >= 'A' && *p <='Z') 
                    09583 ....................          *p += 'a' - 'A'; 
                    09584 ....................    return(s); 
                    09585 .................... } 
                    09586 ....................  
                    09587 .................... /* standard template: char *strupr(char *s). 
                    09588 ....................    Replaces lowercase letters by upercase; 
                    09589 ....................    returns pointer to new string s */ 
                    09590 ....................  
                    09591 .................... char *strupr(char *s) 
                    09592 .................... { 
                    09593 ....................    char *p; 
                    09594 ....................  
                    09595 ....................    for (p = s; *p != '\0'; p++) 
                    09596 ....................       if (*p >= 'a' && *p <='z') 
                    09597 ....................          *p -= 'a' - 'A'; 
                    09598 ....................    return(s); 
                    09599 .................... } 
                    09600 ....................  
                    09601 ....................  
                    09602 .................... /************************************************************/ 
                    09603 ....................  
                    09604 ....................  
                    09605 .................... #endif 
                    09606 ....................  
                    09607 .................... #include <stdio.h> 
                    09608 .................... /////////////////////////////////////////////////////////////////////////// 
                    09609 .................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
                    09610 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    09611 .................... //// compiler.  This source code may only be distributed to other      //// 
                    09612 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    09613 .................... //// or distribution is permitted without written permission.          //// 
                    09614 .................... //// Derivative programs created using this software in object code    //// 
                    09615 .................... //// form are not restricted in any way.                               //// 
                    09616 .................... /////////////////////////////////////////////////////////////////////////// 
                    09617 ....................  
                    09618 .................... #ifndef _STDIO 
                    09619 .................... #define _STDIO 
                    09620 .................... #include <string.h> 
                    09621 .................... //////////////////////////////////////////////////////////////////////////// 
                    09622 .................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
                    09623 .................... //// This source code may only be used by licensed users of the CCS C   //// 
                    09624 .................... //// compiler.  This source code may only be distributed to other       //// 
                    09625 .................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
                    09626 .................... //// or distribution is permitted without written permission.           //// 
                    09627 .................... //// Derivative programs created using this software in object code     //// 
                    09628 .................... //// form are not restricted in any way.                                //// 
                    09629 .................... //////////////////////////////////////////////////////////////////////////// 
                    09630 ....................  
                    09631 .................... #ifndef _STRING 
                    09632 .................... #define _STRING 
                    09633 .................... #include <stddef.h> 
                    09634 .................... #include <ctype.h> 
                    09635 ....................  
                    09636 ....................  
                    09637 ....................  
                    09638 .................... ////////////////////////////////////////////// 
                    09639 .................... //// Uncomment the following define to    //// 
                    09640 .................... //// allow some functions to use a        //// 
                    09641 .................... //// quicker algorithm, but use more ROM  //// 
                    09642 .................... ////                                      //// 
                    09643 .................... //// #define FASTER_BUT_MORE_ROM          //// 
                    09644 .................... ////////////////////////////////////////////// 
                    09645 ....................  
                    09646 ....................  
                    09647 ....................  
                    09648 .................... /*Copying functions*/ 
                    09649 .................... /* standard template: 
                    09650 ....................    void *memmove(void *s1, void *s2, size_t n). 
                    09651 ....................    Copies max of n characters safely (not following ending '\0') 
                    09652 ....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
                    09653 ....................  
                    09654 .................... char *memmove(void *s1,char *s2,size_t n) 
                    09655 .................... { 
                    09656 ....................    char *sc1; 
                    09657 ....................    char *sc2; 
                    09658 ....................    sc1=s1; 
                    09659 ....................    sc2=s2; 
                    09660 ....................    if(sc2<sc1 && sc1 <sc2 +n) 
                    09661 ....................       for(sc1+=n,sc2+=n;0<n;--n) 
                    09662 ....................          *--sc1=*--sc2; 
                    09663 ....................    else 
                    09664 ....................       for(;0<n;--n) 
                    09665 ....................          *sc1++=*sc2++; 
                    09666 ....................   return s1; 
                    09667 ....................   } 
                    09668 ....................  
                    09669 .................... /* Standard template: char *strcpy(char *s1, const char *s2) 
                    09670 ....................    copies the string s2 including the null character to s1. 
                    09671 ....................    This is a compiler built in to handle the different address 
                    09672 ....................    spaces */ 
                    09673 ....................  
                    09674 .................... #define strcopy strcpy 
                    09675 ....................  
                    09676 .................... /* standard template: 
                    09677 ....................    char *strncpy(char *s1, const char *s2, size_t n). 
                    09678 ....................    Copies max of n characters (not following ending '\0') 
                    09679 ....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
                    09680 ....................  
                    09681 .................... char *strncpy(char *s1, char *s2, size_t n) 
                    09682 .................... { 
                    09683 ....................   char *s; 
                    09684 ....................  
                    09685 ....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
                    09686 ....................      *s++ = *s2++; 
                    09687 ....................   for (; n > 0; n--) 
                    09688 ....................      *s++ = '\0'; 
                    09689 ....................  
                    09690 ....................   return(s1); 
                    09691 .................... } 
                    09692 .................... /***********************************************************/ 
                    09693 ....................  
                    09694 .................... /*concatenation functions*/ 
                    09695 .................... /* standard template: char *strcat(char *s1, const char *s2) 
                    09696 .................... appends s2 to s1*/ 
                    09697 ....................  
                    09698 .................... char *strcat(char *s1, char *s2) 
                    09699 .................... { 
                    09700 ....................    char *s; 
                    09701 ....................  
                    09702 ....................    for (s = s1; *s != '\0'; ++s); 
                    09703 ....................    while(*s2 != '\0') 
                    09704 ....................    { 
                    09705 ....................       *s = *s2; 
                    09706 ....................       ++s; 
                    09707 ....................       ++s2; 
                    09708 ....................    } 
                    09709 ....................  
                    09710 ....................    *s = '\0'; 
                    09711 ....................    return(s1); 
                    09712 .................... } 
                    09713 .................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
                    09714 .................... appends not more than n characters from s2 to s1*/ 
                    09715 ....................  
                    09716 .................... char *strncat(char *s1, char *s2, size_t n) 
                    09717 .................... { 
                    09718 ....................    char *s; 
                    09719 ....................  
                    09720 ....................    for (s = s1; *s != '\0'; ++s); 
                    09721 ....................    while(*s2 != '\0' && 0<n) 
                    09722 ....................    { 
                    09723 ....................       *s = *s2; 
                    09724 ....................       ++s; 
                    09725 ....................       ++s2; 
                    09726 ....................       --n; 
                    09727 ....................    } 
                    09728 ....................  
                    09729 ....................    *s = '\0'; 
                    09730 ....................    return(s1); 
                    09731 .................... } 
                    09732 ....................  
                    09733 .................... /***********************************************************/ 
                    09734 ....................  
                    09735 ....................  
                    09736 .................... /*comparison functions*/ 
                    09737 .................... /* standard template: signed int memcmp(void *s1, void *s2). 
                    09738 ....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
                    09739 ....................  
                    09740 .................... signed int8 memcmp(void * s1,char *s2,size_t n) 
                    09741 .................... { 
                    09742 .................... char *su1, *su2; 
                    09743 .................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
                    09744 .................... { 
                    09745 ....................    if(*su1!=*su2) 
                    09746 ....................       return ((*su1<*su2)?-1:+1); 
                    09747 .................... } 
                    09748 .................... return 0; 
                    09749 .................... } 
                    09750 ....................  
                    09751 .................... /* standard template: int strcmp(const char *s1, const char *s2). 
                    09752 ....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
                    09753 ....................  
                    09754 .................... signed int8 strcmp(char *s1, char *s2) 
                    09755 .................... { 
                    09756 ....................    for (; *s1 == *s2; s1++, s2++) 
                    09757 ....................       if (*s1 == '\0') 
                    09758 ....................          return(0); 
                    09759 ....................    return((*s1 < *s2) ? -1: 1); 
                    09760 .................... } 
                    09761 .................... /* standard template: int strcoll(const char *s1, const char *s2). 
                    09762 ....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
                    09763 ....................  
                    09764 .................... signed int8 strcoll(char *s1, char *s2) 
                    09765 .................... { 
                    09766 ....................    for (; *s1 == *s2; s1++, s2++) 
                    09767 ....................       if (*s1 == '\0') 
                    09768 ....................          return(0); 
                    09769 ....................    return((*s1 < *s2) ? -1: 1); 
                    09770 .................... } 
                    09771 ....................  
                    09772 .................... /* standard template: 
                    09773 ....................    int strncmp(const char *s1, const char *s2, size_t n). 
                    09774 ....................    Compares max of n characters (not following 0) from s1 to s2; 
                    09775 ....................    returns same as strcmp */ 
                    09776 ....................  
                    09777 .................... signed int8 strncmp(char *s1, char *s2, size_t n) 
                    09778 .................... { 
                    09779 ....................    for (; n > 0; s1++, s2++, n--) 
                    09780 ....................       if (*s1 != *s2) 
                    09781 ....................          return((*s1 <*s2) ? -1: 1); 
                    09782 ....................       else if (*s1 == '\0') 
                    09783 ....................          return(0); 
                    09784 ....................    return(0); 
                    09785 .................... } 
                    09786 .................... /* standard template: 
                    09787 ....................    int strxfrm(const char *s1, const char *s2, size_t n). 
                    09788 ....................    transforms maximum of n characters from s2 and places them into s1*/ 
                    09789 .................... size_t strxfrm(char *s1, char *s2, size_t n) 
                    09790 .................... { 
                    09791 ....................   char *s; 
                    09792 ....................   unsigned int8 n1; 
                    09793 ....................   n1=n; 
                    09794 ....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
                    09795 ....................      *s++ = *s2++; 
                    09796 ....................   for (; n > 0; n--) 
                    09797 ....................      *s++ = '\0'; 
                    09798 ....................  
                    09799 ....................   return(n1); 
                    09800 .................... } 
                    09801 ....................  
                    09802 ....................  
                    09803 ....................  
                    09804 ....................  
                    09805 ....................  
                    09806 .................... /***********************************************************/ 
                    09807 .................... /*Search functions*/ 
                    09808 .................... /* standard template: void *memchr(const char *s, int c). 
                    09809 ....................    Finds first occurrence of c in n characters of s */ 
                    09810 ....................  
                    09811 .................... char *memchr(void *s,unsigned int8 c,size_t n) 
                    09812 .................... { 
                    09813 ....................    char uc; 
                    09814 ....................    char *su; 
                    09815 ....................    uc=c; 
                    09816 ....................    for(su=s;0<n;++su,--n) 
                    09817 ....................       if(*su==uc) 
                    09818 ....................       return su; 
                    09819 ....................    return NULL; 
                    09820 .................... } 
                    09821 ....................  
                    09822 .................... /* standard template: char *strchr(const char *s, int c). 
                    09823 ....................    Finds first occurrence of c in s */ 
                    09824 ....................  
                    09825 .................... char *strchr(char *s, unsigned int8 c) 
                    09826 .................... { 
                    09827 ....................    for (; *s != c; s++) 
                    09828 ....................       if (*s == '\0') 
                    09829 ....................          return(0); 
                    09830 ....................    return(s); 
                    09831 .................... } 
                    09832 .................... /* standard template: 
                    09833 ....................    size_t strcspn(const char *s1, const char *s2). 
                    09834 ....................    Computes length of max initial segment of s1 that 
                    09835 ....................    consists entirely of characters NOT from s2*/ 
                    09836 ....................  
                    09837 .................... unsigned int8  strcspn(char *s1, char *s2) 
                    09838 .................... { 
                    09839 ....................    char *sc1, *sc2; 
                    09840 ....................  
                    09841 ....................    for (sc1 = s1; *sc1 != 0; sc1++) 
                    09842 ....................       for (sc2 = s2; *sc2 != 0; sc2++) 
                    09843 ....................          if (*sc1 == *sc2) 
                    09844 ....................             return(sc1 - s1); 
                    09845 ....................    return(sc1 - s1); 
                    09846 .................... } 
                    09847 .................... /* standard template: 
                    09848 ....................    char *strpbrk(const char *s1, const char *s2). 
                    09849 ....................    Locates first occurence of any character from s2 in s1; 
                    09850 ....................    returns s1 if s2 is empty string */ 
                    09851 ....................  
                    09852 .................... char *strpbrk(char *s1, char *s2) 
                    09853 .................... { 
                    09854 ....................    char *sc1, *sc2; 
                    09855 ....................  
                    09856 ....................    for (sc1 = s1; *sc1 != 0; sc1++) 
                    09857 ....................       for (sc2 = s2; *sc2 != 0; sc2++) 
                    09858 ....................          if (*sc1 == *sc2) 
                    09859 ....................             return(sc1); 
                    09860 ....................    return(0); 
                    09861 .................... } 
                    09862 ....................  
                    09863 ....................  
                    09864 .................... /* standard template: char *strrchr(const char *s, int c). 
                    09865 ....................    Finds last occurrence of c in s */ 
                    09866 ....................  
                    09867 .................... char *strrchr(char *s, unsigned int8 c) 
                    09868 .................... { 
                    09869 ....................    char *p; 
                    09870 ....................  
                    09871 ....................    for (p = 0; ; s++) 
                    09872 ....................    { 
                    09873 ....................       if (*s == c) 
                    09874 ....................          p = s; 
                    09875 ....................       if (*s == '\0') 
                    09876 ....................          return(p); 
                    09877 ....................    } 
                    09878 .................... } 
                    09879 .................... /* computes length of max initial segment of s1 consisting 
                    09880 ....................    entirely of characters from s2 */ 
                    09881 ....................  
                    09882 .................... unsigned int8  strspn(char *s1, char *s2) 
                    09883 .................... { 
                    09884 ....................    char *sc1, *sc2; 
                    09885 ....................  
                    09886 ....................    for (sc1 = s1; *sc1 != 0; sc1++) 
                    09887 ....................       for (sc2 = s2; ; sc2++) 
                    09888 ....................     if (*sc2 == '\0') 
                    09889 ....................        return(sc1 - s1); 
                    09890 ....................          else if (*sc1 == *sc2) 
                    09891 ....................             break; 
                    09892 ....................    return(sc1 - s1); 
                    09893 .................... } 
                    09894 .................... /* standard template: 
                    09895 ....................    char *strstr(const char *s1, const char *s2); 
                    09896 ....................    Locates first occurence of character sequence s2 in s1; 
                    09897 ....................    returns 0 if s2 is empty string 
                    09898 ....................  
                    09899 ....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
                    09900 ....................    file to use the faster algorithm */ 
                    09901 .................... char *strstr(char *s1, char *s2) 
                    09902 .................... { 
                    09903 ....................    char *s, *t; 
                    09904 ....................  
                    09905 ....................    #ifdef FASTER_BUT_MORE_ROM 
                    09906 ....................    if (*s2 == '\0') 
                    09907 ....................          return(s1); 
                    09908 ....................    #endif 
                    09909 ....................  
                    09910 ....................    while (*s1) 
                    09911 ....................    { 
                    09912 ....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
                    09913 ....................  
                    09914 ....................       if (*t == '\0') 
                    09915 ....................          return s1; 
                    09916 ....................       ++s1; 
                    09917 ....................       #ifdef FASTER_BUT_MORE_ROM 
                    09918 ....................          while(*s1 != '\0' && *s1 != *s2) 
                    09919 ....................             ++s1; 
                    09920 ....................       #endif 
                    09921 ....................    } 
                    09922 ....................    return 0; 
                    09923 .................... } 
                    09924 ....................  
                    09925 .................... /* standard template: char *strtok(char *s1, const char *s2). 
                    09926 ....................  
                    09927 ....................    Finds next token in s1 delimited by a character from separator 
                    09928 ....................    string s2 (which can be different from call to call).  First call 
                    09929 ....................    starts at beginning of s1 searching for first character NOT 
                    09930 ....................    contained in s2; returns 0 if none is found. 
                    09931 ....................    If one is found, it is the start of first token (return value). 
                    09932 ....................    Function then searches from there for a character contained in s2. 
                    09933 ....................    If none is found, current token extends to end of s1, and subsequent 
                    09934 ....................    searches for a token will return 0.  If one is found, it is 
                    09935 ....................    overwritten by '\0', which terminates current token.  Function saves 
                    09936 ....................    pointer to following character from which next search will start. 
                    09937 ....................    Each subsequent call, with 0 as first argument, starts searching 
                    09938 ....................    from saved pointer */ 
                    09939 ....................  
                    09940 .................... char *strtok(char *s1, char *s2) 
                    09941 .................... { 
                    09942 ....................    char *beg, *end; 
                    09943 ....................    static char *save; 
                    09944 ....................  
                    09945 ....................    beg = (s1)? s1: save; 
                    09946 ....................    beg += strspn(beg, s2); 
                    09947 ....................    if (*beg == '\0') 
                    09948 ....................    { 
                    09949 ....................       *save = ' '; 
                    09950 ....................       return(0); 
                    09951 ....................    } 
                    09952 ....................    end = strpbrk(beg, s2); 
                    09953 ....................    if (*end != '\0') 
                    09954 ....................    { 
                    09955 ....................       *end = '\0'; 
                    09956 ....................       end++; 
                    09957 ....................    } 
                    09958 ....................    save = end; 
                    09959 ....................    return(beg); 
                    09960 .................... } 
                    09961 ....................  
                    09962 .................... /*****************************************************************/ 
                    09963 .................... /*Miscellaneous functions*/ 
                    09964 .................... /* standard template 
                    09965 .................... maps error number in errnum to an error message string 
                    09966 .................... Returns: Pointer to string 
                    09967 .................... */ 
                    09968 .................... #ifdef _ERRNO 
                    09969 .................... char * strerror(unsigned int8 errnum) 
                    09970 .................... { 
                    09971 .................... static char s[13]; 
                    09972 .................... switch( errnum) 
                    09973 .................... { 
                    09974 .................... case 0: 
                    09975 ....................    strcpy(s,"no errors"); 
                    09976 ....................    return s; 
                    09977 .................... case EDOM : 
                    09978 ....................    strcpy(s,"domain error"); 
                    09979 ....................    return s; 
                    09980 .................... case ERANGE: 
                    09981 ....................    strcpy(s,"range error"); 
                    09982 ....................    return s; 
                    09983 .................... } 
                    09984 .................... } 
                    09985 .................... #ENDIF 
                    09986 .................... /* standard template: size_t strlen(const char *s). 
                    09987 ....................    Computes length of s1 (preceding terminating 0) */ 
                    09988 ....................  
                    09989 .................... unsigned int8 strlen(char *s) 
                    09990 .................... { 
                    09991 ....................    char *sc; 
                    09992 ....................  
                    09993 ....................    for (sc = s; *sc != 0; sc++); 
                    09994 ....................    return(sc - s); 
                    09995 .................... } 
                    09996 ....................  
                    09997 .................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
                    09998 ....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
                    09999 ....................  
                    10000 .................... signed int8 stricmp(char *s1, char *s2) 
                    10001 .................... { 
                    10002 ....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
                    10003 ....................     s1++, s2++) 
                    10004 ....................     if (*s1 == '\0') 
                    10005 ....................        return(0); 
                    10006 ....................  return((*s1 < *s2) ? -1: 1); 
                    10007 .................... } 
                    10008 ....................  
                    10009 ....................  
                    10010 .................... /* standard template: char *strlwr(char *s). 
                    10011 ....................    Replaces uppercase letters by lowercase; 
                    10012 ....................    returns pointer to new string s */ 
                    10013 ....................  
                    10014 .................... char *strlwr(char *s) 
                    10015 .................... { 
                    10016 ....................    char *p; 
                    10017 ....................  
                    10018 ....................    for (p = s; *p != '\0'; p++) 
                    10019 ....................       if (*p >= 'A' && *p <='Z') 
                    10020 ....................          *p += 'a' - 'A'; 
                    10021 ....................    return(s); 
                    10022 .................... } 
                    10023 ....................  
                    10024 .................... /* standard template: char *strupr(char *s). 
                    10025 ....................    Replaces lowercase letters by upercase; 
                    10026 ....................    returns pointer to new string s */ 
                    10027 ....................  
                    10028 .................... char *strupr(char *s) 
                    10029 .................... { 
                    10030 ....................    char *p; 
                    10031 ....................  
                    10032 ....................    for (p = s; *p != '\0'; p++) 
                    10033 ....................       if (*p >= 'a' && *p <='z') 
                    10034 ....................          *p -= 'a' - 'A'; 
                    10035 ....................    return(s); 
                    10036 .................... } 
                    10037 ....................  
                    10038 ....................  
                    10039 .................... /************************************************************/ 
                    10040 ....................  
                    10041 ....................  
                    10042 .................... #endif 
                    10043 ....................  
                    10044 .................... #ifndef getc 
                    10045 .................... #define getc getch 
                    10046 .................... #define getchar getch 
                    10047 .................... #define puts(s) {printf(s); putchar(13); putchar(10);} 
                    10048 .................... #define putc putchar 
                    10049 .................... #endif 
                    10050 .................... /* maps error number to an error message. Writes a sequence of characters to 
                    10051 .................... stderr stream thus: if s is not null then string pointed to by s follwed by 
                    10052 .................... a colon (:) and a space and the appropriate error message returned by strerror 
                    10053 .................... function with argument errno 
                    10054 ....................  
                    10055 .................... Returns: no value 
                    10056 .................... */ 
                    10057 ....................  
                    10058 .................... #ifdef _ERRNO 
                    10059 .................... void perror(char *s) 
                    10060 .................... { 
                    10061 ....................   if(s) 
                    10062 ....................   fprintf(STDERR,"%s: ",s); 
                    10063 ....................   fprintf(STDERR,"%s\r\n",strerror(errno)); 
                    10064 .................... } 
                    10065 .................... #endif 
                    10066 .................... #endif 
                    10067 ....................  
                    10068 .................... #include <stdbool.h> 
                    10069 .................... /////////////////////////////////////////////////////////////////////////// 
                    10070 .................... ////                                                                   //// 
                    10071 .................... ////                          stdbool.h                                //// 
                    10072 .................... ////                                                                   //// 
                    10073 .................... //// Standard boolean definitions                                      //// 
                    10074 .................... ////                                                                   //// 
                    10075 .................... /////////////////////////////////////////////////////////////////////////// 
                    10076 .................... ////        (C) Copyright 1996,2012 Custom Computer Services           //// 
                    10077 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    10078 .................... //// compiler.  This source code may only be distributed to other      //// 
                    10079 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    10080 .................... //// or distribution is permitted without written permission.          //// 
                    10081 .................... //// Derivative programs created using this software in object code    //// 
                    10082 .................... //// form are not restricted in any way.                               //// 
                    10083 .................... /////////////////////////////////////////////////////////////////////////// 
                    10084 ....................  
                    10085 .................... #ifndef __STDBOOL_H__ 
                    10086 .................... #define __STDBOOL_H__ 
                    10087 ....................  
                    10088 .................... //remove TRUE and FALSE added by CCS's device .h file 
                    10089 .................... #if defined(TRUE) 
                    10090 .................... #undef TRUE 
                    10091 .................... #endif 
                    10092 .................... #if defined(FALSE) 
                    10093 .................... #undef FALSE 
                    10094 .................... #endif 
                    10095 ....................  
                    10096 .................... typedef int1   bool; 
                    10097 .................... #define true   1 
                    10098 .................... #define false  0 
                    10099 .................... #define __bool_true_false_are_defined  1 
                    10100 ....................  
                    10101 .................... #endif 
                    10102 ....................  
                    10103 ....................  
                    10104 .................... #include "comm.h" 
                    10105 .................... /* 
                    10106 ....................  * comm.h 
                    10107 ....................  * 
                    10108 ....................  *  Created on: Mar 23, 2017 
                    10109 ....................  *      Author: asaf 
                    10110 ....................  */ 
                    10111 ....................  
                    10112 .................... #ifndef COMM_H_ 
                    10113 .................... #define COMM_H_ 
                    10114 ....................  
                    10115 .................... #include <stdint.h> 
                    10116 .................... /////////////////////////////////////////////////////////////////////////// 
                    10117 .................... ////                                                                   //// 
                    10118 .................... ////                           stdint.h                                //// 
                    10119 .................... ////                                                                   //// 
                    10120 .................... //// Standard integer definitions.                                     //// 
                    10121 .................... ////                                                                   //// 
                    10122 .................... /////////////////////////////////////////////////////////////////////////// 
                    10123 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    10124 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    10125 .................... //// compiler.  This source code may only be distributed to other      //// 
                    10126 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    10127 .................... //// or distribution is permitted without written permission.          //// 
                    10128 .................... //// Derivative programs created using this software in object code    //// 
                    10129 .................... //// form are not restricted in any way.                               //// 
                    10130 .................... /////////////////////////////////////////////////////////////////////////// 
                    10131 ....................  
                    10132 .................... #ifndef _STDINT 
                    10133 ....................  
                    10134 .................... #define _STDINT 
                    10135 ....................  
                    10136 .................... //////////// exact width 
                    10137 ....................  
                    10138 .................... typedef signed int8 int8_t; 
                    10139 .................... typedef unsigned int8 uint8_t; 
                    10140 .................... typedef signed int16 int16_t; 
                    10141 .................... typedef unsigned int16 uint16_t; 
                    10142 .................... typedef signed int32 int32_t; 
                    10143 .................... typedef unsigned int32 uint32_t; 
                    10144 ....................  
                    10145 .................... #if defined(__PCD__) 
                    10146 .................... //typedef signed int24 int24_t; 
                    10147 .................... //typedef unsigned int24 uint24_t; 
                    10148 .................... typedef signed int64 int64_t; 
                    10149 .................... typedef unsigned int64 uint64_t; 
                    10150 .................... #endif 
                    10151 ....................  
                    10152 .................... #define INT8_MAX  (128) 
                    10153 .................... #define INT8_MIN  (-127) 
                    10154 .................... #define UINT8_MAX (255) 
                    10155 ....................  
                    10156 .................... #define INT16_MAX  (32767) 
                    10157 .................... #define INT16_MIN  (-32768) 
                    10158 .................... #define UINT16_MAX (65535) 
                    10159 ....................  
                    10160 .................... #define INT32_MAX  (2147483647) 
                    10161 .................... #define INT32_MIN  (-2147483648) 
                    10162 .................... #define UINT32_MAX (4294967295) 
                    10163 ....................  
                    10164 .................... #if defined(__PCD__) 
                    10165 .................... //#define INT24_MAX  (8388607) 
                    10166 .................... //#define INT24_MIN  (-8388608) 
                    10167 .................... //#define UINT24_MAX (16777215) 
                    10168 ....................  
                    10169 .................... #define INT64_MAX  (9223372036854775807) 
                    10170 .................... #define INT64_MIN  (-9223372036854775808) 
                    10171 .................... #define UINT64_MAX (18446744073709551615) 
                    10172 .................... #endif 
                    10173 ....................  
                    10174 .................... ///////// minimum width 
                    10175 ....................  
                    10176 .................... typedef signed int8 int_least8_t; 
                    10177 .................... typedef unsigned int8 uint_least8_t; 
                    10178 .................... typedef signed int16 int_least16_t; 
                    10179 .................... typedef unsigned int16 uint_least16_t; 
                    10180 .................... typedef signed int32 int_least32_t; 
                    10181 .................... typedef unsigned int32 uint_least32_t; 
                    10182 ....................  
                    10183 .................... #if defined(__PCD__) 
                    10184 .................... //typedef signed int24 int_least24_t; 
                    10185 .................... //typedef unsigned int24 uint_least24_t; 
                    10186 .................... typedef signed int64 int_least64_t; 
                    10187 .................... typedef unsigned int64 uint_least64_t; 
                    10188 .................... #endif 
                    10189 ....................  
                    10190 .................... #define INT_LEAST8_MAX  (128) 
                    10191 .................... #define INT_LEAST8_MIN  (-127) 
                    10192 .................... #define UINT_LEAST8_MAX (255) 
                    10193 ....................  
                    10194 .................... #define INT_LEAST16_MAX  (32767) 
                    10195 .................... #define INT_LEAST16_MIN  (-32768) 
                    10196 .................... #define UINT_LEAST16_MAX (65535) 
                    10197 ....................  
                    10198 .................... #define INT_LEAST32_MAX  (2147483647) 
                    10199 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    10200 .................... #define UINT_LEAST32_MAX (4294967295) 
                    10201 ....................  
                    10202 .................... #if defined(__PCD__) 
                    10203 .................... //#define INT_LEAST24_MAX  (8388607) 
                    10204 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    10205 .................... //#define UINT_LEAST24_MAX (16777215) 
                    10206 ....................  
                    10207 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    10208 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    10209 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    10210 .................... #endif 
                    10211 ....................  
                    10212 .................... ///////// fastest width 
                    10213 ....................  
                    10214 .................... #if defined(__PCD__) 
                    10215 .................... typedef signed int16 int_fast8_t; 
                    10216 .................... typedef unsigned int16 uint_fast8_t; 
                    10217 .................... #define INT_FAST8_MAX  (32767) 
                    10218 .................... #define INT_FAST8_MIN  (-32768) 
                    10219 .................... #define UINT_FAST8_MAX (65535) 
                    10220 .................... typedef signed int16 int_fast16_t; 
                    10221 .................... typedef unsigned int16 uint_fast16_t; 
                    10222 .................... //typedef signed int24 int_fast24_t; 
                    10223 .................... //typedef unsigned int24 uint_fast24_t; 
                    10224 .................... typedef signed int64 int_fast64_t; 
                    10225 .................... typedef unsigned int64 uint_fast64_t; 
                    10226 .................... #else 
                    10227 .................... typedef signed int8 int_fast8_t; 
                    10228 .................... typedef unsigned int8 uint_fast8_t; 
                    10229 .................... #define INT_FAST8_MAX  (128) 
                    10230 .................... #define INT_FAST8_MIN  (-127) 
                    10231 .................... #define UINT_FAST8_MAX (255) 
                    10232 .................... typedef signed int16 int_fast16_t; 
                    10233 .................... typedef unsigned int16 uint_fast16_t; 
                    10234 .................... #endif 
                    10235 ....................  
                    10236 .................... typedef signed int32 int_fast32_t; 
                    10237 .................... typedef unsigned int32 uint_fast32_t; 
                    10238 ....................  
                    10239 .................... #define INT_FAST16_MAX  (32767) 
                    10240 .................... #define INT_FAST16_MIN  (-32768) 
                    10241 .................... #define UINT_FAST16_MAX (65535) 
                    10242 ....................  
                    10243 .................... #define INT_FAST32_MAX  (2147483647) 
                    10244 .................... #define INT_FAST32_MIN  (-2147483648) 
                    10245 .................... #define UINT_FAST32_MAX (4294967295) 
                    10246 ....................  
                    10247 .................... #if defined(__PCD__) 
                    10248 .................... //#define INT_FAST24_MAX  (8388607) 
                    10249 .................... //#define INT_FAST24_MIN  (-8388608) 
                    10250 .................... //#define UINT_FAST24_MAX (16777215) 
                    10251 ....................  
                    10252 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    10253 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    10254 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    10255 .................... #endif 
                    10256 ....................  
                    10257 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    10258 ....................  
                    10259 .................... /// TODO 
                    10260 ....................  
                    10261 .................... /// intptr_t uintptr_t 
                    10262 ....................  
                    10263 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    10264 ....................  
                    10265 ....................  
                    10266 .................... /////////// greatest width (OPTIONAL) 
                    10267 ....................  
                    10268 .................... /// TODO 
                    10269 ....................  
                    10270 .................... /// intmax_t uintmax_t 
                    10271 ....................  
                    10272 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    10273 ....................  
                    10274 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    10275 ....................  
                    10276 ....................  
                    10277 .................... #endif 
                    10278 ....................  
                    10279 .................... #include <stdbool.h> 
                    10280 .................... /////////////////////////////////////////////////////////////////////////// 
                    10281 .................... ////                                                                   //// 
                    10282 .................... ////                          stdbool.h                                //// 
                    10283 .................... ////                                                                   //// 
                    10284 .................... //// Standard boolean definitions                                      //// 
                    10285 .................... ////                                                                   //// 
                    10286 .................... /////////////////////////////////////////////////////////////////////////// 
                    10287 .................... ////        (C) Copyright 1996,2012 Custom Computer Services           //// 
                    10288 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    10289 .................... //// compiler.  This source code may only be distributed to other      //// 
                    10290 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    10291 .................... //// or distribution is permitted without written permission.          //// 
                    10292 .................... //// Derivative programs created using this software in object code    //// 
                    10293 .................... //// form are not restricted in any way.                               //// 
                    10294 .................... /////////////////////////////////////////////////////////////////////////// 
                    10295 ....................  
                    10296 .................... #ifndef __STDBOOL_H__ 
                    10297 .................... #define __STDBOOL_H__ 
                    10298 ....................  
                    10299 .................... //remove TRUE and FALSE added by CCS's device .h file 
                    10300 .................... #if defined(TRUE) 
                    10301 .................... #undef TRUE 
                    10302 .................... #endif 
                    10303 .................... #if defined(FALSE) 
                    10304 .................... #undef FALSE 
                    10305 .................... #endif 
                    10306 ....................  
                    10307 .................... typedef int1   bool; 
                    10308 .................... #define true   1 
                    10309 .................... #define false  0 
                    10310 .................... #define __bool_true_false_are_defined  1 
                    10311 ....................  
                    10312 .................... #endif 
                    10313 ....................  
                    10314 ....................  
                    10315 .................... #define MSG_MAX_MESSAGE_LEN 80 
                    10316 ....................  
                    10317 .................... #ifndef MIN 
                    10318 .................... #define MIN(x,y) ((x)<(y)?(x):(y)) 
                    10319 .................... #endif 
                    10320 .................... #ifndef MAX 
                    10321 .................... #define	MAX(a,b) (((a)>(b))?(a):(b)) 
                    10322 .................... #endif 
                    10323 ....................  
                    10324 .................... #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0])) 
                    10325 .................... #define MAX_INDEX_IN_ARRAY(x) (ARRAY_SIZE(x)-1) 
                    10326 ....................  
                    10327 .................... void comm_init(); 
                    10328 .................... bool comm_receive_message(void* buffer, uint16_t* size); 
                    10329 .................... void comm_send_message(void* buffer, uint16_t size); 
                    10330 ....................  
                    10331 ....................  
                    10332 ....................  
                    10333 .................... #endif /* COMM_H_ */ 
                    10334 ....................  
                    10335 .................... #include "uart.h" 
                    10336 .................... /* 
                    10337 ....................  * uart.h 
                    10338 ....................  * 
                    10339 ....................  *  Created on: Mar 23, 2017 
                    10340 ....................  *      Author: asaf 
                    10341 ....................  */ 
                    10342 ....................  
                    10343 .................... #ifndef UART_H_ 
                    10344 .................... #define UART_H_ 
                    10345 ....................  
                    10346 .................... #include <stdint.h> 
                    10347 .................... /////////////////////////////////////////////////////////////////////////// 
                    10348 .................... ////                                                                   //// 
                    10349 .................... ////                           stdint.h                                //// 
                    10350 .................... ////                                                                   //// 
                    10351 .................... //// Standard integer definitions.                                     //// 
                    10352 .................... ////                                                                   //// 
                    10353 .................... /////////////////////////////////////////////////////////////////////////// 
                    10354 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    10355 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    10356 .................... //// compiler.  This source code may only be distributed to other      //// 
                    10357 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    10358 .................... //// or distribution is permitted without written permission.          //// 
                    10359 .................... //// Derivative programs created using this software in object code    //// 
                    10360 .................... //// form are not restricted in any way.                               //// 
                    10361 .................... /////////////////////////////////////////////////////////////////////////// 
                    10362 ....................  
                    10363 .................... #ifndef _STDINT 
                    10364 ....................  
                    10365 .................... #define _STDINT 
                    10366 ....................  
                    10367 .................... //////////// exact width 
                    10368 ....................  
                    10369 .................... typedef signed int8 int8_t; 
                    10370 .................... typedef unsigned int8 uint8_t; 
                    10371 .................... typedef signed int16 int16_t; 
                    10372 .................... typedef unsigned int16 uint16_t; 
                    10373 .................... typedef signed int32 int32_t; 
                    10374 .................... typedef unsigned int32 uint32_t; 
                    10375 ....................  
                    10376 .................... #if defined(__PCD__) 
                    10377 .................... //typedef signed int24 int24_t; 
                    10378 .................... //typedef unsigned int24 uint24_t; 
                    10379 .................... typedef signed int64 int64_t; 
                    10380 .................... typedef unsigned int64 uint64_t; 
                    10381 .................... #endif 
                    10382 ....................  
                    10383 .................... #define INT8_MAX  (128) 
                    10384 .................... #define INT8_MIN  (-127) 
                    10385 .................... #define UINT8_MAX (255) 
                    10386 ....................  
                    10387 .................... #define INT16_MAX  (32767) 
                    10388 .................... #define INT16_MIN  (-32768) 
                    10389 .................... #define UINT16_MAX (65535) 
                    10390 ....................  
                    10391 .................... #define INT32_MAX  (2147483647) 
                    10392 .................... #define INT32_MIN  (-2147483648) 
                    10393 .................... #define UINT32_MAX (4294967295) 
                    10394 ....................  
                    10395 .................... #if defined(__PCD__) 
                    10396 .................... //#define INT24_MAX  (8388607) 
                    10397 .................... //#define INT24_MIN  (-8388608) 
                    10398 .................... //#define UINT24_MAX (16777215) 
                    10399 ....................  
                    10400 .................... #define INT64_MAX  (9223372036854775807) 
                    10401 .................... #define INT64_MIN  (-9223372036854775808) 
                    10402 .................... #define UINT64_MAX (18446744073709551615) 
                    10403 .................... #endif 
                    10404 ....................  
                    10405 .................... ///////// minimum width 
                    10406 ....................  
                    10407 .................... typedef signed int8 int_least8_t; 
                    10408 .................... typedef unsigned int8 uint_least8_t; 
                    10409 .................... typedef signed int16 int_least16_t; 
                    10410 .................... typedef unsigned int16 uint_least16_t; 
                    10411 .................... typedef signed int32 int_least32_t; 
                    10412 .................... typedef unsigned int32 uint_least32_t; 
                    10413 ....................  
                    10414 .................... #if defined(__PCD__) 
                    10415 .................... //typedef signed int24 int_least24_t; 
                    10416 .................... //typedef unsigned int24 uint_least24_t; 
                    10417 .................... typedef signed int64 int_least64_t; 
                    10418 .................... typedef unsigned int64 uint_least64_t; 
                    10419 .................... #endif 
                    10420 ....................  
                    10421 .................... #define INT_LEAST8_MAX  (128) 
                    10422 .................... #define INT_LEAST8_MIN  (-127) 
                    10423 .................... #define UINT_LEAST8_MAX (255) 
                    10424 ....................  
                    10425 .................... #define INT_LEAST16_MAX  (32767) 
                    10426 .................... #define INT_LEAST16_MIN  (-32768) 
                    10427 .................... #define UINT_LEAST16_MAX (65535) 
                    10428 ....................  
                    10429 .................... #define INT_LEAST32_MAX  (2147483647) 
                    10430 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    10431 .................... #define UINT_LEAST32_MAX (4294967295) 
                    10432 ....................  
                    10433 .................... #if defined(__PCD__) 
                    10434 .................... //#define INT_LEAST24_MAX  (8388607) 
                    10435 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    10436 .................... //#define UINT_LEAST24_MAX (16777215) 
                    10437 ....................  
                    10438 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    10439 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    10440 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    10441 .................... #endif 
                    10442 ....................  
                    10443 .................... ///////// fastest width 
                    10444 ....................  
                    10445 .................... #if defined(__PCD__) 
                    10446 .................... typedef signed int16 int_fast8_t; 
                    10447 .................... typedef unsigned int16 uint_fast8_t; 
                    10448 .................... #define INT_FAST8_MAX  (32767) 
                    10449 .................... #define INT_FAST8_MIN  (-32768) 
                    10450 .................... #define UINT_FAST8_MAX (65535) 
                    10451 .................... typedef signed int16 int_fast16_t; 
                    10452 .................... typedef unsigned int16 uint_fast16_t; 
                    10453 .................... //typedef signed int24 int_fast24_t; 
                    10454 .................... //typedef unsigned int24 uint_fast24_t; 
                    10455 .................... typedef signed int64 int_fast64_t; 
                    10456 .................... typedef unsigned int64 uint_fast64_t; 
                    10457 .................... #else 
                    10458 .................... typedef signed int8 int_fast8_t; 
                    10459 .................... typedef unsigned int8 uint_fast8_t; 
                    10460 .................... #define INT_FAST8_MAX  (128) 
                    10461 .................... #define INT_FAST8_MIN  (-127) 
                    10462 .................... #define UINT_FAST8_MAX (255) 
                    10463 .................... typedef signed int16 int_fast16_t; 
                    10464 .................... typedef unsigned int16 uint_fast16_t; 
                    10465 .................... #endif 
                    10466 ....................  
                    10467 .................... typedef signed int32 int_fast32_t; 
                    10468 .................... typedef unsigned int32 uint_fast32_t; 
                    10469 ....................  
                    10470 .................... #define INT_FAST16_MAX  (32767) 
                    10471 .................... #define INT_FAST16_MIN  (-32768) 
                    10472 .................... #define UINT_FAST16_MAX (65535) 
                    10473 ....................  
                    10474 .................... #define INT_FAST32_MAX  (2147483647) 
                    10475 .................... #define INT_FAST32_MIN  (-2147483648) 
                    10476 .................... #define UINT_FAST32_MAX (4294967295) 
                    10477 ....................  
                    10478 .................... #if defined(__PCD__) 
                    10479 .................... //#define INT_FAST24_MAX  (8388607) 
                    10480 .................... //#define INT_FAST24_MIN  (-8388608) 
                    10481 .................... //#define UINT_FAST24_MAX (16777215) 
                    10482 ....................  
                    10483 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    10484 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    10485 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    10486 .................... #endif 
                    10487 ....................  
                    10488 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    10489 ....................  
                    10490 .................... /// TODO 
                    10491 ....................  
                    10492 .................... /// intptr_t uintptr_t 
                    10493 ....................  
                    10494 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    10495 ....................  
                    10496 ....................  
                    10497 .................... /////////// greatest width (OPTIONAL) 
                    10498 ....................  
                    10499 .................... /// TODO 
                    10500 ....................  
                    10501 .................... /// intmax_t uintmax_t 
                    10502 ....................  
                    10503 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    10504 ....................  
                    10505 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    10506 ....................  
                    10507 ....................  
                    10508 .................... #endif 
                    10509 ....................  
                    10510 .................... #include <stddef.h> 
                    10511 .................... /////////////////////////////////////////////////////////////////////////// 
                    10512 .................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
                    10513 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    10514 .................... //// compiler.  This source code may only be distributed to other      //// 
                    10515 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    10516 .................... //// or distribution is permitted without written permission.          //// 
                    10517 .................... //// Derivative programs created using this software in object code    //// 
                    10518 .................... //// form are not restricted in any way.                               //// 
                    10519 .................... /////////////////////////////////////////////////////////////////////////// 
                    10520 ....................  
                    10521 .................... #ifndef _STDDEF 
                    10522 ....................  
                    10523 .................... #define _STDDEF 
                    10524 ....................  
                    10525 .................... #if sizeof(unsigned int8 *)==1 
                    10526 .................... #define ptrdiff_t unsigned int8 
                    10527 .................... #else 
                    10528 .................... #define ptrdiff_t unsigned int16 
                    10529 .................... #endif 
                    10530 ....................  
                    10531 .................... #if defined(__PCB__) 
                    10532 .................... #define size_t unsigned int8 
                    10533 .................... #else 
                    10534 .................... #define size_t unsigned int16 
                    10535 .................... #endif 
                    10536 .................... #define wchar_t char 
                    10537 .................... #define NULL 0 
                    10538 ....................  
                    10539 .................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
                    10540 ....................  
                    10541 .................... #endif 
                    10542 ....................  
                    10543 ....................  
                    10544 .................... void uart_init(); 
                    10545 .................... void uart_disable(); 
                    10546 .................... uint8_t uart_get_byte_blocking(); 
                    10547 .................... uint8_t uart_get_byte_nonblocking(uint8_t *dst); 
                    10548 .................... void uart_send(void* buffer, uint8_t size); 
                    10549 .................... void uart_clear_errors(); 
                    10550 ....................  
                    10551 .................... #endif /* UART_H_ */ 
                    10552 ....................  
                    10553 .................... #include "message.h" 
                    10554 .................... /* 
                    10555 ....................  * message.h 
                    10556 ....................  * 
                    10557 ....................  *  Created on: Mar 23, 2017 
                    10558 ....................  *      Author: asaf 
                    10559 ....................  */ 
                    10560 ....................  
                    10561 .................... #ifndef MESSAGE_H_ 
                    10562 .................... #define MESSAGE_H_ 
                    10563 ....................  
                    10564 .................... #include <stdint.h> 
                    10565 .................... /////////////////////////////////////////////////////////////////////////// 
                    10566 .................... ////                                                                   //// 
                    10567 .................... ////                           stdint.h                                //// 
                    10568 .................... ////                                                                   //// 
                    10569 .................... //// Standard integer definitions.                                     //// 
                    10570 .................... ////                                                                   //// 
                    10571 .................... /////////////////////////////////////////////////////////////////////////// 
                    10572 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    10573 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    10574 .................... //// compiler.  This source code may only be distributed to other      //// 
                    10575 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    10576 .................... //// or distribution is permitted without written permission.          //// 
                    10577 .................... //// Derivative programs created using this software in object code    //// 
                    10578 .................... //// form are not restricted in any way.                               //// 
                    10579 .................... /////////////////////////////////////////////////////////////////////////// 
                    10580 ....................  
                    10581 .................... #ifndef _STDINT 
                    10582 ....................  
                    10583 .................... #define _STDINT 
                    10584 ....................  
                    10585 .................... //////////// exact width 
                    10586 ....................  
                    10587 .................... typedef signed int8 int8_t; 
                    10588 .................... typedef unsigned int8 uint8_t; 
                    10589 .................... typedef signed int16 int16_t; 
                    10590 .................... typedef unsigned int16 uint16_t; 
                    10591 .................... typedef signed int32 int32_t; 
                    10592 .................... typedef unsigned int32 uint32_t; 
                    10593 ....................  
                    10594 .................... #if defined(__PCD__) 
                    10595 .................... //typedef signed int24 int24_t; 
                    10596 .................... //typedef unsigned int24 uint24_t; 
                    10597 .................... typedef signed int64 int64_t; 
                    10598 .................... typedef unsigned int64 uint64_t; 
                    10599 .................... #endif 
                    10600 ....................  
                    10601 .................... #define INT8_MAX  (128) 
                    10602 .................... #define INT8_MIN  (-127) 
                    10603 .................... #define UINT8_MAX (255) 
                    10604 ....................  
                    10605 .................... #define INT16_MAX  (32767) 
                    10606 .................... #define INT16_MIN  (-32768) 
                    10607 .................... #define UINT16_MAX (65535) 
                    10608 ....................  
                    10609 .................... #define INT32_MAX  (2147483647) 
                    10610 .................... #define INT32_MIN  (-2147483648) 
                    10611 .................... #define UINT32_MAX (4294967295) 
                    10612 ....................  
                    10613 .................... #if defined(__PCD__) 
                    10614 .................... //#define INT24_MAX  (8388607) 
                    10615 .................... //#define INT24_MIN  (-8388608) 
                    10616 .................... //#define UINT24_MAX (16777215) 
                    10617 ....................  
                    10618 .................... #define INT64_MAX  (9223372036854775807) 
                    10619 .................... #define INT64_MIN  (-9223372036854775808) 
                    10620 .................... #define UINT64_MAX (18446744073709551615) 
                    10621 .................... #endif 
                    10622 ....................  
                    10623 .................... ///////// minimum width 
                    10624 ....................  
                    10625 .................... typedef signed int8 int_least8_t; 
                    10626 .................... typedef unsigned int8 uint_least8_t; 
                    10627 .................... typedef signed int16 int_least16_t; 
                    10628 .................... typedef unsigned int16 uint_least16_t; 
                    10629 .................... typedef signed int32 int_least32_t; 
                    10630 .................... typedef unsigned int32 uint_least32_t; 
                    10631 ....................  
                    10632 .................... #if defined(__PCD__) 
                    10633 .................... //typedef signed int24 int_least24_t; 
                    10634 .................... //typedef unsigned int24 uint_least24_t; 
                    10635 .................... typedef signed int64 int_least64_t; 
                    10636 .................... typedef unsigned int64 uint_least64_t; 
                    10637 .................... #endif 
                    10638 ....................  
                    10639 .................... #define INT_LEAST8_MAX  (128) 
                    10640 .................... #define INT_LEAST8_MIN  (-127) 
                    10641 .................... #define UINT_LEAST8_MAX (255) 
                    10642 ....................  
                    10643 .................... #define INT_LEAST16_MAX  (32767) 
                    10644 .................... #define INT_LEAST16_MIN  (-32768) 
                    10645 .................... #define UINT_LEAST16_MAX (65535) 
                    10646 ....................  
                    10647 .................... #define INT_LEAST32_MAX  (2147483647) 
                    10648 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    10649 .................... #define UINT_LEAST32_MAX (4294967295) 
                    10650 ....................  
                    10651 .................... #if defined(__PCD__) 
                    10652 .................... //#define INT_LEAST24_MAX  (8388607) 
                    10653 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    10654 .................... //#define UINT_LEAST24_MAX (16777215) 
                    10655 ....................  
                    10656 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    10657 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    10658 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    10659 .................... #endif 
                    10660 ....................  
                    10661 .................... ///////// fastest width 
                    10662 ....................  
                    10663 .................... #if defined(__PCD__) 
                    10664 .................... typedef signed int16 int_fast8_t; 
                    10665 .................... typedef unsigned int16 uint_fast8_t; 
                    10666 .................... #define INT_FAST8_MAX  (32767) 
                    10667 .................... #define INT_FAST8_MIN  (-32768) 
                    10668 .................... #define UINT_FAST8_MAX (65535) 
                    10669 .................... typedef signed int16 int_fast16_t; 
                    10670 .................... typedef unsigned int16 uint_fast16_t; 
                    10671 .................... //typedef signed int24 int_fast24_t; 
                    10672 .................... //typedef unsigned int24 uint_fast24_t; 
                    10673 .................... typedef signed int64 int_fast64_t; 
                    10674 .................... typedef unsigned int64 uint_fast64_t; 
                    10675 .................... #else 
                    10676 .................... typedef signed int8 int_fast8_t; 
                    10677 .................... typedef unsigned int8 uint_fast8_t; 
                    10678 .................... #define INT_FAST8_MAX  (128) 
                    10679 .................... #define INT_FAST8_MIN  (-127) 
                    10680 .................... #define UINT_FAST8_MAX (255) 
                    10681 .................... typedef signed int16 int_fast16_t; 
                    10682 .................... typedef unsigned int16 uint_fast16_t; 
                    10683 .................... #endif 
                    10684 ....................  
                    10685 .................... typedef signed int32 int_fast32_t; 
                    10686 .................... typedef unsigned int32 uint_fast32_t; 
                    10687 ....................  
                    10688 .................... #define INT_FAST16_MAX  (32767) 
                    10689 .................... #define INT_FAST16_MIN  (-32768) 
                    10690 .................... #define UINT_FAST16_MAX (65535) 
                    10691 ....................  
                    10692 .................... #define INT_FAST32_MAX  (2147483647) 
                    10693 .................... #define INT_FAST32_MIN  (-2147483648) 
                    10694 .................... #define UINT_FAST32_MAX (4294967295) 
                    10695 ....................  
                    10696 .................... #if defined(__PCD__) 
                    10697 .................... //#define INT_FAST24_MAX  (8388607) 
                    10698 .................... //#define INT_FAST24_MIN  (-8388608) 
                    10699 .................... //#define UINT_FAST24_MAX (16777215) 
                    10700 ....................  
                    10701 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    10702 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    10703 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    10704 .................... #endif 
                    10705 ....................  
                    10706 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    10707 ....................  
                    10708 .................... /// TODO 
                    10709 ....................  
                    10710 .................... /// intptr_t uintptr_t 
                    10711 ....................  
                    10712 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    10713 ....................  
                    10714 ....................  
                    10715 .................... /////////// greatest width (OPTIONAL) 
                    10716 ....................  
                    10717 .................... /// TODO 
                    10718 ....................  
                    10719 .................... /// intmax_t uintmax_t 
                    10720 ....................  
                    10721 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    10722 ....................  
                    10723 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    10724 ....................  
                    10725 ....................  
                    10726 .................... #endif 
                    10727 ....................  
                    10728 .................... #include "calibration.h" 
                    10729 .................... #ifndef CALIBRATION_H_ 
                    10730 .................... #define CALIBRATION_H_ 
                    10731 ....................  
                    10732 .................... #include <stdint.h> 
                    10733 .................... /////////////////////////////////////////////////////////////////////////// 
                    10734 .................... ////                                                                   //// 
                    10735 .................... ////                           stdint.h                                //// 
                    10736 .................... ////                                                                   //// 
                    10737 .................... //// Standard integer definitions.                                     //// 
                    10738 .................... ////                                                                   //// 
                    10739 .................... /////////////////////////////////////////////////////////////////////////// 
                    10740 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    10741 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    10742 .................... //// compiler.  This source code may only be distributed to other      //// 
                    10743 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    10744 .................... //// or distribution is permitted without written permission.          //// 
                    10745 .................... //// Derivative programs created using this software in object code    //// 
                    10746 .................... //// form are not restricted in any way.                               //// 
                    10747 .................... /////////////////////////////////////////////////////////////////////////// 
                    10748 ....................  
                    10749 .................... #ifndef _STDINT 
                    10750 ....................  
                    10751 .................... #define _STDINT 
                    10752 ....................  
                    10753 .................... //////////// exact width 
                    10754 ....................  
                    10755 .................... typedef signed int8 int8_t; 
                    10756 .................... typedef unsigned int8 uint8_t; 
                    10757 .................... typedef signed int16 int16_t; 
                    10758 .................... typedef unsigned int16 uint16_t; 
                    10759 .................... typedef signed int32 int32_t; 
                    10760 .................... typedef unsigned int32 uint32_t; 
                    10761 ....................  
                    10762 .................... #if defined(__PCD__) 
                    10763 .................... //typedef signed int24 int24_t; 
                    10764 .................... //typedef unsigned int24 uint24_t; 
                    10765 .................... typedef signed int64 int64_t; 
                    10766 .................... typedef unsigned int64 uint64_t; 
                    10767 .................... #endif 
                    10768 ....................  
                    10769 .................... #define INT8_MAX  (128) 
                    10770 .................... #define INT8_MIN  (-127) 
                    10771 .................... #define UINT8_MAX (255) 
                    10772 ....................  
                    10773 .................... #define INT16_MAX  (32767) 
                    10774 .................... #define INT16_MIN  (-32768) 
                    10775 .................... #define UINT16_MAX (65535) 
                    10776 ....................  
                    10777 .................... #define INT32_MAX  (2147483647) 
                    10778 .................... #define INT32_MIN  (-2147483648) 
                    10779 .................... #define UINT32_MAX (4294967295) 
                    10780 ....................  
                    10781 .................... #if defined(__PCD__) 
                    10782 .................... //#define INT24_MAX  (8388607) 
                    10783 .................... //#define INT24_MIN  (-8388608) 
                    10784 .................... //#define UINT24_MAX (16777215) 
                    10785 ....................  
                    10786 .................... #define INT64_MAX  (9223372036854775807) 
                    10787 .................... #define INT64_MIN  (-9223372036854775808) 
                    10788 .................... #define UINT64_MAX (18446744073709551615) 
                    10789 .................... #endif 
                    10790 ....................  
                    10791 .................... ///////// minimum width 
                    10792 ....................  
                    10793 .................... typedef signed int8 int_least8_t; 
                    10794 .................... typedef unsigned int8 uint_least8_t; 
                    10795 .................... typedef signed int16 int_least16_t; 
                    10796 .................... typedef unsigned int16 uint_least16_t; 
                    10797 .................... typedef signed int32 int_least32_t; 
                    10798 .................... typedef unsigned int32 uint_least32_t; 
                    10799 ....................  
                    10800 .................... #if defined(__PCD__) 
                    10801 .................... //typedef signed int24 int_least24_t; 
                    10802 .................... //typedef unsigned int24 uint_least24_t; 
                    10803 .................... typedef signed int64 int_least64_t; 
                    10804 .................... typedef unsigned int64 uint_least64_t; 
                    10805 .................... #endif 
                    10806 ....................  
                    10807 .................... #define INT_LEAST8_MAX  (128) 
                    10808 .................... #define INT_LEAST8_MIN  (-127) 
                    10809 .................... #define UINT_LEAST8_MAX (255) 
                    10810 ....................  
                    10811 .................... #define INT_LEAST16_MAX  (32767) 
                    10812 .................... #define INT_LEAST16_MIN  (-32768) 
                    10813 .................... #define UINT_LEAST16_MAX (65535) 
                    10814 ....................  
                    10815 .................... #define INT_LEAST32_MAX  (2147483647) 
                    10816 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    10817 .................... #define UINT_LEAST32_MAX (4294967295) 
                    10818 ....................  
                    10819 .................... #if defined(__PCD__) 
                    10820 .................... //#define INT_LEAST24_MAX  (8388607) 
                    10821 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    10822 .................... //#define UINT_LEAST24_MAX (16777215) 
                    10823 ....................  
                    10824 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    10825 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    10826 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    10827 .................... #endif 
                    10828 ....................  
                    10829 .................... ///////// fastest width 
                    10830 ....................  
                    10831 .................... #if defined(__PCD__) 
                    10832 .................... typedef signed int16 int_fast8_t; 
                    10833 .................... typedef unsigned int16 uint_fast8_t; 
                    10834 .................... #define INT_FAST8_MAX  (32767) 
                    10835 .................... #define INT_FAST8_MIN  (-32768) 
                    10836 .................... #define UINT_FAST8_MAX (65535) 
                    10837 .................... typedef signed int16 int_fast16_t; 
                    10838 .................... typedef unsigned int16 uint_fast16_t; 
                    10839 .................... //typedef signed int24 int_fast24_t; 
                    10840 .................... //typedef unsigned int24 uint_fast24_t; 
                    10841 .................... typedef signed int64 int_fast64_t; 
                    10842 .................... typedef unsigned int64 uint_fast64_t; 
                    10843 .................... #else 
                    10844 .................... typedef signed int8 int_fast8_t; 
                    10845 .................... typedef unsigned int8 uint_fast8_t; 
                    10846 .................... #define INT_FAST8_MAX  (128) 
                    10847 .................... #define INT_FAST8_MIN  (-127) 
                    10848 .................... #define UINT_FAST8_MAX (255) 
                    10849 .................... typedef signed int16 int_fast16_t; 
                    10850 .................... typedef unsigned int16 uint_fast16_t; 
                    10851 .................... #endif 
                    10852 ....................  
                    10853 .................... typedef signed int32 int_fast32_t; 
                    10854 .................... typedef unsigned int32 uint_fast32_t; 
                    10855 ....................  
                    10856 .................... #define INT_FAST16_MAX  (32767) 
                    10857 .................... #define INT_FAST16_MIN  (-32768) 
                    10858 .................... #define UINT_FAST16_MAX (65535) 
                    10859 ....................  
                    10860 .................... #define INT_FAST32_MAX  (2147483647) 
                    10861 .................... #define INT_FAST32_MIN  (-2147483648) 
                    10862 .................... #define UINT_FAST32_MAX (4294967295) 
                    10863 ....................  
                    10864 .................... #if defined(__PCD__) 
                    10865 .................... //#define INT_FAST24_MAX  (8388607) 
                    10866 .................... //#define INT_FAST24_MIN  (-8388608) 
                    10867 .................... //#define UINT_FAST24_MAX (16777215) 
                    10868 ....................  
                    10869 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    10870 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    10871 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    10872 .................... #endif 
                    10873 ....................  
                    10874 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    10875 ....................  
                    10876 .................... /// TODO 
                    10877 ....................  
                    10878 .................... /// intptr_t uintptr_t 
                    10879 ....................  
                    10880 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    10881 ....................  
                    10882 ....................  
                    10883 .................... /////////// greatest width (OPTIONAL) 
                    10884 ....................  
                    10885 .................... /// TODO 
                    10886 ....................  
                    10887 .................... /// intmax_t uintmax_t 
                    10888 ....................  
                    10889 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    10890 ....................  
                    10891 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    10892 ....................  
                    10893 ....................  
                    10894 .................... #endif 
                    10895 ....................  
                    10896 .................... #include <stdbool.h> 
                    10897 .................... /////////////////////////////////////////////////////////////////////////// 
                    10898 .................... ////                                                                   //// 
                    10899 .................... ////                          stdbool.h                                //// 
                    10900 .................... ////                                                                   //// 
                    10901 .................... //// Standard boolean definitions                                      //// 
                    10902 .................... ////                                                                   //// 
                    10903 .................... /////////////////////////////////////////////////////////////////////////// 
                    10904 .................... ////        (C) Copyright 1996,2012 Custom Computer Services           //// 
                    10905 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    10906 .................... //// compiler.  This source code may only be distributed to other      //// 
                    10907 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    10908 .................... //// or distribution is permitted without written permission.          //// 
                    10909 .................... //// Derivative programs created using this software in object code    //// 
                    10910 .................... //// form are not restricted in any way.                               //// 
                    10911 .................... /////////////////////////////////////////////////////////////////////////// 
                    10912 ....................  
                    10913 .................... #ifndef __STDBOOL_H__ 
                    10914 .................... #define __STDBOOL_H__ 
                    10915 ....................  
                    10916 .................... //remove TRUE and FALSE added by CCS's device .h file 
                    10917 .................... #if defined(TRUE) 
                    10918 .................... #undef TRUE 
                    10919 .................... #endif 
                    10920 .................... #if defined(FALSE) 
                    10921 .................... #undef FALSE 
                    10922 .................... #endif 
                    10923 ....................  
                    10924 .................... typedef int1   bool; 
                    10925 .................... #define true   1 
                    10926 .................... #define false  0 
                    10927 .................... #define __bool_true_false_are_defined  1 
                    10928 ....................  
                    10929 .................... #endif 
                    10930 ....................  
                    10931 ....................  
                    10932 .................... #define CALIBRATION_AREA_START 0x4000 
                    10933 .................... #define CALIBRATION_AREA_END 0x4FFF 
                    10934 ....................  
                    10935 .................... typedef enum { 
                    10936 ....................   CALIBRATION_TABLE_PARAMS = 0, 
                    10937 ....................   CALIBRATION_TABLE_PA_GAINS_1 = 1, 
                    10938 ....................   CALIBRATION_TABLE_PA_GAINS_2 = 2, 
                    10939 ....................   CALIBRATION_TABLE_MAX = 3 
                    10940 .................... } calibration_table_id_t; 
                    10941 ....................  
                    10942 .................... typedef enum { 
                    10943 ....................   PARAM_CAL_TBL_VERSION = 0, 
                    10944 ....................   PARAM_SERIAL_NUM = 1, 
                    10945 ....................   PARAM_TEMP_MULT = 2, 
                    10946 ....................   PARAM_FWD_MULT = 3, 
                    10947 ....................   PARAM_REV_MULT = 4, 
                    10948 ....................   PARAM_INP_PWR_MULT = 5, 
                    10949 ....................   PARAM_PWR_CURRENT_MULT = 6, 
                    10950 ....................   PARAM_PRE_AMP_MULT = 7, 
                    10951 ....................   PARAM_ISENSE_PA1_MULT = 8, 
                    10952 ....................   PARAM_ISENSE_PA2_MULT = 9, 
                    10953 ....................   PARAM_BOOT_WAIT_TIME_USEC = 10, 
                    10954 ....................   PARAM_TX_ON_TIMING_USEC = 11, 
                    10955 ....................   PARAM_TX_OFF_TIMING_USEC = 12, 
                    10956 ....................   PARAM_PA_ON_TIMING_USEC = 13, 
                    10957 ....................   PARAM_PA_OFF_TIMING_USEC = 14, 
                    10958 ....................   PARAM_ANT_SEL_TIMING_USEC = 15, 
                    10959 ....................   PARAM_FWD_SAMP_TIMING_USEC = 16, 
                    10960 ....................   PARAM_REV_SAMP_TIMING_USEC = 17, 
                    10961 ....................   PARAM_INP_PWR_SAMP_TIMING_USEC = 18, 
                    10962 .................... } calibration_param_t; 
                    10963 ....................  
                    10964 .................... #define CALIBRATION_TABLE_INDEX_MAX 32 
                    10965 ....................  
                    10966 .................... void get_calibration_table_data(calibration_table_id_t table_id, void* table_data); 
                    10967 .................... void set_calibration_table_data(calibration_table_id_t table_id, void* table_data); 
                    10968 .................... #INLINE 
                    10969 .................... uint16_t get_calibration_param(calibration_table_id_t table, uint8_t index); 
                    10970 .................... void set_calibration_param(calibration_table_id_t table, uint8_t index, uint16_t value); 
                    10971 ....................  
                    10972 .................... #endif /* CALIBRATION_H_ */ 
                    10973 ....................  
                    10974 ....................  
                    10975 .................... enum { 
                    10976 ....................   NUM_ADC_SAMPLES = 4, 
                    10977 .................... }; 
                    10978 ....................  
                    10979 .................... enum { 
                    10980 ....................   OP_CONTROL_MESSAGE = 0x00, 
                    10981 ....................   OP_VERSION_REQUEST_MESSAGE = 0x02, 
                    10982 ....................   OP_CHANGE_MODE_MESSAGE = 0x03, 
                    10983 ....................   OP_SET_CALIBRATION_TABLE_MESSAGE = 0x04, 
                    10984 ....................   OP_GET_CALIBRATION_TABLE_MESSAGE = 0x05, 
                    10985 ....................   OP_SET_DATA_LINE_MESSAGE = 0x06, 
                    10986 ....................   OP_GET_DATA_LINE_MESSAGE = 0x07, 
                    10987 ....................   OP_FINISH_UPDATE_PROCESS_MESSAGE = 0x08, 
                    10988 ....................   OP_BIT_STATUS_REQUEST_MESSAGE = 0x09, 
                    10989 .................... }; 
                    10990 ....................  
                    10991 .................... enum { 
                    10992 ....................   OP_ACK_RESPONSE = 0x80, 
                    10993 ....................   OP_SF_STATUS_RESPONSE = 0x81, 
                    10994 ....................   OP_VERSION_RESPONSE = 0x82, 
                    10995 ....................   OP_GET_CALIBRATION_TABLE_RESPONSE = 0x85, 
                    10996 ....................   OP_SET_DATA_LINE_RESPONSE = 0x86, 
                    10997 ....................   OP_GET_DATA_LINE_RESPONSE = 0x87, 
                    10998 ....................   OP_BIT_STATUS_RESPONSE = 0x89, 
                    10999 .................... }; 
                    11000 ....................  
                    11001 .................... typedef enum { 
                    11002 ....................   MODE_OPERATIONAL = 0, 
                    11003 ....................   MODE_TECHNICIAN = 1, 
                    11004 ....................   MODE_MAINTENANCE = 2, 
                    11005 .................... } software_mode_t; 
                    11006 ....................  
                    11007 .................... enum { 
                    11008 ....................   CALIBRATION_TABLE_TEMP = 0, 
                    11009 ....................   CALIBRATION_TABLE_FWD = 1, 
                    11010 ....................   CALIBRATION_TABLE_REV = 2, 
                    11011 ....................   CALIBRATION_TABLE_INP = 3, 
                    11012 ....................   CALIBRATION_TABLE_CURRENT = 4, 
                    11013 ....................   CALIBRATION_TABLE_PA_BIAS = 5, 
                    11014 ....................   CALIBRATION_TABLE_TIMING = 6, 
                    11015 ....................   CALIBRATION_TABLE_GENERAL = 7, 
                    11016 .................... }; 
                    11017 ....................  
                    11018 .................... enum { 
                    11019 ....................   PROGRAMMING_STATUS_OK = 0, 
                    11020 ....................   PROGRAMMING_STATUS_ERROR = 1, 
                    11021 .................... }; 
                    11022 ....................  
                    11023 .................... typedef struct message_t { 
                    11024 ....................   uint8_t opcode; 
                    11025 ....................   uint8_t payload[]; /* this will include the payload and the crc */ 
                    11026 .................... } message_t; 
                    11027 ....................  
                    11028 .................... typedef struct generic_response_t { 
                    11029 ....................   uint8_t opcode; 
                    11030 .................... } generic_response_t; 
                    11031 ....................  
                    11032 .................... /* message payloads*/ 
                    11033 ....................  
                    11034 .................... typedef struct control_bits_t { 
                    11035 ....................   uint8_t tx_on : 1; 
                    11036 ....................   uint8_t pa_gain : 3; 
                    11037 ....................   uint8_t tx_ant : 1; 
                    11038 ....................   uint8_t amplifier_operation_frequency : 1; 
                    11039 ....................   uint8_t reset : 1; 
                    11040 ....................   uint8_t dont_change : 1; 
                    11041 .................... } control_bits_t; 
                    11042 ....................  
                    11043 .................... typedef struct control_message_payload_t { 
                    11044 ....................   control_bits_t bits; 
                    11045 ....................   uint16_t control_identifier; 
                    11046 .................... } control_message_payload_t; 
                    11047 ....................  
                    11048 .................... typedef struct change_mode_message_payload_t { 
                    11049 ....................   uint8_t mode; 
                    11050 .................... } change_mode_message_payload_t; 
                    11051 ....................  
                    11052 ....................  
                    11053 .................... typedef struct set_calibration_table_message_payload_t { 
                    11054 ....................   uint8_t table_id; 
                    11055 ....................   uint16_t params[CALIBRATION_TABLE_INDEX_MAX]; 
                    11056 .................... } set_calibration_table_message_payload_t; 
                    11057 ....................  
                    11058 .................... typedef struct get_calibration_table_message_payload_t { 
                    11059 ....................   uint8_t table_id; 
                    11060 .................... } get_calibration_table_message_payload_t; 
                    11061 ....................  
                    11062 .................... typedef struct set_data_line_payload_t { 
                    11063 ....................   uint32_t address; 
                    11064 ....................   uint8_t data[64]; 
                    11065 .................... } set_data_line_payload_t; 
                    11066 ....................  
                    11067 .................... typedef struct get_data_line_payload_t { 
                    11068 ....................   uint32_t address; 
                    11069 .................... } get_data_line_payload_t; 
                    11070 ....................  
                    11071 .................... /* responses */ 
                    11072 ....................  
                    11073 .................... typedef struct ack_response_t { 
                    11074 ....................   generic_response_t generic; 
                    11075 .................... } ack_response_t; 
                    11076 ....................  
                    11077 .................... typedef struct sf_status_response_t { 
                    11078 ....................   generic_response_t generic; 
                    11079 ....................   control_bits_t last_control_bits; 
                    11080 ....................   uint16_t tti_counter; 
                    11081 ....................   uint16_t control_identifier; 
                    11082 ....................   uint16_t fwd_power_values[NUM_ADC_SAMPLES]; 
                    11083 ....................   uint16_t reverse_power_values[NUM_ADC_SAMPLES]; 
                    11084 ....................   uint16_t input_power_values[NUM_ADC_SAMPLES]; 
                    11085 ....................   uint16_t pre_amp_power_values[NUM_ADC_SAMPLES]; 
                    11086 ....................   uint16_t temperature; 
                    11087 ....................   uint16_t power_amplifier_current; 
                    11088 .................... } sf_status_response_t; 
                    11089 ....................  
                    11090 .................... typedef struct bit_status_response_t { 
                    11091 ....................   generic_response_t generic; 
                    11092 ....................   control_bits_t last_control_bits; 
                    11093 ....................   uint16_t tti_counter; 
                    11094 ....................   uint8_t mode; 
                    11095 .................... } bit_status_response_t; 
                    11096 ....................  
                    11097 .................... typedef struct version_response_t { 
                    11098 ....................   generic_response_t generic; 
                    11099 ....................   uint8_t day; 
                    11100 ....................   uint8_t month; 
                    11101 ....................   uint16_t year; 
                    11102 ....................   uint8_t major; 
                    11103 ....................   uint8_t minor; 
                    11104 ....................   uint16_t serial_number; 
                    11105 .................... } version_response_t; 
                    11106 ....................  
                    11107 .................... typedef struct calibration_table_response_t { 
                    11108 ....................   generic_response_t generic; 
                    11109 ....................   uint8_t table_id; 
                    11110 ....................   uint16_t params[CALIBRATION_TABLE_INDEX_MAX]; 
                    11111 .................... } calibration_table_response_t; 
                    11112 ....................  
                    11113 .................... typedef struct set_data_line_response_t { 
                    11114 ....................   generic_response_t generic; 
                    11115 ....................   uint32_t address; 
                    11116 ....................   uint8_t status; 
                    11117 .................... } set_data_line_response_t; 
                    11118 ....................  
                    11119 .................... typedef struct get_data_line_response_t { 
                    11120 ....................   generic_response_t generic; 
                    11121 ....................   uint32_t address; 
                    11122 ....................   uint8_t data[64]; 
                    11123 .................... } get_data_line_response_t; 
                    11124 ....................  
                    11125 .................... #endif /* MESSAGE_H_ */ 
                    11126 ....................  
                    11127 .................... #include "rfc1662.h" 
                    11128 .................... /* 
                    11129 ....................  * rfc1662.h 
                    11130 ....................  * 
                    11131 ....................  *  Created on: 09/01/2011 
                    11132 ....................  *      Author: asafe 
                    11133 ....................  */ 
                    11134 ....................  
                    11135 .................... #ifndef __RFC1662_H__ 
                    11136 .................... #define __RFC1662_H__ 
                    11137 ....................  
                    11138 .................... #define CHAR_FLAG 0x7E 
                    11139 .................... #define CHAR_FLAG_XORED 0x5E 
                    11140 .................... #define CHAR_ESCAPE 0x7D 
                    11141 .................... #define CHAR_ESCAPE_XORED 0x5D 
                    11142 ....................  
                    11143 .................... int rfc1662_unpack(unsigned char *data, int len, unsigned char *dest); 
                    11144 .................... int rfc1662_pack(unsigned char *data, int dataLen, unsigned char *dest); 
                    11145 ....................  
                    11146 .................... #endif /* __RFC1662_H__ */ 
                    11147 ....................  
                    11148 .................... #include "timer.h" 
                    11149 .................... #ifndef INCLUDE_TIMER_H_ 
                    11150 .................... #define INCLUDE_TIMER_H_ 
                    11151 ....................  
                    11152 .................... #include <stdint.h> 
                    11153 .................... /////////////////////////////////////////////////////////////////////////// 
                    11154 .................... ////                                                                   //// 
                    11155 .................... ////                           stdint.h                                //// 
                    11156 .................... ////                                                                   //// 
                    11157 .................... //// Standard integer definitions.                                     //// 
                    11158 .................... ////                                                                   //// 
                    11159 .................... /////////////////////////////////////////////////////////////////////////// 
                    11160 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    11161 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    11162 .................... //// compiler.  This source code may only be distributed to other      //// 
                    11163 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    11164 .................... //// or distribution is permitted without written permission.          //// 
                    11165 .................... //// Derivative programs created using this software in object code    //// 
                    11166 .................... //// form are not restricted in any way.                               //// 
                    11167 .................... /////////////////////////////////////////////////////////////////////////// 
                    11168 ....................  
                    11169 .................... #ifndef _STDINT 
                    11170 ....................  
                    11171 .................... #define _STDINT 
                    11172 ....................  
                    11173 .................... //////////// exact width 
                    11174 ....................  
                    11175 .................... typedef signed int8 int8_t; 
                    11176 .................... typedef unsigned int8 uint8_t; 
                    11177 .................... typedef signed int16 int16_t; 
                    11178 .................... typedef unsigned int16 uint16_t; 
                    11179 .................... typedef signed int32 int32_t; 
                    11180 .................... typedef unsigned int32 uint32_t; 
                    11181 ....................  
                    11182 .................... #if defined(__PCD__) 
                    11183 .................... //typedef signed int24 int24_t; 
                    11184 .................... //typedef unsigned int24 uint24_t; 
                    11185 .................... typedef signed int64 int64_t; 
                    11186 .................... typedef unsigned int64 uint64_t; 
                    11187 .................... #endif 
                    11188 ....................  
                    11189 .................... #define INT8_MAX  (128) 
                    11190 .................... #define INT8_MIN  (-127) 
                    11191 .................... #define UINT8_MAX (255) 
                    11192 ....................  
                    11193 .................... #define INT16_MAX  (32767) 
                    11194 .................... #define INT16_MIN  (-32768) 
                    11195 .................... #define UINT16_MAX (65535) 
                    11196 ....................  
                    11197 .................... #define INT32_MAX  (2147483647) 
                    11198 .................... #define INT32_MIN  (-2147483648) 
                    11199 .................... #define UINT32_MAX (4294967295) 
                    11200 ....................  
                    11201 .................... #if defined(__PCD__) 
                    11202 .................... //#define INT24_MAX  (8388607) 
                    11203 .................... //#define INT24_MIN  (-8388608) 
                    11204 .................... //#define UINT24_MAX (16777215) 
                    11205 ....................  
                    11206 .................... #define INT64_MAX  (9223372036854775807) 
                    11207 .................... #define INT64_MIN  (-9223372036854775808) 
                    11208 .................... #define UINT64_MAX (18446744073709551615) 
                    11209 .................... #endif 
                    11210 ....................  
                    11211 .................... ///////// minimum width 
                    11212 ....................  
                    11213 .................... typedef signed int8 int_least8_t; 
                    11214 .................... typedef unsigned int8 uint_least8_t; 
                    11215 .................... typedef signed int16 int_least16_t; 
                    11216 .................... typedef unsigned int16 uint_least16_t; 
                    11217 .................... typedef signed int32 int_least32_t; 
                    11218 .................... typedef unsigned int32 uint_least32_t; 
                    11219 ....................  
                    11220 .................... #if defined(__PCD__) 
                    11221 .................... //typedef signed int24 int_least24_t; 
                    11222 .................... //typedef unsigned int24 uint_least24_t; 
                    11223 .................... typedef signed int64 int_least64_t; 
                    11224 .................... typedef unsigned int64 uint_least64_t; 
                    11225 .................... #endif 
                    11226 ....................  
                    11227 .................... #define INT_LEAST8_MAX  (128) 
                    11228 .................... #define INT_LEAST8_MIN  (-127) 
                    11229 .................... #define UINT_LEAST8_MAX (255) 
                    11230 ....................  
                    11231 .................... #define INT_LEAST16_MAX  (32767) 
                    11232 .................... #define INT_LEAST16_MIN  (-32768) 
                    11233 .................... #define UINT_LEAST16_MAX (65535) 
                    11234 ....................  
                    11235 .................... #define INT_LEAST32_MAX  (2147483647) 
                    11236 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    11237 .................... #define UINT_LEAST32_MAX (4294967295) 
                    11238 ....................  
                    11239 .................... #if defined(__PCD__) 
                    11240 .................... //#define INT_LEAST24_MAX  (8388607) 
                    11241 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    11242 .................... //#define UINT_LEAST24_MAX (16777215) 
                    11243 ....................  
                    11244 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    11245 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    11246 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    11247 .................... #endif 
                    11248 ....................  
                    11249 .................... ///////// fastest width 
                    11250 ....................  
                    11251 .................... #if defined(__PCD__) 
                    11252 .................... typedef signed int16 int_fast8_t; 
                    11253 .................... typedef unsigned int16 uint_fast8_t; 
                    11254 .................... #define INT_FAST8_MAX  (32767) 
                    11255 .................... #define INT_FAST8_MIN  (-32768) 
                    11256 .................... #define UINT_FAST8_MAX (65535) 
                    11257 .................... typedef signed int16 int_fast16_t; 
                    11258 .................... typedef unsigned int16 uint_fast16_t; 
                    11259 .................... //typedef signed int24 int_fast24_t; 
                    11260 .................... //typedef unsigned int24 uint_fast24_t; 
                    11261 .................... typedef signed int64 int_fast64_t; 
                    11262 .................... typedef unsigned int64 uint_fast64_t; 
                    11263 .................... #else 
                    11264 .................... typedef signed int8 int_fast8_t; 
                    11265 .................... typedef unsigned int8 uint_fast8_t; 
                    11266 .................... #define INT_FAST8_MAX  (128) 
                    11267 .................... #define INT_FAST8_MIN  (-127) 
                    11268 .................... #define UINT_FAST8_MAX (255) 
                    11269 .................... typedef signed int16 int_fast16_t; 
                    11270 .................... typedef unsigned int16 uint_fast16_t; 
                    11271 .................... #endif 
                    11272 ....................  
                    11273 .................... typedef signed int32 int_fast32_t; 
                    11274 .................... typedef unsigned int32 uint_fast32_t; 
                    11275 ....................  
                    11276 .................... #define INT_FAST16_MAX  (32767) 
                    11277 .................... #define INT_FAST16_MIN  (-32768) 
                    11278 .................... #define UINT_FAST16_MAX (65535) 
                    11279 ....................  
                    11280 .................... #define INT_FAST32_MAX  (2147483647) 
                    11281 .................... #define INT_FAST32_MIN  (-2147483648) 
                    11282 .................... #define UINT_FAST32_MAX (4294967295) 
                    11283 ....................  
                    11284 .................... #if defined(__PCD__) 
                    11285 .................... //#define INT_FAST24_MAX  (8388607) 
                    11286 .................... //#define INT_FAST24_MIN  (-8388608) 
                    11287 .................... //#define UINT_FAST24_MAX (16777215) 
                    11288 ....................  
                    11289 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    11290 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    11291 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    11292 .................... #endif 
                    11293 ....................  
                    11294 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    11295 ....................  
                    11296 .................... /// TODO 
                    11297 ....................  
                    11298 .................... /// intptr_t uintptr_t 
                    11299 ....................  
                    11300 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    11301 ....................  
                    11302 ....................  
                    11303 .................... /////////// greatest width (OPTIONAL) 
                    11304 ....................  
                    11305 .................... /// TODO 
                    11306 ....................  
                    11307 .................... /// intmax_t uintmax_t 
                    11308 ....................  
                    11309 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    11310 ....................  
                    11311 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    11312 ....................  
                    11313 ....................  
                    11314 .................... #endif 
                    11315 ....................  
                    11316 .................... #include <stdbool.h> 
                    11317 .................... /////////////////////////////////////////////////////////////////////////// 
                    11318 .................... ////                                                                   //// 
                    11319 .................... ////                          stdbool.h                                //// 
                    11320 .................... ////                                                                   //// 
                    11321 .................... //// Standard boolean definitions                                      //// 
                    11322 .................... ////                                                                   //// 
                    11323 .................... /////////////////////////////////////////////////////////////////////////// 
                    11324 .................... ////        (C) Copyright 1996,2012 Custom Computer Services           //// 
                    11325 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    11326 .................... //// compiler.  This source code may only be distributed to other      //// 
                    11327 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    11328 .................... //// or distribution is permitted without written permission.          //// 
                    11329 .................... //// Derivative programs created using this software in object code    //// 
                    11330 .................... //// form are not restricted in any way.                               //// 
                    11331 .................... /////////////////////////////////////////////////////////////////////////// 
                    11332 ....................  
                    11333 .................... #ifndef __STDBOOL_H__ 
                    11334 .................... #define __STDBOOL_H__ 
                    11335 ....................  
                    11336 .................... //remove TRUE and FALSE added by CCS's device .h file 
                    11337 .................... #if defined(TRUE) 
                    11338 .................... #undef TRUE 
                    11339 .................... #endif 
                    11340 .................... #if defined(FALSE) 
                    11341 .................... #undef FALSE 
                    11342 .................... #endif 
                    11343 ....................  
                    11344 .................... typedef int1   bool; 
                    11345 .................... #define true   1 
                    11346 .................... #define false  0 
                    11347 .................... #define __bool_true_false_are_defined  1 
                    11348 ....................  
                    11349 .................... #endif 
                    11350 ....................  
                    11351 ....................  
                    11352 .................... typedef void (*timer_func)(void* arg); 
                    11353 ....................  
                    11354 .................... typedef struct { 
                    11355 ....................   //bool triggred; 
                    11356 ....................   uint32_t expTime; 
                    11357 ....................   void *arg; 
                    11358 ....................   timer_func func; 
                    11359 .................... } timer_task_t; 
                    11360 ....................  
                    11361 .................... #INLINE 
                    11362 .................... uint32_t timer_get_us_count(); 
                    11363 .................... bool timer_registerTask(uint32_t expTime, timer_func func, void *arg); 
                    11364 .................... void timer_yield(); 
                    11365 ....................  
                    11366 .................... #endif /* INCLUDE_TIMER_H_ */ 
                    11367 ....................  
                    11368 .................... #include "message_handlers.h" 
                    11369 .................... /* 
                    11370 ....................  * message_handlers.h 
                    11371 ....................  * 
                    11372 ....................  *  Created on: Mar 26, 2017 
                    11373 ....................  *      Author: asaf 
                    11374 ....................  */ 
                    11375 ....................  
                    11376 .................... #ifndef MESSAGE_HANDLERS_H_ 
                    11377 .................... #define MESSAGE_HANDLERS_H_ 
                    11378 ....................  
                    11379 .................... void init_message_handlers(); 
                    11380 .................... void process_message(uint8_t* message, uint16_t length); 
                    11381 .................... #INLINE 
                    11382 .................... void perform_last_control_message(); 
                    11383 .................... void control_handle_timer(); 
                    11384 .................... void samp_if_needed(); 
                    11385 ....................  
                    11386 .................... #endif /* MESSAGE_HANDLERS_H_ */ 
                    11387 ....................  
                    11388 ....................  
                    11389 .................... static uint8_t rfcBuff[MSG_MAX_MESSAGE_LEN * 2 + 2]; 
                    11390 ....................  
                    11391 .................... void comm_init() { 
                    11392 ....................   /* init the comm port */ 
                    11393 ....................   uart_init(); 
3764 D7F6           11394 BRA    3752
                    11395 .................... } 
3766 EFC1 F016      11396 GOTO   2D82 (RETURN)
                    11397 ....................  
                    11398 .................... /* this function receives a message from the host 
                    11399 ....................  * the function will block until a message arrives */ 
                    11400 .................... bool comm_receive_message(void* buffer, uint16_t* size) { 
5388 0103           11401 MOVLB  3
538A 91F7           11402 BCF    xF7.0
538C 6BF8           11403 CLRF   xF8
                    11404 ....................   bool handleMessage = false; 
                    11405 ....................   int buffIdx = 0; 
                    11406 ....................  
                    11407 ....................   do { 
                    11408 ....................     uint8_t c; 
                    11409 ....................     if(!uart_get_byte_nonblocking(&c)) { 
538E 0E03           11410 MOVLW  03
5390 6FFC           11411 MOVWF  xFC
5392 0EF9           11412 MOVLW  F9
5394 6FFB           11413 MOVWF  xFB
5396 0100           11414 MOVLB  0
5398 D71C           11415 BRA    51D2
539A 5201           11416 MOVF   01,F
539C E101           11417 BNZ   53A0
                    11418 .................... //      samp_if_needed(); 
                    11419 ....................       continue; 
539E D020           11420 BRA    53E0
                    11421 ....................     } 
                    11422 ....................     rfcBuff[buffIdx] = c; 
53A0 6A03           11423 CLRF   03
53A2 0103           11424 MOVLB  3
53A4 51F8           11425 MOVF   xF8,W
53A6 0F71           11426 ADDLW  71
53A8 6EE9           11427 MOVWF  FE9
53AA 0E00           11428 MOVLW  00
53AC 2003           11429 ADDWFC 03,W
53AE 6EEA           11430 MOVWF  FEA
53B0 C3F9 FFEF      11431 MOVFF  3F9,FEF
                    11432 .................... //    rfcBuff[buffIdx] = uart_get_byte_blocking(); 
                    11433 ....................     if(rfcBuff[buffIdx] != CHAR_FLAG) { 
53B4 6A03           11434 CLRF   03
53B6 51F8           11435 MOVF   xF8,W
53B8 0F71           11436 ADDLW  71
53BA 6EE9           11437 MOVWF  FE9
53BC 0E00           11438 MOVLW  00
53BE 2003           11439 ADDWFC 03,W
53C0 6EEA           11440 MOVWF  FEA
53C2 50EF           11441 MOVF   FEF,W
53C4 087E           11442 SUBLW  7E
53C6 E006           11443 BZ    53D4
                    11444 ....................     	buffIdx++; 
53C8 2BF8           11445 INCF   xF8,F
                    11446 ....................       if(buffIdx == MSG_MAX_MESSAGE_LEN * 2 + 2) { 
53CA 51F8           11447 MOVF   xF8,W
53CC 08A2           11448 SUBLW  A2
53CE E101           11449 BNZ   53D2
                    11450 ....................         buffIdx = 0; 
53D0 6BF8           11451 CLRF   xF8
                    11452 ....................       } 
                    11453 ....................   	} else { 
53D2 D006           11454 BRA    53E0
                    11455 ....................   		if(buffIdx >= 2) { 
53D4 51F8           11456 MOVF   xF8,W
53D6 0801           11457 SUBLW  01
53D8 E202           11458 BC    53DE
                    11459 ....................   			handleMessage = true; 
53DA 81F7           11460 BSF    xF7.0
                    11461 ....................   		} else { 
53DC D001           11462 BRA    53E0
                    11463 ....................   			// discard small messages 
                    11464 ....................   			buffIdx = 0; 
53DE 6BF8           11465 CLRF   xF8
                    11466 ....................   		} 
                    11467 ....................   	} 
                    11468 ....................   } while(!handleMessage); 
53E0 0103           11469 MOVLB  3
53E2 A1F7           11470 BTFSS  xF7.0
53E4 D7D4           11471 BRA    538E
                    11472 ....................  
                    11473 ....................   if(handleMessage) { 
53E6 A1F7           11474 BTFSS  xF7.0
53E8 D01F           11475 BRA    5428
                    11476 ....................     int len = rfc1662_unpack(rfcBuff, buffIdx, buffer); 
53EA 6BFC           11477 CLRF   xFC
53EC 0E71           11478 MOVLW  71
53EE 6FFB           11479 MOVWF  xFB
53F0 C3F8 F3FD      11480 MOVFF  3F8,3FD
53F4 C3F4 F3FF      11481 MOVFF  3F4,3FF
53F8 C3F3 F3FE      11482 MOVFF  3F3,3FE
53FC 0100           11483 MOVLB  0
53FE D788           11484 BRA    5310
5400 C001 F3FA      11485 MOVFF  01,3FA
                    11486 ....................     if(len == -1) 
5404 0103           11487 MOVLB  3
5406 51FA           11488 MOVF   xFA,W
5408 08FF           11489 SUBLW  FF
540A E103           11490 BNZ   5412
                    11491 ....................     { 
                    11492 ....................       /* the packet fcs was wrong don't accept it */ 
                    11493 ....................       return false; 
540C 0E00           11494 MOVLW  00
540E 6E01           11495 MOVWF  01
5410 D00D           11496 BRA    542C
                    11497 ....................   	} 
                    11498 ....................     *size = len; 
5412 C3F5 FFE9      11499 MOVFF  3F5,FE9
5416 C3F6 FFEA      11500 MOVFF  3F6,FEA
541A 6AEC           11501 CLRF   FEC
541C 52ED           11502 MOVF   FED,F
541E C3FA FFEF      11503 MOVFF  3FA,FEF
                    11504 ....................     return true; 
5422 0E01           11505 MOVLW  01
5424 6E01           11506 MOVWF  01
5426 D002           11507 BRA    542C
                    11508 ....................   } 
                    11509 ....................  
                    11510 ....................   return false; 
5428 0E00           11511 MOVLW  00
542A 6E01           11512 MOVWF  01
                    11513 .................... } 
542C 0100           11514 MOVLB  0
542E EF2E F017      11515 GOTO   2E5C (RETURN)
                    11516 ....................  
                    11517 .................... void comm_send_message(void* buffer, uint16_t size) { 
5690 C445 F44B      11518 MOVFF  445,44B
5694 C444 F44A      11519 MOVFF  444,44A
5698 C446 F44C      11520 MOVFF  446,44C
569C 0104           11521 MOVLB  4
569E 6B4E           11522 CLRF   x4E
56A0 0E71           11523 MOVLW  71
56A2 6F4D           11524 MOVWF  x4D
56A4 0100           11525 MOVLB  0
56A6 D728           11526 BRA    54F8
56A8 0104           11527 MOVLB  4
56AA 6B49           11528 CLRF   x49
56AC C001 F448      11529 MOVFF  01,448
                    11530 ....................   uint16_t rfc_len = rfc1662_pack(buffer, size, rfcBuff); 
                    11531 ....................   uart_send(rfcBuff, rfc_len); 
56B0 6B4B           11532 CLRF   x4B
56B2 0E71           11533 MOVLW  71
56B4 6F4A           11534 MOVWF  x4A
56B6 C448 F44C      11535 MOVFF  448,44C
56BA 0100           11536 MOVLB  0
56BC EFF1 F01F      11537 GOTO   3FE2
                    11538 .................... } 
56C0 0012           11539 RETURN 0
                    11540 ....................  
                    11541 .................... /* 
                    11542 ....................  * message_handlers.c 
                    11543 ....................  * 
                    11544 ....................  *  Created on: Mar 26, 2017 
                    11545 ....................  *      Author: asaf 
                    11546 ....................  */ 
                    11547 ....................  
                    11548 .................... #include "BA1474.h" 
                    11549 .................... #include <18F45K22.h> 
                    11550 .................... //////// Standard Header file for the PIC18F45K22 device //////////////// 
                    11551 .................... #device PIC18F45K22 
                    12169 .................... #list 
                    12170 ....................  
                    12171 .................... #device adc=10 
                    12172 .................... #device pass_strings=in_ram 
                    12173 ....................  
                    12174 .................... #define LOADER_END 0x1FFF 
                    12175 .................... #include <boot.h> 
                    12176 .................... #undef LOADER_END 
                    12177 .................... #define FLASH_SIZE getenv("FLASH_ERASE_SIZE") 
                    12178 .................... #define LOADER_END   0x1FFF 
                    12179 .................... #define LOADER_SIZE  0x3FF 
                    12180 ....................  
                    12181 .................... #ifndef _bootloader 
                    12182 .................... #build(reset=LOADER_END+1, interrupt=LOADER_END+9) 
                    12183 ....................  
                    12184 .................... /* when in operational software, keep out of the bootloader sections */ 
                    12185 .................... #org 0, 0xfff {} 
                    12186 .................... #org 0x1000, 0x1ffe {} 
                    12187 ....................  
                    12188 .................... #else 
                    12189 ....................  
                    12190 .................... /* when in the bootloader, keep out of the operational sections */ 
                    12191 .................... #org 0x2000, 0x7ffe {} 
                    12192 ....................  
                    12193 .................... #endif 
                    12194 ....................  
                    12195 ....................  
                    12196 .................... #FUSES NOWDT                   //No Watch Dog Timer 
                    12197 .................... #FUSES WDT128                  //Watch Dog Timer uses 1:128 Postscale 
                    12198 .................... #FUSES INTRC_IO                //Internal RC Osc, no CLKOUT 
                    12199 .................... #FUSES NOBROWNOUT              //No brownout reset 
                    12200 .................... #FUSES WDT_SW                  //No Watch Dog Timer, enabled in Software 
                    12201 .................... #FUSES NOLVP                   //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
                    12202 .................... #FUSES NOPUT 
                    12203 .................... #FUSES NOXINST                 //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
                    12204 ....................  
                    12205 .................... #use delay(clock=64000000) 
                    12206 .................... #use rs232(baud=921600,xmit=PIN_C6,rcv=PIN_C7,ERRORS) 
                    12207 .................... #USE TIMER(TIMER=1,TICK=1us,BITS=32,NOISR) 
                    12208 .................... #use spi(DO=PIN_A4, CLK=PIN_A3, ENABLE=PIN_A2, ENABLE_ACTIVE=0, DATA_HOLD=20, BITS=16) 
                    12209 ....................  
                    12210 .................... #opt 9 
                    12211 ....................  
                    12212 .................... #use fast_io(a) 
                    12213 .................... #use fast_io(b) 
                    12214 .................... #use fast_io(c) 
                    12215 .................... #use fast_io(d) 
                    12216 .................... #use fast_io(e) 
                    12217 ....................  
                    12218 .................... #define safe_write_program_memory(address, pointer, size) \ 
                    12219 ....................   do { disable_interrupts(GLOBAL); write_program_memory(address, pointer, size); enable_interrupts(GLOBAL); delay_us(1000); } while (0) 
                    12220 ....................  
                    12221 ....................  
                    12222 ....................  
                    12223 .................... #include <stdint.h> 
                    12224 .................... /////////////////////////////////////////////////////////////////////////// 
                    12225 .................... ////                                                                   //// 
                    12226 .................... ////                           stdint.h                                //// 
                    12227 .................... ////                                                                   //// 
                    12228 .................... //// Standard integer definitions.                                     //// 
                    12229 .................... ////                                                                   //// 
                    12230 .................... /////////////////////////////////////////////////////////////////////////// 
                    12231 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    12232 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    12233 .................... //// compiler.  This source code may only be distributed to other      //// 
                    12234 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    12235 .................... //// or distribution is permitted without written permission.          //// 
                    12236 .................... //// Derivative programs created using this software in object code    //// 
                    12237 .................... //// form are not restricted in any way.                               //// 
                    12238 .................... /////////////////////////////////////////////////////////////////////////// 
                    12239 ....................  
                    12240 .................... #ifndef _STDINT 
                    12241 ....................  
                    12242 .................... #define _STDINT 
                    12243 ....................  
                    12244 .................... //////////// exact width 
                    12245 ....................  
                    12246 .................... typedef signed int8 int8_t; 
                    12247 .................... typedef unsigned int8 uint8_t; 
                    12248 .................... typedef signed int16 int16_t; 
                    12249 .................... typedef unsigned int16 uint16_t; 
                    12250 .................... typedef signed int32 int32_t; 
                    12251 .................... typedef unsigned int32 uint32_t; 
                    12252 ....................  
                    12253 .................... #if defined(__PCD__) 
                    12254 .................... //typedef signed int24 int24_t; 
                    12255 .................... //typedef unsigned int24 uint24_t; 
                    12256 .................... typedef signed int64 int64_t; 
                    12257 .................... typedef unsigned int64 uint64_t; 
                    12258 .................... #endif 
                    12259 ....................  
                    12260 .................... #define INT8_MAX  (128) 
                    12261 .................... #define INT8_MIN  (-127) 
                    12262 .................... #define UINT8_MAX (255) 
                    12263 ....................  
                    12264 .................... #define INT16_MAX  (32767) 
                    12265 .................... #define INT16_MIN  (-32768) 
                    12266 .................... #define UINT16_MAX (65535) 
                    12267 ....................  
                    12268 .................... #define INT32_MAX  (2147483647) 
                    12269 .................... #define INT32_MIN  (-2147483648) 
                    12270 .................... #define UINT32_MAX (4294967295) 
                    12271 ....................  
                    12272 .................... #if defined(__PCD__) 
                    12273 .................... //#define INT24_MAX  (8388607) 
                    12274 .................... //#define INT24_MIN  (-8388608) 
                    12275 .................... //#define UINT24_MAX (16777215) 
                    12276 ....................  
                    12277 .................... #define INT64_MAX  (9223372036854775807) 
                    12278 .................... #define INT64_MIN  (-9223372036854775808) 
                    12279 .................... #define UINT64_MAX (18446744073709551615) 
                    12280 .................... #endif 
                    12281 ....................  
                    12282 .................... ///////// minimum width 
                    12283 ....................  
                    12284 .................... typedef signed int8 int_least8_t; 
                    12285 .................... typedef unsigned int8 uint_least8_t; 
                    12286 .................... typedef signed int16 int_least16_t; 
                    12287 .................... typedef unsigned int16 uint_least16_t; 
                    12288 .................... typedef signed int32 int_least32_t; 
                    12289 .................... typedef unsigned int32 uint_least32_t; 
                    12290 ....................  
                    12291 .................... #if defined(__PCD__) 
                    12292 .................... //typedef signed int24 int_least24_t; 
                    12293 .................... //typedef unsigned int24 uint_least24_t; 
                    12294 .................... typedef signed int64 int_least64_t; 
                    12295 .................... typedef unsigned int64 uint_least64_t; 
                    12296 .................... #endif 
                    12297 ....................  
                    12298 .................... #define INT_LEAST8_MAX  (128) 
                    12299 .................... #define INT_LEAST8_MIN  (-127) 
                    12300 .................... #define UINT_LEAST8_MAX (255) 
                    12301 ....................  
                    12302 .................... #define INT_LEAST16_MAX  (32767) 
                    12303 .................... #define INT_LEAST16_MIN  (-32768) 
                    12304 .................... #define UINT_LEAST16_MAX (65535) 
                    12305 ....................  
                    12306 .................... #define INT_LEAST32_MAX  (2147483647) 
                    12307 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    12308 .................... #define UINT_LEAST32_MAX (4294967295) 
                    12309 ....................  
                    12310 .................... #if defined(__PCD__) 
                    12311 .................... //#define INT_LEAST24_MAX  (8388607) 
                    12312 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    12313 .................... //#define UINT_LEAST24_MAX (16777215) 
                    12314 ....................  
                    12315 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    12316 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    12317 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    12318 .................... #endif 
                    12319 ....................  
                    12320 .................... ///////// fastest width 
                    12321 ....................  
                    12322 .................... #if defined(__PCD__) 
                    12323 .................... typedef signed int16 int_fast8_t; 
                    12324 .................... typedef unsigned int16 uint_fast8_t; 
                    12325 .................... #define INT_FAST8_MAX  (32767) 
                    12326 .................... #define INT_FAST8_MIN  (-32768) 
                    12327 .................... #define UINT_FAST8_MAX (65535) 
                    12328 .................... typedef signed int16 int_fast16_t; 
                    12329 .................... typedef unsigned int16 uint_fast16_t; 
                    12330 .................... //typedef signed int24 int_fast24_t; 
                    12331 .................... //typedef unsigned int24 uint_fast24_t; 
                    12332 .................... typedef signed int64 int_fast64_t; 
                    12333 .................... typedef unsigned int64 uint_fast64_t; 
                    12334 .................... #else 
                    12335 .................... typedef signed int8 int_fast8_t; 
                    12336 .................... typedef unsigned int8 uint_fast8_t; 
                    12337 .................... #define INT_FAST8_MAX  (128) 
                    12338 .................... #define INT_FAST8_MIN  (-127) 
                    12339 .................... #define UINT_FAST8_MAX (255) 
                    12340 .................... typedef signed int16 int_fast16_t; 
                    12341 .................... typedef unsigned int16 uint_fast16_t; 
                    12342 .................... #endif 
                    12343 ....................  
                    12344 .................... typedef signed int32 int_fast32_t; 
                    12345 .................... typedef unsigned int32 uint_fast32_t; 
                    12346 ....................  
                    12347 .................... #define INT_FAST16_MAX  (32767) 
                    12348 .................... #define INT_FAST16_MIN  (-32768) 
                    12349 .................... #define UINT_FAST16_MAX (65535) 
                    12350 ....................  
                    12351 .................... #define INT_FAST32_MAX  (2147483647) 
                    12352 .................... #define INT_FAST32_MIN  (-2147483648) 
                    12353 .................... #define UINT_FAST32_MAX (4294967295) 
                    12354 ....................  
                    12355 .................... #if defined(__PCD__) 
                    12356 .................... //#define INT_FAST24_MAX  (8388607) 
                    12357 .................... //#define INT_FAST24_MIN  (-8388608) 
                    12358 .................... //#define UINT_FAST24_MAX (16777215) 
                    12359 ....................  
                    12360 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    12361 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    12362 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    12363 .................... #endif 
                    12364 ....................  
                    12365 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    12366 ....................  
                    12367 .................... /// TODO 
                    12368 ....................  
                    12369 .................... /// intptr_t uintptr_t 
                    12370 ....................  
                    12371 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    12372 ....................  
                    12373 ....................  
                    12374 .................... /////////// greatest width (OPTIONAL) 
                    12375 ....................  
                    12376 .................... /// TODO 
                    12377 ....................  
                    12378 .................... /// intmax_t uintmax_t 
                    12379 ....................  
                    12380 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    12381 ....................  
                    12382 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    12383 ....................  
                    12384 ....................  
                    12385 .................... #endif 
                    12386 ....................  
                    12387 .................... #include <stdbool.h> 
                    12388 .................... /////////////////////////////////////////////////////////////////////////// 
                    12389 .................... ////                                                                   //// 
                    12390 .................... ////                          stdbool.h                                //// 
                    12391 .................... ////                                                                   //// 
                    12392 .................... //// Standard boolean definitions                                      //// 
                    12393 .................... ////                                                                   //// 
                    12394 .................... /////////////////////////////////////////////////////////////////////////// 
                    12395 .................... ////        (C) Copyright 1996,2012 Custom Computer Services           //// 
                    12396 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    12397 .................... //// compiler.  This source code may only be distributed to other      //// 
                    12398 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    12399 .................... //// or distribution is permitted without written permission.          //// 
                    12400 .................... //// Derivative programs created using this software in object code    //// 
                    12401 .................... //// form are not restricted in any way.                               //// 
                    12402 .................... /////////////////////////////////////////////////////////////////////////// 
                    12403 ....................  
                    12404 .................... #ifndef __STDBOOL_H__ 
                    12405 .................... #define __STDBOOL_H__ 
                    12406 ....................  
                    12407 .................... //remove TRUE and FALSE added by CCS's device .h file 
                    12408 .................... #if defined(TRUE) 
                    12409 .................... #undef TRUE 
                    12410 .................... #endif 
                    12411 .................... #if defined(FALSE) 
                    12412 .................... #undef FALSE 
                    12413 .................... #endif 
                    12414 ....................  
                    12415 .................... typedef int1   bool; 
                    12416 .................... #define true   1 
                    12417 .................... #define false  0 
                    12418 .................... #define __bool_true_false_are_defined  1 
                    12419 ....................  
                    12420 .................... #endif 
                    12421 ....................  
                    12422 ....................  
                    12423 .................... #include "main.h" 
                    12424 .................... #ifndef MAIN_H_ 
                    12425 .................... #define MAIN_H_ 
                    12426 ....................  
                    12427 .................... #define MAIN_ADDRESS 0x2700 
                    12428 ....................  
                    12429 .................... #define ATOMIC_SET(var, val)    do { \ 
                    12430 ....................                                       disable_interrupts(GLOBAL); \ 
                    12431 ....................                                       var = val; \ 
                    12432 ....................                                       enable_interrupts(GLOBAL); \ 
                    12433 ....................                                 } while(0); 
                    12434 ....................  
                    12435 .................... #endif /* MAIN_H_ */ 
                    12436 ....................  
                    12437 .................... #include "message.h" 
                    12438 .................... /* 
                    12439 ....................  * message.h 
                    12440 ....................  * 
                    12441 ....................  *  Created on: Mar 23, 2017 
                    12442 ....................  *      Author: asaf 
                    12443 ....................  */ 
                    12444 ....................  
                    12445 .................... #ifndef MESSAGE_H_ 
                    12446 .................... #define MESSAGE_H_ 
                    12447 ....................  
                    12448 .................... #include <stdint.h> 
                    12449 .................... /////////////////////////////////////////////////////////////////////////// 
                    12450 .................... ////                                                                   //// 
                    12451 .................... ////                           stdint.h                                //// 
                    12452 .................... ////                                                                   //// 
                    12453 .................... //// Standard integer definitions.                                     //// 
                    12454 .................... ////                                                                   //// 
                    12455 .................... /////////////////////////////////////////////////////////////////////////// 
                    12456 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    12457 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    12458 .................... //// compiler.  This source code may only be distributed to other      //// 
                    12459 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    12460 .................... //// or distribution is permitted without written permission.          //// 
                    12461 .................... //// Derivative programs created using this software in object code    //// 
                    12462 .................... //// form are not restricted in any way.                               //// 
                    12463 .................... /////////////////////////////////////////////////////////////////////////// 
                    12464 ....................  
                    12465 .................... #ifndef _STDINT 
                    12466 ....................  
                    12467 .................... #define _STDINT 
                    12468 ....................  
                    12469 .................... //////////// exact width 
                    12470 ....................  
                    12471 .................... typedef signed int8 int8_t; 
                    12472 .................... typedef unsigned int8 uint8_t; 
                    12473 .................... typedef signed int16 int16_t; 
                    12474 .................... typedef unsigned int16 uint16_t; 
                    12475 .................... typedef signed int32 int32_t; 
                    12476 .................... typedef unsigned int32 uint32_t; 
                    12477 ....................  
                    12478 .................... #if defined(__PCD__) 
                    12479 .................... //typedef signed int24 int24_t; 
                    12480 .................... //typedef unsigned int24 uint24_t; 
                    12481 .................... typedef signed int64 int64_t; 
                    12482 .................... typedef unsigned int64 uint64_t; 
                    12483 .................... #endif 
                    12484 ....................  
                    12485 .................... #define INT8_MAX  (128) 
                    12486 .................... #define INT8_MIN  (-127) 
                    12487 .................... #define UINT8_MAX (255) 
                    12488 ....................  
                    12489 .................... #define INT16_MAX  (32767) 
                    12490 .................... #define INT16_MIN  (-32768) 
                    12491 .................... #define UINT16_MAX (65535) 
                    12492 ....................  
                    12493 .................... #define INT32_MAX  (2147483647) 
                    12494 .................... #define INT32_MIN  (-2147483648) 
                    12495 .................... #define UINT32_MAX (4294967295) 
                    12496 ....................  
                    12497 .................... #if defined(__PCD__) 
                    12498 .................... //#define INT24_MAX  (8388607) 
                    12499 .................... //#define INT24_MIN  (-8388608) 
                    12500 .................... //#define UINT24_MAX (16777215) 
                    12501 ....................  
                    12502 .................... #define INT64_MAX  (9223372036854775807) 
                    12503 .................... #define INT64_MIN  (-9223372036854775808) 
                    12504 .................... #define UINT64_MAX (18446744073709551615) 
                    12505 .................... #endif 
                    12506 ....................  
                    12507 .................... ///////// minimum width 
                    12508 ....................  
                    12509 .................... typedef signed int8 int_least8_t; 
                    12510 .................... typedef unsigned int8 uint_least8_t; 
                    12511 .................... typedef signed int16 int_least16_t; 
                    12512 .................... typedef unsigned int16 uint_least16_t; 
                    12513 .................... typedef signed int32 int_least32_t; 
                    12514 .................... typedef unsigned int32 uint_least32_t; 
                    12515 ....................  
                    12516 .................... #if defined(__PCD__) 
                    12517 .................... //typedef signed int24 int_least24_t; 
                    12518 .................... //typedef unsigned int24 uint_least24_t; 
                    12519 .................... typedef signed int64 int_least64_t; 
                    12520 .................... typedef unsigned int64 uint_least64_t; 
                    12521 .................... #endif 
                    12522 ....................  
                    12523 .................... #define INT_LEAST8_MAX  (128) 
                    12524 .................... #define INT_LEAST8_MIN  (-127) 
                    12525 .................... #define UINT_LEAST8_MAX (255) 
                    12526 ....................  
                    12527 .................... #define INT_LEAST16_MAX  (32767) 
                    12528 .................... #define INT_LEAST16_MIN  (-32768) 
                    12529 .................... #define UINT_LEAST16_MAX (65535) 
                    12530 ....................  
                    12531 .................... #define INT_LEAST32_MAX  (2147483647) 
                    12532 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    12533 .................... #define UINT_LEAST32_MAX (4294967295) 
                    12534 ....................  
                    12535 .................... #if defined(__PCD__) 
                    12536 .................... //#define INT_LEAST24_MAX  (8388607) 
                    12537 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    12538 .................... //#define UINT_LEAST24_MAX (16777215) 
                    12539 ....................  
                    12540 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    12541 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    12542 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    12543 .................... #endif 
                    12544 ....................  
                    12545 .................... ///////// fastest width 
                    12546 ....................  
                    12547 .................... #if defined(__PCD__) 
                    12548 .................... typedef signed int16 int_fast8_t; 
                    12549 .................... typedef unsigned int16 uint_fast8_t; 
                    12550 .................... #define INT_FAST8_MAX  (32767) 
                    12551 .................... #define INT_FAST8_MIN  (-32768) 
                    12552 .................... #define UINT_FAST8_MAX (65535) 
                    12553 .................... typedef signed int16 int_fast16_t; 
                    12554 .................... typedef unsigned int16 uint_fast16_t; 
                    12555 .................... //typedef signed int24 int_fast24_t; 
                    12556 .................... //typedef unsigned int24 uint_fast24_t; 
                    12557 .................... typedef signed int64 int_fast64_t; 
                    12558 .................... typedef unsigned int64 uint_fast64_t; 
                    12559 .................... #else 
                    12560 .................... typedef signed int8 int_fast8_t; 
                    12561 .................... typedef unsigned int8 uint_fast8_t; 
                    12562 .................... #define INT_FAST8_MAX  (128) 
                    12563 .................... #define INT_FAST8_MIN  (-127) 
                    12564 .................... #define UINT_FAST8_MAX (255) 
                    12565 .................... typedef signed int16 int_fast16_t; 
                    12566 .................... typedef unsigned int16 uint_fast16_t; 
                    12567 .................... #endif 
                    12568 ....................  
                    12569 .................... typedef signed int32 int_fast32_t; 
                    12570 .................... typedef unsigned int32 uint_fast32_t; 
                    12571 ....................  
                    12572 .................... #define INT_FAST16_MAX  (32767) 
                    12573 .................... #define INT_FAST16_MIN  (-32768) 
                    12574 .................... #define UINT_FAST16_MAX (65535) 
                    12575 ....................  
                    12576 .................... #define INT_FAST32_MAX  (2147483647) 
                    12577 .................... #define INT_FAST32_MIN  (-2147483648) 
                    12578 .................... #define UINT_FAST32_MAX (4294967295) 
                    12579 ....................  
                    12580 .................... #if defined(__PCD__) 
                    12581 .................... //#define INT_FAST24_MAX  (8388607) 
                    12582 .................... //#define INT_FAST24_MIN  (-8388608) 
                    12583 .................... //#define UINT_FAST24_MAX (16777215) 
                    12584 ....................  
                    12585 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    12586 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    12587 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    12588 .................... #endif 
                    12589 ....................  
                    12590 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    12591 ....................  
                    12592 .................... /// TODO 
                    12593 ....................  
                    12594 .................... /// intptr_t uintptr_t 
                    12595 ....................  
                    12596 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    12597 ....................  
                    12598 ....................  
                    12599 .................... /////////// greatest width (OPTIONAL) 
                    12600 ....................  
                    12601 .................... /// TODO 
                    12602 ....................  
                    12603 .................... /// intmax_t uintmax_t 
                    12604 ....................  
                    12605 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    12606 ....................  
                    12607 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    12608 ....................  
                    12609 ....................  
                    12610 .................... #endif 
                    12611 ....................  
                    12612 .................... #include "calibration.h" 
                    12613 .................... #ifndef CALIBRATION_H_ 
                    12614 .................... #define CALIBRATION_H_ 
                    12615 ....................  
                    12616 .................... #include <stdint.h> 
                    12617 .................... /////////////////////////////////////////////////////////////////////////// 
                    12618 .................... ////                                                                   //// 
                    12619 .................... ////                           stdint.h                                //// 
                    12620 .................... ////                                                                   //// 
                    12621 .................... //// Standard integer definitions.                                     //// 
                    12622 .................... ////                                                                   //// 
                    12623 .................... /////////////////////////////////////////////////////////////////////////// 
                    12624 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    12625 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    12626 .................... //// compiler.  This source code may only be distributed to other      //// 
                    12627 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    12628 .................... //// or distribution is permitted without written permission.          //// 
                    12629 .................... //// Derivative programs created using this software in object code    //// 
                    12630 .................... //// form are not restricted in any way.                               //// 
                    12631 .................... /////////////////////////////////////////////////////////////////////////// 
                    12632 ....................  
                    12633 .................... #ifndef _STDINT 
                    12634 ....................  
                    12635 .................... #define _STDINT 
                    12636 ....................  
                    12637 .................... //////////// exact width 
                    12638 ....................  
                    12639 .................... typedef signed int8 int8_t; 
                    12640 .................... typedef unsigned int8 uint8_t; 
                    12641 .................... typedef signed int16 int16_t; 
                    12642 .................... typedef unsigned int16 uint16_t; 
                    12643 .................... typedef signed int32 int32_t; 
                    12644 .................... typedef unsigned int32 uint32_t; 
                    12645 ....................  
                    12646 .................... #if defined(__PCD__) 
                    12647 .................... //typedef signed int24 int24_t; 
                    12648 .................... //typedef unsigned int24 uint24_t; 
                    12649 .................... typedef signed int64 int64_t; 
                    12650 .................... typedef unsigned int64 uint64_t; 
                    12651 .................... #endif 
                    12652 ....................  
                    12653 .................... #define INT8_MAX  (128) 
                    12654 .................... #define INT8_MIN  (-127) 
                    12655 .................... #define UINT8_MAX (255) 
                    12656 ....................  
                    12657 .................... #define INT16_MAX  (32767) 
                    12658 .................... #define INT16_MIN  (-32768) 
                    12659 .................... #define UINT16_MAX (65535) 
                    12660 ....................  
                    12661 .................... #define INT32_MAX  (2147483647) 
                    12662 .................... #define INT32_MIN  (-2147483648) 
                    12663 .................... #define UINT32_MAX (4294967295) 
                    12664 ....................  
                    12665 .................... #if defined(__PCD__) 
                    12666 .................... //#define INT24_MAX  (8388607) 
                    12667 .................... //#define INT24_MIN  (-8388608) 
                    12668 .................... //#define UINT24_MAX (16777215) 
                    12669 ....................  
                    12670 .................... #define INT64_MAX  (9223372036854775807) 
                    12671 .................... #define INT64_MIN  (-9223372036854775808) 
                    12672 .................... #define UINT64_MAX (18446744073709551615) 
                    12673 .................... #endif 
                    12674 ....................  
                    12675 .................... ///////// minimum width 
                    12676 ....................  
                    12677 .................... typedef signed int8 int_least8_t; 
                    12678 .................... typedef unsigned int8 uint_least8_t; 
                    12679 .................... typedef signed int16 int_least16_t; 
                    12680 .................... typedef unsigned int16 uint_least16_t; 
                    12681 .................... typedef signed int32 int_least32_t; 
                    12682 .................... typedef unsigned int32 uint_least32_t; 
                    12683 ....................  
                    12684 .................... #if defined(__PCD__) 
                    12685 .................... //typedef signed int24 int_least24_t; 
                    12686 .................... //typedef unsigned int24 uint_least24_t; 
                    12687 .................... typedef signed int64 int_least64_t; 
                    12688 .................... typedef unsigned int64 uint_least64_t; 
                    12689 .................... #endif 
                    12690 ....................  
                    12691 .................... #define INT_LEAST8_MAX  (128) 
                    12692 .................... #define INT_LEAST8_MIN  (-127) 
                    12693 .................... #define UINT_LEAST8_MAX (255) 
                    12694 ....................  
                    12695 .................... #define INT_LEAST16_MAX  (32767) 
                    12696 .................... #define INT_LEAST16_MIN  (-32768) 
                    12697 .................... #define UINT_LEAST16_MAX (65535) 
                    12698 ....................  
                    12699 .................... #define INT_LEAST32_MAX  (2147483647) 
                    12700 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    12701 .................... #define UINT_LEAST32_MAX (4294967295) 
                    12702 ....................  
                    12703 .................... #if defined(__PCD__) 
                    12704 .................... //#define INT_LEAST24_MAX  (8388607) 
                    12705 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    12706 .................... //#define UINT_LEAST24_MAX (16777215) 
                    12707 ....................  
                    12708 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    12709 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    12710 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    12711 .................... #endif 
                    12712 ....................  
                    12713 .................... ///////// fastest width 
                    12714 ....................  
                    12715 .................... #if defined(__PCD__) 
                    12716 .................... typedef signed int16 int_fast8_t; 
                    12717 .................... typedef unsigned int16 uint_fast8_t; 
                    12718 .................... #define INT_FAST8_MAX  (32767) 
                    12719 .................... #define INT_FAST8_MIN  (-32768) 
                    12720 .................... #define UINT_FAST8_MAX (65535) 
                    12721 .................... typedef signed int16 int_fast16_t; 
                    12722 .................... typedef unsigned int16 uint_fast16_t; 
                    12723 .................... //typedef signed int24 int_fast24_t; 
                    12724 .................... //typedef unsigned int24 uint_fast24_t; 
                    12725 .................... typedef signed int64 int_fast64_t; 
                    12726 .................... typedef unsigned int64 uint_fast64_t; 
                    12727 .................... #else 
                    12728 .................... typedef signed int8 int_fast8_t; 
                    12729 .................... typedef unsigned int8 uint_fast8_t; 
                    12730 .................... #define INT_FAST8_MAX  (128) 
                    12731 .................... #define INT_FAST8_MIN  (-127) 
                    12732 .................... #define UINT_FAST8_MAX (255) 
                    12733 .................... typedef signed int16 int_fast16_t; 
                    12734 .................... typedef unsigned int16 uint_fast16_t; 
                    12735 .................... #endif 
                    12736 ....................  
                    12737 .................... typedef signed int32 int_fast32_t; 
                    12738 .................... typedef unsigned int32 uint_fast32_t; 
                    12739 ....................  
                    12740 .................... #define INT_FAST16_MAX  (32767) 
                    12741 .................... #define INT_FAST16_MIN  (-32768) 
                    12742 .................... #define UINT_FAST16_MAX (65535) 
                    12743 ....................  
                    12744 .................... #define INT_FAST32_MAX  (2147483647) 
                    12745 .................... #define INT_FAST32_MIN  (-2147483648) 
                    12746 .................... #define UINT_FAST32_MAX (4294967295) 
                    12747 ....................  
                    12748 .................... #if defined(__PCD__) 
                    12749 .................... //#define INT_FAST24_MAX  (8388607) 
                    12750 .................... //#define INT_FAST24_MIN  (-8388608) 
                    12751 .................... //#define UINT_FAST24_MAX (16777215) 
                    12752 ....................  
                    12753 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    12754 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    12755 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    12756 .................... #endif 
                    12757 ....................  
                    12758 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    12759 ....................  
                    12760 .................... /// TODO 
                    12761 ....................  
                    12762 .................... /// intptr_t uintptr_t 
                    12763 ....................  
                    12764 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    12765 ....................  
                    12766 ....................  
                    12767 .................... /////////// greatest width (OPTIONAL) 
                    12768 ....................  
                    12769 .................... /// TODO 
                    12770 ....................  
                    12771 .................... /// intmax_t uintmax_t 
                    12772 ....................  
                    12773 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    12774 ....................  
                    12775 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    12776 ....................  
                    12777 ....................  
                    12778 .................... #endif 
                    12779 ....................  
                    12780 .................... #include <stdbool.h> 
                    12781 .................... /////////////////////////////////////////////////////////////////////////// 
                    12782 .................... ////                                                                   //// 
                    12783 .................... ////                          stdbool.h                                //// 
                    12784 .................... ////                                                                   //// 
                    12785 .................... //// Standard boolean definitions                                      //// 
                    12786 .................... ////                                                                   //// 
                    12787 .................... /////////////////////////////////////////////////////////////////////////// 
                    12788 .................... ////        (C) Copyright 1996,2012 Custom Computer Services           //// 
                    12789 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    12790 .................... //// compiler.  This source code may only be distributed to other      //// 
                    12791 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    12792 .................... //// or distribution is permitted without written permission.          //// 
                    12793 .................... //// Derivative programs created using this software in object code    //// 
                    12794 .................... //// form are not restricted in any way.                               //// 
                    12795 .................... /////////////////////////////////////////////////////////////////////////// 
                    12796 ....................  
                    12797 .................... #ifndef __STDBOOL_H__ 
                    12798 .................... #define __STDBOOL_H__ 
                    12799 ....................  
                    12800 .................... //remove TRUE and FALSE added by CCS's device .h file 
                    12801 .................... #if defined(TRUE) 
                    12802 .................... #undef TRUE 
                    12803 .................... #endif 
                    12804 .................... #if defined(FALSE) 
                    12805 .................... #undef FALSE 
                    12806 .................... #endif 
                    12807 ....................  
                    12808 .................... typedef int1   bool; 
                    12809 .................... #define true   1 
                    12810 .................... #define false  0 
                    12811 .................... #define __bool_true_false_are_defined  1 
                    12812 ....................  
                    12813 .................... #endif 
                    12814 ....................  
                    12815 ....................  
                    12816 .................... #define CALIBRATION_AREA_START 0x4000 
                    12817 .................... #define CALIBRATION_AREA_END 0x4FFF 
                    12818 ....................  
                    12819 .................... typedef enum { 
                    12820 ....................   CALIBRATION_TABLE_PARAMS = 0, 
                    12821 ....................   CALIBRATION_TABLE_PA_GAINS_1 = 1, 
                    12822 ....................   CALIBRATION_TABLE_PA_GAINS_2 = 2, 
                    12823 ....................   CALIBRATION_TABLE_MAX = 3 
                    12824 .................... } calibration_table_id_t; 
                    12825 ....................  
                    12826 .................... typedef enum { 
                    12827 ....................   PARAM_CAL_TBL_VERSION = 0, 
                    12828 ....................   PARAM_SERIAL_NUM = 1, 
                    12829 ....................   PARAM_TEMP_MULT = 2, 
                    12830 ....................   PARAM_FWD_MULT = 3, 
                    12831 ....................   PARAM_REV_MULT = 4, 
                    12832 ....................   PARAM_INP_PWR_MULT = 5, 
                    12833 ....................   PARAM_PWR_CURRENT_MULT = 6, 
                    12834 ....................   PARAM_PRE_AMP_MULT = 7, 
                    12835 ....................   PARAM_ISENSE_PA1_MULT = 8, 
                    12836 ....................   PARAM_ISENSE_PA2_MULT = 9, 
                    12837 ....................   PARAM_BOOT_WAIT_TIME_USEC = 10, 
                    12838 ....................   PARAM_TX_ON_TIMING_USEC = 11, 
                    12839 ....................   PARAM_TX_OFF_TIMING_USEC = 12, 
                    12840 ....................   PARAM_PA_ON_TIMING_USEC = 13, 
                    12841 ....................   PARAM_PA_OFF_TIMING_USEC = 14, 
                    12842 ....................   PARAM_ANT_SEL_TIMING_USEC = 15, 
                    12843 ....................   PARAM_FWD_SAMP_TIMING_USEC = 16, 
                    12844 ....................   PARAM_REV_SAMP_TIMING_USEC = 17, 
                    12845 ....................   PARAM_INP_PWR_SAMP_TIMING_USEC = 18, 
                    12846 .................... } calibration_param_t; 
                    12847 ....................  
                    12848 .................... #define CALIBRATION_TABLE_INDEX_MAX 32 
                    12849 ....................  
                    12850 .................... void get_calibration_table_data(calibration_table_id_t table_id, void* table_data); 
                    12851 .................... void set_calibration_table_data(calibration_table_id_t table_id, void* table_data); 
                    12852 .................... #INLINE 
                    12853 .................... uint16_t get_calibration_param(calibration_table_id_t table, uint8_t index); 
                    12854 .................... void set_calibration_param(calibration_table_id_t table, uint8_t index, uint16_t value); 
                    12855 ....................  
                    12856 .................... #endif /* CALIBRATION_H_ */ 
                    12857 ....................  
                    12858 ....................  
                    12859 .................... enum { 
                    12860 ....................   NUM_ADC_SAMPLES = 4, 
                    12861 .................... }; 
                    12862 ....................  
                    12863 .................... enum { 
                    12864 ....................   OP_CONTROL_MESSAGE = 0x00, 
                    12865 ....................   OP_VERSION_REQUEST_MESSAGE = 0x02, 
                    12866 ....................   OP_CHANGE_MODE_MESSAGE = 0x03, 
                    12867 ....................   OP_SET_CALIBRATION_TABLE_MESSAGE = 0x04, 
                    12868 ....................   OP_GET_CALIBRATION_TABLE_MESSAGE = 0x05, 
                    12869 ....................   OP_SET_DATA_LINE_MESSAGE = 0x06, 
                    12870 ....................   OP_GET_DATA_LINE_MESSAGE = 0x07, 
                    12871 ....................   OP_FINISH_UPDATE_PROCESS_MESSAGE = 0x08, 
                    12872 ....................   OP_BIT_STATUS_REQUEST_MESSAGE = 0x09, 
                    12873 .................... }; 
                    12874 ....................  
                    12875 .................... enum { 
                    12876 ....................   OP_ACK_RESPONSE = 0x80, 
                    12877 ....................   OP_SF_STATUS_RESPONSE = 0x81, 
                    12878 ....................   OP_VERSION_RESPONSE = 0x82, 
                    12879 ....................   OP_GET_CALIBRATION_TABLE_RESPONSE = 0x85, 
                    12880 ....................   OP_SET_DATA_LINE_RESPONSE = 0x86, 
                    12881 ....................   OP_GET_DATA_LINE_RESPONSE = 0x87, 
                    12882 ....................   OP_BIT_STATUS_RESPONSE = 0x89, 
                    12883 .................... }; 
                    12884 ....................  
                    12885 .................... typedef enum { 
                    12886 ....................   MODE_OPERATIONAL = 0, 
                    12887 ....................   MODE_TECHNICIAN = 1, 
                    12888 ....................   MODE_MAINTENANCE = 2, 
                    12889 .................... } software_mode_t; 
                    12890 ....................  
                    12891 .................... enum { 
                    12892 ....................   CALIBRATION_TABLE_TEMP = 0, 
                    12893 ....................   CALIBRATION_TABLE_FWD = 1, 
                    12894 ....................   CALIBRATION_TABLE_REV = 2, 
                    12895 ....................   CALIBRATION_TABLE_INP = 3, 
                    12896 ....................   CALIBRATION_TABLE_CURRENT = 4, 
                    12897 ....................   CALIBRATION_TABLE_PA_BIAS = 5, 
                    12898 ....................   CALIBRATION_TABLE_TIMING = 6, 
                    12899 ....................   CALIBRATION_TABLE_GENERAL = 7, 
                    12900 .................... }; 
                    12901 ....................  
                    12902 .................... enum { 
                    12903 ....................   PROGRAMMING_STATUS_OK = 0, 
                    12904 ....................   PROGRAMMING_STATUS_ERROR = 1, 
                    12905 .................... }; 
                    12906 ....................  
                    12907 .................... typedef struct message_t { 
                    12908 ....................   uint8_t opcode; 
                    12909 ....................   uint8_t payload[]; /* this will include the payload and the crc */ 
                    12910 .................... } message_t; 
                    12911 ....................  
                    12912 .................... typedef struct generic_response_t { 
                    12913 ....................   uint8_t opcode; 
                    12914 .................... } generic_response_t; 
                    12915 ....................  
                    12916 .................... /* message payloads*/ 
                    12917 ....................  
                    12918 .................... typedef struct control_bits_t { 
                    12919 ....................   uint8_t tx_on : 1; 
                    12920 ....................   uint8_t pa_gain : 3; 
                    12921 ....................   uint8_t tx_ant : 1; 
                    12922 ....................   uint8_t amplifier_operation_frequency : 1; 
                    12923 ....................   uint8_t reset : 1; 
                    12924 ....................   uint8_t dont_change : 1; 
                    12925 .................... } control_bits_t; 
                    12926 ....................  
                    12927 .................... typedef struct control_message_payload_t { 
                    12928 ....................   control_bits_t bits; 
                    12929 ....................   uint16_t control_identifier; 
                    12930 .................... } control_message_payload_t; 
                    12931 ....................  
                    12932 .................... typedef struct change_mode_message_payload_t { 
                    12933 ....................   uint8_t mode; 
                    12934 .................... } change_mode_message_payload_t; 
                    12935 ....................  
                    12936 ....................  
                    12937 .................... typedef struct set_calibration_table_message_payload_t { 
                    12938 ....................   uint8_t table_id; 
                    12939 ....................   uint16_t params[CALIBRATION_TABLE_INDEX_MAX]; 
                    12940 .................... } set_calibration_table_message_payload_t; 
                    12941 ....................  
                    12942 .................... typedef struct get_calibration_table_message_payload_t { 
                    12943 ....................   uint8_t table_id; 
                    12944 .................... } get_calibration_table_message_payload_t; 
                    12945 ....................  
                    12946 .................... typedef struct set_data_line_payload_t { 
                    12947 ....................   uint32_t address; 
                    12948 ....................   uint8_t data[64]; 
                    12949 .................... } set_data_line_payload_t; 
                    12950 ....................  
                    12951 .................... typedef struct get_data_line_payload_t { 
                    12952 ....................   uint32_t address; 
                    12953 .................... } get_data_line_payload_t; 
                    12954 ....................  
                    12955 .................... /* responses */ 
                    12956 ....................  
                    12957 .................... typedef struct ack_response_t { 
                    12958 ....................   generic_response_t generic; 
                    12959 .................... } ack_response_t; 
                    12960 ....................  
                    12961 .................... typedef struct sf_status_response_t { 
                    12962 ....................   generic_response_t generic; 
                    12963 ....................   control_bits_t last_control_bits; 
                    12964 ....................   uint16_t tti_counter; 
                    12965 ....................   uint16_t control_identifier; 
                    12966 ....................   uint16_t fwd_power_values[NUM_ADC_SAMPLES]; 
                    12967 ....................   uint16_t reverse_power_values[NUM_ADC_SAMPLES]; 
                    12968 ....................   uint16_t input_power_values[NUM_ADC_SAMPLES]; 
                    12969 ....................   uint16_t pre_amp_power_values[NUM_ADC_SAMPLES]; 
                    12970 ....................   uint16_t temperature; 
                    12971 ....................   uint16_t power_amplifier_current; 
                    12972 .................... } sf_status_response_t; 
                    12973 ....................  
                    12974 .................... typedef struct bit_status_response_t { 
                    12975 ....................   generic_response_t generic; 
                    12976 ....................   control_bits_t last_control_bits; 
                    12977 ....................   uint16_t tti_counter; 
                    12978 ....................   uint8_t mode; 
                    12979 .................... } bit_status_response_t; 
                    12980 ....................  
                    12981 .................... typedef struct version_response_t { 
                    12982 ....................   generic_response_t generic; 
                    12983 ....................   uint8_t day; 
                    12984 ....................   uint8_t month; 
                    12985 ....................   uint16_t year; 
                    12986 ....................   uint8_t major; 
                    12987 ....................   uint8_t minor; 
                    12988 ....................   uint16_t serial_number; 
                    12989 .................... } version_response_t; 
                    12990 ....................  
                    12991 .................... typedef struct calibration_table_response_t { 
                    12992 ....................   generic_response_t generic; 
                    12993 ....................   uint8_t table_id; 
                    12994 ....................   uint16_t params[CALIBRATION_TABLE_INDEX_MAX]; 
                    12995 .................... } calibration_table_response_t; 
                    12996 ....................  
                    12997 .................... typedef struct set_data_line_response_t { 
                    12998 ....................   generic_response_t generic; 
                    12999 ....................   uint32_t address; 
                    13000 ....................   uint8_t status; 
                    13001 .................... } set_data_line_response_t; 
                    13002 ....................  
                    13003 .................... typedef struct get_data_line_response_t { 
                    13004 ....................   generic_response_t generic; 
                    13005 ....................   uint32_t address; 
                    13006 ....................   uint8_t data[64]; 
                    13007 .................... } get_data_line_response_t; 
                    13008 ....................  
                    13009 .................... #endif /* MESSAGE_H_ */ 
                    13010 ....................  
                    13011 .................... #include "message_handlers.h" 
                    13012 .................... /* 
                    13013 ....................  * message_handlers.h 
                    13014 ....................  * 
                    13015 ....................  *  Created on: Mar 26, 2017 
                    13016 ....................  *      Author: asaf 
                    13017 ....................  */ 
                    13018 ....................  
                    13019 .................... #ifndef MESSAGE_HANDLERS_H_ 
                    13020 .................... #define MESSAGE_HANDLERS_H_ 
                    13021 ....................  
                    13022 .................... void init_message_handlers(); 
                    13023 .................... void process_message(uint8_t* message, uint16_t length); 
                    13024 .................... #INLINE 
                    13025 .................... void perform_last_control_message(); 
                    13026 .................... void control_handle_timer(); 
                    13027 .................... void samp_if_needed(); 
                    13028 ....................  
                    13029 .................... #endif /* MESSAGE_HANDLERS_H_ */ 
                    13030 ....................  
                    13031 .................... #include "comm.h" 
                    13032 .................... /* 
                    13033 ....................  * comm.h 
                    13034 ....................  * 
                    13035 ....................  *  Created on: Mar 23, 2017 
                    13036 ....................  *      Author: asaf 
                    13037 ....................  */ 
                    13038 ....................  
                    13039 .................... #ifndef COMM_H_ 
                    13040 .................... #define COMM_H_ 
                    13041 ....................  
                    13042 .................... #include <stdint.h> 
                    13043 .................... /////////////////////////////////////////////////////////////////////////// 
                    13044 .................... ////                                                                   //// 
                    13045 .................... ////                           stdint.h                                //// 
                    13046 .................... ////                                                                   //// 
                    13047 .................... //// Standard integer definitions.                                     //// 
                    13048 .................... ////                                                                   //// 
                    13049 .................... /////////////////////////////////////////////////////////////////////////// 
                    13050 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    13051 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    13052 .................... //// compiler.  This source code may only be distributed to other      //// 
                    13053 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    13054 .................... //// or distribution is permitted without written permission.          //// 
                    13055 .................... //// Derivative programs created using this software in object code    //// 
                    13056 .................... //// form are not restricted in any way.                               //// 
                    13057 .................... /////////////////////////////////////////////////////////////////////////// 
                    13058 ....................  
                    13059 .................... #ifndef _STDINT 
                    13060 ....................  
                    13061 .................... #define _STDINT 
                    13062 ....................  
                    13063 .................... //////////// exact width 
                    13064 ....................  
                    13065 .................... typedef signed int8 int8_t; 
                    13066 .................... typedef unsigned int8 uint8_t; 
                    13067 .................... typedef signed int16 int16_t; 
                    13068 .................... typedef unsigned int16 uint16_t; 
                    13069 .................... typedef signed int32 int32_t; 
                    13070 .................... typedef unsigned int32 uint32_t; 
                    13071 ....................  
                    13072 .................... #if defined(__PCD__) 
                    13073 .................... //typedef signed int24 int24_t; 
                    13074 .................... //typedef unsigned int24 uint24_t; 
                    13075 .................... typedef signed int64 int64_t; 
                    13076 .................... typedef unsigned int64 uint64_t; 
                    13077 .................... #endif 
                    13078 ....................  
                    13079 .................... #define INT8_MAX  (128) 
                    13080 .................... #define INT8_MIN  (-127) 
                    13081 .................... #define UINT8_MAX (255) 
                    13082 ....................  
                    13083 .................... #define INT16_MAX  (32767) 
                    13084 .................... #define INT16_MIN  (-32768) 
                    13085 .................... #define UINT16_MAX (65535) 
                    13086 ....................  
                    13087 .................... #define INT32_MAX  (2147483647) 
                    13088 .................... #define INT32_MIN  (-2147483648) 
                    13089 .................... #define UINT32_MAX (4294967295) 
                    13090 ....................  
                    13091 .................... #if defined(__PCD__) 
                    13092 .................... //#define INT24_MAX  (8388607) 
                    13093 .................... //#define INT24_MIN  (-8388608) 
                    13094 .................... //#define UINT24_MAX (16777215) 
                    13095 ....................  
                    13096 .................... #define INT64_MAX  (9223372036854775807) 
                    13097 .................... #define INT64_MIN  (-9223372036854775808) 
                    13098 .................... #define UINT64_MAX (18446744073709551615) 
                    13099 .................... #endif 
                    13100 ....................  
                    13101 .................... ///////// minimum width 
                    13102 ....................  
                    13103 .................... typedef signed int8 int_least8_t; 
                    13104 .................... typedef unsigned int8 uint_least8_t; 
                    13105 .................... typedef signed int16 int_least16_t; 
                    13106 .................... typedef unsigned int16 uint_least16_t; 
                    13107 .................... typedef signed int32 int_least32_t; 
                    13108 .................... typedef unsigned int32 uint_least32_t; 
                    13109 ....................  
                    13110 .................... #if defined(__PCD__) 
                    13111 .................... //typedef signed int24 int_least24_t; 
                    13112 .................... //typedef unsigned int24 uint_least24_t; 
                    13113 .................... typedef signed int64 int_least64_t; 
                    13114 .................... typedef unsigned int64 uint_least64_t; 
                    13115 .................... #endif 
                    13116 ....................  
                    13117 .................... #define INT_LEAST8_MAX  (128) 
                    13118 .................... #define INT_LEAST8_MIN  (-127) 
                    13119 .................... #define UINT_LEAST8_MAX (255) 
                    13120 ....................  
                    13121 .................... #define INT_LEAST16_MAX  (32767) 
                    13122 .................... #define INT_LEAST16_MIN  (-32768) 
                    13123 .................... #define UINT_LEAST16_MAX (65535) 
                    13124 ....................  
                    13125 .................... #define INT_LEAST32_MAX  (2147483647) 
                    13126 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    13127 .................... #define UINT_LEAST32_MAX (4294967295) 
                    13128 ....................  
                    13129 .................... #if defined(__PCD__) 
                    13130 .................... //#define INT_LEAST24_MAX  (8388607) 
                    13131 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    13132 .................... //#define UINT_LEAST24_MAX (16777215) 
                    13133 ....................  
                    13134 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    13135 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    13136 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    13137 .................... #endif 
                    13138 ....................  
                    13139 .................... ///////// fastest width 
                    13140 ....................  
                    13141 .................... #if defined(__PCD__) 
                    13142 .................... typedef signed int16 int_fast8_t; 
                    13143 .................... typedef unsigned int16 uint_fast8_t; 
                    13144 .................... #define INT_FAST8_MAX  (32767) 
                    13145 .................... #define INT_FAST8_MIN  (-32768) 
                    13146 .................... #define UINT_FAST8_MAX (65535) 
                    13147 .................... typedef signed int16 int_fast16_t; 
                    13148 .................... typedef unsigned int16 uint_fast16_t; 
                    13149 .................... //typedef signed int24 int_fast24_t; 
                    13150 .................... //typedef unsigned int24 uint_fast24_t; 
                    13151 .................... typedef signed int64 int_fast64_t; 
                    13152 .................... typedef unsigned int64 uint_fast64_t; 
                    13153 .................... #else 
                    13154 .................... typedef signed int8 int_fast8_t; 
                    13155 .................... typedef unsigned int8 uint_fast8_t; 
                    13156 .................... #define INT_FAST8_MAX  (128) 
                    13157 .................... #define INT_FAST8_MIN  (-127) 
                    13158 .................... #define UINT_FAST8_MAX (255) 
                    13159 .................... typedef signed int16 int_fast16_t; 
                    13160 .................... typedef unsigned int16 uint_fast16_t; 
                    13161 .................... #endif 
                    13162 ....................  
                    13163 .................... typedef signed int32 int_fast32_t; 
                    13164 .................... typedef unsigned int32 uint_fast32_t; 
                    13165 ....................  
                    13166 .................... #define INT_FAST16_MAX  (32767) 
                    13167 .................... #define INT_FAST16_MIN  (-32768) 
                    13168 .................... #define UINT_FAST16_MAX (65535) 
                    13169 ....................  
                    13170 .................... #define INT_FAST32_MAX  (2147483647) 
                    13171 .................... #define INT_FAST32_MIN  (-2147483648) 
                    13172 .................... #define UINT_FAST32_MAX (4294967295) 
                    13173 ....................  
                    13174 .................... #if defined(__PCD__) 
                    13175 .................... //#define INT_FAST24_MAX  (8388607) 
                    13176 .................... //#define INT_FAST24_MIN  (-8388608) 
                    13177 .................... //#define UINT_FAST24_MAX (16777215) 
                    13178 ....................  
                    13179 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    13180 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    13181 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    13182 .................... #endif 
                    13183 ....................  
                    13184 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    13185 ....................  
                    13186 .................... /// TODO 
                    13187 ....................  
                    13188 .................... /// intptr_t uintptr_t 
                    13189 ....................  
                    13190 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    13191 ....................  
                    13192 ....................  
                    13193 .................... /////////// greatest width (OPTIONAL) 
                    13194 ....................  
                    13195 .................... /// TODO 
                    13196 ....................  
                    13197 .................... /// intmax_t uintmax_t 
                    13198 ....................  
                    13199 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    13200 ....................  
                    13201 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    13202 ....................  
                    13203 ....................  
                    13204 .................... #endif 
                    13205 ....................  
                    13206 .................... #include <stdbool.h> 
                    13207 .................... /////////////////////////////////////////////////////////////////////////// 
                    13208 .................... ////                                                                   //// 
                    13209 .................... ////                          stdbool.h                                //// 
                    13210 .................... ////                                                                   //// 
                    13211 .................... //// Standard boolean definitions                                      //// 
                    13212 .................... ////                                                                   //// 
                    13213 .................... /////////////////////////////////////////////////////////////////////////// 
                    13214 .................... ////        (C) Copyright 1996,2012 Custom Computer Services           //// 
                    13215 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    13216 .................... //// compiler.  This source code may only be distributed to other      //// 
                    13217 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    13218 .................... //// or distribution is permitted without written permission.          //// 
                    13219 .................... //// Derivative programs created using this software in object code    //// 
                    13220 .................... //// form are not restricted in any way.                               //// 
                    13221 .................... /////////////////////////////////////////////////////////////////////////// 
                    13222 ....................  
                    13223 .................... #ifndef __STDBOOL_H__ 
                    13224 .................... #define __STDBOOL_H__ 
                    13225 ....................  
                    13226 .................... //remove TRUE and FALSE added by CCS's device .h file 
                    13227 .................... #if defined(TRUE) 
                    13228 .................... #undef TRUE 
                    13229 .................... #endif 
                    13230 .................... #if defined(FALSE) 
                    13231 .................... #undef FALSE 
                    13232 .................... #endif 
                    13233 ....................  
                    13234 .................... typedef int1   bool; 
                    13235 .................... #define true   1 
                    13236 .................... #define false  0 
                    13237 .................... #define __bool_true_false_are_defined  1 
                    13238 ....................  
                    13239 .................... #endif 
                    13240 ....................  
                    13241 ....................  
                    13242 .................... #define MSG_MAX_MESSAGE_LEN 80 
                    13243 ....................  
                    13244 .................... #ifndef MIN 
                    13245 .................... #define MIN(x,y) ((x)<(y)?(x):(y)) 
                    13246 .................... #endif 
                    13247 .................... #ifndef MAX 
                    13248 .................... #define	MAX(a,b) (((a)>(b))?(a):(b)) 
                    13249 .................... #endif 
                    13250 ....................  
                    13251 .................... #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0])) 
                    13252 .................... #define MAX_INDEX_IN_ARRAY(x) (ARRAY_SIZE(x)-1) 
                    13253 ....................  
                    13254 .................... void comm_init(); 
                    13255 .................... bool comm_receive_message(void* buffer, uint16_t* size); 
                    13256 .................... void comm_send_message(void* buffer, uint16_t size); 
                    13257 ....................  
                    13258 ....................  
                    13259 ....................  
                    13260 .................... #endif /* COMM_H_ */ 
                    13261 ....................  
                    13262 .................... #include "gpio.h" 
                    13263 .................... /* 
                    13264 ....................  * gpio.h 
                    13265 ....................  * 
                    13266 ....................  *  Created on: Mar 8, 2017 
                    13267 ....................  *      Author: asafe 
                    13268 ....................  */ 
                    13269 ....................  
                    13270 .................... #ifndef INCLUDE_GPIO_H_ 
                    13271 .................... #define INCLUDE_GPIO_H_ 
                    13272 ....................  
                    13273 .................... #include <stdint.h> 
                    13274 .................... /////////////////////////////////////////////////////////////////////////// 
                    13275 .................... ////                                                                   //// 
                    13276 .................... ////                           stdint.h                                //// 
                    13277 .................... ////                                                                   //// 
                    13278 .................... //// Standard integer definitions.                                     //// 
                    13279 .................... ////                                                                   //// 
                    13280 .................... /////////////////////////////////////////////////////////////////////////// 
                    13281 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    13282 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    13283 .................... //// compiler.  This source code may only be distributed to other      //// 
                    13284 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    13285 .................... //// or distribution is permitted without written permission.          //// 
                    13286 .................... //// Derivative programs created using this software in object code    //// 
                    13287 .................... //// form are not restricted in any way.                               //// 
                    13288 .................... /////////////////////////////////////////////////////////////////////////// 
                    13289 ....................  
                    13290 .................... #ifndef _STDINT 
                    13291 ....................  
                    13292 .................... #define _STDINT 
                    13293 ....................  
                    13294 .................... //////////// exact width 
                    13295 ....................  
                    13296 .................... typedef signed int8 int8_t; 
                    13297 .................... typedef unsigned int8 uint8_t; 
                    13298 .................... typedef signed int16 int16_t; 
                    13299 .................... typedef unsigned int16 uint16_t; 
                    13300 .................... typedef signed int32 int32_t; 
                    13301 .................... typedef unsigned int32 uint32_t; 
                    13302 ....................  
                    13303 .................... #if defined(__PCD__) 
                    13304 .................... //typedef signed int24 int24_t; 
                    13305 .................... //typedef unsigned int24 uint24_t; 
                    13306 .................... typedef signed int64 int64_t; 
                    13307 .................... typedef unsigned int64 uint64_t; 
                    13308 .................... #endif 
                    13309 ....................  
                    13310 .................... #define INT8_MAX  (128) 
                    13311 .................... #define INT8_MIN  (-127) 
                    13312 .................... #define UINT8_MAX (255) 
                    13313 ....................  
                    13314 .................... #define INT16_MAX  (32767) 
                    13315 .................... #define INT16_MIN  (-32768) 
                    13316 .................... #define UINT16_MAX (65535) 
                    13317 ....................  
                    13318 .................... #define INT32_MAX  (2147483647) 
                    13319 .................... #define INT32_MIN  (-2147483648) 
                    13320 .................... #define UINT32_MAX (4294967295) 
                    13321 ....................  
                    13322 .................... #if defined(__PCD__) 
                    13323 .................... //#define INT24_MAX  (8388607) 
                    13324 .................... //#define INT24_MIN  (-8388608) 
                    13325 .................... //#define UINT24_MAX (16777215) 
                    13326 ....................  
                    13327 .................... #define INT64_MAX  (9223372036854775807) 
                    13328 .................... #define INT64_MIN  (-9223372036854775808) 
                    13329 .................... #define UINT64_MAX (18446744073709551615) 
                    13330 .................... #endif 
                    13331 ....................  
                    13332 .................... ///////// minimum width 
                    13333 ....................  
                    13334 .................... typedef signed int8 int_least8_t; 
                    13335 .................... typedef unsigned int8 uint_least8_t; 
                    13336 .................... typedef signed int16 int_least16_t; 
                    13337 .................... typedef unsigned int16 uint_least16_t; 
                    13338 .................... typedef signed int32 int_least32_t; 
                    13339 .................... typedef unsigned int32 uint_least32_t; 
                    13340 ....................  
                    13341 .................... #if defined(__PCD__) 
                    13342 .................... //typedef signed int24 int_least24_t; 
                    13343 .................... //typedef unsigned int24 uint_least24_t; 
                    13344 .................... typedef signed int64 int_least64_t; 
                    13345 .................... typedef unsigned int64 uint_least64_t; 
                    13346 .................... #endif 
                    13347 ....................  
                    13348 .................... #define INT_LEAST8_MAX  (128) 
                    13349 .................... #define INT_LEAST8_MIN  (-127) 
                    13350 .................... #define UINT_LEAST8_MAX (255) 
                    13351 ....................  
                    13352 .................... #define INT_LEAST16_MAX  (32767) 
                    13353 .................... #define INT_LEAST16_MIN  (-32768) 
                    13354 .................... #define UINT_LEAST16_MAX (65535) 
                    13355 ....................  
                    13356 .................... #define INT_LEAST32_MAX  (2147483647) 
                    13357 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    13358 .................... #define UINT_LEAST32_MAX (4294967295) 
                    13359 ....................  
                    13360 .................... #if defined(__PCD__) 
                    13361 .................... //#define INT_LEAST24_MAX  (8388607) 
                    13362 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    13363 .................... //#define UINT_LEAST24_MAX (16777215) 
                    13364 ....................  
                    13365 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    13366 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    13367 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    13368 .................... #endif 
                    13369 ....................  
                    13370 .................... ///////// fastest width 
                    13371 ....................  
                    13372 .................... #if defined(__PCD__) 
                    13373 .................... typedef signed int16 int_fast8_t; 
                    13374 .................... typedef unsigned int16 uint_fast8_t; 
                    13375 .................... #define INT_FAST8_MAX  (32767) 
                    13376 .................... #define INT_FAST8_MIN  (-32768) 
                    13377 .................... #define UINT_FAST8_MAX (65535) 
                    13378 .................... typedef signed int16 int_fast16_t; 
                    13379 .................... typedef unsigned int16 uint_fast16_t; 
                    13380 .................... //typedef signed int24 int_fast24_t; 
                    13381 .................... //typedef unsigned int24 uint_fast24_t; 
                    13382 .................... typedef signed int64 int_fast64_t; 
                    13383 .................... typedef unsigned int64 uint_fast64_t; 
                    13384 .................... #else 
                    13385 .................... typedef signed int8 int_fast8_t; 
                    13386 .................... typedef unsigned int8 uint_fast8_t; 
                    13387 .................... #define INT_FAST8_MAX  (128) 
                    13388 .................... #define INT_FAST8_MIN  (-127) 
                    13389 .................... #define UINT_FAST8_MAX (255) 
                    13390 .................... typedef signed int16 int_fast16_t; 
                    13391 .................... typedef unsigned int16 uint_fast16_t; 
                    13392 .................... #endif 
                    13393 ....................  
                    13394 .................... typedef signed int32 int_fast32_t; 
                    13395 .................... typedef unsigned int32 uint_fast32_t; 
                    13396 ....................  
                    13397 .................... #define INT_FAST16_MAX  (32767) 
                    13398 .................... #define INT_FAST16_MIN  (-32768) 
                    13399 .................... #define UINT_FAST16_MAX (65535) 
                    13400 ....................  
                    13401 .................... #define INT_FAST32_MAX  (2147483647) 
                    13402 .................... #define INT_FAST32_MIN  (-2147483648) 
                    13403 .................... #define UINT_FAST32_MAX (4294967295) 
                    13404 ....................  
                    13405 .................... #if defined(__PCD__) 
                    13406 .................... //#define INT_FAST24_MAX  (8388607) 
                    13407 .................... //#define INT_FAST24_MIN  (-8388608) 
                    13408 .................... //#define UINT_FAST24_MAX (16777215) 
                    13409 ....................  
                    13410 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    13411 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    13412 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    13413 .................... #endif 
                    13414 ....................  
                    13415 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    13416 ....................  
                    13417 .................... /// TODO 
                    13418 ....................  
                    13419 .................... /// intptr_t uintptr_t 
                    13420 ....................  
                    13421 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    13422 ....................  
                    13423 ....................  
                    13424 .................... /////////// greatest width (OPTIONAL) 
                    13425 ....................  
                    13426 .................... /// TODO 
                    13427 ....................  
                    13428 .................... /// intmax_t uintmax_t 
                    13429 ....................  
                    13430 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    13431 ....................  
                    13432 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    13433 ....................  
                    13434 ....................  
                    13435 .................... #endif 
                    13436 ....................  
                    13437 .................... #include "gpio.h" 
                    13438 .................... /* 
                    13439 ....................  * gpio.h 
                    13440 ....................  * 
                    13441 ....................  *  Created on: Mar 8, 2017 
                    13442 ....................  *      Author: asafe 
                    13443 ....................  */ 
                    13444 ....................  
                    13445 .................... #ifndef INCLUDE_GPIO_H_ 
                    13446 .................... #define INCLUDE_GPIO_H_ 
                    13447 ....................  
                    13448 .................... #include <stdint.h> 
                    13449 .................... #include "gpio.h" 
                    13450 ....................  
                    13451 .................... enum { 
                    13452 ....................     GPIO_DIR_IN     = 0, 
                    13453 ....................     GPIO_DIR_OUT    = 1, 
                    13454 ....................     GPIO_ANALOG     = 2, 
                    13455 ....................  
                    13456 ....................     GPIO_VALUE_LOW = 0, 
                    13457 ....................     GPIO_VALUE_HIGH = 1, 
                    13458 .................... }; 
                    13459 ....................  
                    13460 .................... typedef struct gpio_st { 
                    13461 ....................     uint32_t pin; 
                    13462 ....................     int dir; 
                    13463 ....................     char *gpio_name; 
                    13464 .................... } st_gpio; 
                    13465 ....................  
                    13466 .................... /* this is the deceleration that a developer will use to access a specific GPIO */ 
                    13467 .................... /* this list should be identical in order to the <Bold> st_gpio gpios [] </Bold> list in gpio.c */ 
                    13468 ....................  
                    13469 .................... enum { 
                    13470 ....................     GPIO_DAC_CLK        = 0, 
                    13471 ....................     GPIO_DAC_CS         = 1, 
                    13472 ....................     GPIO_DAC_DATA_OUT   = 2, 
                    13473 ....................     GPIO_DAC_LDAC       = 3, 
                    13474 ....................  
                    13475 ....................     GPIO_LED            = 4, 
                    13476 ....................  
                    13477 ....................     GPIO_PA1_ISENSE     = 5, 
                    13478 ....................     GPIO_PA2_ISENSE     = 6, 
                    13479 ....................     GPIO_FFWR           = 7, 
                    13480 ....................     GPIO_RREV           = 8, 
                    13481 ....................     GPIO_RF_INDET       = 9, 
                    13482 ....................     GPIO_TMP            = 10, 
                    13483 ....................     GPIO_PREAMP_DET     = 11, 
                    13484 ....................  
                    13485 ....................     GPIO_ANT_SEL        = 12, 
                    13486 ....................     GPIO_ANT_SELN       = 13, 
                    13487 ....................     GPIO_TX_RX_SEL      = 14, 
                    13488 ....................     GPIO_TX_RX_ENV      = 15, 
                    13489 ....................     GPIO_TX_RX_ENVM     = 16, 
                    13490 ....................  
                    13491 ....................     GPIO_5V_EN          = 17, 
                    13492 ....................  
                    13493 .................... }; 
                    13494 ....................  
                    13495 .................... /* Inputs */ 
                    13496 .................... enum { 
                    13497 ....................  
                    13498 .................... }; 
                    13499 ....................  
                    13500 ....................  
                    13501 .................... void gpio_init(); 
                    13502 .................... int gpio_toggle(int gpio); 
                    13503 .................... #INLINE 
                    13504 .................... void gpio_set(int gpio); 
                    13505 .................... void gpio_clear(int gpio); 
                    13506 .................... #INLINE 
                    13507 .................... void gpio_set_value(int gpio, int value); 
                    13508 .................... int gpio_get(int gpio); 
                    13509 .................... #INLINE 
                    13510 .................... uint32_t gpio_get_analog(int gpio); 
                    13511 ....................  
                    13512 .................... #endif /* INCLUDE_GPIO_H_ */ 
                    13513 ....................  
                    13514 ....................  
                    13515 .................... enum { 
                    13516 ....................     GPIO_DIR_IN     = 0, 
                    13517 ....................     GPIO_DIR_OUT    = 1, 
                    13518 ....................     GPIO_ANALOG     = 2, 
                    13519 ....................  
                    13520 ....................     GPIO_VALUE_LOW = 0, 
                    13521 ....................     GPIO_VALUE_HIGH = 1, 
                    13522 .................... }; 
                    13523 ....................  
                    13524 .................... typedef struct gpio_st { 
                    13525 ....................     uint32_t pin; 
                    13526 ....................     int dir; 
                    13527 ....................     char *gpio_name; 
                    13528 .................... } st_gpio; 
                    13529 ....................  
                    13530 .................... /* this is the deceleration that a developer will use to access a specific GPIO */ 
                    13531 .................... /* this list should be identical in order to the <Bold> st_gpio gpios [] </Bold> list in gpio.c */ 
                    13532 ....................  
                    13533 .................... enum { 
                    13534 ....................     GPIO_DAC_CLK        = 0, 
                    13535 ....................     GPIO_DAC_CS         = 1, 
                    13536 ....................     GPIO_DAC_DATA_OUT   = 2, 
                    13537 ....................     GPIO_DAC_LDAC       = 3, 
                    13538 ....................  
                    13539 ....................     GPIO_LED            = 4, 
                    13540 ....................  
                    13541 ....................     GPIO_PA1_ISENSE     = 5, 
                    13542 ....................     GPIO_PA2_ISENSE     = 6, 
                    13543 ....................     GPIO_FFWR           = 7, 
                    13544 ....................     GPIO_RREV           = 8, 
                    13545 ....................     GPIO_RF_INDET       = 9, 
                    13546 ....................     GPIO_TMP            = 10, 
                    13547 ....................     GPIO_PREAMP_DET     = 11, 
                    13548 ....................  
                    13549 ....................     GPIO_ANT_SEL        = 12, 
                    13550 ....................     GPIO_ANT_SELN       = 13, 
                    13551 ....................     GPIO_TX_RX_SEL      = 14, 
                    13552 ....................     GPIO_TX_RX_ENV      = 15, 
                    13553 ....................     GPIO_TX_RX_ENVM     = 16, 
                    13554 ....................  
                    13555 ....................     GPIO_5V_EN          = 17, 
                    13556 ....................  
                    13557 .................... }; 
                    13558 ....................  
                    13559 .................... /* Inputs */ 
                    13560 .................... enum { 
                    13561 ....................  
                    13562 .................... }; 
                    13563 ....................  
                    13564 ....................  
                    13565 .................... void gpio_init(); 
                    13566 .................... int gpio_toggle(int gpio); 
                    13567 .................... #INLINE 
                    13568 .................... void gpio_set(int gpio); 
                    13569 .................... void gpio_clear(int gpio); 
                    13570 .................... #INLINE 
                    13571 .................... void gpio_set_value(int gpio, int value); 
                    13572 .................... int gpio_get(int gpio); 
                    13573 .................... #INLINE 
                    13574 .................... uint32_t gpio_get_analog(int gpio); 
                    13575 ....................  
                    13576 .................... #endif /* INCLUDE_GPIO_H_ */ 
                    13577 ....................  
                    13578 .................... #include "version.h" 
                    13579 .................... #ifndef VERSION_H_ 
                    13580 .................... #define VERSION_H_ 
                    13581 ....................  
                    13582 .................... #define VERSION_DAY 18 
                    13583 .................... #define VERSION_MONTH 6 
                    13584 .................... #define VERSION_YEAR 2018 
                    13585 .................... #define VERSION_MAJOR 1 
                    13586 .................... #define VERSION_MINOR 14 
                    13587 ....................  
                    13588 .................... #endif /* VERSION_H_ */ 
                    13589 ....................  
                    13590 .................... #include "calibration.h" 
                    13591 .................... #ifndef CALIBRATION_H_ 
                    13592 .................... #define CALIBRATION_H_ 
                    13593 ....................  
                    13594 .................... #include <stdint.h> 
                    13595 .................... #include <stdbool.h> 
                    13596 ....................  
                    13597 .................... #define CALIBRATION_AREA_START 0x4000 
                    13598 .................... #define CALIBRATION_AREA_END 0x4FFF 
                    13599 ....................  
                    13600 .................... typedef enum { 
                    13601 ....................   CALIBRATION_TABLE_PARAMS = 0, 
                    13602 ....................   CALIBRATION_TABLE_PA_GAINS_1 = 1, 
                    13603 ....................   CALIBRATION_TABLE_PA_GAINS_2 = 2, 
                    13604 ....................   CALIBRATION_TABLE_MAX = 3 
                    13605 .................... } calibration_table_id_t; 
                    13606 ....................  
                    13607 .................... typedef enum { 
                    13608 ....................   PARAM_CAL_TBL_VERSION = 0, 
                    13609 ....................   PARAM_SERIAL_NUM = 1, 
                    13610 ....................   PARAM_TEMP_MULT = 2, 
                    13611 ....................   PARAM_FWD_MULT = 3, 
                    13612 ....................   PARAM_REV_MULT = 4, 
                    13613 ....................   PARAM_INP_PWR_MULT = 5, 
                    13614 ....................   PARAM_PWR_CURRENT_MULT = 6, 
                    13615 ....................   PARAM_PRE_AMP_MULT = 7, 
                    13616 ....................   PARAM_ISENSE_PA1_MULT = 8, 
                    13617 ....................   PARAM_ISENSE_PA2_MULT = 9, 
                    13618 ....................   PARAM_BOOT_WAIT_TIME_USEC = 10, 
                    13619 ....................   PARAM_TX_ON_TIMING_USEC = 11, 
                    13620 ....................   PARAM_TX_OFF_TIMING_USEC = 12, 
                    13621 ....................   PARAM_PA_ON_TIMING_USEC = 13, 
                    13622 ....................   PARAM_PA_OFF_TIMING_USEC = 14, 
                    13623 ....................   PARAM_ANT_SEL_TIMING_USEC = 15, 
                    13624 ....................   PARAM_FWD_SAMP_TIMING_USEC = 16, 
                    13625 ....................   PARAM_REV_SAMP_TIMING_USEC = 17, 
                    13626 ....................   PARAM_INP_PWR_SAMP_TIMING_USEC = 18, 
                    13627 .................... } calibration_param_t; 
                    13628 ....................  
                    13629 .................... #define CALIBRATION_TABLE_INDEX_MAX 32 
                    13630 ....................  
                    13631 .................... void get_calibration_table_data(calibration_table_id_t table_id, void* table_data); 
                    13632 .................... void set_calibration_table_data(calibration_table_id_t table_id, void* table_data); 
                    13633 .................... #INLINE 
                    13634 .................... uint16_t get_calibration_param(calibration_table_id_t table, uint8_t index); 
                    13635 .................... void set_calibration_param(calibration_table_id_t table, uint8_t index, uint16_t value); 
                    13636 ....................  
                    13637 .................... #endif /* CALIBRATION_H_ */ 
                    13638 ....................  
                    13639 .................... #include "ad5312.h" 
                    13640 .................... /* 
                    13641 ....................  * ad5312.h 
                    13642 ....................  * 
                    13643 ....................  *  Created on: Oct 13, 2016 
                    13644 ....................  *      Author: asaf 
                    13645 ....................  */ 
                    13646 ....................  
                    13647 .................... #ifndef AD5312_H_ 
                    13648 .................... #define AD5312_H_ 
                    13649 ....................  
                    13650 .................... enum { 
                    13651 .................... 	DAC_SELECT_BIT = 15, 
                    13652 .................... 	REF_BUF_BIT = 14, 
                    13653 .................... 	PD1_BIT = 13, 
                    13654 .................... 	PD2_BIT = 12, 
                    13655 .................... 	PD_ARR_START_BIT = PD2_BIT, 
                    13656 .................... }; 
                    13657 ....................  
                    13658 .................... enum { 
                    13659 .................... 	DAC_A = 0, 
                    13660 .................... 	DAC_B = 1, 
                    13661 .................... }; 
                    13662 ....................  
                    13663 .................... enum { 
                    13664 .................... 	REF_UNBUFFERED = 0, 
                    13665 .................... 	REF_BUFFERED = 1, 
                    13666 .................... }; 
                    13667 ....................  
                    13668 .................... /* Power Down Modes */ 
                    13669 .................... enum { 
                    13670 .................... 	PD_NORMAL = 0, 
                    13671 .................... 	PD_1K_TO_GND = 1, 
                    13672 .................... 	PD_100K_TO_GND = 2, 
                    13673 .................... 	PD_HIGH_IMPEDANCE_OUTPUT = 3, 
                    13674 .................... }; 
                    13675 ....................  
                    13676 .................... enum { 
                    13677 .................... 	VREF_FULL_SCALE = 5000, /* mV */ 
                    13678 .................... 	DAC_PRECISION = 1024 , /* bits */ 
                    13679 .................... }; 
                    13680 ....................  
                    13681 .................... #INLINE 
                    13682 .................... void ad5312_setVout(int dac, uint16_t mV); 
                    13683 .................... void ad5312_init(); 
                    13684 .................... #INLINE 
                    13685 .................... void ad5312_latch(); 
                    13686 ....................  
                    13687 .................... #endif /* AD5312_H_ */ 
                    13688 ....................  
                    13689 ....................  
                    13690 .................... static uint16_t tti_counter; 
                    13691 .................... static software_mode_t software_mode; 
                    13692 ....................  
                    13693 .................... static void send_ack() { 
                    13694 ....................   ack_response_t response = {}; 
625C 0104           13695 MOVLB  4
625E 6B01           13696 CLRF   x01
                    13697 ....................   response.generic.opcode = OP_ACK_RESPONSE; 
6260 0E80           13698 MOVLW  80
6262 6F01           13699 MOVWF  x01
                    13700 ....................   comm_send_message(&response, sizeof(response)); 
6264 0E04           13701 MOVLW  04
6266 6F45           13702 MOVWF  x45
6268 0E01           13703 MOVLW  01
626A 6F44           13704 MOVWF  x44
626C 6B47           13705 CLRF   x47
626E 6F46           13706 MOVWF  x46
6270 0100           13707 MOVLB  0
6272 EC48 F02B      13708 CALL   5690
                    13709 .................... } 
6276 0012           13710 RETURN 0
                    13711 ....................  
                    13712 .................... control_message_payload_t prev_control_message; 
                    13713 .................... control_message_payload_t last_control_message; 
                    13714 ....................  
                    13715 .................... static sf_status_response_t final_sf_status_response; 
                    13716 .................... static sf_status_response_t in_progress_sf_status_response; 
                    13717 ....................  
                    13718 .................... static void set_tx_state(bool on) { 
                    13719 ....................   gpio_set_value(GPIO_TX_RX_SEL, on); 
2308 0E0E           13720 MOVLW  0E
230A 0104           13721 MOVLB  4
230C 6F67           13722 MOVWF  x67
230E C465 F468      13723 MOVFF  465,468
                    13724 ....................   gpio_set_value(GPIO_TX_RX_ENV, on); 
2378 0E0F           13725 MOVLW  0F
237A 0104           13726 MOVLB  4
237C 6F67           13727 MOVWF  x67
237E C465 F468      13728 MOVFF  465,468
                    13729 ....................   gpio_set_value(GPIO_TX_RX_ENVM, !on); 
23E8 0104           13730 MOVLB  4
23EA 5365           13731 MOVF   x65,F
23EC E002           13732 BZ    23F2
23EE 0E00           13733 MOVLW  00
23F0 D001           13734 BRA    23F4
23F2 0E01           13735 MOVLW  01
23F4 6F66           13736 MOVWF  x66
23F6 0E10           13737 MOVLW  10
23F8 6F67           13738 MOVWF  x67
23FA C466 F468      13739 MOVFF  466,468
                    13740 .................... } 
2464 0012           13741 RETURN 0
                    13742 ....................  
                    13743 .................... static void set_pa_gain(uint8_t amplifier_operation_frequency, uint8_t gain) { 
56C2 0104           13744 MOVLB  4
56C4 532F           13745 MOVF   x2F,F
56C6 E002           13746 BZ    56CC
56C8 0E02           13747 MOVLW  02
56CA D001           13748 BRA    56CE
56CC 0E01           13749 MOVLW  01
56CE 6F33           13750 MOVWF  x33
56D0 C433 F465      13751 MOVFF  433,465
56D4 C430 F466      13752 MOVFF  430,466
572C C002 F432      13753 MOVFF  02,432
5730 C001 F431      13754 MOVFF  01,431
                    13755 ....................   uint16_t value = get_calibration_param(amplifier_operation_frequency != 0 ? CALIBRATION_TABLE_PA_GAINS_2 : CALIBRATION_TABLE_PA_GAINS_1, gain); 
                    13756 ....................   if(value == 0xffff) { 
5734 3D31           13757 INCFSZ x31,W
5736 D004           13758 BRA    5740
5738 3D32           13759 INCFSZ x32,W
573A D002           13760 BRA    5740
                    13761 ....................     /* make sure that empty memory won't cause high external output */ 
                    13762 ....................     value = 0; 
573C 6B32           13763 CLRF   x32
573E 6B31           13764 CLRF   x31
                    13765 ....................   } 
                    13766 ....................   ad5312_setVout(DAC_A, value); 
5740 6B33           13767 CLRF   x33
5742 C432 F435      13768 MOVFF  432,435
5746 C431 F434      13769 MOVFF  431,434
                    13770 ....................  
                    13771 ....................   value = get_calibration_param(amplifier_operation_frequency != 0 ? CALIBRATION_TABLE_PA_GAINS_2 : CALIBRATION_TABLE_PA_GAINS_1, (CALIBRATION_TABLE_INDEX_MAX / 2) + gain); 
57BE 0104           13772 MOVLB  4
57C0 532F           13773 MOVF   x2F,F
57C2 E002           13774 BZ    57C8
57C4 0E02           13775 MOVLW  02
57C6 D001           13776 BRA    57CA
57C8 0E01           13777 MOVLW  01
57CA 6F33           13778 MOVWF  x33
57CC 0E10           13779 MOVLW  10
57CE 2530           13780 ADDWF  x30,W
57D0 6F34           13781 MOVWF  x34
57D2 C433 F465      13782 MOVFF  433,465
57D6 C434 F466      13783 MOVFF  434,466
582E C002 F432      13784 MOVFF  02,432
5832 C001 F431      13785 MOVFF  01,431
                    13786 ....................   if(value == 0xffff) { 
5836 3D31           13787 INCFSZ x31,W
5838 D004           13788 BRA    5842
583A 3D32           13789 INCFSZ x32,W
583C D002           13790 BRA    5842
                    13791 ....................     /* make sure that empty memory won't cause high external output */ 
                    13792 ....................     value = 0; 
583E 6B32           13793 CLRF   x32
5840 6B31           13794 CLRF   x31
                    13795 ....................   } 
                    13796 ....................   ad5312_setVout(DAC_B, value); 
5842 0E01           13797 MOVLW  01
5844 6F33           13798 MOVWF  x33
5846 C432 F435      13799 MOVFF  432,435
584A C431 F434      13800 MOVFF  431,434
                    13801 .................... } 
58C2 EF7A F030      13802 GOTO   60F4 (RETURN)
                    13803 ....................  
                    13804 .................... #INLINE 
                    13805 .................... static void select_antenna(uint8_t antenna) { 
                    13806 ....................   gpio_set_value(GPIO_ANT_SEL, antenna); 
2FCA 0E0C           13807 MOVLW  0C
2FCC 6F67           13808 MOVWF  x67
2FCE C465 F468      13809 MOVFF  465,468
3848 0E0C           13810 MOVLW  0C
384A 6F67           13811 MOVWF  x67
384C C465 F468      13812 MOVFF  465,468
5B2C 0E0C           13813 MOVLW  0C
5B2E 6F67           13814 MOVWF  x67
5B30 C465 F468      13815 MOVFF  465,468
                    13816 ....................   gpio_set_value(GPIO_ANT_SELN, !antenna); 
303E 0104           13817 MOVLB  4
3040 5365           13818 MOVF   x65,F
3042 E002           13819 BZ    3048
3044 0E00           13820 MOVLW  00
3046 D001           13821 BRA    304A
3048 0E01           13822 MOVLW  01
304A 6F66           13823 MOVWF  x66
304C 0E0D           13824 MOVLW  0D
304E 6F67           13825 MOVWF  x67
3050 C466 F468      13826 MOVFF  466,468
30C0 0000           13827 NOP   
30C2 0101           13828 MOVLB  1
38BC 0104           13829 MOVLB  4
38BE 5365           13830 MOVF   x65,F
38C0 E002           13831 BZ    38C6
38C2 0E00           13832 MOVLW  00
38C4 D001           13833 BRA    38C8
38C6 0E01           13834 MOVLW  01
38C8 6F66           13835 MOVWF  x66
38CA 0E0D           13836 MOVLW  0D
38CC 6F67           13837 MOVWF  x67
38CE C466 F468      13838 MOVFF  466,468
393E 0000           13839 NOP   
3940 0101           13840 MOVLB  1
5BA0 0104           13841 MOVLB  4
5BA2 5365           13842 MOVF   x65,F
5BA4 E002           13843 BZ    5BAA
5BA6 0E00           13844 MOVLW  00
5BA8 D001           13845 BRA    5BAC
5BAA 0E01           13846 MOVLW  01
5BAC 6F66           13847 MOVWF  x66
5BAE 0E0D           13848 MOVLW  0D
5BB0 6F67           13849 MOVWF  x67
5BB2 C466 F468      13850 MOVFF  466,468
5C22 0000           13851 NOP   
5C24 0101           13852 MOVLB  1
                    13853 .................... } 
                    13854 ....................  
                    13855 .................... static void sample_fwd_power(int n) { 
                    13856 ....................   in_progress_sf_status_response.fwd_power_values[n] = gpio_get_analog(GPIO_FFWR);// * get_calibration_param(CALIBRATION_TABLE_PARAMS, PARAM_FWD_MULT) / 1000; 
24C6 90D8           13857 BCF    FD8.0
24C8 0104           13858 MOVLB  4
24CA 3565           13859 RLCF   x65,W
24CC 6A03           13860 CLRF   03
24CE 0F4C           13861 ADDLW  4C
24D0 6E01           13862 MOVWF  01
24D2 0E01           13863 MOVLW  01
24D4 2203           13864 ADDWFC 03,F
24D6 5001           13865 MOVF   01,W
24D8 6F66           13866 MOVWF  x66
24DA C003 F467      13867 MOVFF  03,467
24DE 0E07           13868 MOVLW  07
24E0 6F68           13869 MOVWF  x68
2560 C467 FFEA      13870 MOVFF  467,FEA
2564 C466 FFE9      13871 MOVFF  466,FE9
2568 C000 FFEF      13872 MOVFF  00,FEF
256C C001 FFEC      13873 MOVFF  01,FEC
                    13874 .................... } 
2570 0100           13875 MOVLB  0
2572 0012           13876 RETURN 0
                    13877 ....................  
                    13878 .................... static void sample_rev_power(int n) { 
                    13879 ....................   in_progress_sf_status_response.reverse_power_values[n] = gpio_get_analog(GPIO_RREV);// * get_calibration_param(CALIBRATION_TABLE_PARAMS, PARAM_REV_MULT) / 1000; 
2574 90D8           13880 BCF    FD8.0
2576 0104           13881 MOVLB  4
2578 3565           13882 RLCF   x65,W
257A 6A03           13883 CLRF   03
257C 0F54           13884 ADDLW  54
257E 6E01           13885 MOVWF  01
2580 0E01           13886 MOVLW  01
2582 2203           13887 ADDWFC 03,F
2584 5001           13888 MOVF   01,W
2586 6F66           13889 MOVWF  x66
2588 C003 F467      13890 MOVFF  03,467
258C 0E08           13891 MOVLW  08
258E 6F68           13892 MOVWF  x68
260E C467 FFEA      13893 MOVFF  467,FEA
2612 C466 FFE9      13894 MOVFF  466,FE9
2616 C000 FFEF      13895 MOVFF  00,FEF
261A C001 FFEC      13896 MOVFF  01,FEC
                    13897 .................... } 
261E 0100           13898 MOVLB  0
2620 0012           13899 RETURN 0
                    13900 ....................  
                    13901 .................... static void sample_input_power(int n) { 
                    13902 ....................   in_progress_sf_status_response.input_power_values[n] = gpio_get_analog(GPIO_RF_INDET);// * get_calibration_param(CALIBRATION_TABLE_PARAMS, PARAM_INP_PWR_MULT) / 1000; 
2622 90D8           13903 BCF    FD8.0
2624 0104           13904 MOVLB  4
2626 3565           13905 RLCF   x65,W
2628 6A03           13906 CLRF   03
262A 0F5C           13907 ADDLW  5C
262C 6E01           13908 MOVWF  01
262E 0E01           13909 MOVLW  01
2630 2203           13910 ADDWFC 03,F
2632 5001           13911 MOVF   01,W
2634 6F66           13912 MOVWF  x66
2636 C003 F467      13913 MOVFF  03,467
263A 0E09           13914 MOVLW  09
263C 6F68           13915 MOVWF  x68
26BC C467 FFEA      13916 MOVFF  467,FEA
26C0 C466 FFE9      13917 MOVFF  466,FE9
26C4 C000 FFEF      13918 MOVFF  00,FEF
26C8 C001 FFEC      13919 MOVFF  01,FEC
                    13920 .................... } 
26CC 0100           13921 MOVLB  0
26CE 0012           13922 RETURN 0
                    13923 ....................  
                    13924 .................... static void sample_pre_amp_power(int n) { 
                    13925 ....................   in_progress_sf_status_response.pre_amp_power_values[n] = gpio_get_analog(GPIO_PREAMP_DET);// * get_calibration_param(CALIBRATION_TABLE_PARAMS, PARAM_PRE_AMP_MULT) / 1000; 
2F02 90D8           13926 BCF    FD8.0
2F04 0104           13927 MOVLB  4
2F06 3565           13928 RLCF   x65,W
2F08 6A03           13929 CLRF   03
2F0A 0F64           13930 ADDLW  64
2F0C 6F66           13931 MOVWF  x66
2F0E 0E01           13932 MOVLW  01
2F10 2003           13933 ADDWFC 03,W
2F12 6F67           13934 MOVWF  x67
2F14 0E0B           13935 MOVLW  0B
2F16 6F68           13936 MOVWF  x68
2F98 C467 FFEA      13937 MOVFF  467,FEA
2F9C C466 FFE9      13938 MOVFF  466,FE9
2FA0 C000 FFEF      13939 MOVFF  00,FEF
2FA4 C001 FFEC      13940 MOVFF  01,FEC
                    13941 .................... } 
2FA8 0100           13942 MOVLB  0
2FAA 0012           13943 RETURN 0
                    13944 ....................  
                    13945 .................... static void finalize_sf_status_request_response() { 
                    13946 ....................   final_sf_status_response = in_progress_sf_status_response; 
2466 0E01           13947 MOVLW  01
2468 6EEA           13948 MOVWF  FEA
246A 0E1C           13949 MOVLW  1C
246C 6EE9           13950 MOVWF  FE9
246E 0E01           13951 MOVLW  01
2470 6EE2           13952 MOVWF  FE2
2472 0E46           13953 MOVLW  46
2474 6EE1           13954 MOVWF  FE1
2476 0E2A           13955 MOVLW  2A
2478 6E01           13956 MOVWF  01
247A CFE6 FFEE      13957 MOVFF  FE6,FEE
247E 2E01           13958 DECFSZ 01,F
2480 D7FC           13959 BRA    247A
                    13960 .................... } 
2482 0012           13961 RETURN 0
                    13962 ....................  
                    13963 .................... /* sample the 4 adc inputs with delay between them */ 
                    13964 .................... #INLINE 
                    13965 .................... void sample_adc_inputs(int n) { 
                    13966 ....................   delay_us(get_calibration_param(CALIBRATION_TABLE_PARAMS, PARAM_FWD_SAMP_TIMING_USEC)); 
319E 6B65           13967 CLRF   x65
31A0 0E10           13968 MOVLW  10
31A2 6F66           13969 MOVWF  x66
31F8 C002 F466      13970 MOVFF  02,466
31FC C001 F465      13971 MOVFF  01,465
3200 C466 F467      13972 MOVFF  466,467
3204 2B67           13973 INCF   x67,F
3206 0767           13974 DECF   x67,F
3208 B4D8           13975 BTFSC  FD8.2
320A D006           13976 BRA    3218
320C 6968           13977 SETF   x68
320E 0100           13978 MOVLB  0
3210 EC51 F012      13979 CALL   24A2
3214 0104           13980 MOVLB  4
3216 D7F7           13981 BRA    3206
3218 C465 F468      13982 MOVFF  465,468
321C 0100           13983 MOVLB  0
321E EC51 F012      13984 CALL   24A2
3A1C 6B65           13985 CLRF   x65
3A1E 0E10           13986 MOVLW  10
3A20 6F66           13987 MOVWF  x66
3A76 C002 F466      13988 MOVFF  02,466
3A7A C001 F465      13989 MOVFF  01,465
3A7E C466 F467      13990 MOVFF  466,467
3A82 2B67           13991 INCF   x67,F
3A84 0767           13992 DECF   x67,F
3A86 B4D8           13993 BTFSC  FD8.2
3A88 D006           13994 BRA    3A96
3A8A 6968           13995 SETF   x68
3A8C 0100           13996 MOVLB  0
3A8E EC51 F012      13997 CALL   24A2
3A92 0104           13998 MOVLB  4
3A94 D7F7           13999 BRA    3A84
3A96 C465 F468      14000 MOVFF  465,468
3A9A 0100           14001 MOVLB  0
3A9C EC51 F012      14002 CALL   24A2
5D00 6B65           14003 CLRF   x65
5D02 0E10           14004 MOVLW  10
5D04 6F66           14005 MOVWF  x66
5D5A C002 F466      14006 MOVFF  02,466
5D5E C001 F465      14007 MOVFF  01,465
5D62 C466 F467      14008 MOVFF  466,467
5D66 2B67           14009 INCF   x67,F
5D68 0767           14010 DECF   x67,F
5D6A B4D8           14011 BTFSC  FD8.2
5D6C D006           14012 BRA    5D7A
5D6E 6968           14013 SETF   x68
5D70 0100           14014 MOVLB  0
5D72 EC51 F012      14015 CALL   24A2
5D76 0104           14016 MOVLB  4
5D78 D7F7           14017 BRA    5D68
5D7A C465 F468      14018 MOVFF  465,468
5D7E 0100           14019 MOVLB  0
5D80 EC51 F012      14020 CALL   24A2
                    14021 ....................   sample_fwd_power(n); 
3222 C464 F465      14022 MOVFF  464,465
3226 EC63 F012      14023 CALL   24C6
3AA0 C464 F465      14024 MOVFF  464,465
3AA4 EC63 F012      14025 CALL   24C6
5D84 C464 F465      14026 MOVFF  464,465
5D88 EC63 F012      14027 CALL   24C6
                    14028 ....................   delay_us(get_calibration_param(CALIBRATION_TABLE_PARAMS, PARAM_REV_SAMP_TIMING_USEC)); 
322A 0104           14029 MOVLB  4
322C 6B65           14030 CLRF   x65
322E 0E11           14031 MOVLW  11
3230 6F66           14032 MOVWF  x66
3286 C002 F466      14033 MOVFF  02,466
328A C001 F465      14034 MOVFF  01,465
328E C466 F467      14035 MOVFF  466,467
3292 2B67           14036 INCF   x67,F
3294 0767           14037 DECF   x67,F
3296 B4D8           14038 BTFSC  FD8.2
3298 D006           14039 BRA    32A6
329A 6968           14040 SETF   x68
329C 0100           14041 MOVLB  0
329E EC51 F012      14042 CALL   24A2
32A2 0104           14043 MOVLB  4
32A4 D7F7           14044 BRA    3294
32A6 C465 F468      14045 MOVFF  465,468
32AA 0100           14046 MOVLB  0
32AC EC51 F012      14047 CALL   24A2
3AA8 0104           14048 MOVLB  4
3AAA 6B65           14049 CLRF   x65
3AAC 0E11           14050 MOVLW  11
3AAE 6F66           14051 MOVWF  x66
3B04 C002 F466      14052 MOVFF  02,466
3B08 C001 F465      14053 MOVFF  01,465
3B0C C466 F467      14054 MOVFF  466,467
3B10 2B67           14055 INCF   x67,F
3B12 0767           14056 DECF   x67,F
3B14 B4D8           14057 BTFSC  FD8.2
3B16 D006           14058 BRA    3B24
3B18 6968           14059 SETF   x68
3B1A 0100           14060 MOVLB  0
3B1C EC51 F012      14061 CALL   24A2
3B20 0104           14062 MOVLB  4
3B22 D7F7           14063 BRA    3B12
3B24 C465 F468      14064 MOVFF  465,468
3B28 0100           14065 MOVLB  0
3B2A EC51 F012      14066 CALL   24A2
5D8C 0104           14067 MOVLB  4
5D8E 6B65           14068 CLRF   x65
5D90 0E11           14069 MOVLW  11
5D92 6F66           14070 MOVWF  x66
5DE8 C002 F466      14071 MOVFF  02,466
5DEC C001 F465      14072 MOVFF  01,465
5DF0 C466 F467      14073 MOVFF  466,467
5DF4 2B67           14074 INCF   x67,F
5DF6 0767           14075 DECF   x67,F
5DF8 B4D8           14076 BTFSC  FD8.2
5DFA D006           14077 BRA    5E08
5DFC 6968           14078 SETF   x68
5DFE 0100           14079 MOVLB  0
5E00 EC51 F012      14080 CALL   24A2
5E04 0104           14081 MOVLB  4
5E06 D7F7           14082 BRA    5DF6
5E08 C465 F468      14083 MOVFF  465,468
5E0C 0100           14084 MOVLB  0
5E0E EC51 F012      14085 CALL   24A2
                    14086 ....................   sample_rev_power(n); 
32B0 C464 F465      14087 MOVFF  464,465
32B4 ECBA F012      14088 CALL   2574
3B2E C464 F465      14089 MOVFF  464,465
3B32 ECBA F012      14090 CALL   2574
5E12 C464 F465      14091 MOVFF  464,465
5E16 ECBA F012      14092 CALL   2574
                    14093 ....................   delay_us(get_calibration_param(CALIBRATION_TABLE_PARAMS, PARAM_INP_PWR_SAMP_TIMING_USEC)); 
32B8 0104           14094 MOVLB  4
32BA 6B65           14095 CLRF   x65
32BC 0E12           14096 MOVLW  12
32BE 6F66           14097 MOVWF  x66
3314 C002 F466      14098 MOVFF  02,466
3318 C001 F465      14099 MOVFF  01,465
331C C466 F467      14100 MOVFF  466,467
3320 2B67           14101 INCF   x67,F
3322 0767           14102 DECF   x67,F
3324 B4D8           14103 BTFSC  FD8.2
3326 D006           14104 BRA    3334
3328 6968           14105 SETF   x68
332A 0100           14106 MOVLB  0
332C EC51 F012      14107 CALL   24A2
3330 0104           14108 MOVLB  4
3332 D7F7           14109 BRA    3322
3334 C465 F468      14110 MOVFF  465,468
3338 0100           14111 MOVLB  0
333A EC51 F012      14112 CALL   24A2
3B36 0104           14113 MOVLB  4
3B38 6B65           14114 CLRF   x65
3B3A 0E12           14115 MOVLW  12
3B3C 6F66           14116 MOVWF  x66
3B92 C002 F466      14117 MOVFF  02,466
3B96 C001 F465      14118 MOVFF  01,465
3B9A C466 F467      14119 MOVFF  466,467
3B9E 2B67           14120 INCF   x67,F
3BA0 0767           14121 DECF   x67,F
3BA2 B4D8           14122 BTFSC  FD8.2
3BA4 D006           14123 BRA    3BB2
3BA6 6968           14124 SETF   x68
3BA8 0100           14125 MOVLB  0
3BAA EC51 F012      14126 CALL   24A2
3BAE 0104           14127 MOVLB  4
3BB0 D7F7           14128 BRA    3BA0
3BB2 C465 F468      14129 MOVFF  465,468
3BB6 0100           14130 MOVLB  0
3BB8 EC51 F012      14131 CALL   24A2
5E1A 0104           14132 MOVLB  4
5E1C 6B65           14133 CLRF   x65
5E1E 0E12           14134 MOVLW  12
5E20 6F66           14135 MOVWF  x66
5E76 C002 F466      14136 MOVFF  02,466
5E7A C001 F465      14137 MOVFF  01,465
5E7E C466 F467      14138 MOVFF  466,467
5E82 2B67           14139 INCF   x67,F
5E84 0767           14140 DECF   x67,F
5E86 B4D8           14141 BTFSC  FD8.2
5E88 D006           14142 BRA    5E96
5E8A 6968           14143 SETF   x68
5E8C 0100           14144 MOVLB  0
5E8E EC51 F012      14145 CALL   24A2
5E92 0104           14146 MOVLB  4
5E94 D7F7           14147 BRA    5E84
5E96 C465 F468      14148 MOVFF  465,468
5E9A 0100           14149 MOVLB  0
5E9C EC51 F012      14150 CALL   24A2
                    14151 ....................   sample_input_power(n); 
333E C464 F465      14152 MOVFF  464,465
3342 EC11 F013      14153 CALL   2622
3BBC C464 F465      14154 MOVFF  464,465
3BC0 EC11 F013      14155 CALL   2622
5EA0 C464 F465      14156 MOVFF  464,465
5EA4 EC11 F013      14157 CALL   2622
                    14158 ....................   sample_pre_amp_power(n); 
3346 C464 F465      14159 MOVFF  464,465
334A DDDB           14160 RCALL  2F02
334C 0000           14161 NOP   
3BC4 C464 F465      14162 MOVFF  464,465
3BC8 EC81 F017      14163 CALL   2F02
3BCC 0000           14164 NOP   
5EA8 C464 F465      14165 MOVFF  464,465
5EAC EC81 F017      14166 CALL   2F02
5EB0 0000           14167 NOP   
                    14168 .................... } 
                    14169 ....................  
                    14170 .................... void sample_adc_inputs_helper(void *arg) { 
                    14171 ....................   sample_adc_inputs((int)arg); 
                    14172 .................... } 
                    14173 ....................  
                    14174 .................... static uint16_t ant_delay = 0; 
                    14175 .................... static uint16_t pa_delay = 0; 
                    14176 .................... static uint16_t delay_tx_time = 0; 
                    14177 ....................  
                    14178 .................... #if 0 
                    14179 .................... static uint16_t adc_samp_to_sample = 0; 
                    14180 ....................  
                    14181 .................... void samp_if_needed() { 
                    14182 ....................   if(adc_samp_to_sample != 0) { 
                    14183 ....................     sample_adc_inputs(4-adc_samp_to_sample); 
                    14184 ....................     adc_samp_to_sample--; 
                    14185 ....................   } 
                    14186 .................... } 
                    14187 .................... #endif 
                    14188 ....................  
                    14189 .................... #INLINE 
                    14190 .................... void perform_last_control_message() { 
                    14191 ....................   int i; 
                    14192 ....................  
                    14193 ....................   if(!last_control_message.bits.dont_change) { 
2FAC 0101           14194 MOVLB  1
2FAE BF19           14195 BTFSC  x19.7
2FB0 D0EB           14196 BRA    3188
382C BF19           14197 BTFSC  x19.7
382E D0EB           14198 BRA    3A06
5B10 BF19           14199 BTFSC  x19.7
5B12 D0EB           14200 BRA    5CEA
                    14201 ....................     /* set antenna (delay if needed) */ 
                    14202 ....................     if(last_control_message.bits.tx_ant != prev_control_message.bits.tx_ant) { 
2FB2 5119           14203 MOVF   x19,W
2FB4 1916           14204 XORWF  x16,W
2FB6 0B10           14205 ANDLW  10
2FB8 B4D8           14206 BTFSC  FD8.2
2FBA D084           14207 BRA    30C4
3830 5119           14208 MOVF   x19,W
3832 1916           14209 XORWF  x16,W
3834 0B10           14210 ANDLW  10
3836 B4D8           14211 BTFSC  FD8.2
3838 D084           14212 BRA    3942
5B14 5119           14213 MOVF   x19,W
5B16 1916           14214 XORWF  x16,W
5B18 0B10           14215 ANDLW  10
5B1A B4D8           14216 BTFSC  FD8.2
5B1C D084           14217 BRA    5C26
                    14218 ....................       //delay_us(ant_delay); 
                    14219 ....................       select_antenna(last_control_message.bits.tx_ant);  
2FBC 0E00           14220 MOVLW  00
2FBE B919           14221 BTFSC  x19.4
2FC0 0E01           14222 MOVLW  01
2FC2 0104           14223 MOVLB  4
2FC4 6F64           14224 MOVWF  x64
2FC6 C464 F465      14225 MOVFF  464,465
383A 0E00           14226 MOVLW  00
383C B919           14227 BTFSC  x19.4
383E 0E01           14228 MOVLW  01
3840 0104           14229 MOVLB  4
3842 6F64           14230 MOVWF  x64
3844 C464 F465      14231 MOVFF  464,465
5B1E 0E00           14232 MOVLW  00
5B20 B919           14233 BTFSC  x19.4
5B22 0E01           14234 MOVLW  01
5B24 0104           14235 MOVLB  4
5B26 6F64           14236 MOVWF  x64
5B28 C464 F465      14237 MOVFF  464,465
                    14238 ....................     } 
                    14239 ....................    
                    14240 ....................     /* set pa gain (delay if needed) */ 
                    14241 ....................     bool is_pa_gain_changed = last_control_message.bits.pa_gain != prev_control_message.bits.pa_gain 
                    14242 ....................       || last_control_message.bits.amplifier_operation_frequency != prev_control_message.bits.amplifier_operation_frequency; 
30C4 0104           14243 MOVLB  4
30C6 915F           14244 BCF    x5F.0
30C8 0101           14245 MOVLB  1
30CA 3119           14246 RRCF   x19,W
30CC 0B07           14247 ANDLW  07
30CE 0104           14248 MOVLB  4
30D0 6F64           14249 MOVWF  x64
30D2 0101           14250 MOVLB  1
30D4 C116 F000      14251 MOVFF  116,00
30D8 3116           14252 RRCF   x16,W
30DA 0B07           14253 ANDLW  07
30DC 0104           14254 MOVLB  4
30DE 5D64           14255 SUBWF  x64,W
30E0 E106           14256 BNZ   30EE
30E2 0101           14257 MOVLB  1
30E4 5119           14258 MOVF   x19,W
30E6 1916           14259 XORWF  x16,W
30E8 0B20           14260 ANDLW  20
30EA E003           14261 BZ    30F2
30EC 0104           14262 MOVLB  4
30EE 815F           14263 BSF    x5F.0
30F0 0101           14264 MOVLB  1
3942 0104           14265 MOVLB  4
3944 915F           14266 BCF    x5F.0
3946 0101           14267 MOVLB  1
3948 3119           14268 RRCF   x19,W
394A 0B07           14269 ANDLW  07
394C 0104           14270 MOVLB  4
394E 6F64           14271 MOVWF  x64
3950 0101           14272 MOVLB  1
3952 C116 F000      14273 MOVFF  116,00
3956 3116           14274 RRCF   x16,W
3958 0B07           14275 ANDLW  07
395A 0104           14276 MOVLB  4
395C 5D64           14277 SUBWF  x64,W
395E E106           14278 BNZ   396C
3960 0101           14279 MOVLB  1
3962 5119           14280 MOVF   x19,W
3964 1916           14281 XORWF  x16,W
3966 0B20           14282 ANDLW  20
3968 E003           14283 BZ    3970
396A 0104           14284 MOVLB  4
396C 815F           14285 BSF    x5F.0
396E 0101           14286 MOVLB  1
5C26 0104           14287 MOVLB  4
5C28 915F           14288 BCF    x5F.0
5C2A 0101           14289 MOVLB  1
5C2C 3119           14290 RRCF   x19,W
5C2E 0B07           14291 ANDLW  07
5C30 0104           14292 MOVLB  4
5C32 6F64           14293 MOVWF  x64
5C34 0101           14294 MOVLB  1
5C36 C116 F000      14295 MOVFF  116,00
5C3A 3116           14296 RRCF   x16,W
5C3C 0B07           14297 ANDLW  07
5C3E 0104           14298 MOVLB  4
5C40 5D64           14299 SUBWF  x64,W
5C42 E106           14300 BNZ   5C50
5C44 0101           14301 MOVLB  1
5C46 5119           14302 MOVF   x19,W
5C48 1916           14303 XORWF  x16,W
5C4A 0B20           14304 ANDLW  20
5C4C E003           14305 BZ    5C54
5C4E 0104           14306 MOVLB  4
5C50 815F           14307 BSF    x5F.0
5C52 0101           14308 MOVLB  1
                    14309 ....................    
                    14310 ....................     if(is_pa_gain_changed) { 
30F2 0104           14311 MOVLB  4
30F4 A15F           14312 BTFSS  x5F.0
30F6 D039           14313 BRA    316A
3970 0104           14314 MOVLB  4
3972 A15F           14315 BTFSS  x5F.0
3974 D039           14316 BRA    39E8
5C54 0104           14317 MOVLB  4
5C56 A15F           14318 BTFSS  x5F.0
5C58 D039           14319 BRA    5CCC
                    14320 ....................       //delay_us(pa_delay); 
                    14321 ....................       ad5312_latch(); 
                    14322 ....................     } 
                    14323 ....................    
                    14324 ....................     /* set tx/rx (delay if needed) */ 
                    14325 ....................     if(last_control_message.bits.tx_on != prev_control_message.bits.tx_on) { 
316A 0101           14326 MOVLB  1
316C 5119           14327 MOVF   x19,W
316E 1916           14328 XORWF  x16,W
3170 0B01           14329 ANDLW  01
3172 E00A           14330 BZ    3188
39E8 0101           14331 MOVLB  1
39EA 5119           14332 MOVF   x19,W
39EC 1916           14333 XORWF  x16,W
39EE 0B01           14334 ANDLW  01
39F0 E00A           14335 BZ    3A06
5CCC 0101           14336 MOVLB  1
5CCE 5119           14337 MOVF   x19,W
5CD0 1916           14338 XORWF  x16,W
5CD2 0B01           14339 ANDLW  01
5CD4 E00A           14340 BZ    5CEA
                    14341 ....................       //delay_us(delay_tx_time); 
                    14342 ....................       set_tx_state(last_control_message.bits.tx_on);  
3174 0E00           14343 MOVLW  00
3176 B119           14344 BTFSC  x19.0
3178 0E01           14345 MOVLW  01
317A 0104           14346 MOVLB  4
317C 6F64           14347 MOVWF  x64
317E 6F65           14348 MOVWF  x65
3180 0100           14349 MOVLB  0
3182 EC84 F011      14350 CALL   2308
3186 0101           14351 MOVLB  1
39F2 0E00           14352 MOVLW  00
39F4 B119           14353 BTFSC  x19.0
39F6 0E01           14354 MOVLW  01
39F8 0104           14355 MOVLB  4
39FA 6F64           14356 MOVWF  x64
39FC 6F65           14357 MOVWF  x65
39FE 0100           14358 MOVLB  0
3A00 EC84 F011      14359 CALL   2308
3A04 0101           14360 MOVLB  1
5CD6 0E00           14361 MOVLW  00
5CD8 B119           14362 BTFSC  x19.0
5CDA 0E01           14363 MOVLW  01
5CDC 0104           14364 MOVLB  4
5CDE 6F64           14365 MOVWF  x64
5CE0 6F65           14366 MOVWF  x65
5CE2 0100           14367 MOVLB  0
5CE4 EC84 F011      14368 CALL   2308
5CE8 0101           14369 MOVLB  1
                    14370 ....................     } 
                    14371 ....................   } 
                    14372 ....................  
                    14373 ....................   /* save the last response */ 
                    14374 ....................   finalize_sf_status_request_response(); /* get the working copy and use it as final */ 
3188 0100           14375 MOVLB  0
318A EC33 F012      14376 CALL   2466
3A06 0100           14377 MOVLB  0
3A08 EC33 F012      14378 CALL   2466
5CEA 0100           14379 MOVLB  0
5CEC EC33 F012      14380 CALL   2466
                    14381 ....................  
                    14382 ....................   /* sample all sample groups (with delays) */ 
                    14383 ....................   for(i=0; i<NUM_ADC_SAMPLES; i++) { 
318E 0104           14384 MOVLB  4
3190 6B5E           14385 CLRF   x5E
3192 515E           14386 MOVF   x5E,W
3194 0803           14387 SUBLW  03
3196 A0D8           14388 BTFSS  FD8.0
3198 D0DD           14389 BRA    3354
3A0C 0104           14390 MOVLB  4
3A0E 6B5E           14391 CLRF   x5E
3A10 515E           14392 MOVF   x5E,W
3A12 0803           14393 SUBLW  03
3A14 A0D8           14394 BTFSS  FD8.0
3A16 D0DE           14395 BRA    3BD4
5CF0 0104           14396 MOVLB  4
5CF2 6B5E           14397 CLRF   x5E
5CF4 515E           14398 MOVF   x5E,W
5CF6 0803           14399 SUBLW  03
5CF8 A0D8           14400 BTFSS  FD8.0
5CFA D0DE           14401 BRA    5EB8
                    14402 ....................     sample_adc_inputs(i); 
319A C45E F464      14403 MOVFF  45E,464
3A18 C45E F464      14404 MOVFF  45E,464
5CFC C45E F464      14405 MOVFF  45E,464
                    14406 ....................   } 
334E 0104           14407 MOVLB  4
3350 2B5E           14408 INCF   x5E,F
3352 D71F           14409 BRA    3192
3BCE 0104           14410 MOVLB  4
3BD0 2B5E           14411 INCF   x5E,F
3BD2 D71E           14412 BRA    3A10
5EB2 0104           14413 MOVLB  4
5EB4 2B5E           14414 INCF   x5E,F
5EB6 D71E           14415 BRA    5CF4
                    14416 ....................  
                    14417 ....................   in_progress_sf_status_response.temperature = gpio_get_analog(GPIO_TMP); 
3354 0E0A           14418 MOVLW  0A
3356 6F68           14419 MOVWF  x68
33D8 C001 F16D      14420 MOVFF  01,16D
33DC C000 F16C      14421 MOVFF  00,16C
3BD4 0E0A           14422 MOVLW  0A
3BD6 6F68           14423 MOVWF  x68
3C58 C001 F16D      14424 MOVFF  01,16D
3C5C C000 F16C      14425 MOVFF  00,16C
5EB8 0E0A           14426 MOVLW  0A
5EBA 6F68           14427 MOVWF  x68
5F3C C001 F16D      14428 MOVFF  01,16D
5F40 C000 F16C      14429 MOVFF  00,16C
                    14430 ....................   uint16_t pa1_current = gpio_get_analog(GPIO_PA1_ISENSE); 
                    14431 ....................   uint16_t pa2_current = gpio_get_analog(GPIO_PA2_ISENSE); 
33E0 0E05           14432 MOVLW  05
33E2 6F68           14433 MOVWF  x68
3464 C001 F461      14434 MOVFF  01,461
3468 C000 F460      14435 MOVFF  00,460
346C 0E06           14436 MOVLW  06
346E 6F68           14437 MOVWF  x68
34F0 C001 F463      14438 MOVFF  01,463
34F4 C000 F462      14439 MOVFF  00,462
3C60 0E05           14440 MOVLW  05
3C62 6F68           14441 MOVWF  x68
3CE4 C001 F461      14442 MOVFF  01,461
3CE8 C000 F460      14443 MOVFF  00,460
3CEC 0E06           14444 MOVLW  06
3CEE 6F68           14445 MOVWF  x68
3D70 C001 F463      14446 MOVFF  01,463
3D74 C000 F462      14447 MOVFF  00,462
5F44 0E05           14448 MOVLW  05
5F46 6F68           14449 MOVWF  x68
5FC8 C001 F461      14450 MOVFF  01,461
5FCC C000 F460      14451 MOVFF  00,460
5FD0 0E06           14452 MOVLW  06
5FD2 6F68           14453 MOVWF  x68
6054 C001 F463      14454 MOVFF  01,463
6058 C000 F462      14455 MOVFF  00,462
                    14456 ....................   in_progress_sf_status_response.power_amplifier_current = pa1_current + pa2_current; 
34F8 5162           14457 MOVF   x62,W
34FA 2560           14458 ADDWF  x60,W
34FC 0101           14459 MOVLB  1
34FE 6F6E           14460 MOVWF  x6E
3500 0104           14461 MOVLB  4
3502 5163           14462 MOVF   x63,W
3504 2161           14463 ADDWFC x61,W
3506 0101           14464 MOVLB  1
3508 6F6F           14465 MOVWF  x6F
3D78 5162           14466 MOVF   x62,W
3D7A 2560           14467 ADDWF  x60,W
3D7C 0101           14468 MOVLB  1
3D7E 6F6E           14469 MOVWF  x6E
3D80 0104           14470 MOVLB  4
3D82 5163           14471 MOVF   x63,W
3D84 2161           14472 ADDWFC x61,W
3D86 0101           14473 MOVLB  1
3D88 6F6F           14474 MOVWF  x6F
605C 5162           14475 MOVF   x62,W
605E 2560           14476 ADDWF  x60,W
6060 0101           14477 MOVLB  1
6062 6F6E           14478 MOVWF  x6E
6064 0104           14479 MOVLB  4
6066 5163           14480 MOVF   x63,W
6068 2161           14481 ADDWFC x61,W
606A 0101           14482 MOVLB  1
606C 6F6F           14483 MOVWF  x6F
                    14484 ....................  
                    14485 ....................   in_progress_sf_status_response.control_identifier = last_control_message.control_identifier; 
350A C11B F14B      14486 MOVFF  11B,14B
350E C11A F14A      14487 MOVFF  11A,14A
3D8A C11B F14B      14488 MOVFF  11B,14B
3D8E C11A F14A      14489 MOVFF  11A,14A
606E C11B F14B      14490 MOVFF  11B,14B
6072 C11A F14A      14491 MOVFF  11A,14A
                    14492 ....................   prev_control_message = last_control_message; 
3512 C11B F118      14493 MOVFF  11B,118
3516 C11A F117      14494 MOVFF  11A,117
351A C119 F116      14495 MOVFF  119,116
3D92 C11B F118      14496 MOVFF  11B,118
3D96 C11A F117      14497 MOVFF  11A,117
3D9A C119 F116      14498 MOVFF  119,116
6076 C11B F118      14499 MOVFF  11B,118
607A C11A F117      14500 MOVFF  11A,117
607E C119 F116      14501 MOVFF  119,116
                    14502 ....................   enable_interrupts(INT_EXT); 
351E 88F2           14503 BSF    FF2.4
3D9E 88F2           14504 BSF    FF2.4
6082 88F2           14505 BSF    FF2.4
                    14506 .................... } 
                    14507 ....................  
                    14508 .................... static void handle_control_message(void* payload_buffer) { 
58C6 0104           14509 MOVLB  4
58C8 9100           14510 BCF    x00.0
                    14511 ....................   int i; 
                    14512 ....................   bool is_pa_gain_changed = false; 
                    14513 ....................   sf_status_response_t response; 
                    14514 ....................   response = final_sf_status_response; 
58CA 0E04           14515 MOVLW  04
58CC 6EEA           14516 MOVWF  FEA
58CE 0E01           14517 MOVLW  01
58D0 6EE9           14518 MOVWF  FE9
58D2 6EE2           14519 MOVWF  FE2
58D4 0E1C           14520 MOVLW  1C
58D6 6EE1           14521 MOVWF  FE1
58D8 0E2A           14522 MOVLW  2A
58DA 6E01           14523 MOVWF  01
58DC CFE6 FFEE      14524 MOVFF  FE6,FEE
58E0 2E01           14525 DECFSZ 01,F
58E2 D7FC           14526 BRA    58DC
                    14527 ....................   control_message_payload_t* payload = (control_message_payload_t*)payload_buffer; 
58E4 C3FE F42C      14528 MOVFF  3FE,42C
58E8 C3FD F42B      14529 MOVFF  3FD,42B
                    14530 ....................   
                    14531 ....................   if(!payload->bits.dont_change) { 
58EC C42B FFE9      14532 MOVFF  42B,FE9
58F0 C42C FFEA      14533 MOVFF  42C,FEA
58F4 BEEF           14534 BTFSC  FEF.7
58F6 D106           14535 BRA    5B04
                    14536 ....................     /* reset if needed */ 
                    14537 ....................     if (payload->bits.reset) { 
58F8 C42B FFE9      14538 MOVFF  42B,FE9
58FC C42C FFEA      14539 MOVFF  42C,FEA
5900 ACEF           14540 BTFSS  FEF.6
5902 D001           14541 BRA    5906
                    14542 ....................       reset_cpu(); 
5904 00FF           14543 RESET
                    14544 ....................     } 
                    14545 ....................    
                    14546 ....................     memcpy(&last_control_message, payload, sizeof(control_message_payload_t)); 
5906 0E01           14547 MOVLW  01
5908 6EEA           14548 MOVWF  FEA
590A 0E19           14549 MOVLW  19
590C 6EE9           14550 MOVWF  FE9
590E C42C FFE2      14551 MOVFF  42C,FE2
5912 C42B FFE1      14552 MOVFF  42B,FE1
5916 0E03           14553 MOVLW  03
5918 6E01           14554 MOVWF  01
591A CFE6 FFEE      14555 MOVFF  FE6,FEE
591E 2E01           14556 DECFSZ 01,F
5920 D7FC           14557 BRA    591A
                    14558 ....................    
                    14559 ....................     if(last_control_message.bits.tx_on != prev_control_message.bits.tx_on) { 
5922 0101           14560 MOVLB  1
5924 5119           14561 MOVF   x19,W
5926 1916           14562 XORWF  x16,W
5928 0B01           14563 ANDLW  01
592A E069           14564 BZ    59FE
                    14565 ....................       if (last_control_message.bits.tx_on == 1) { 
592C A119           14566 BTFSS  x19.0
592E D034           14567 BRA    5998
                    14568 ....................         delay_tx_time = get_calibration_param(CALIBRATION_TABLE_PARAMS, PARAM_TX_ON_TIMING_USEC); 
5930 0104           14569 MOVLB  4
5932 6B65           14570 CLRF   x65
5934 0E0B           14571 MOVLW  0B
5936 6F66           14572 MOVWF  x66
598C C002 F175      14573 MOVFF  02,175
5990 C001 F174      14574 MOVFF  01,174
                    14575 ....................       } else { 
5994 D033           14576 BRA    59FC
5996 0101           14577 MOVLB  1
                    14578 ....................         delay_tx_time = get_calibration_param(CALIBRATION_TABLE_PARAMS, PARAM_TX_OFF_TIMING_USEC); 
5998 0104           14579 MOVLB  4
599A 6B65           14580 CLRF   x65
599C 0E0C           14581 MOVLW  0C
599E 6F66           14582 MOVWF  x66
59F4 C002 F175      14583 MOVFF  02,175
59F8 C001 F174      14584 MOVFF  01,174
59FC 0101           14585 MOVLB  1
                    14586 ....................       } 
                    14587 ....................     } 
                    14588 ....................    
                    14589 ....................     /* set the PA, don't latch it yet */ 
                    14590 ....................     if(last_control_message.bits.pa_gain != prev_control_message.bits.pa_gain ||  
                    14591 ....................         last_control_message.bits.amplifier_operation_frequency != prev_control_message.bits.amplifier_operation_frequency) { 
59FE 3119           14592 RRCF   x19,W
5A00 0B07           14593 ANDLW  07
5A02 0104           14594 MOVLB  4
5A04 6F2D           14595 MOVWF  x2D
5A06 0101           14596 MOVLB  1
5A08 C116 F000      14597 MOVFF  116,00
5A0C 3116           14598 RRCF   x16,W
5A0E 0B07           14599 ANDLW  07
5A10 0104           14600 MOVLB  4
5A12 5D2D           14601 SUBWF  x2D,W
5A14 E106           14602 BNZ   5A22
5A16 0101           14603 MOVLB  1
5A18 5119           14604 MOVF   x19,W
5A1A 1916           14605 XORWF  x16,W
5A1C 0B20           14606 ANDLW  20
5A1E E073           14607 BZ    5B06
5A20 0104           14608 MOVLB  4
                    14609 ....................      
                    14610 ....................       is_pa_gain_changed = true; 
5A22 8100           14611 BSF    x00.0
                    14612 ....................       bool is_pa_gain_changed_to_off = last_control_message.bits.pa_gain == 0; 
5A24 9300           14613 BCF    x00.1
5A26 0101           14614 MOVLB  1
5A28 C119 F000      14615 MOVFF  119,00
5A2C 3119           14616 RRCF   x19,W
5A2E 0B07           14617 ANDLW  07
5A30 E103           14618 BNZ   5A38
5A32 0104           14619 MOVLB  4
5A34 8300           14620 BSF    x00.1
5A36 0101           14621 MOVLB  1
                    14622 ....................       if(is_pa_gain_changed_to_off) { 
5A38 0104           14623 MOVLB  4
5A3A A300           14624 BTFSS  x00.1
5A3C D032           14625 BRA    5AA2
                    14626 ....................         pa_delay = get_calibration_param(CALIBRATION_TABLE_PARAMS, PARAM_PA_OFF_TIMING_USEC); 
5A3E 6B65           14627 CLRF   x65
5A40 0E0E           14628 MOVLW  0E
5A42 6F66           14629 MOVWF  x66
5A98 C002 F173      14630 MOVFF  02,173
5A9C C001 F172      14631 MOVFF  01,172
                    14632 ....................       } else { 
5AA0 D031           14633 BRA    5B04
                    14634 ....................         pa_delay = get_calibration_param(CALIBRATION_TABLE_PARAMS, PARAM_PA_ON_TIMING_USEC); 
5AA2 6B65           14635 CLRF   x65
5AA4 0E0D           14636 MOVLW  0D
5AA6 6F66           14637 MOVWF  x66
5AFC C002 F173      14638 MOVFF  02,173
5B00 C001 F172      14639 MOVFF  01,172
5B04 0101           14640 MOVLB  1
                    14641 ....................       } 
                    14642 ....................     } 
                    14643 ....................   } 
                    14644 ....................  
                    14645 ....................   if (software_mode == MODE_OPERATIONAL) { 
5B06 5315           14646 MOVF   x15,F
5B08 E101           14647 BNZ   5B0C
                    14648 ....................     //do nothing, actions will be done on the TTI_SYNC interrupt 
                    14649 ....................   } 
                    14650 ....................   else if (software_mode == MODE_TECHNICIAN) { 
5B0A D2CB           14651 BRA    60A2
5B0C 2D15           14652 DECFSZ x15,W
5B0E D2C8           14653 BRA    60A0
                    14654 ....................     perform_last_control_message(); 
                    14655 ....................     response = final_sf_status_response; /* get the updated response */ 
6084 0E04           14656 MOVLW  04
6086 6EEA           14657 MOVWF  FEA
6088 0E01           14658 MOVLW  01
608A 6EE9           14659 MOVWF  FE9
608C 6EE2           14660 MOVWF  FE2
608E 0E1C           14661 MOVLW  1C
6090 6EE1           14662 MOVWF  FE1
6092 0E2A           14663 MOVLW  2A
6094 6E01           14664 MOVWF  01
6096 CFE6 FFEE      14665 MOVFF  FE6,FEE
609A 2E01           14666 DECFSZ 01,F
609C D7FC           14667 BRA    6096
                    14668 ....................   } else { 
609E D001           14669 BRA    60A2
                    14670 ....................     return;//wrong/invalid mode, don't send response 
60A0 D067           14671 BRA    6170
                    14672 ....................   } 
                    14673 ....................  
                    14674 ....................   response.generic.opcode = OP_SF_STATUS_RESPONSE; 
60A2 0E81           14675 MOVLW  81
60A4 0104           14676 MOVLB  4
60A6 6F01           14677 MOVWF  x01
                    14678 ....................   response.tti_counter = tti_counter; 
60A8 C114 F404      14679 MOVFF  114,404
60AC C113 F403      14680 MOVFF  113,403
                    14681 ....................   response.last_control_bits = prev_control_message.bits; 
60B0 C116 F402      14682 MOVFF  116,402
                    14683 ....................   comm_send_message(&response, sizeof(response)); 
60B4 0E04           14684 MOVLW  04
60B6 6F45           14685 MOVWF  x45
60B8 0E01           14686 MOVLW  01
60BA 6F44           14687 MOVWF  x44
60BC 6B47           14688 CLRF   x47
60BE 0E2A           14689 MOVLW  2A
60C0 6F46           14690 MOVWF  x46
60C2 0100           14691 MOVLB  0
60C4 EC48 F02B      14692 CALL   5690
                    14693 ....................  
                    14694 ....................   if(is_pa_gain_changed == true) { 
60C8 0104           14695 MOVLB  4
60CA A100           14696 BTFSS  x00.0
60CC D052           14697 BRA    6172
                    14698 ....................     set_pa_gain(last_control_message.bits.amplifier_operation_frequency, last_control_message.bits.pa_gain);  
60CE 0E00           14699 MOVLW  00
60D0 0101           14700 MOVLB  1
60D2 BB19           14701 BTFSC  x19.5
60D4 0E01           14702 MOVLW  01
60D6 0104           14703 MOVLB  4
60D8 6F2D           14704 MOVWF  x2D
60DA 0101           14705 MOVLB  1
60DC C119 F000      14706 MOVFF  119,00
60E0 3119           14707 RRCF   x19,W
60E2 0B07           14708 ANDLW  07
60E4 0104           14709 MOVLB  4
60E6 6F2E           14710 MOVWF  x2E
60E8 C42D F42F      14711 MOVFF  42D,42F
60EC 6F30           14712 MOVWF  x30
60EE 0100           14713 MOVLB  0
60F0 EF61 F02B      14714 GOTO   56C2
                    14715 ....................     if(software_mode == MODE_TECHNICIAN) { 
60F4 0101           14716 MOVLB  1
60F6 2D15           14717 DECFSZ x15,W
60F8 D03B           14718 BRA    6170
                    14719 ....................       ad5312_latch(); 
                    14720 ....................     }  
                    14721 ....................   } 
                    14722 .................... } 
6172 0100           14723 MOVLB  0
6174 0012           14724 RETURN 0
                    14725 ....................  
                    14726 .................... static void handle_bit_status_request_message(void* payload_buffer) { 
                    14727 ....................   bit_status_response_t response = {}; 
6176 0103           14728 MOVLB  3
6178 6BFF           14729 CLRF   xFF
617A 0104           14730 MOVLB  4
617C 6B00           14731 CLRF   x00
617E 6B01           14732 CLRF   x01
6180 6B02           14733 CLRF   x02
6182 6B03           14734 CLRF   x03
                    14735 ....................   response.generic.opcode = OP_BIT_STATUS_RESPONSE; 
6184 0E89           14736 MOVLW  89
6186 0103           14737 MOVLB  3
6188 6FFF           14738 MOVWF  xFF
                    14739 ....................   response.tti_counter = tti_counter; 
618A C114 F402      14740 MOVFF  114,402
618E C113 F401      14741 MOVFF  113,401
                    14742 ....................   response.last_control_bits = prev_control_message.bits; 
6192 C116 F400      14743 MOVFF  116,400
                    14744 ....................   response.mode = software_mode; 
6196 C115 F403      14745 MOVFF  115,403
                    14746 ....................   comm_send_message(&response, sizeof(response)); 
619A 0E03           14747 MOVLW  03
619C 0104           14748 MOVLB  4
619E 6F45           14749 MOVWF  x45
61A0 6944           14750 SETF   x44
61A2 6B47           14751 CLRF   x47
61A4 0E05           14752 MOVLW  05
61A6 6F46           14753 MOVWF  x46
61A8 0100           14754 MOVLB  0
61AA EC48 F02B      14755 CALL   5690
                    14756 .................... } 
61AE 0012           14757 RETURN 0
                    14758 ....................  
                    14759 .................... static void handle_version_request_message(void* payload_buffer) { 
                    14760 ....................   version_response_t response = {}; 
61B0 0103           14761 MOVLB  3
61B2 6BFF           14762 CLRF   xFF
61B4 0104           14763 MOVLB  4
61B6 6B00           14764 CLRF   x00
61B8 6B01           14765 CLRF   x01
61BA 6B02           14766 CLRF   x02
61BC 6B03           14767 CLRF   x03
61BE 6B04           14768 CLRF   x04
61C0 6B05           14769 CLRF   x05
61C2 6B06           14770 CLRF   x06
61C4 6B07           14771 CLRF   x07
                    14772 ....................   response.generic.opcode = OP_VERSION_RESPONSE; 
61C6 0E82           14773 MOVLW  82
61C8 0103           14774 MOVLB  3
61CA 6FFF           14775 MOVWF  xFF
                    14776 ....................   response.day = VERSION_DAY; 
61CC 0E12           14777 MOVLW  12
61CE 0104           14778 MOVLB  4
61D0 6F00           14779 MOVWF  x00
                    14780 ....................   response.month = VERSION_MONTH; 
61D2 0E06           14781 MOVLW  06
61D4 6F01           14782 MOVWF  x01
                    14783 ....................   response.year = VERSION_YEAR; 
61D6 0E07           14784 MOVLW  07
61D8 6F03           14785 MOVWF  x03
61DA 0EE2           14786 MOVLW  E2
61DC 6F02           14787 MOVWF  x02
                    14788 ....................   response.major = VERSION_MAJOR; 
61DE 0E01           14789 MOVLW  01
61E0 6F04           14790 MOVWF  x04
                    14791 ....................   response.minor = VERSION_MINOR; 
61E2 0E0E           14792 MOVLW  0E
61E4 6F05           14793 MOVWF  x05
                    14794 ....................   response.serial_number = get_calibration_param(CALIBRATION_TABLE_PARAMS, PARAM_SERIAL_NUM); 
61E6 6B65           14795 CLRF   x65
61E8 0E01           14796 MOVLW  01
61EA 6F66           14797 MOVWF  x66
6240 C002 F407      14798 MOVFF  02,407
6244 C001 F406      14799 MOVFF  01,406
                    14800 ....................   comm_send_message(&response, sizeof(response)); 
6248 0E03           14801 MOVLW  03
624A 6F45           14802 MOVWF  x45
624C 6944           14803 SETF   x44
624E 6B47           14804 CLRF   x47
6250 0E09           14805 MOVLW  09
6252 6F46           14806 MOVWF  x46
6254 0100           14807 MOVLB  0
6256 EC48 F02B      14808 CALL   5690
                    14809 .................... } 
625A 0012           14810 RETURN 0
                    14811 ....................  
                    14812 .................... static void handle_change_mode_message(void* payload_buffer) { 
6278 C3FE F400      14813 MOVFF  3FE,400
627C C3FD F3FF      14814 MOVFF  3FD,3FF
                    14815 ....................   change_mode_message_payload_t* payload = (change_mode_message_payload_t*)payload_buffer; 
                    14816 ....................   switch (payload->mode) { 
6280 0103           14817 MOVLB  3
6282 51FF           14818 MOVF   xFF,W
6284 6EE9           14819 MOVWF  FE9
6286 0104           14820 MOVLB  4
6288 5100           14821 MOVF   x00,W
628A 6EEA           14822 MOVWF  FEA
628C 50EF           14823 MOVF   FEF,W
628E 0A01           14824 XORLW  01
6290 0100           14825 MOVLB  0
6292 E005           14826 BZ    629E
6294 0A01           14827 XORLW  01
6296 E004           14828 BZ    62A0
6298 0A02           14829 XORLW  02
629A E003           14830 BZ    62A2
629C D00B           14831 BRA    62B4
                    14832 ....................   case MODE_TECHNICIAN: 
                    14833 ....................     disable_interrupts(INT_EXT); 
629E 98F2           14834 BCF    FF2.4
                    14835 ....................   case MODE_OPERATIONAL: 
                    14836 ....................     enable_interrupts(INT_EXT); 
62A0 88F2           14837 BSF    FF2.4
                    14838 ....................   case MODE_MAINTENANCE: 
                    14839 ....................     software_mode = payload->mode; 
62A2 C3FF FFE9      14840 MOVFF  3FF,FE9
62A6 C400 FFEA      14841 MOVFF  400,FEA
62AA CFEF F115      14842 MOVFF  FEF,115
62AE 0101           14843 MOVLB  1
                    14844 ....................     break; 
62B0 D002           14845 BRA    62B6
62B2 0100           14846 MOVLB  0
                    14847 ....................   default: 
                    14848 ....................     return;//unknown mode, don't send ack 
62B4 D002           14849 BRA    62BA
                    14850 ....................   } 
                    14851 ....................   send_ack(); 
62B6 0100           14852 MOVLB  0
62B8 DFD1           14853 RCALL  625C
                    14854 .................... } 
62BA 0012           14855 RETURN 0
                    14856 ....................  
                    14857 .................... static void handle_set_calibration_table_message(void* payload_buffer) { 
632A C3FE F400      14858 MOVFF  3FE,400
632E C3FD F3FF      14859 MOVFF  3FD,3FF
                    14860 ....................   set_calibration_table_message_payload_t* payload = (set_calibration_table_message_payload_t*)payload_buffer; 
                    14861 ....................  
                    14862 ....................   if (software_mode != MODE_MAINTENANCE) 
6332 0101           14863 MOVLB  1
6334 5115           14864 MOVF   x15,W
6336 0802           14865 SUBLW  02
6338 E001           14866 BZ    633C
                    14867 ....................     return;//wrong mode, don't send ack 
633A D024           14868 BRA    6384
                    14869 ....................  
                    14870 ....................   if (payload->table_id >= CALIBRATION_TABLE_MAX) 
633C C3FF FFE9      14871 MOVFF  3FF,FE9
6340 0104           14872 MOVLB  4
6342 C400 FFEA      14873 MOVFF  400,FEA
6346 50EF           14874 MOVF   FEF,W
6348 0802           14875 SUBLW  02
634A E202           14876 BC    6350
                    14877 ....................     return;//don't send ack 
634C 0101           14878 MOVLB  1
634E D01A           14879 BRA    6384
                    14880 ....................  
                    14881 ....................   set_calibration_table_data(payload->table_id, payload->params); 
6350 C3FF FFE9      14882 MOVFF  3FF,FE9
6354 C400 FFEA      14883 MOVFF  400,FEA
6358 CFEF F401      14884 MOVFF  FEF,401
635C 0E01           14885 MOVLW  01
635E 0103           14886 MOVLB  3
6360 25FF           14887 ADDWF  xFF,W
6362 6E01           14888 MOVWF  01
6364 0E00           14889 MOVLW  00
6366 0104           14890 MOVLB  4
6368 2100           14891 ADDWFC x00,W
636A 6E03           14892 MOVWF  03
636C C001 F402      14893 MOVFF  01,402
6370 6F03           14894 MOVWF  x03
6372 C401 F404      14895 MOVFF  401,404
6376 6F06           14896 MOVWF  x06
6378 C001 F405      14897 MOVFF  01,405
637C 0100           14898 MOVLB  0
637E D7B4           14899 BRA    62E8
                    14900 ....................  
                    14901 ....................   send_ack(); 
6380 DF6D           14902 RCALL  625C
6382 0101           14903 MOVLB  1
                    14904 .................... } 
6384 0100           14905 MOVLB  0
6386 0012           14906 RETURN 0
                    14907 ....................  
                    14908 .................... static void handle_get_calibration_table_message(void* payload_buffer) { 
63C2 C3FE F400      14909 MOVFF  3FE,400
63C6 C3FD F3FF      14910 MOVFF  3FD,3FF
                    14911 ....................   get_calibration_table_message_payload_t* payload = (get_calibration_table_message_payload_t*)payload_buffer; 
                    14912 ....................  
                    14913 ....................   if (payload->table_id >= CALIBRATION_TABLE_MAX) 
63CA C3FF FFE9      14914 MOVFF  3FF,FE9
63CE 0104           14915 MOVLB  4
63D0 C400 FFEA      14916 MOVFF  400,FEA
63D4 50EF           14917 MOVF   FEF,W
63D6 0802           14918 SUBLW  02
63D8 E201           14919 BC    63DC
                    14920 ....................     return;//don't send response 
63DA D066           14921 BRA    64A8
                    14922 ....................  
                    14923 ....................   calibration_table_response_t response = {}; 
63DC 6B01           14924 CLRF   x01
63DE 6B02           14925 CLRF   x02
63E0 6B03           14926 CLRF   x03
63E2 6B04           14927 CLRF   x04
63E4 6B05           14928 CLRF   x05
63E6 6B06           14929 CLRF   x06
63E8 6B07           14930 CLRF   x07
63EA 6B08           14931 CLRF   x08
63EC 6B09           14932 CLRF   x09
63EE 6B0A           14933 CLRF   x0A
63F0 6B0B           14934 CLRF   x0B
63F2 6B0C           14935 CLRF   x0C
63F4 6B0D           14936 CLRF   x0D
63F6 6B0E           14937 CLRF   x0E
63F8 6B0F           14938 CLRF   x0F
63FA 6B10           14939 CLRF   x10
63FC 6B11           14940 CLRF   x11
63FE 6B12           14941 CLRF   x12
6400 6B13           14942 CLRF   x13
6402 6B14           14943 CLRF   x14
6404 6B15           14944 CLRF   x15
6406 6B16           14945 CLRF   x16
6408 6B17           14946 CLRF   x17
640A 6B18           14947 CLRF   x18
640C 6B19           14948 CLRF   x19
640E 6B1A           14949 CLRF   x1A
6410 6B1B           14950 CLRF   x1B
6412 6B1C           14951 CLRF   x1C
6414 6B1D           14952 CLRF   x1D
6416 6B1E           14953 CLRF   x1E
6418 6B1F           14954 CLRF   x1F
641A 6B20           14955 CLRF   x20
641C 6B21           14956 CLRF   x21
641E 6B22           14957 CLRF   x22
6420 6B23           14958 CLRF   x23
6422 6B24           14959 CLRF   x24
6424 6B25           14960 CLRF   x25
6426 6B26           14961 CLRF   x26
6428 6B27           14962 CLRF   x27
642A 6B28           14963 CLRF   x28
642C 6B29           14964 CLRF   x29
642E 6B2A           14965 CLRF   x2A
6430 6B2B           14966 CLRF   x2B
6432 6B2C           14967 CLRF   x2C
6434 6B2D           14968 CLRF   x2D
6436 6B2E           14969 CLRF   x2E
6438 6B2F           14970 CLRF   x2F
643A 6B30           14971 CLRF   x30
643C 6B31           14972 CLRF   x31
643E 6B32           14973 CLRF   x32
6440 6B33           14974 CLRF   x33
6442 6B34           14975 CLRF   x34
6444 6B35           14976 CLRF   x35
6446 6B36           14977 CLRF   x36
6448 6B37           14978 CLRF   x37
644A 6B38           14979 CLRF   x38
644C 6B39           14980 CLRF   x39
644E 6B3A           14981 CLRF   x3A
6450 6B3B           14982 CLRF   x3B
6452 6B3C           14983 CLRF   x3C
6454 6B3D           14984 CLRF   x3D
6456 6B3E           14985 CLRF   x3E
6458 6B3F           14986 CLRF   x3F
645A 6B40           14987 CLRF   x40
645C 6B41           14988 CLRF   x41
645E 6B42           14989 CLRF   x42
                    14990 ....................   response.generic.opcode = OP_GET_CALIBRATION_TABLE_RESPONSE; 
6460 0E85           14991 MOVLW  85
6462 6F01           14992 MOVWF  x01
                    14993 ....................   response.table_id = payload->table_id; 
6464 C3FF FFE9      14994 MOVFF  3FF,FE9
6468 0104           14995 MOVLB  4
646A C400 FFEA      14996 MOVFF  400,FEA
646E CFEF F402      14997 MOVFF  FEF,402
                    14998 ....................   get_calibration_table_data(payload->table_id, response.params); 
6472 C3FF FFE9      14999 MOVFF  3FF,FE9
6476 0104           15000 MOVLB  4
6478 C400 FFEA      15001 MOVFF  400,FEA
647C CFEF F443      15002 MOVFF  FEF,443
6480 C443 F444      15003 MOVFF  443,444
6484 0E04           15004 MOVLW  04
6486 6F46           15005 MOVWF  x46
6488 0E03           15006 MOVLW  03
648A 6F45           15007 MOVWF  x45
648C 0100           15008 MOVLB  0
648E D77C           15009 BRA    6388
                    15010 ....................   comm_send_message(&response, sizeof(response)); 
6490 0E04           15011 MOVLW  04
6492 0104           15012 MOVLB  4
6494 6F45           15013 MOVWF  x45
6496 0E01           15014 MOVLW  01
6498 6F44           15015 MOVWF  x44
649A 6B47           15016 CLRF   x47
649C 0E42           15017 MOVLW  42
649E 6F46           15018 MOVWF  x46
64A0 0100           15019 MOVLB  0
64A2 EC48 F02B      15020 CALL   5690
64A6 0104           15021 MOVLB  4
                    15022 .................... } 
64A8 0100           15023 MOVLB  0
64AA 0012           15024 RETURN 0
                    15025 ....................  
                    15026 .................... static void h_test_set_data(void* payload_buffer) { 
                    15027 ....................   send_ack(); 
64AC DED7           15028 RCALL  625C
                    15029 .................... } 
64AE 0012           15030 RETURN 0
                    15031 ....................  
                    15032 .................... static void h_test_get_data(void* payload_buffer) { 
                    15033 ....................   get_data_line_response_t response = {}; 
64B0 0103           15034 MOVLB  3
64B2 6BFF           15035 CLRF   xFF
64B4 0104           15036 MOVLB  4
64B6 6B00           15037 CLRF   x00
64B8 6B01           15038 CLRF   x01
64BA 6B02           15039 CLRF   x02
64BC 6B03           15040 CLRF   x03
64BE 6B04           15041 CLRF   x04
64C0 6B05           15042 CLRF   x05
64C2 6B06           15043 CLRF   x06
64C4 6B07           15044 CLRF   x07
64C6 6B08           15045 CLRF   x08
64C8 6B09           15046 CLRF   x09
64CA 6B0A           15047 CLRF   x0A
64CC 6B0B           15048 CLRF   x0B
64CE 6B0C           15049 CLRF   x0C
64D0 6B0D           15050 CLRF   x0D
64D2 6B0E           15051 CLRF   x0E
64D4 6B0F           15052 CLRF   x0F
64D6 6B10           15053 CLRF   x10
64D8 6B11           15054 CLRF   x11
64DA 6B12           15055 CLRF   x12
64DC 6B13           15056 CLRF   x13
64DE 6B14           15057 CLRF   x14
64E0 6B15           15058 CLRF   x15
64E2 6B16           15059 CLRF   x16
64E4 6B17           15060 CLRF   x17
64E6 6B18           15061 CLRF   x18
64E8 6B19           15062 CLRF   x19
64EA 6B1A           15063 CLRF   x1A
64EC 6B1B           15064 CLRF   x1B
64EE 6B1C           15065 CLRF   x1C
64F0 6B1D           15066 CLRF   x1D
64F2 6B1E           15067 CLRF   x1E
64F4 6B1F           15068 CLRF   x1F
64F6 6B20           15069 CLRF   x20
64F8 6B21           15070 CLRF   x21
64FA 6B22           15071 CLRF   x22
64FC 6B23           15072 CLRF   x23
64FE 6B24           15073 CLRF   x24
6500 6B25           15074 CLRF   x25
6502 6B26           15075 CLRF   x26
6504 6B27           15076 CLRF   x27
6506 6B28           15077 CLRF   x28
6508 6B29           15078 CLRF   x29
650A 6B2A           15079 CLRF   x2A
650C 6B2B           15080 CLRF   x2B
650E 6B2C           15081 CLRF   x2C
6510 6B2D           15082 CLRF   x2D
6512 6B2E           15083 CLRF   x2E
6514 6B2F           15084 CLRF   x2F
6516 6B30           15085 CLRF   x30
6518 6B31           15086 CLRF   x31
651A 6B32           15087 CLRF   x32
651C 6B33           15088 CLRF   x33
651E 6B34           15089 CLRF   x34
6520 6B35           15090 CLRF   x35
6522 6B36           15091 CLRF   x36
6524 6B37           15092 CLRF   x37
6526 6B38           15093 CLRF   x38
6528 6B39           15094 CLRF   x39
652A 6B3A           15095 CLRF   x3A
652C 6B3B           15096 CLRF   x3B
652E 6B3C           15097 CLRF   x3C
6530 6B3D           15098 CLRF   x3D
6532 6B3E           15099 CLRF   x3E
6534 6B3F           15100 CLRF   x3F
6536 6B40           15101 CLRF   x40
6538 6B41           15102 CLRF   x41
653A 6B42           15103 CLRF   x42
653C 6B43           15104 CLRF   x43
                    15105 ....................   response.generic.opcode = OP_GET_DATA_LINE_MESSAGE; 
653E 0E07           15106 MOVLW  07
6540 0103           15107 MOVLB  3
6542 6FFF           15108 MOVWF  xFF
                    15109 ....................   response.address = ((get_data_line_payload_t *)payload_buffer)->address; 
6544 C3FD FFE9      15110 MOVFF  3FD,FE9
6548 C3FE FFEA      15111 MOVFF  3FE,FEA
654C CFEF F000      15112 MOVFF  FEF,00
6550 CFEC F001      15113 MOVFF  FEC,01
6554 CFEC F002      15114 MOVFF  FEC,02
6558 CFEC F003      15115 MOVFF  FEC,03
655C C003 F403      15116 MOVFF  03,403
6560 C002 F402      15117 MOVFF  02,402
6564 C001 F401      15118 MOVFF  01,401
6568 C000 F400      15119 MOVFF  00,400
                    15120 ....................   comm_send_message(&response, sizeof(response)); 
656C 0E03           15121 MOVLW  03
656E 0104           15122 MOVLB  4
6570 6F45           15123 MOVWF  x45
6572 6944           15124 SETF   x44
6574 6B47           15125 CLRF   x47
6576 0E45           15126 MOVLW  45
6578 6F46           15127 MOVWF  x46
657A 0100           15128 MOVLB  0
657C EC48 F02B      15129 CALL   5690
                    15130 .................... } 
6580 0012           15131 RETURN 0
                    15132 ....................  
                    15133 .................... typedef void (*cmd_func)(void* message_payload); 
                    15134 ....................  
                    15135 .................... typedef struct cmd_entry { 
                    15136 ....................   uint8_t opcode; 
                    15137 ....................   cmd_func func; 
                    15138 .................... } cmd_entry; 
                    15139 ....................  
                    15140 .................... static cmd_entry commands[] = { 
                    15141 ....................   { OP_CONTROL_MESSAGE, handle_control_message }, 
                    15142 ....................   { OP_BIT_STATUS_REQUEST_MESSAGE, handle_bit_status_request_message }, 
                    15143 ....................   { OP_VERSION_REQUEST_MESSAGE, handle_version_request_message }, 
                    15144 ....................   { OP_CHANGE_MODE_MESSAGE, handle_change_mode_message }, 
                    15145 ....................   { OP_SET_CALIBRATION_TABLE_MESSAGE, handle_set_calibration_table_message }, 
                    15146 ....................   { OP_GET_CALIBRATION_TABLE_MESSAGE, handle_get_calibration_table_message }, 
                    15147 ....................   { OP_SET_DATA_LINE_MESSAGE, h_test_set_data }, 
                    15148 ....................   { OP_GET_DATA_LINE_MESSAGE, h_test_get_data }, 
                    15149 .................... }; 
                    15150 ....................  
                    15151 .................... void process_message(uint8_t* message_buffer, uint16_t length) { 
6582 C3F4 F3F8      15152 MOVFF  3F4,3F8
6586 C3F3 F3F7      15153 MOVFF  3F3,3F7
                    15154 ....................   message_t* message = (message_t*)message_buffer; 
                    15155 ....................   /* find the correct func */ 
                    15156 ....................   int i; 
                    15157 ....................   for(i=0;i<ARRAY_SIZE(commands); i++) { 
658A 0103           15158 MOVLB  3
658C 6BF9           15159 CLRF   xF9
658E 51F9           15160 MOVF   xF9,W
6590 0807           15161 SUBLW  07
6592 E33E           15162 BNC   6610
                    15163 ....................     if(commands[i].opcode == message->opCode) { 
6594 51F9           15164 MOVF   xF9,W
6596 0D03           15165 MULLW  03
6598 50F3           15166 MOVF   FF3,W
659A 6BFB           15167 CLRF   xFB
659C 6FFA           15168 MOVWF  xFA
659E 0E76           15169 MOVLW  76
65A0 25FA           15170 ADDWF  xFA,W
65A2 6EE9           15171 MOVWF  FE9
65A4 0E01           15172 MOVLW  01
65A6 21FB           15173 ADDWFC xFB,W
65A8 6EEA           15174 MOVWF  FEA
65AA CFEF F3FC      15175 MOVFF  FEF,3FC
65AE C3F7 FFE9      15176 MOVFF  3F7,FE9
65B2 C3F8 FFEA      15177 MOVFF  3F8,FEA
65B6 50EF           15178 MOVF   FEF,W
65B8 5DFC           15179 SUBWF  xFC,W
65BA E128           15180 BNZ   660C
                    15181 ....................       commands[i].func(message->payload); 
65BC 51F9           15182 MOVF   xF9,W
65BE 0D03           15183 MULLW  03
65C0 50F3           15184 MOVF   FF3,W
65C2 6BFB           15185 CLRF   xFB
65C4 6FFA           15186 MOVWF  xFA
65C6 0E01           15187 MOVLW  01
65C8 25FA           15188 ADDWF  xFA,W
65CA 6E01           15189 MOVWF  01
65CC 0E00           15190 MOVLW  00
65CE 21FB           15191 ADDWFC xFB,W
65D0 6E03           15192 MOVWF  03
65D2 5001           15193 MOVF   01,W
65D4 0F76           15194 ADDLW  76
65D6 6E01           15195 MOVWF  01
65D8 0E01           15196 MOVLW  01
65DA 2203           15197 ADDWFC 03,F
65DC C001 F3FA      15198 MOVFF  01,3FA
65E0 C003 F3FB      15199 MOVFF  03,3FB
65E4 0E01           15200 MOVLW  01
65E6 25F7           15201 ADDWF  xF7,W
65E8 6E01           15202 MOVWF  01
65EA 0E00           15203 MOVLW  00
65EC 21F8           15204 ADDWFC xF8,W
65EE 6E03           15205 MOVWF  03
65F0 C001 F3FC      15206 MOVFF  01,3FC
65F4 C3FB FFEA      15207 MOVFF  3FB,FEA
65F8 C3FA FFE9      15208 MOVFF  3FA,FE9
65FC 6BFE           15209 CLRF   xFE
65FE C001 F3FD      15210 MOVFF  01,3FD
6602 0100           15211 MOVLB  0
6604 EC34 F011      15212 CALL   2268
                    15213 ....................       return; 
6608 D003           15214 BRA    6610
660A 0103           15215 MOVLB  3
                    15216 ....................     } 
                    15217 ....................   } 
660C 2BF9           15218 INCF   xF9,F
660E D7BF           15219 BRA    658E
6610 0100           15220 MOVLB  0
                    15221 .................... } 
6612 EF3E F017      15222 GOTO   2E7C (RETURN)
                    15223 ....................  
                    15224 .................... void init_message_handlers() { 
                    15225 ....................   tti_counter = 0; 
37D2 0101           15226 MOVLB  1
37D4 6B14           15227 CLRF   x14
37D6 6B13           15228 CLRF   x13
                    15229 ....................   software_mode = MODE_OPERATIONAL; 
37D8 6B15           15230 CLRF   x15
                    15231 ....................  
                    15232 ....................   memset(&in_progress_sf_status_response, 0, sizeof(in_progress_sf_status_response)); 
37DA 0E01           15233 MOVLW  01
37DC 6EEA           15234 MOVWF  FEA
37DE 0E46           15235 MOVLW  46
37E0 6EE9           15236 MOVWF  FE9
37E2 6A00           15237 CLRF   00
37E4 6A02           15238 CLRF   02
37E6 0E2A           15239 MOVLW  2A
37E8 6E01           15240 MOVWF  01
37EA 0100           15241 MOVLB  0
37EC DFE5           15242 RCALL  37B8
                    15243 ....................   memset(&final_sf_status_response, 0, sizeof(final_sf_status_response)); 
37EE 0E01           15244 MOVLW  01
37F0 6EEA           15245 MOVWF  FEA
37F2 0E1C           15246 MOVLW  1C
37F4 6EE9           15247 MOVWF  FE9
37F6 6A00           15248 CLRF   00
37F8 6A02           15249 CLRF   02
37FA 0E2A           15250 MOVLW  2A
37FC 6E01           15251 MOVWF  01
37FE DFDC           15252 RCALL  37B8
                    15253 ....................   memset(&last_control_message, 0, sizeof(last_control_message)); 
3800 0E01           15254 MOVLW  01
3802 6EEA           15255 MOVWF  FEA
3804 0E19           15256 MOVLW  19
3806 6EE9           15257 MOVWF  FE9
3808 6A00           15258 CLRF   00
380A 6A02           15259 CLRF   02
380C 0E03           15260 MOVLW  03
380E 6E01           15261 MOVWF  01
3810 DFD3           15262 RCALL  37B8
                    15263 ....................  
                    15264 ....................   prev_control_message = last_control_message; 
3812 C11B F118      15265 MOVFF  11B,118
3816 C11A F117      15266 MOVFF  11A,117
381A C119 F116      15267 MOVFF  119,116
                    15268 ....................   /* set bogus data so that perform_last_control_message() will act on all parameters */ 
                    15269 ....................   prev_control_message.bits.pa_gain = 3; 
381E 0EF1           15270 MOVLW  F1
3820 0101           15271 MOVLB  1
3822 1516           15272 ANDWF  x16,W
3824 0906           15273 IORLW  06
3826 6F16           15274 MOVWF  x16
                    15275 ....................   prev_control_message.bits.tx_ant = 1; 
3828 8916           15276 BSF    x16.4
                    15277 ....................   prev_control_message.bits.tx_on = 1; 
382A 8116           15278 BSF    x16.0
                    15279 ....................   perform_last_control_message(); 
                    15280 ....................    
                    15281 ....................   ext_int_edge(L_TO_H); 
3DA0 8CF1           15282 BSF    FF1.6
                    15283 ....................   enable_interrupts(INT_EXT);  
3DA2 88F2           15284 BSF    FF2.4
                    15285 .................... } 
3DA4 0100           15286 MOVLB  0
3DA6 EFC5 F016      15287 GOTO   2D8A (RETURN)
                    15288 ....................  
                    15289 .................... #int_ext 
                    15290 .................... void ext_isr(void) //TTI_SYNC line 
                    15291 .................... { 
                    15292 ....................   perform_last_control_message(); 
                    15293 ....................   ++tti_counter; 
3520 2B13           15294 INCF   x13,F
3522 B4D8           15295 BTFSC  FD8.2
3524 2B14           15296 INCF   x14,F
                    15297 .................... } 
                    15298 ....................  
3526 92F2           15299 BCF    FF2.1
3528 0100           15300 MOVLB  0
352A EF3C F010      15301 GOTO   2078
                    15302 .................... /* 
                    15303 ....................  * rfc1662.c 
                    15304 ....................  * 
                    15305 ....................  *  Created on: 09/01/2011 
                    15306 ....................  *      Author: asafe 
                    15307 ....................  */ 
                    15308 ....................  
                    15309 .................... #include "BA1474.h" 
                    15310 .................... #include <18F45K22.h> 
                    15311 .................... //////// Standard Header file for the PIC18F45K22 device //////////////// 
                    15312 .................... #device PIC18F45K22 
                    15913 .................... #list 
                    15914 ....................  
                    15915 .................... #device adc=10 
                    15916 .................... #device pass_strings=in_ram 
                    15917 ....................  
                    15918 .................... #define LOADER_END 0x1FFF 
                    15919 .................... #include <boot.h> 
                    15920 .................... #undef LOADER_END 
                    15921 .................... #define FLASH_SIZE getenv("FLASH_ERASE_SIZE") 
                    15922 .................... #define LOADER_END   0x1FFF 
                    15923 .................... #define LOADER_SIZE  0x3FF 
                    15924 ....................  
                    15925 .................... #ifndef _bootloader 
                    15926 .................... #build(reset=LOADER_END+1, interrupt=LOADER_END+9) 
                    15927 ....................  
                    15928 .................... /* when in operational software, keep out of the bootloader sections */ 
                    15929 .................... #org 0, 0xfff {} 
                    15930 .................... #org 0x1000, 0x1ffe {} 
                    15931 ....................  
                    15932 .................... #else 
                    15933 ....................  
                    15934 .................... /* when in the bootloader, keep out of the operational sections */ 
                    15935 .................... #org 0x2000, 0x7ffe {} 
                    15936 ....................  
                    15937 .................... #endif 
                    15938 ....................  
                    15939 ....................  
                    15940 .................... #FUSES NOWDT                   //No Watch Dog Timer 
                    15941 .................... #FUSES WDT128                  //Watch Dog Timer uses 1:128 Postscale 
                    15942 .................... #FUSES INTRC_IO                //Internal RC Osc, no CLKOUT 
                    15943 .................... #FUSES NOBROWNOUT              //No brownout reset 
                    15944 .................... #FUSES WDT_SW                  //No Watch Dog Timer, enabled in Software 
                    15945 .................... #FUSES NOLVP                   //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
                    15946 .................... #FUSES NOPUT 
                    15947 .................... #FUSES NOXINST                 //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
                    15948 ....................  
                    15949 .................... #use delay(clock=64000000) 
                    15950 .................... #use rs232(baud=921600,xmit=PIN_C6,rcv=PIN_C7,ERRORS) 
                    15951 .................... #USE TIMER(TIMER=1,TICK=1us,BITS=32,NOISR) 
                    15952 .................... #use spi(DO=PIN_A4, CLK=PIN_A3, ENABLE=PIN_A2, ENABLE_ACTIVE=0, DATA_HOLD=20, BITS=16) 
                    15953 ....................  
                    15954 .................... #opt 9 
                    15955 ....................  
                    15956 .................... #use fast_io(a) 
                    15957 .................... #use fast_io(b) 
                    15958 .................... #use fast_io(c) 
                    15959 .................... #use fast_io(d) 
                    15960 .................... #use fast_io(e) 
                    15961 ....................  
                    15962 .................... #define safe_write_program_memory(address, pointer, size) \ 
                    15963 ....................   do { disable_interrupts(GLOBAL); write_program_memory(address, pointer, size); enable_interrupts(GLOBAL); delay_us(1000); } while (0) 
                    15964 ....................  
                    15965 ....................  
                    15966 .................... #include "rfc1662.h" 
                    15967 .................... /* 
                    15968 ....................  * rfc1662.h 
                    15969 ....................  * 
                    15970 ....................  *  Created on: 09/01/2011 
                    15971 ....................  *      Author: asafe 
                    15972 ....................  */ 
                    15973 ....................  
                    15974 .................... #ifndef __RFC1662_H__ 
                    15975 .................... #define __RFC1662_H__ 
                    15976 ....................  
                    15977 .................... #define CHAR_FLAG 0x7E 
                    15978 .................... #define CHAR_FLAG_XORED 0x5E 
                    15979 .................... #define CHAR_ESCAPE 0x7D 
                    15980 .................... #define CHAR_ESCAPE_XORED 0x5D 
                    15981 ....................  
                    15982 .................... int rfc1662_unpack(unsigned char *data, int len, unsigned char *dest); 
                    15983 .................... int rfc1662_pack(unsigned char *data, int dataLen, unsigned char *dest); 
                    15984 ....................  
                    15985 .................... #endif /* __RFC1662_H__ */ 
                    15986 ....................  
                    15987 .................... #include "crc8.h" 
                    15988 .................... #ifndef __CRC8__ 
                    15989 .................... #define __CRC8__ 
                    15990 ....................  
                    15991 .................... #include <stdint.h> 
                    15992 .................... /////////////////////////////////////////////////////////////////////////// 
                    15993 .................... ////                                                                   //// 
                    15994 .................... ////                           stdint.h                                //// 
                    15995 .................... ////                                                                   //// 
                    15996 .................... //// Standard integer definitions.                                     //// 
                    15997 .................... ////                                                                   //// 
                    15998 .................... /////////////////////////////////////////////////////////////////////////// 
                    15999 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    16000 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    16001 .................... //// compiler.  This source code may only be distributed to other      //// 
                    16002 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    16003 .................... //// or distribution is permitted without written permission.          //// 
                    16004 .................... //// Derivative programs created using this software in object code    //// 
                    16005 .................... //// form are not restricted in any way.                               //// 
                    16006 .................... /////////////////////////////////////////////////////////////////////////// 
                    16007 ....................  
                    16008 .................... #ifndef _STDINT 
                    16009 ....................  
                    16010 .................... #define _STDINT 
                    16011 ....................  
                    16012 .................... //////////// exact width 
                    16013 ....................  
                    16014 .................... typedef signed int8 int8_t; 
                    16015 .................... typedef unsigned int8 uint8_t; 
                    16016 .................... typedef signed int16 int16_t; 
                    16017 .................... typedef unsigned int16 uint16_t; 
                    16018 .................... typedef signed int32 int32_t; 
                    16019 .................... typedef unsigned int32 uint32_t; 
                    16020 ....................  
                    16021 .................... #if defined(__PCD__) 
                    16022 .................... //typedef signed int24 int24_t; 
                    16023 .................... //typedef unsigned int24 uint24_t; 
                    16024 .................... typedef signed int64 int64_t; 
                    16025 .................... typedef unsigned int64 uint64_t; 
                    16026 .................... #endif 
                    16027 ....................  
                    16028 .................... #define INT8_MAX  (128) 
                    16029 .................... #define INT8_MIN  (-127) 
                    16030 .................... #define UINT8_MAX (255) 
                    16031 ....................  
                    16032 .................... #define INT16_MAX  (32767) 
                    16033 .................... #define INT16_MIN  (-32768) 
                    16034 .................... #define UINT16_MAX (65535) 
                    16035 ....................  
                    16036 .................... #define INT32_MAX  (2147483647) 
                    16037 .................... #define INT32_MIN  (-2147483648) 
                    16038 .................... #define UINT32_MAX (4294967295) 
                    16039 ....................  
                    16040 .................... #if defined(__PCD__) 
                    16041 .................... //#define INT24_MAX  (8388607) 
                    16042 .................... //#define INT24_MIN  (-8388608) 
                    16043 .................... //#define UINT24_MAX (16777215) 
                    16044 ....................  
                    16045 .................... #define INT64_MAX  (9223372036854775807) 
                    16046 .................... #define INT64_MIN  (-9223372036854775808) 
                    16047 .................... #define UINT64_MAX (18446744073709551615) 
                    16048 .................... #endif 
                    16049 ....................  
                    16050 .................... ///////// minimum width 
                    16051 ....................  
                    16052 .................... typedef signed int8 int_least8_t; 
                    16053 .................... typedef unsigned int8 uint_least8_t; 
                    16054 .................... typedef signed int16 int_least16_t; 
                    16055 .................... typedef unsigned int16 uint_least16_t; 
                    16056 .................... typedef signed int32 int_least32_t; 
                    16057 .................... typedef unsigned int32 uint_least32_t; 
                    16058 ....................  
                    16059 .................... #if defined(__PCD__) 
                    16060 .................... //typedef signed int24 int_least24_t; 
                    16061 .................... //typedef unsigned int24 uint_least24_t; 
                    16062 .................... typedef signed int64 int_least64_t; 
                    16063 .................... typedef unsigned int64 uint_least64_t; 
                    16064 .................... #endif 
                    16065 ....................  
                    16066 .................... #define INT_LEAST8_MAX  (128) 
                    16067 .................... #define INT_LEAST8_MIN  (-127) 
                    16068 .................... #define UINT_LEAST8_MAX (255) 
                    16069 ....................  
                    16070 .................... #define INT_LEAST16_MAX  (32767) 
                    16071 .................... #define INT_LEAST16_MIN  (-32768) 
                    16072 .................... #define UINT_LEAST16_MAX (65535) 
                    16073 ....................  
                    16074 .................... #define INT_LEAST32_MAX  (2147483647) 
                    16075 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    16076 .................... #define UINT_LEAST32_MAX (4294967295) 
                    16077 ....................  
                    16078 .................... #if defined(__PCD__) 
                    16079 .................... //#define INT_LEAST24_MAX  (8388607) 
                    16080 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    16081 .................... //#define UINT_LEAST24_MAX (16777215) 
                    16082 ....................  
                    16083 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    16084 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    16085 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    16086 .................... #endif 
                    16087 ....................  
                    16088 .................... ///////// fastest width 
                    16089 ....................  
                    16090 .................... #if defined(__PCD__) 
                    16091 .................... typedef signed int16 int_fast8_t; 
                    16092 .................... typedef unsigned int16 uint_fast8_t; 
                    16093 .................... #define INT_FAST8_MAX  (32767) 
                    16094 .................... #define INT_FAST8_MIN  (-32768) 
                    16095 .................... #define UINT_FAST8_MAX (65535) 
                    16096 .................... typedef signed int16 int_fast16_t; 
                    16097 .................... typedef unsigned int16 uint_fast16_t; 
                    16098 .................... //typedef signed int24 int_fast24_t; 
                    16099 .................... //typedef unsigned int24 uint_fast24_t; 
                    16100 .................... typedef signed int64 int_fast64_t; 
                    16101 .................... typedef unsigned int64 uint_fast64_t; 
                    16102 .................... #else 
                    16103 .................... typedef signed int8 int_fast8_t; 
                    16104 .................... typedef unsigned int8 uint_fast8_t; 
                    16105 .................... #define INT_FAST8_MAX  (128) 
                    16106 .................... #define INT_FAST8_MIN  (-127) 
                    16107 .................... #define UINT_FAST8_MAX (255) 
                    16108 .................... typedef signed int16 int_fast16_t; 
                    16109 .................... typedef unsigned int16 uint_fast16_t; 
                    16110 .................... #endif 
                    16111 ....................  
                    16112 .................... typedef signed int32 int_fast32_t; 
                    16113 .................... typedef unsigned int32 uint_fast32_t; 
                    16114 ....................  
                    16115 .................... #define INT_FAST16_MAX  (32767) 
                    16116 .................... #define INT_FAST16_MIN  (-32768) 
                    16117 .................... #define UINT_FAST16_MAX (65535) 
                    16118 ....................  
                    16119 .................... #define INT_FAST32_MAX  (2147483647) 
                    16120 .................... #define INT_FAST32_MIN  (-2147483648) 
                    16121 .................... #define UINT_FAST32_MAX (4294967295) 
                    16122 ....................  
                    16123 .................... #if defined(__PCD__) 
                    16124 .................... //#define INT_FAST24_MAX  (8388607) 
                    16125 .................... //#define INT_FAST24_MIN  (-8388608) 
                    16126 .................... //#define UINT_FAST24_MAX (16777215) 
                    16127 ....................  
                    16128 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    16129 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    16130 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    16131 .................... #endif 
                    16132 ....................  
                    16133 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    16134 ....................  
                    16135 .................... /// TODO 
                    16136 ....................  
                    16137 .................... /// intptr_t uintptr_t 
                    16138 ....................  
                    16139 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    16140 ....................  
                    16141 ....................  
                    16142 .................... /////////// greatest width (OPTIONAL) 
                    16143 ....................  
                    16144 .................... /// TODO 
                    16145 ....................  
                    16146 .................... /// intmax_t uintmax_t 
                    16147 ....................  
                    16148 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    16149 ....................  
                    16150 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    16151 ....................  
                    16152 ....................  
                    16153 .................... #endif 
                    16154 ....................  
                    16155 ....................  
                    16156 .................... uint8_t crc8(uint8_t* buffer, uint16_t size); 
                    16157 ....................  
                    16158 .................... #endif 
                    16159 ....................  
                    16160 ....................  
                    16161 .................... static int replaceFlagAndEscape(unsigned char *data, unsigned char *dest, int datalen) 
                    16162 .................... { 
5432 0104           16163 MOVLB  4
5434 6B59           16164 CLRF   x59
5436 6B5A           16165 CLRF   x5A
                    16166 .................... 	int datai=0; 
                    16167 .................... 	int desti=0; 
                    16168 .................... 	for(datai=0;datai<datalen;datai++) 
5438 6B59           16169 CLRF   x59
543A 5158           16170 MOVF   x58,W
543C 5D59           16171 SUBWF  x59,W
543E E258           16172 BC    54F0
                    16173 .................... 	{ 
                    16174 .................... 		if(data[datai] == CHAR_FLAG) 
5440 6A03           16175 CLRF   03
5442 5159           16176 MOVF   x59,W
5444 2554           16177 ADDWF  x54,W
5446 6EE9           16178 MOVWF  FE9
5448 5155           16179 MOVF   x55,W
544A 2003           16180 ADDWFC 03,W
544C 6EEA           16181 MOVWF  FEA
544E 50EF           16182 MOVF   FEF,W
5450 087E           16183 SUBLW  7E
5452 E115           16184 BNZ   547E
                    16185 .................... 		{ 
                    16186 .................... 			dest[desti++] = CHAR_ESCAPE; 
5454 515A           16187 MOVF   x5A,W
5456 2B5A           16188 INCF   x5A,F
5458 6A03           16189 CLRF   03
545A 2556           16190 ADDWF  x56,W
545C 6EE9           16191 MOVWF  FE9
545E 5157           16192 MOVF   x57,W
5460 2003           16193 ADDWFC 03,W
5462 6EEA           16194 MOVWF  FEA
5464 0E7D           16195 MOVLW  7D
5466 6EEF           16196 MOVWF  FEF
                    16197 .................... 			dest[desti++] = CHAR_FLAG_XORED; 
5468 515A           16198 MOVF   x5A,W
546A 2B5A           16199 INCF   x5A,F
546C 6A03           16200 CLRF   03
546E 2556           16201 ADDWF  x56,W
5470 6EE9           16202 MOVWF  FE9
5472 5157           16203 MOVF   x57,W
5474 2003           16204 ADDWFC 03,W
5476 6EEA           16205 MOVWF  FEA
5478 0E5E           16206 MOVLW  5E
547A 6EEF           16207 MOVWF  FEF
                    16208 .................... 		} 
                    16209 .................... 		else if(data[datai] == CHAR_ESCAPE) 
547C D037           16210 BRA    54EC
547E 6A03           16211 CLRF   03
5480 5159           16212 MOVF   x59,W
5482 2554           16213 ADDWF  x54,W
5484 6EE9           16214 MOVWF  FE9
5486 5155           16215 MOVF   x55,W
5488 2003           16216 ADDWFC 03,W
548A 6EEA           16217 MOVWF  FEA
548C 50EF           16218 MOVF   FEF,W
548E 087D           16219 SUBLW  7D
5490 E115           16220 BNZ   54BC
                    16221 .................... 		{ 
                    16222 .................... 			dest[desti++] = CHAR_ESCAPE; 
5492 515A           16223 MOVF   x5A,W
5494 2B5A           16224 INCF   x5A,F
5496 6A03           16225 CLRF   03
5498 2556           16226 ADDWF  x56,W
549A 6EE9           16227 MOVWF  FE9
549C 5157           16228 MOVF   x57,W
549E 2003           16229 ADDWFC 03,W
54A0 6EEA           16230 MOVWF  FEA
54A2 0E7D           16231 MOVLW  7D
54A4 6EEF           16232 MOVWF  FEF
                    16233 .................... 			dest[desti++] = CHAR_ESCAPE_XORED; 
54A6 515A           16234 MOVF   x5A,W
54A8 2B5A           16235 INCF   x5A,F
54AA 6A03           16236 CLRF   03
54AC 2556           16237 ADDWF  x56,W
54AE 6EE9           16238 MOVWF  FE9
54B0 5157           16239 MOVF   x57,W
54B2 2003           16240 ADDWFC 03,W
54B4 6EEA           16241 MOVWF  FEA
54B6 0E5D           16242 MOVLW  5D
54B8 6EEF           16243 MOVWF  FEF
                    16244 .................... 		} 
                    16245 .................... 		else 
54BA D018           16246 BRA    54EC
                    16247 .................... 		{ 
                    16248 .................... 			dest[desti++] = data[datai]; 
54BC 515A           16249 MOVF   x5A,W
54BE 2B5A           16250 INCF   x5A,F
54C0 6A03           16251 CLRF   03
54C2 2556           16252 ADDWF  x56,W
54C4 6E01           16253 MOVWF  01
54C6 5157           16254 MOVF   x57,W
54C8 2203           16255 ADDWFC 03,F
54CA C003 F45C      16256 MOVFF  03,45C
54CE 6A03           16257 CLRF   03
54D0 5159           16258 MOVF   x59,W
54D2 2554           16259 ADDWF  x54,W
54D4 6EE9           16260 MOVWF  FE9
54D6 5155           16261 MOVF   x55,W
54D8 2003           16262 ADDWFC 03,W
54DA 6EEA           16263 MOVWF  FEA
54DC CFEF F45D      16264 MOVFF  FEF,45D
54E0 C45C FFEA      16265 MOVFF  45C,FEA
54E4 C001 FFE9      16266 MOVFF  01,FE9
54E8 C45D FFEF      16267 MOVFF  45D,FEF
                    16268 .................... 		} 
                    16269 .................... 	} 
54EC 2B59           16270 INCF   x59,F
54EE D7A5           16271 BRA    543A
                    16272 .................... 	return desti; //return the size of the new data string 
54F0 C45A F001      16273 MOVFF  45A,01
                    16274 .................... } 
54F4 0100           16275 MOVLB  0
54F6 0012           16276 RETURN 0
                    16277 ....................  
                    16278 .................... static int restoreFlagAndEscape(unsigned char *data, unsigned char *dest, int datalen) 
                    16279 .................... { 
520A 0104           16280 MOVLB  4
520C 6B08           16281 CLRF   x08
520E 6B09           16282 CLRF   x09
                    16283 .................... 	int datai=0; 
                    16284 .................... 	int desti=0; 
                    16285 .................... 	for(datai=0;datai<datalen;datai++) 
5210 6B08           16286 CLRF   x08
5212 5107           16287 MOVF   x07,W
5214 5D08           16288 SUBWF  x08,W
5216 E24F           16289 BC    52B6
                    16290 .................... 	{ 
                    16291 .................... 		if(data[datai] == CHAR_ESCAPE) 
5218 6A03           16292 CLRF   03
521A 5108           16293 MOVF   x08,W
521C 2503           16294 ADDWF  x03,W
521E 6EE9           16295 MOVWF  FE9
5220 5104           16296 MOVF   x04,W
5222 2003           16297 ADDWFC 03,W
5224 6EEA           16298 MOVWF  FEA
5226 50EF           16299 MOVF   FEF,W
5228 087D           16300 SUBLW  7D
522A E12B           16301 BNZ   5282
                    16302 .................... 		{ 
                    16303 .................... 			datai++; 
522C 2B08           16304 INCF   x08,F
                    16305 .................... 			if(data[datai] == CHAR_FLAG_XORED) 
522E 6A03           16306 CLRF   03
5230 5108           16307 MOVF   x08,W
5232 2503           16308 ADDWF  x03,W
5234 6EE9           16309 MOVWF  FE9
5236 5104           16310 MOVF   x04,W
5238 2003           16311 ADDWFC 03,W
523A 6EEA           16312 MOVWF  FEA
523C 50EF           16313 MOVF   FEF,W
523E 085E           16314 SUBLW  5E
5240 E10B           16315 BNZ   5258
                    16316 .................... 			{ 
                    16317 .................... 				dest[desti++] = CHAR_FLAG; 
5242 5109           16318 MOVF   x09,W
5244 2B09           16319 INCF   x09,F
5246 6A03           16320 CLRF   03
5248 2505           16321 ADDWF  x05,W
524A 6EE9           16322 MOVWF  FE9
524C 5106           16323 MOVF   x06,W
524E 2003           16324 ADDWFC 03,W
5250 6EEA           16325 MOVWF  FEA
5252 0E7E           16326 MOVLW  7E
5254 6EEF           16327 MOVWF  FEF
                    16328 .................... 			} 
                    16329 .................... 			else if(data[datai] == CHAR_ESCAPE_XORED) 
5256 D014           16330 BRA    5280
5258 6A03           16331 CLRF   03
525A 5108           16332 MOVF   x08,W
525C 2503           16333 ADDWF  x03,W
525E 6EE9           16334 MOVWF  FE9
5260 5104           16335 MOVF   x04,W
5262 2003           16336 ADDWFC 03,W
5264 6EEA           16337 MOVWF  FEA
5266 50EF           16338 MOVF   FEF,W
5268 085D           16339 SUBLW  5D
526A E10A           16340 BNZ   5280
                    16341 .................... 			{ 
                    16342 .................... 				dest[desti++] = CHAR_ESCAPE; 
526C 5109           16343 MOVF   x09,W
526E 2B09           16344 INCF   x09,F
5270 6A03           16345 CLRF   03
5272 2505           16346 ADDWF  x05,W
5274 6EE9           16347 MOVWF  FE9
5276 5106           16348 MOVF   x06,W
5278 2003           16349 ADDWFC 03,W
527A 6EEA           16350 MOVWF  FEA
527C 0E7D           16351 MOVLW  7D
527E 6EEF           16352 MOVWF  FEF
                    16353 .................... 			} 
                    16354 .................... 			else 
                    16355 .................... 			{ 
                    16356 .................... 				//count this as an error on the stream! 
                    16357 .................... 			} 
                    16358 .................... 		} 
                    16359 .................... 		else 
5280 D018           16360 BRA    52B2
                    16361 .................... 		{ 
                    16362 .................... 			dest[desti++] = data[datai]; 
5282 5109           16363 MOVF   x09,W
5284 2B09           16364 INCF   x09,F
5286 6A03           16365 CLRF   03
5288 2505           16366 ADDWF  x05,W
528A 6E01           16367 MOVWF  01
528C 5106           16368 MOVF   x06,W
528E 2203           16369 ADDWFC 03,F
5290 C003 F40B      16370 MOVFF  03,40B
5294 6A03           16371 CLRF   03
5296 5108           16372 MOVF   x08,W
5298 2503           16373 ADDWF  x03,W
529A 6EE9           16374 MOVWF  FE9
529C 5104           16375 MOVF   x04,W
529E 2003           16376 ADDWFC 03,W
52A0 6EEA           16377 MOVWF  FEA
52A2 CFEF F40C      16378 MOVFF  FEF,40C
52A6 C40B FFEA      16379 MOVFF  40B,FEA
52AA C001 FFE9      16380 MOVFF  01,FE9
52AE C40C FFEF      16381 MOVFF  40C,FEF
                    16382 .................... 		} 
                    16383 .................... 	} 
52B2 2B08           16384 INCF   x08,F
52B4 D7AE           16385 BRA    5212
                    16386 .................... 	return desti; //return the size of the new data string 
52B6 C409 F001      16387 MOVFF  409,01
                    16388 .................... } 
52BA 0100           16389 MOVLB  0
52BC EF96 F029      16390 GOTO   532C (RETURN)
                    16391 ....................  
                    16392 .................... //this function encapsulate the data with all the information needed 
                    16393 .................... //to be sent via the rfc1662 protocol (PPP with HDLC like framing) 
                    16394 .................... //this function should be called for sending data through the rs422 link 
                    16395 .................... //dataLen should be the datalength only! 
                    16396 ....................  
                    16397 .................... int rfc1662_pack(unsigned char *data, int dataLen, unsigned char *dest) 
                    16398 .................... { 
54F8 0104           16399 MOVLB  4
54FA 6B4F           16400 CLRF   x4F
54FC 6B50           16401 CLRF   x50
54FE C44B F453      16402 MOVFF  44B,453
5502 C44A F452      16403 MOVFF  44A,452
5506 6B55           16404 CLRF   x55
5508 C44C F454      16405 MOVFF  44C,454
550C 0100           16406 MOVLB  0
550E DED8           16407 RCALL  52C0
5510 C001 F451      16408 MOVFF  01,451
                    16409 .................... 	int changed_data_size = 0; 
                    16410 .................... 	int changed_crc_size = 0; 
                    16411 .................... 	//calc crc and add it to the end of the data 
                    16412 .................... 	uint8_t crc = crc8(data, dataLen); 
                    16413 .................... 	//replace escape and flag 
                    16414 .................... 	changed_data_size = replaceFlagAndEscape(data, &dest[1], dataLen); 
5514 0E01           16415 MOVLW  01
5516 0104           16416 MOVLB  4
5518 254D           16417 ADDWF  x4D,W
551A 6E01           16418 MOVWF  01
551C 0E00           16419 MOVLW  00
551E 214E           16420 ADDWFC x4E,W
5520 6E03           16421 MOVWF  03
5522 C001 F452      16422 MOVFF  01,452
5526 6F53           16423 MOVWF  x53
5528 C44B F455      16424 MOVFF  44B,455
552C C44A F454      16425 MOVFF  44A,454
5530 6F57           16426 MOVWF  x57
5532 C001 F456      16427 MOVFF  01,456
5536 C44C F458      16428 MOVFF  44C,458
553A 0100           16429 MOVLB  0
553C DF7A           16430 RCALL  5432
553E C001 F44F      16431 MOVFF  01,44F
                    16432 .................... 	changed_crc_size = replaceFlagAndEscape(&crc, &dest[changed_data_size+1], sizeof(crc)); 
5542 0E01           16433 MOVLW  01
5544 0104           16434 MOVLB  4
5546 254F           16435 ADDWF  x4F,W
5548 6A03           16436 CLRF   03
554A 254D           16437 ADDWF  x4D,W
554C 6E01           16438 MOVWF  01
554E 514E           16439 MOVF   x4E,W
5550 2203           16440 ADDWFC 03,F
5552 C001 F452      16441 MOVFF  01,452
5556 C003 F453      16442 MOVFF  03,453
555A 0E04           16443 MOVLW  04
555C 6F55           16444 MOVWF  x55
555E 0E51           16445 MOVLW  51
5560 6F54           16446 MOVWF  x54
5562 C003 F457      16447 MOVFF  03,457
5566 C001 F456      16448 MOVFF  01,456
556A 0E01           16449 MOVLW  01
556C 6F58           16450 MOVWF  x58
556E 0100           16451 MOVLB  0
5570 DF60           16452 RCALL  5432
5572 C001 F450      16453 MOVFF  01,450
                    16454 .................... 	//add the flags 
                    16455 .................... 	dest[0] = CHAR_FLAG; 
5576 0104           16456 MOVLB  4
5578 C44D FFE9      16457 MOVFF  44D,FE9
557C C44E FFEA      16458 MOVFF  44E,FEA
5580 0E7E           16459 MOVLW  7E
5582 6EEF           16460 MOVWF  FEF
                    16461 .................... 	dest[changed_data_size+changed_crc_size+1] = CHAR_FLAG; 
5584 5150           16462 MOVF   x50,W
5586 254F           16463 ADDWF  x4F,W
5588 0F01           16464 ADDLW  01
558A 6A03           16465 CLRF   03
558C 254D           16466 ADDWF  x4D,W
558E 6EE9           16467 MOVWF  FE9
5590 514E           16468 MOVF   x4E,W
5592 2003           16469 ADDWFC 03,W
5594 6EEA           16470 MOVWF  FEA
5596 0E7E           16471 MOVLW  7E
5598 6EEF           16472 MOVWF  FEF
                    16473 ....................  
                    16474 .................... 	// returns the size of dest 
                    16475 .................... 	return changed_data_size+changed_crc_size+2; 
559A 5150           16476 MOVF   x50,W
559C 254F           16477 ADDWF  x4F,W
559E 0F02           16478 ADDLW  02
55A0 6E01           16479 MOVWF  01
                    16480 .................... } 
55A2 0100           16481 MOVLB  0
55A4 EF54 F02B      16482 GOTO   56A8 (RETURN)
                    16483 ....................  
                    16484 ....................  
                    16485 .................... int rfc1662_unpack(unsigned char *data, int len, unsigned char *dest) 
                    16486 .................... { 
5310 0104           16487 MOVLB  4
5312 6B00           16488 CLRF   x00
                    16489 .................... 	int restored_data_size = 0; 
                    16490 .................... 	//the received data is received without the start and end FLAGS 
                    16491 .................... 	restored_data_size = restoreFlagAndEscape(data, dest, len); 
5314 C3FC F404      16492 MOVFF  3FC,404
5318 C3FB F403      16493 MOVFF  3FB,403
531C C3FF F406      16494 MOVFF  3FF,406
5320 C3FE F405      16495 MOVFF  3FE,405
5324 C3FD F407      16496 MOVFF  3FD,407
5328 0100           16497 MOVLB  0
532A D76F           16498 BRA    520A
532C C001 F400      16499 MOVFF  01,400
                    16500 ....................  
                    16501 .................... 	if (restored_data_size < 1) 
5330 0104           16502 MOVLB  4
5332 5300           16503 MOVF   x00,F
5334 E103           16504 BNZ   533C
                    16505 .................... 		return -1; 
5336 0EFF           16506 MOVLW  FF
5338 6E01           16507 MOVWF  01
533A D023           16508 BRA    5382
                    16509 ....................  
                    16510 .................... 	uint8_t calculated_crc = crc8(dest, restored_data_size - 1); 
                    16511 .................... 	uint8_t message_crc = dest[restored_data_size - 1]; 
533C 0E01           16512 MOVLW  01
533E 5D00           16513 SUBWF  x00,W
5340 6F03           16514 MOVWF  x03
5342 C3FF F453      16515 MOVFF  3FF,453
5346 C3FE F452      16516 MOVFF  3FE,452
534A 6B55           16517 CLRF   x55
534C 6F54           16518 MOVWF  x54
534E 0100           16519 MOVLB  0
5350 DFB7           16520 RCALL  52C0
5352 C001 F401      16521 MOVFF  01,401
5356 0E01           16522 MOVLW  01
5358 0104           16523 MOVLB  4
535A 5D00           16524 SUBWF  x00,W
535C 6A03           16525 CLRF   03
535E 0103           16526 MOVLB  3
5360 25FE           16527 ADDWF  xFE,W
5362 6EE9           16528 MOVWF  FE9
5364 51FF           16529 MOVF   xFF,W
5366 2003           16530 ADDWFC 03,W
5368 6EEA           16531 MOVWF  FEA
536A CFEF F402      16532 MOVFF  FEF,402
536E 0104           16533 MOVLB  4
                    16534 .................... 	if (calculated_crc == message_crc) { 
5370 5102           16535 MOVF   x02,W
5372 5D01           16536 SUBWF  x01,W
5374 E104           16537 BNZ   537E
                    16538 .................... 		//crc is correct 
                    16539 .................... 		//return the size of the new data 
                    16540 .................... 		return restored_data_size-1; //we get dsti+1 at the end and the 1 crc 
5376 0E01           16541 MOVLW  01
5378 5D00           16542 SUBWF  x00,W
537A 6E01           16543 MOVWF  01
537C D002           16544 BRA    5382
                    16545 .................... 	} 
                    16546 .................... 	 
                    16547 .................... 	return -1; 
537E 0EFF           16548 MOVLW  FF
5380 6E01           16549 MOVWF  01
                    16550 .................... } 
5382 0100           16551 MOVLB  0
5384 EF00 F02A      16552 GOTO   5400 (RETURN)
                    16553 ....................  
                    16554 .................... #include "BA1474.h" 
                    16555 .................... #include <18F45K22.h> 
                    16556 .................... //////// Standard Header file for the PIC18F45K22 device //////////////// 
                    16557 .................... #device PIC18F45K22 
                    17158 .................... #list 
                    17159 ....................  
                    17160 .................... #device adc=10 
                    17161 .................... #device pass_strings=in_ram 
                    17162 ....................  
                    17163 .................... #define LOADER_END 0x1FFF 
                    17164 .................... #include <boot.h> 
                    17165 .................... #undef LOADER_END 
                    17166 .................... #define FLASH_SIZE getenv("FLASH_ERASE_SIZE") 
                    17167 .................... #define LOADER_END   0x1FFF 
                    17168 .................... #define LOADER_SIZE  0x3FF 
                    17169 ....................  
                    17170 .................... #ifndef _bootloader 
                    17171 .................... #build(reset=LOADER_END+1, interrupt=LOADER_END+9) 
                    17172 ....................  
                    17173 .................... /* when in operational software, keep out of the bootloader sections */ 
                    17174 .................... #org 0, 0xfff {} 
                    17175 .................... #org 0x1000, 0x1ffe {} 
                    17176 ....................  
                    17177 .................... #else 
                    17178 ....................  
                    17179 .................... /* when in the bootloader, keep out of the operational sections */ 
                    17180 .................... #org 0x2000, 0x7ffe {} 
                    17181 ....................  
                    17182 .................... #endif 
                    17183 ....................  
                    17184 ....................  
                    17185 .................... #FUSES NOWDT                   //No Watch Dog Timer 
                    17186 .................... #FUSES WDT128                  //Watch Dog Timer uses 1:128 Postscale 
                    17187 .................... #FUSES INTRC_IO                //Internal RC Osc, no CLKOUT 
                    17188 .................... #FUSES NOBROWNOUT              //No brownout reset 
                    17189 .................... #FUSES WDT_SW                  //No Watch Dog Timer, enabled in Software 
                    17190 .................... #FUSES NOLVP                   //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
                    17191 .................... #FUSES NOPUT 
                    17192 .................... #FUSES NOXINST                 //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
                    17193 ....................  
                    17194 .................... #use delay(clock=64000000) 
                    17195 .................... #use rs232(baud=921600,xmit=PIN_C6,rcv=PIN_C7,ERRORS) 
                    17196 .................... #USE TIMER(TIMER=1,TICK=1us,BITS=32,NOISR) 
                    17197 .................... #use spi(DO=PIN_A4, CLK=PIN_A3, ENABLE=PIN_A2, ENABLE_ACTIVE=0, DATA_HOLD=20, BITS=16) 
                    17198 ....................  
                    17199 .................... #opt 9 
                    17200 ....................  
                    17201 .................... #use fast_io(a) 
                    17202 .................... #use fast_io(b) 
                    17203 .................... #use fast_io(c) 
                    17204 .................... #use fast_io(d) 
                    17205 .................... #use fast_io(e) 
                    17206 ....................  
                    17207 .................... #define safe_write_program_memory(address, pointer, size) \ 
                    17208 ....................   do { disable_interrupts(GLOBAL); write_program_memory(address, pointer, size); enable_interrupts(GLOBAL); delay_us(1000); } while (0) 
                    17209 ....................  
                    17210 ....................  
                    17211 .................... #include <stdint.h> 
                    17212 .................... /////////////////////////////////////////////////////////////////////////// 
                    17213 .................... ////                                                                   //// 
                    17214 .................... ////                           stdint.h                                //// 
                    17215 .................... ////                                                                   //// 
                    17216 .................... //// Standard integer definitions.                                     //// 
                    17217 .................... ////                                                                   //// 
                    17218 .................... /////////////////////////////////////////////////////////////////////////// 
                    17219 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    17220 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    17221 .................... //// compiler.  This source code may only be distributed to other      //// 
                    17222 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    17223 .................... //// or distribution is permitted without written permission.          //// 
                    17224 .................... //// Derivative programs created using this software in object code    //// 
                    17225 .................... //// form are not restricted in any way.                               //// 
                    17226 .................... /////////////////////////////////////////////////////////////////////////// 
                    17227 ....................  
                    17228 .................... #ifndef _STDINT 
                    17229 ....................  
                    17230 .................... #define _STDINT 
                    17231 ....................  
                    17232 .................... //////////// exact width 
                    17233 ....................  
                    17234 .................... typedef signed int8 int8_t; 
                    17235 .................... typedef unsigned int8 uint8_t; 
                    17236 .................... typedef signed int16 int16_t; 
                    17237 .................... typedef unsigned int16 uint16_t; 
                    17238 .................... typedef signed int32 int32_t; 
                    17239 .................... typedef unsigned int32 uint32_t; 
                    17240 ....................  
                    17241 .................... #if defined(__PCD__) 
                    17242 .................... //typedef signed int24 int24_t; 
                    17243 .................... //typedef unsigned int24 uint24_t; 
                    17244 .................... typedef signed int64 int64_t; 
                    17245 .................... typedef unsigned int64 uint64_t; 
                    17246 .................... #endif 
                    17247 ....................  
                    17248 .................... #define INT8_MAX  (128) 
                    17249 .................... #define INT8_MIN  (-127) 
                    17250 .................... #define UINT8_MAX (255) 
                    17251 ....................  
                    17252 .................... #define INT16_MAX  (32767) 
                    17253 .................... #define INT16_MIN  (-32768) 
                    17254 .................... #define UINT16_MAX (65535) 
                    17255 ....................  
                    17256 .................... #define INT32_MAX  (2147483647) 
                    17257 .................... #define INT32_MIN  (-2147483648) 
                    17258 .................... #define UINT32_MAX (4294967295) 
                    17259 ....................  
                    17260 .................... #if defined(__PCD__) 
                    17261 .................... //#define INT24_MAX  (8388607) 
                    17262 .................... //#define INT24_MIN  (-8388608) 
                    17263 .................... //#define UINT24_MAX (16777215) 
                    17264 ....................  
                    17265 .................... #define INT64_MAX  (9223372036854775807) 
                    17266 .................... #define INT64_MIN  (-9223372036854775808) 
                    17267 .................... #define UINT64_MAX (18446744073709551615) 
                    17268 .................... #endif 
                    17269 ....................  
                    17270 .................... ///////// minimum width 
                    17271 ....................  
                    17272 .................... typedef signed int8 int_least8_t; 
                    17273 .................... typedef unsigned int8 uint_least8_t; 
                    17274 .................... typedef signed int16 int_least16_t; 
                    17275 .................... typedef unsigned int16 uint_least16_t; 
                    17276 .................... typedef signed int32 int_least32_t; 
                    17277 .................... typedef unsigned int32 uint_least32_t; 
                    17278 ....................  
                    17279 .................... #if defined(__PCD__) 
                    17280 .................... //typedef signed int24 int_least24_t; 
                    17281 .................... //typedef unsigned int24 uint_least24_t; 
                    17282 .................... typedef signed int64 int_least64_t; 
                    17283 .................... typedef unsigned int64 uint_least64_t; 
                    17284 .................... #endif 
                    17285 ....................  
                    17286 .................... #define INT_LEAST8_MAX  (128) 
                    17287 .................... #define INT_LEAST8_MIN  (-127) 
                    17288 .................... #define UINT_LEAST8_MAX (255) 
                    17289 ....................  
                    17290 .................... #define INT_LEAST16_MAX  (32767) 
                    17291 .................... #define INT_LEAST16_MIN  (-32768) 
                    17292 .................... #define UINT_LEAST16_MAX (65535) 
                    17293 ....................  
                    17294 .................... #define INT_LEAST32_MAX  (2147483647) 
                    17295 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    17296 .................... #define UINT_LEAST32_MAX (4294967295) 
                    17297 ....................  
                    17298 .................... #if defined(__PCD__) 
                    17299 .................... //#define INT_LEAST24_MAX  (8388607) 
                    17300 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    17301 .................... //#define UINT_LEAST24_MAX (16777215) 
                    17302 ....................  
                    17303 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    17304 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    17305 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    17306 .................... #endif 
                    17307 ....................  
                    17308 .................... ///////// fastest width 
                    17309 ....................  
                    17310 .................... #if defined(__PCD__) 
                    17311 .................... typedef signed int16 int_fast8_t; 
                    17312 .................... typedef unsigned int16 uint_fast8_t; 
                    17313 .................... #define INT_FAST8_MAX  (32767) 
                    17314 .................... #define INT_FAST8_MIN  (-32768) 
                    17315 .................... #define UINT_FAST8_MAX (65535) 
                    17316 .................... typedef signed int16 int_fast16_t; 
                    17317 .................... typedef unsigned int16 uint_fast16_t; 
                    17318 .................... //typedef signed int24 int_fast24_t; 
                    17319 .................... //typedef unsigned int24 uint_fast24_t; 
                    17320 .................... typedef signed int64 int_fast64_t; 
                    17321 .................... typedef unsigned int64 uint_fast64_t; 
                    17322 .................... #else 
                    17323 .................... typedef signed int8 int_fast8_t; 
                    17324 .................... typedef unsigned int8 uint_fast8_t; 
                    17325 .................... #define INT_FAST8_MAX  (128) 
                    17326 .................... #define INT_FAST8_MIN  (-127) 
                    17327 .................... #define UINT_FAST8_MAX (255) 
                    17328 .................... typedef signed int16 int_fast16_t; 
                    17329 .................... typedef unsigned int16 uint_fast16_t; 
                    17330 .................... #endif 
                    17331 ....................  
                    17332 .................... typedef signed int32 int_fast32_t; 
                    17333 .................... typedef unsigned int32 uint_fast32_t; 
                    17334 ....................  
                    17335 .................... #define INT_FAST16_MAX  (32767) 
                    17336 .................... #define INT_FAST16_MIN  (-32768) 
                    17337 .................... #define UINT_FAST16_MAX (65535) 
                    17338 ....................  
                    17339 .................... #define INT_FAST32_MAX  (2147483647) 
                    17340 .................... #define INT_FAST32_MIN  (-2147483648) 
                    17341 .................... #define UINT_FAST32_MAX (4294967295) 
                    17342 ....................  
                    17343 .................... #if defined(__PCD__) 
                    17344 .................... //#define INT_FAST24_MAX  (8388607) 
                    17345 .................... //#define INT_FAST24_MIN  (-8388608) 
                    17346 .................... //#define UINT_FAST24_MAX (16777215) 
                    17347 ....................  
                    17348 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    17349 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    17350 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    17351 .................... #endif 
                    17352 ....................  
                    17353 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    17354 ....................  
                    17355 .................... /// TODO 
                    17356 ....................  
                    17357 .................... /// intptr_t uintptr_t 
                    17358 ....................  
                    17359 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    17360 ....................  
                    17361 ....................  
                    17362 .................... /////////// greatest width (OPTIONAL) 
                    17363 ....................  
                    17364 .................... /// TODO 
                    17365 ....................  
                    17366 .................... /// intmax_t uintmax_t 
                    17367 ....................  
                    17368 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    17369 ....................  
                    17370 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    17371 ....................  
                    17372 ....................  
                    17373 .................... #endif 
                    17374 ....................  
                    17375 .................... #include <stdbool.h> 
                    17376 .................... /////////////////////////////////////////////////////////////////////////// 
                    17377 .................... ////                                                                   //// 
                    17378 .................... ////                          stdbool.h                                //// 
                    17379 .................... ////                                                                   //// 
                    17380 .................... //// Standard boolean definitions                                      //// 
                    17381 .................... ////                                                                   //// 
                    17382 .................... /////////////////////////////////////////////////////////////////////////// 
                    17383 .................... ////        (C) Copyright 1996,2012 Custom Computer Services           //// 
                    17384 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    17385 .................... //// compiler.  This source code may only be distributed to other      //// 
                    17386 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    17387 .................... //// or distribution is permitted without written permission.          //// 
                    17388 .................... //// Derivative programs created using this software in object code    //// 
                    17389 .................... //// form are not restricted in any way.                               //// 
                    17390 .................... /////////////////////////////////////////////////////////////////////////// 
                    17391 ....................  
                    17392 .................... #ifndef __STDBOOL_H__ 
                    17393 .................... #define __STDBOOL_H__ 
                    17394 ....................  
                    17395 .................... //remove TRUE and FALSE added by CCS's device .h file 
                    17396 .................... #if defined(TRUE) 
                    17397 .................... #undef TRUE 
                    17398 .................... #endif 
                    17399 .................... #if defined(FALSE) 
                    17400 .................... #undef FALSE 
                    17401 .................... #endif 
                    17402 ....................  
                    17403 .................... typedef int1   bool; 
                    17404 .................... #define true   1 
                    17405 .................... #define false  0 
                    17406 .................... #define __bool_true_false_are_defined  1 
                    17407 ....................  
                    17408 .................... #endif 
                    17409 ....................  
                    17410 .................... #include "timer.h" 
                    17411 .................... #ifndef INCLUDE_TIMER_H_ 
                    17412 .................... #define INCLUDE_TIMER_H_ 
                    17413 ....................  
                    17414 .................... #include <stdint.h> 
                    17415 .................... /////////////////////////////////////////////////////////////////////////// 
                    17416 .................... ////                                                                   //// 
                    17417 .................... ////                           stdint.h                                //// 
                    17418 .................... ////                                                                   //// 
                    17419 .................... //// Standard integer definitions.                                     //// 
                    17420 .................... ////                                                                   //// 
                    17421 .................... /////////////////////////////////////////////////////////////////////////// 
                    17422 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    17423 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    17424 .................... //// compiler.  This source code may only be distributed to other      //// 
                    17425 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    17426 .................... //// or distribution is permitted without written permission.          //// 
                    17427 .................... //// Derivative programs created using this software in object code    //// 
                    17428 .................... //// form are not restricted in any way.                               //// 
                    17429 .................... /////////////////////////////////////////////////////////////////////////// 
                    17430 ....................  
                    17431 .................... #ifndef _STDINT 
                    17432 ....................  
                    17433 .................... #define _STDINT 
                    17434 ....................  
                    17435 .................... //////////// exact width 
                    17436 ....................  
                    17437 .................... typedef signed int8 int8_t; 
                    17438 .................... typedef unsigned int8 uint8_t; 
                    17439 .................... typedef signed int16 int16_t; 
                    17440 .................... typedef unsigned int16 uint16_t; 
                    17441 .................... typedef signed int32 int32_t; 
                    17442 .................... typedef unsigned int32 uint32_t; 
                    17443 ....................  
                    17444 .................... #if defined(__PCD__) 
                    17445 .................... //typedef signed int24 int24_t; 
                    17446 .................... //typedef unsigned int24 uint24_t; 
                    17447 .................... typedef signed int64 int64_t; 
                    17448 .................... typedef unsigned int64 uint64_t; 
                    17449 .................... #endif 
                    17450 ....................  
                    17451 .................... #define INT8_MAX  (128) 
                    17452 .................... #define INT8_MIN  (-127) 
                    17453 .................... #define UINT8_MAX (255) 
                    17454 ....................  
                    17455 .................... #define INT16_MAX  (32767) 
                    17456 .................... #define INT16_MIN  (-32768) 
                    17457 .................... #define UINT16_MAX (65535) 
                    17458 ....................  
                    17459 .................... #define INT32_MAX  (2147483647) 
                    17460 .................... #define INT32_MIN  (-2147483648) 
                    17461 .................... #define UINT32_MAX (4294967295) 
                    17462 ....................  
                    17463 .................... #if defined(__PCD__) 
                    17464 .................... //#define INT24_MAX  (8388607) 
                    17465 .................... //#define INT24_MIN  (-8388608) 
                    17466 .................... //#define UINT24_MAX (16777215) 
                    17467 ....................  
                    17468 .................... #define INT64_MAX  (9223372036854775807) 
                    17469 .................... #define INT64_MIN  (-9223372036854775808) 
                    17470 .................... #define UINT64_MAX (18446744073709551615) 
                    17471 .................... #endif 
                    17472 ....................  
                    17473 .................... ///////// minimum width 
                    17474 ....................  
                    17475 .................... typedef signed int8 int_least8_t; 
                    17476 .................... typedef unsigned int8 uint_least8_t; 
                    17477 .................... typedef signed int16 int_least16_t; 
                    17478 .................... typedef unsigned int16 uint_least16_t; 
                    17479 .................... typedef signed int32 int_least32_t; 
                    17480 .................... typedef unsigned int32 uint_least32_t; 
                    17481 ....................  
                    17482 .................... #if defined(__PCD__) 
                    17483 .................... //typedef signed int24 int_least24_t; 
                    17484 .................... //typedef unsigned int24 uint_least24_t; 
                    17485 .................... typedef signed int64 int_least64_t; 
                    17486 .................... typedef unsigned int64 uint_least64_t; 
                    17487 .................... #endif 
                    17488 ....................  
                    17489 .................... #define INT_LEAST8_MAX  (128) 
                    17490 .................... #define INT_LEAST8_MIN  (-127) 
                    17491 .................... #define UINT_LEAST8_MAX (255) 
                    17492 ....................  
                    17493 .................... #define INT_LEAST16_MAX  (32767) 
                    17494 .................... #define INT_LEAST16_MIN  (-32768) 
                    17495 .................... #define UINT_LEAST16_MAX (65535) 
                    17496 ....................  
                    17497 .................... #define INT_LEAST32_MAX  (2147483647) 
                    17498 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    17499 .................... #define UINT_LEAST32_MAX (4294967295) 
                    17500 ....................  
                    17501 .................... #if defined(__PCD__) 
                    17502 .................... //#define INT_LEAST24_MAX  (8388607) 
                    17503 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    17504 .................... //#define UINT_LEAST24_MAX (16777215) 
                    17505 ....................  
                    17506 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    17507 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    17508 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    17509 .................... #endif 
                    17510 ....................  
                    17511 .................... ///////// fastest width 
                    17512 ....................  
                    17513 .................... #if defined(__PCD__) 
                    17514 .................... typedef signed int16 int_fast8_t; 
                    17515 .................... typedef unsigned int16 uint_fast8_t; 
                    17516 .................... #define INT_FAST8_MAX  (32767) 
                    17517 .................... #define INT_FAST8_MIN  (-32768) 
                    17518 .................... #define UINT_FAST8_MAX (65535) 
                    17519 .................... typedef signed int16 int_fast16_t; 
                    17520 .................... typedef unsigned int16 uint_fast16_t; 
                    17521 .................... //typedef signed int24 int_fast24_t; 
                    17522 .................... //typedef unsigned int24 uint_fast24_t; 
                    17523 .................... typedef signed int64 int_fast64_t; 
                    17524 .................... typedef unsigned int64 uint_fast64_t; 
                    17525 .................... #else 
                    17526 .................... typedef signed int8 int_fast8_t; 
                    17527 .................... typedef unsigned int8 uint_fast8_t; 
                    17528 .................... #define INT_FAST8_MAX  (128) 
                    17529 .................... #define INT_FAST8_MIN  (-127) 
                    17530 .................... #define UINT_FAST8_MAX (255) 
                    17531 .................... typedef signed int16 int_fast16_t; 
                    17532 .................... typedef unsigned int16 uint_fast16_t; 
                    17533 .................... #endif 
                    17534 ....................  
                    17535 .................... typedef signed int32 int_fast32_t; 
                    17536 .................... typedef unsigned int32 uint_fast32_t; 
                    17537 ....................  
                    17538 .................... #define INT_FAST16_MAX  (32767) 
                    17539 .................... #define INT_FAST16_MIN  (-32768) 
                    17540 .................... #define UINT_FAST16_MAX (65535) 
                    17541 ....................  
                    17542 .................... #define INT_FAST32_MAX  (2147483647) 
                    17543 .................... #define INT_FAST32_MIN  (-2147483648) 
                    17544 .................... #define UINT_FAST32_MAX (4294967295) 
                    17545 ....................  
                    17546 .................... #if defined(__PCD__) 
                    17547 .................... //#define INT_FAST24_MAX  (8388607) 
                    17548 .................... //#define INT_FAST24_MIN  (-8388608) 
                    17549 .................... //#define UINT_FAST24_MAX (16777215) 
                    17550 ....................  
                    17551 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    17552 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    17553 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    17554 .................... #endif 
                    17555 ....................  
                    17556 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    17557 ....................  
                    17558 .................... /// TODO 
                    17559 ....................  
                    17560 .................... /// intptr_t uintptr_t 
                    17561 ....................  
                    17562 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    17563 ....................  
                    17564 ....................  
                    17565 .................... /////////// greatest width (OPTIONAL) 
                    17566 ....................  
                    17567 .................... /// TODO 
                    17568 ....................  
                    17569 .................... /// intmax_t uintmax_t 
                    17570 ....................  
                    17571 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    17572 ....................  
                    17573 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    17574 ....................  
                    17575 ....................  
                    17576 .................... #endif 
                    17577 ....................  
                    17578 .................... #include <stdbool.h> 
                    17579 .................... /////////////////////////////////////////////////////////////////////////// 
                    17580 .................... ////                                                                   //// 
                    17581 .................... ////                          stdbool.h                                //// 
                    17582 .................... ////                                                                   //// 
                    17583 .................... //// Standard boolean definitions                                      //// 
                    17584 .................... ////                                                                   //// 
                    17585 .................... /////////////////////////////////////////////////////////////////////////// 
                    17586 .................... ////        (C) Copyright 1996,2012 Custom Computer Services           //// 
                    17587 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    17588 .................... //// compiler.  This source code may only be distributed to other      //// 
                    17589 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    17590 .................... //// or distribution is permitted without written permission.          //// 
                    17591 .................... //// Derivative programs created using this software in object code    //// 
                    17592 .................... //// form are not restricted in any way.                               //// 
                    17593 .................... /////////////////////////////////////////////////////////////////////////// 
                    17594 ....................  
                    17595 .................... #ifndef __STDBOOL_H__ 
                    17596 .................... #define __STDBOOL_H__ 
                    17597 ....................  
                    17598 .................... //remove TRUE and FALSE added by CCS's device .h file 
                    17599 .................... #if defined(TRUE) 
                    17600 .................... #undef TRUE 
                    17601 .................... #endif 
                    17602 .................... #if defined(FALSE) 
                    17603 .................... #undef FALSE 
                    17604 .................... #endif 
                    17605 ....................  
                    17606 .................... typedef int1   bool; 
                    17607 .................... #define true   1 
                    17608 .................... #define false  0 
                    17609 .................... #define __bool_true_false_are_defined  1 
                    17610 ....................  
                    17611 .................... #endif 
                    17612 ....................  
                    17613 ....................  
                    17614 .................... typedef void (*timer_func)(void* arg); 
                    17615 ....................  
                    17616 .................... typedef struct { 
                    17617 ....................   //bool triggred; 
                    17618 ....................   uint32_t expTime; 
                    17619 ....................   void *arg; 
                    17620 ....................   timer_func func; 
                    17621 .................... } timer_task_t; 
                    17622 ....................  
                    17623 .................... #INLINE 
                    17624 .................... uint32_t timer_get_us_count(); 
                    17625 .................... bool timer_registerTask(uint32_t expTime, timer_func func, void *arg); 
                    17626 .................... void timer_yield(); 
                    17627 ....................  
                    17628 .................... #endif /* INCLUDE_TIMER_H_ */ 
                    17629 ....................  
                    17630 .................... #include "message_handlers.h" 
                    17631 .................... /* 
                    17632 ....................  * message_handlers.h 
                    17633 ....................  * 
                    17634 ....................  *  Created on: Mar 26, 2017 
                    17635 ....................  *      Author: asaf 
                    17636 ....................  */ 
                    17637 ....................  
                    17638 .................... #ifndef MESSAGE_HANDLERS_H_ 
                    17639 .................... #define MESSAGE_HANDLERS_H_ 
                    17640 ....................  
                    17641 .................... void init_message_handlers(); 
                    17642 .................... void process_message(uint8_t* message, uint16_t length); 
                    17643 .................... #INLINE 
                    17644 .................... void perform_last_control_message(); 
                    17645 .................... void control_handle_timer(); 
                    17646 .................... void samp_if_needed(); 
                    17647 ....................  
                    17648 .................... #endif /* MESSAGE_HANDLERS_H_ */ 
                    17649 ....................  
                    17650 ....................  
                    17651 .................... #INLINE 
                    17652 .................... uint32_t timer_get_us_count() { 
                    17653 ....................     return get_ticks(); 
                    17654 .................... } 
                    17655 ....................  
                    17656 .................... #define TIMER_TASKS_NUM 30 
                    17657 .................... timer_task_t timerTasks[TIMER_TASKS_NUM]; 
                    17658 .................... uint32_t timerTriggered = 0xffffffff; 
                    17659 ....................  
                    17660 .................... bool timer_registerTask(uint32_t expTime, timer_func func, void *arg) { 
                    17661 ....................     uint32_t i; 
                    17662 ....................     for (i=0;i<TIMER_TASKS_NUM;i++) { 
                    17663 ....................           if((timerTriggered & (uint32_t)(1 << i)) != 0) { 
                    17664 ....................             /* use this pos */ 
                    17665 ....................             timerTriggered &= ~((uint32_t)1 << i); 
                    17666 ....................             timerTasks[i].expTime = expTime; 
                    17667 ....................             timerTasks[i].func = func; 
                    17668 ....................             timerTasks[i].arg = arg; 
                    17669 ....................             return true; 
                    17670 ....................         } 
                    17671 ....................     } 
                    17672 ....................     return false; 
                    17673 .................... } 
                    17674 ....................  
                    17675 .................... void timer_checkRunTask() { 
                    17676 ....................     int i; 
                    17677 ....................     uint32_t t = timer_get_us_count(); 
                    17678 ....................     for (i=0;i<TIMER_TASKS_NUM;i++) { 
                    17679 ....................         if((timerTriggered & (((uint32_t)1) << i)) == 0) { 
                    17680 ....................             if(t >= timerTasks[i].expTime) { 
                    17681 ....................                 timerTriggered |= ((uint32_t)1 << i); 
                    17682 ....................                 timerTasks[i].func(timerTasks[i].arg); 
                    17683 ....................             } 
                    17684 ....................         } 
                    17685 ....................     } 
                    17686 .................... } 
                    17687 ....................  
                    17688 .................... /* in case a function can spare some CPU time */ 
                    17689 .................... void timer_yield() { 
                    17690 .................... #ifndef _bootloader 
                    17691 ....................     timer_checkRunTask(); 
                    17692 .................... #endif 
                    17693 .................... } 
                    17694 ....................  
                    17695 ....................  
                    17696 .................... /* 
                    17697 ....................  * uart.c 
                    17698 ....................  * 
                    17699 ....................  *  Created on: Mar 23, 2017 
                    17700 ....................  *      Author: asaf 
                    17701 ....................  */ 
                    17702 .................... #include "BA1474.h" 
                    17703 .................... #include <18F45K22.h> 
                    17704 .................... //////// Standard Header file for the PIC18F45K22 device //////////////// 
                    17705 .................... #device PIC18F45K22 
                    18306 .................... #list 
                    18307 ....................  
                    18308 .................... #device adc=10 
                    18309 .................... #device pass_strings=in_ram 
                    18310 ....................  
                    18311 .................... #define LOADER_END 0x1FFF 
                    18312 .................... #include <boot.h> 
                    18313 .................... #undef LOADER_END 
                    18314 .................... #define FLASH_SIZE getenv("FLASH_ERASE_SIZE") 
                    18315 .................... #define LOADER_END   0x1FFF 
                    18316 .................... #define LOADER_SIZE  0x3FF 
                    18317 ....................  
                    18318 .................... #ifndef _bootloader 
                    18319 .................... #build(reset=LOADER_END+1, interrupt=LOADER_END+9) 
                    18320 ....................  
                    18321 .................... /* when in operational software, keep out of the bootloader sections */ 
                    18322 .................... #org 0, 0xfff {} 
                    18323 .................... #org 0x1000, 0x1ffe {} 
                    18324 ....................  
                    18325 .................... #else 
                    18326 ....................  
                    18327 .................... /* when in the bootloader, keep out of the operational sections */ 
                    18328 .................... #org 0x2000, 0x7ffe {} 
                    18329 ....................  
                    18330 .................... #endif 
                    18331 ....................  
                    18332 ....................  
                    18333 .................... #FUSES NOWDT                   //No Watch Dog Timer 
                    18334 .................... #FUSES WDT128                  //Watch Dog Timer uses 1:128 Postscale 
                    18335 .................... #FUSES INTRC_IO                //Internal RC Osc, no CLKOUT 
                    18336 .................... #FUSES NOBROWNOUT              //No brownout reset 
                    18337 .................... #FUSES WDT_SW                  //No Watch Dog Timer, enabled in Software 
                    18338 .................... #FUSES NOLVP                   //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
                    18339 .................... #FUSES NOPUT 
                    18340 .................... #FUSES NOXINST                 //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
                    18341 ....................  
                    18342 .................... #use delay(clock=64000000) 
                    18343 .................... #use rs232(baud=921600,xmit=PIN_C6,rcv=PIN_C7,ERRORS) 
                    18344 .................... #USE TIMER(TIMER=1,TICK=1us,BITS=32,NOISR) 
                    18345 .................... #use spi(DO=PIN_A4, CLK=PIN_A3, ENABLE=PIN_A2, ENABLE_ACTIVE=0, DATA_HOLD=20, BITS=16) 
                    18346 ....................  
                    18347 .................... #opt 9 
                    18348 ....................  
                    18349 .................... #use fast_io(a) 
                    18350 .................... #use fast_io(b) 
                    18351 .................... #use fast_io(c) 
                    18352 .................... #use fast_io(d) 
                    18353 .................... #use fast_io(e) 
                    18354 ....................  
                    18355 .................... #define safe_write_program_memory(address, pointer, size) \ 
                    18356 ....................   do { disable_interrupts(GLOBAL); write_program_memory(address, pointer, size); enable_interrupts(GLOBAL); delay_us(1000); } while (0) 
                    18357 ....................  
                    18358 ....................  
                    18359 .................... #include "PIC18F45K22_registers.h" 
                    18360 .................... #byte TOSU = 0xFFF 
                    18361 .................... #word TOS = 0xFFE 
                    18362 .................... #byte STKPTR = 0xFFC 
                    18363 .................... #bit    STKPTR0 = STKPTR.0 
                    18364 .................... #bit    STKPTR1 = STKPTR.1 
                    18365 .................... #bit    STKPTR2 = STKPTR.2 
                    18366 .................... #bit    STKPTR3 = STKPTR.3 
                    18367 .................... #bit    STKPTR4 = STKPTR.4 
                    18368 .................... #bit    STKUNF = STKPTR.6 
                    18369 .................... #bit    STKFUL = STKPTR.7 
                    18370 .................... #byte PCLATU = 0xFFB 
                    18371 .................... #byte PCLATH = 0xFFA 
                    18372 .................... #byte PCL = 0xFF9 
                    18373 .................... #byte TBLPTRU = 0xFF8 
                    18374 .................... #word TBLPTR = 0xFF7 
                    18375 .................... #byte TABLAT = 0xFF5 
                    18376 .................... #word PROD = 0xFF4 
                    18377 .................... #byte INTCON = 0xFF2 
                    18378 .................... #bit    RBIF = INTCON.0 
                    18379 .................... #bit    INT0IF = INTCON.1 
                    18380 .................... #bit    TMR0IF = INTCON.2 
                    18381 .................... #bit    RBIE = INTCON.3 
                    18382 .................... #bit    INT0IE = INTCON.4 
                    18383 .................... #bit    TMR0IE = INTCON.5 
                    18384 .................... #bit    PEIE_GIEL = INTCON.6 
                    18385 .................... #bit    GIE_GIEH = INTCON.7 
                    18386 .................... #byte INTCON2 = 0xFF1 
                    18387 .................... #bit    RBIP = INTCON2.0 
                    18388 .................... #bit    TMR0IP = INTCON2.2 
                    18389 .................... #bit    INTEDG2 = INTCON2.4 
                    18390 .................... #bit    INTEDG1 = INTCON2.5 
                    18391 .................... #bit    INTEDG0 = INTCON2.6 
                    18392 .................... #bit    RBPU = INTCON2.7 
                    18393 .................... #byte INTCON3 = 0xFF0 
                    18394 .................... #bit    INT1IF = INTCON3.0 
                    18395 .................... #bit    INT2IF = INTCON3.1 
                    18396 .................... #bit    INT1IE = INTCON3.3 
                    18397 .................... #bit    INT2IE = INTCON3.4 
                    18398 .................... #bit    INT1IP = INTCON3.6 
                    18399 .................... #bit    INT2IP = INTCON3.7 
                    18400 .................... #byte INDF0 = 0xFEF 
                    18401 .................... #byte POSTINC0 = 0xFEE 
                    18402 .................... #byte POSTDEC0 = 0xFED 
                    18403 .................... #byte PREINC0 = 0xFEC 
                    18404 .................... #byte PLUSW0 = 0xFEB 
                    18405 .................... #word FSR0 = 0xFEA 
                    18406 .................... #byte WREG = 0xFE8 
                    18407 .................... #byte INDF1 = 0xFE7 
                    18408 .................... #byte POSTINC1 = 0xFE6 
                    18409 .................... #byte POSTDEC1 = 0xFE5 
                    18410 .................... #byte PREINC1 = 0xFE4 
                    18411 .................... #byte PLUSW1 = 0xFE3 
                    18412 .................... #word FSR1 = 0xFE2 
                    18413 .................... #byte BSR = 0xFE0 
                    18414 .................... #byte INDF2 = 0xFDF 
                    18415 .................... #byte POSTINC2 = 0xFDE 
                    18416 .................... #byte POSTDEC2 = 0xFDD 
                    18417 .................... #byte PREINC2 = 0xFDC 
                    18418 .................... #byte PLUSW2 = 0xFDB 
                    18419 .................... #word FSR2 = 0xFDA 
                    18420 .................... #byte STATUS = 0xFD8 
                    18421 .................... #bit    C = STATUS.0 
                    18422 .................... #bit    DC = STATUS.1 
                    18423 .................... #bit    Z = STATUS.2 
                    18424 .................... #bit    OV = STATUS.3 
                    18425 .................... #bit    N = STATUS.4 
                    18426 .................... #word TMR0 = 0xFD7 
                    18427 .................... #byte T0CON = 0xFD5 
                    18428 .................... #bit    T0PS0 = T0CON.0 
                    18429 .................... #bit    T0PS1 = T0CON.1 
                    18430 .................... #bit    T0PS2 = T0CON.2 
                    18431 .................... #bit    PSA = T0CON.3 
                    18432 .................... #bit    T0SE = T0CON.4 
                    18433 .................... #bit    T0CS = T0CON.5 
                    18434 .................... #bit    T08BIT = T0CON.6 
                    18435 .................... #bit    TMR0ON = T0CON.7 
                    18436 .................... #byte OSCCON = 0xFD3 
                    18437 .................... #bit    SCS0 = OSCCON.0 
                    18438 .................... #bit    SCS1 = OSCCON.1 
                    18439 .................... #bit    HFIOFS = OSCCON.2 
                    18440 .................... #bit    OSTS = OSCCON.3 
                    18441 .................... #bit    IRCF0 = OSCCON.4 
                    18442 .................... #bit    IRCF1 = OSCCON.5 
                    18443 .................... #bit    IRCF2 = OSCCON.6 
                    18444 .................... #bit    IDLEN = OSCCON.7 
                    18445 .................... #byte OSCCON2 = 0xFD2 
                    18446 .................... #bit    LFIOFS = OSCCON2.0 
                    18447 .................... #bit    MFIOFS = OSCCON2.1 
                    18448 .................... #bit    PRISD = OSCCON2.2 
                    18449 .................... #bit    SOSCGO = OSCCON2.3 
                    18450 .................... #bit    MFIOSEL = OSCCON2.4 
                    18451 .................... #bit    SOSCRUN = OSCCON2.6 
                    18452 .................... #bit    PLLRDY = OSCCON2.7 
                    18453 .................... #byte WDTCON = 0xFD1 
                    18454 .................... #bit    SWDTEN = WDTCON.0 
                    18455 .................... #byte RCON = 0xFD0 
                    18456 .................... #bit    BOR = RCON.0 
                    18457 .................... #bit    POR = RCON.1 
                    18458 .................... #bit    PD = RCON.2 
                    18459 .................... #bit    TO = RCON.3 
                    18460 .................... #bit    RI = RCON.4 
                    18461 .................... #bit    SBOREN = RCON.6 
                    18462 .................... #bit    IPEN = RCON.7 
                    18463 .................... #word TMR1 = 0xFCF 
                    18464 .................... #byte T1CON = 0xFCD 
                    18465 .................... #bit    TMR1ON = T1CON.0 
                    18466 .................... #bit    T1RD16 = T1CON.1 
                    18467 .................... #bit    T1SYNC = T1CON.2 
                    18468 .................... #bit    T1SOSCEN = T1CON.3 
                    18469 .................... #bit    T1CKPS0 = T1CON.4 
                    18470 .................... #bit    T1CKPS1 = T1CON.5 
                    18471 .................... #bit    TMR1CS0 = T1CON.6 
                    18472 .................... #bit    TMR1CS1 = T1CON.7 
                    18473 .................... #byte T1GCON = 0xFCC 
                    18474 .................... #bit    T1GSS0 = T1GCON.0 
                    18475 .................... #bit    T1GSS1 = T1GCON.1 
                    18476 .................... #bit    T1GVAL = T1GCON.2 
                    18477 .................... #bit    T1GGO = T1GCON.3 
                    18478 .................... #bit    T1GSPM = T1GCON.4 
                    18479 .................... #bit    T1GTM = T1GCON.5 
                    18480 .................... #bit    T1GPOL = T1GCON.6 
                    18481 .................... #bit    TMR1GE = T1GCON.7 
                    18482 .................... #byte SSP1CON3 = 0xFCB 
                    18483 .................... #bit    DHEN = SSP1CON3.0 
                    18484 .................... #bit    AHEN = SSP1CON3.1 
                    18485 .................... #bit    SBCDE = SSP1CON3.2 
                    18486 .................... #bit    SDAHT = SSP1CON3.3 
                    18487 .................... #bit    BOEN = SSP1CON3.4 
                    18488 .................... #bit    SCIE = SSP1CON3.5 
                    18489 .................... #bit    PCIE = SSP1CON3.6 
                    18490 .................... #bit    ACKTIM = SSP1CON3.7 
                    18491 .................... #byte SSP1MSK = 0xFCA 
                    18492 .................... #byte SSP1BUF = 0xFC9 
                    18493 .................... #byte SSP1ADD = 0xFC8 
                    18494 .................... #byte SSP1STAT = 0xFC7 
                    18495 .................... #bit    BF = SSP1STAT.0 
                    18496 .................... #bit    UA = SSP1STAT.1 
                    18497 .................... #bit    R = SSP1STAT.2 
                    18498 .................... #bit    S = SSP1STAT.3 
                    18499 .................... #bit    P = SSP1STAT.4 
                    18500 .................... #bit    D = SSP1STAT.5 
                    18501 .................... #bit    CKE = SSP1STAT.6 
                    18502 .................... #bit    SMP = SSP1STAT.7 
                    18503 .................... #byte SSP1CON1 = 0xFC6 
                    18504 .................... #bit    SSPM0 = SSP1CON1.0 
                    18505 .................... #bit    SSPM1 = SSP1CON1.1 
                    18506 .................... #bit    SSPM2 = SSP1CON1.2 
                    18507 .................... #bit    SSPM3 = SSP1CON1.3 
                    18508 .................... #bit    CKP = SSP1CON1.4 
                    18509 .................... #bit    SSPEN = SSP1CON1.5 
                    18510 .................... #bit    SSPOV = SSP1CON1.6 
                    18511 .................... #bit    WCOL = SSP1CON1.7 
                    18512 .................... #byte SSP1CON2 = 0xFC5 
                    18513 .................... #bit    SEN = SSP1CON2.0 
                    18514 .................... #bit    RSEN = SSP1CON2.1 
                    18515 .................... #bit    PEN = SSP1CON2.2 
                    18516 .................... #bit    RCEN = SSP1CON2.3 
                    18517 .................... #bit    ACKEN = SSP1CON2.4 
                    18518 .................... #bit    ACKDT = SSP1CON2.5 
                    18519 .................... #bit    ACKSTAT = SSP1CON2.6 
                    18520 .................... #bit    GCEN = SSP1CON2.7 
                    18521 .................... #word ADRES = 0xFC4 
                    18522 .................... #byte ADCON0 = 0xFC2 
                    18523 .................... #bit    ADON = ADCON0.0 
                    18524 .................... #bit    GO = ADCON0.1 
                    18525 .................... #bit    CHS0 = ADCON0.2 
                    18526 .................... #bit    CHS1 = ADCON0.3 
                    18527 .................... #bit    CHS2 = ADCON0.4 
                    18528 .................... #bit    CHS3 = ADCON0.5 
                    18529 .................... #bit    CHS4 = ADCON0.6 
                    18530 .................... #byte ADCON1 = 0xFC1 
                    18531 .................... #bit    NVCFG0 = ADCON1.0 
                    18532 .................... #bit    NVCFG1 = ADCON1.1 
                    18533 .................... #bit    PVCFG0 = ADCON1.2 
                    18534 .................... #bit    PVCFG1 = ADCON1.3 
                    18535 .................... #bit    TRIGSEL = ADCON1.7 
                    18536 .................... #byte ADCON2 = 0xFC0 
                    18537 .................... #bit    ADCS0 = ADCON2.0 
                    18538 .................... #bit    ADCS1 = ADCON2.1 
                    18539 .................... #bit    ADCS2 = ADCON2.2 
                    18540 .................... #bit    ACQT0 = ADCON2.3 
                    18541 .................... #bit    ACQT1 = ADCON2.4 
                    18542 .................... #bit    ACQT2 = ADCON2.5 
                    18543 .................... #bit    ADFM = ADCON2.7 
                    18544 .................... #word CCPR1 = 0xFBF 
                    18545 .................... #byte CCP1CON = 0xFBD 
                    18546 .................... #bit    CCP1M0 = CCP1CON.0 
                    18547 .................... #bit    CCP1M1 = CCP1CON.1 
                    18548 .................... #bit    CCP1M2 = CCP1CON.2 
                    18549 .................... #bit    CCP1M3 = CCP1CON.3 
                    18550 .................... #bit    DC1B0 = CCP1CON.4 
                    18551 .................... #bit    DC1B1 = CCP1CON.5 
                    18552 .................... #bit    P1M0 = CCP1CON.6 
                    18553 .................... #bit    P1M1 = CCP1CON.7 
                    18554 .................... #byte TMR2 = 0xFBC 
                    18555 .................... #byte PR2 = 0xFBB 
                    18556 .................... #byte T2CON = 0xFBA 
                    18557 .................... #bit    T2CKPS0 = T2CON.0 
                    18558 .................... #bit    T2CKPS1 = T2CON.1 
                    18559 .................... #bit    TMR2ON = T2CON.2 
                    18560 .................... #bit    T2OUTPS0 = T2CON.3 
                    18561 .................... #bit    T2OUTPS1 = T2CON.4 
                    18562 .................... #bit    T2OUTPS2 = T2CON.5 
                    18563 .................... #bit    T2OUTPS3 = T2CON.6 
                    18564 .................... #byte PSTR1CON = 0xFB9 
                    18565 .................... #bit    STR1A = PSTR1CON.0 
                    18566 .................... #bit    STR1B = PSTR1CON.1 
                    18567 .................... #bit    STR1C = PSTR1CON.2 
                    18568 .................... #bit    STR1D = PSTR1CON.3 
                    18569 .................... #bit    STR1SYNC = PSTR1CON.4 
                    18570 .................... #byte BAUDCON1 = 0xFB8 
                    18571 .................... #bit    ABDEN = BAUDCON1.0 
                    18572 .................... #bit    WUE = BAUDCON1.1 
                    18573 .................... #bit    BRG16 = BAUDCON1.3 
                    18574 .................... #bit    CKTXP = BAUDCON1.4 
                    18575 .................... #bit    DTRXP = BAUDCON1.5 
                    18576 .................... #bit    RCIDL = BAUDCON1.6 
                    18577 .................... #bit    ABDOVF = BAUDCON1.7 
                    18578 .................... #byte PWM1CON = 0xFB7 
                    18579 .................... #bit    P1DC0 = PWM1CON.0 
                    18580 .................... #bit    P1DC1 = PWM1CON.1 
                    18581 .................... #bit    P1DC2 = PWM1CON.2 
                    18582 .................... #bit    P1DC3 = PWM1CON.3 
                    18583 .................... #bit    P1DC4 = PWM1CON.4 
                    18584 .................... #bit    P1DC5 = PWM1CON.5 
                    18585 .................... #bit    P1DC6 = PWM1CON.6 
                    18586 .................... #bit    P1RSEN = PWM1CON.7 
                    18587 .................... #byte ECCP1AS = 0xFB6 
                    18588 .................... #bit    P1SSBD0 = ECCP1AS.0 
                    18589 .................... #bit    P1SSBD1 = ECCP1AS.1 
                    18590 .................... #bit    P1SSAC0 = ECCP1AS.2 
                    18591 .................... #bit    P1SSAC1 = ECCP1AS.3 
                    18592 .................... #bit    CCP1AS0 = ECCP1AS.4 
                    18593 .................... #bit    CCP1AS1 = ECCP1AS.5 
                    18594 .................... #bit    CCP1AS2 = ECCP1AS.6 
                    18595 .................... #bit    CCP1ASE = ECCP1AS.7 
                    18596 .................... #byte T3GCON = 0xFB4 
                    18597 .................... #bit    T3GSS0 = T3GCON.0 
                    18598 .................... #bit    T3GSS1 = T3GCON.1 
                    18599 .................... #bit    T3GVAL = T3GCON.2 
                    18600 .................... #bit    T3GGO = T3GCON.3 
                    18601 .................... #bit    T3GSPM = T3GCON.4 
                    18602 .................... #bit    T3GTM = T3GCON.5 
                    18603 .................... #bit    T3GPOL = T3GCON.6 
                    18604 .................... #bit    TMR3GE = T3GCON.7 
                    18605 .................... #word TMR3 = 0xFB3 
                    18606 .................... #byte T3CON = 0xFB1 
                    18607 .................... #bit    TMR3ON = T3CON.0 
                    18608 .................... #bit    T3RD16 = T3CON.1 
                    18609 .................... #bit    T3SYNC = T3CON.2 
                    18610 .................... #bit    T3SOSCEN = T3CON.3 
                    18611 .................... #bit    T3CKPS0 = T3CON.4 
                    18612 .................... #bit    T3CKPS1 = T3CON.5 
                    18613 .................... #bit    TMR3CS0 = T3CON.6 
                    18614 .................... #bit    TMR3CS1 = T3CON.7 
                    18615 .................... #byte SPBRGH1 = 0xFB0 
                    18616 .................... #byte SPBRG1 = 0xFAF 
                    18617 .................... #byte RCREG1 = 0xFAE 
                    18618 .................... #byte TXREG1 = 0xFAD 
                    18619 .................... #byte TXSTA1 = 0xFAC 
                    18620 .................... #bit    TX9D = TXSTA1.0 
                    18621 .................... #bit    TRMT = TXSTA1.1 
                    18622 .................... #bit    BRGH = TXSTA1.2 
                    18623 .................... #bit    SENDB = TXSTA1.3 
                    18624 .................... #bit    SYNC = TXSTA1.4 
                    18625 .................... #bit    TXEN = TXSTA1.5 
                    18626 .................... #bit    TX9 = TXSTA1.6 
                    18627 .................... #bit    CSRC = TXSTA1.7 
                    18628 .................... #byte RCSTA1 = 0xFAB 
                    18629 .................... #bit    RX9D = RCSTA1.0 
                    18630 .................... #bit    OERR = RCSTA1.1 
                    18631 .................... #bit    FERR = RCSTA1.2 
                    18632 .................... #bit    ADDEN = RCSTA1.3 
                    18633 .................... #bit    CREN = RCSTA1.4 
                    18634 .................... #bit    SREN = RCSTA1.5 
                    18635 .................... #bit    RX9 = RCSTA1.6 
                    18636 .................... #bit    SPEN = RCSTA1.7 
                    18637 .................... #byte EEADR = 0xFA9 
                    18638 .................... #byte EEDATA = 0xFA8 
                    18639 .................... #byte EECON2 = 0xFA7 
                    18640 .................... #byte EECON1 = 0xFA6 
                    18641 .................... #bit    RD = EECON1.0 
                    18642 .................... #bit    WR = EECON1.1 
                    18643 .................... #bit    WREN = EECON1.2 
                    18644 .................... #bit    WRERR = EECON1.3 
                    18645 .................... #bit    FREE = EECON1.4 
                    18646 .................... #bit    CFGS = EECON1.6 
                    18647 .................... #bit    EEPGD = EECON1.7 
                    18648 .................... #byte IPR3 = 0xFA5 
                    18649 .................... #bit    TMR1GIP = IPR3.0 
                    18650 .................... #bit    TMR3GIP = IPR3.1 
                    18651 .................... #bit    TMR5GIP = IPR3.2 
                    18652 .................... #bit    CTMUIP = IPR3.3 
                    18653 .................... #bit    TX2IP = IPR3.4 
                    18654 .................... #bit    RC2IP = IPR3.5 
                    18655 .................... #bit    BCL2IP = IPR3.6 
                    18656 .................... #bit    SSP2IP = IPR3.7 
                    18657 .................... #byte PIR3 = 0xFA4 
                    18658 .................... #bit    TMR1GIF = PIR3.0 
                    18659 .................... #bit    TMR3GIF = PIR3.1 
                    18660 .................... #bit    TMR5GIF = PIR3.2 
                    18661 .................... #bit    CTMUIF = PIR3.3 
                    18662 .................... #bit    TX2IF = PIR3.4 
                    18663 .................... #bit    RC2IF = PIR3.5 
                    18664 .................... #bit    BCL2IF = PIR3.6 
                    18665 .................... #bit    SSP2IF = PIR3.7 
                    18666 .................... #byte PIE3 = 0xFA3 
                    18667 .................... #bit    TMR1GIE = PIE3.0 
                    18668 .................... #bit    TMR3GIE = PIE3.1 
                    18669 .................... #bit    TMR5GIE = PIE3.2 
                    18670 .................... #bit    CTMUIE = PIE3.3 
                    18671 .................... #bit    TX2IE = PIE3.4 
                    18672 .................... #bit    RC2IE = PIE3.5 
                    18673 .................... #bit    BCL2IE = PIE3.6 
                    18674 .................... #bit    SSP2IE = PIE3.7 
                    18675 .................... #byte IPR2 = 0xFA2 
                    18676 .................... #bit    CCP2IP = IPR2.0 
                    18677 .................... #bit    TMR3IP = IPR2.1 
                    18678 .................... #bit    HLVDIP = IPR2.2 
                    18679 .................... #bit    BCL1IP = IPR2.3 
                    18680 .................... #bit    EEIP = IPR2.4 
                    18681 .................... #bit    C2IP = IPR2.5 
                    18682 .................... #bit    C1IP = IPR2.6 
                    18683 .................... #bit    OSCFIP = IPR2.7 
                    18684 .................... #byte PIR2 = 0xFA1 
                    18685 .................... #bit    CCP2IF = PIR2.0 
                    18686 .................... #bit    TMR3IF = PIR2.1 
                    18687 .................... #bit    HLVDIF = PIR2.2 
                    18688 .................... #bit    BCL1IF = PIR2.3 
                    18689 .................... #bit    EEIF = PIR2.4 
                    18690 .................... #bit    C2IF = PIR2.5 
                    18691 .................... #bit    C1IF = PIR2.6 
                    18692 .................... #bit    OSCFIF = PIR2.7 
                    18693 .................... #byte PIE2 = 0xFA0 
                    18694 .................... #bit    CCP2IE = PIE2.0 
                    18695 .................... #bit    TMR3IE = PIE2.1 
                    18696 .................... #bit    HLVDIE = PIE2.2 
                    18697 .................... #bit    BCL1IE = PIE2.3 
                    18698 .................... #bit    EEIE = PIE2.4 
                    18699 .................... #bit    C2IE = PIE2.5 
                    18700 .................... #bit    C1IE = PIE2.6 
                    18701 .................... #bit    OSCFIE = PIE2.7 
                    18702 .................... #byte IPR1 = 0xF9F 
                    18703 .................... #bit    TMR1IP = IPR1.0 
                    18704 .................... #bit    TMR2IP = IPR1.1 
                    18705 .................... #bit    CCP1IP = IPR1.2 
                    18706 .................... #bit    SSP1IP = IPR1.3 
                    18707 .................... #bit    TX1IP = IPR1.4 
                    18708 .................... #bit    RC1IP = IPR1.5 
                    18709 .................... #bit    ADIP = IPR1.6 
                    18710 .................... #byte PIR1 = 0xF9E 
                    18711 .................... #bit    TMR1IF = PIR1.0 
                    18712 .................... #bit    TMR2IF = PIR1.1 
                    18713 .................... #bit    CCP1IF = PIR1.2 
                    18714 .................... #bit    SSP1IF = PIR1.3 
                    18715 .................... #bit    TX1IF = PIR1.4 
                    18716 .................... #bit    RC1IF = PIR1.5 
                    18717 .................... #bit    ADIF = PIR1.6 
                    18718 .................... #byte PIE1 = 0xF9D 
                    18719 .................... #bit    TMR1IE = PIE1.0 
                    18720 .................... #bit    TMR2IE = PIE1.1 
                    18721 .................... #bit    CCP1IE = PIE1.2 
                    18722 .................... #bit    SSP1IE = PIE1.3 
                    18723 .................... #bit    TX1IE = PIE1.4 
                    18724 .................... #bit    RC1IE = PIE1.5 
                    18725 .................... #bit    ADIE = PIE1.6 
                    18726 .................... #byte HLVDCON = 0xF9C 
                    18727 .................... #bit    HLVDL0 = HLVDCON.0 
                    18728 .................... #bit    HLVDL1 = HLVDCON.1 
                    18729 .................... #bit    HLVDL2 = HLVDCON.2 
                    18730 .................... #bit    HLVDL3 = HLVDCON.3 
                    18731 .................... #bit    HLVDEN = HLVDCON.4 
                    18732 .................... #bit    IRVST = HLVDCON.5 
                    18733 .................... #bit    BGVST = HLVDCON.6 
                    18734 .................... #bit    VDIRMAG = HLVDCON.7 
                    18735 .................... #byte OSCTUNE = 0xF9B 
                    18736 .................... #bit    TUN0 = OSCTUNE.0 
                    18737 .................... #bit    TUN1 = OSCTUNE.1 
                    18738 .................... #bit    TUN2 = OSCTUNE.2 
                    18739 .................... #bit    TUN3 = OSCTUNE.3 
                    18740 .................... #bit    TUN4 = OSCTUNE.4 
                    18741 .................... #bit    TUN5 = OSCTUNE.5 
                    18742 .................... #bit    PLLEN = OSCTUNE.6 
                    18743 .................... #bit    INTSRC = OSCTUNE.7 
                    18744 .................... #byte TRISE = 0xF96 
                    18745 .................... #bit    TRISE0 = TRISE.0 
                    18746 .................... #bit    TRISE1 = TRISE.1 
                    18747 .................... #bit    TRISE2 = TRISE.2 
                    18748 .................... #bit    WPUE3 = TRISE.7 
                    18749 .................... #byte TRISD = 0xF95 
                    18750 .................... #byte TRISC = 0xF94 
                    18751 .................... #byte TRISB = 0xF93 
                    18752 .................... #byte TRISA = 0xF92 
                    18753 .................... #byte LATE = 0xF8D 
                    18754 .................... #byte LATD = 0xF8C 
                    18755 .................... #byte LATC = 0xF8B 
                    18756 .................... #byte LATB = 0xF8A 
                    18757 .................... #byte LATA = 0xF89 
                    18758 .................... #byte PORTE = 0xF84 
                    18759 .................... #byte PORTD = 0xF83 
                    18760 .................... #byte PORTC = 0xF82 
                    18761 .................... #byte PORTB = 0xF81 
                    18762 .................... #byte PORTA = 0xF80 
                    18763 .................... #byte IPR5 = 0xF7F 
                    18764 .................... #bit    TMR4IP = IPR5.0 
                    18765 .................... #bit    TMR5IP = IPR5.1 
                    18766 .................... #bit    TMR6IP = IPR5.2 
                    18767 .................... #byte PIR5 = 0xF7E 
                    18768 .................... #bit    TMR4IF = PIR5.0 
                    18769 .................... #bit    TMR5IF = PIR5.1 
                    18770 .................... #bit    TMR6IF = PIR5.2 
                    18771 .................... #byte PIE5 = 0xF7D 
                    18772 .................... #bit    TMR4IE = PIE5.0 
                    18773 .................... #bit    TMR5IE = PIE5.1 
                    18774 .................... #bit    TMR6IE = PIE5.2 
                    18775 .................... #byte IPR4 = 0xF7C 
                    18776 .................... #bit    CCP3IP = IPR4.0 
                    18777 .................... #bit    CCP4IP = IPR4.1 
                    18778 .................... #bit    CCP5IP = IPR4.2 
                    18779 .................... #byte PIR4 = 0xF7B 
                    18780 .................... #bit    CCP3IF = PIR4.0 
                    18781 .................... #bit    CCP4IF = PIR4.1 
                    18782 .................... #bit    CCP5IF = PIR4.2 
                    18783 .................... #byte PIE4 = 0xF7A 
                    18784 .................... #bit    CCP3IE = PIE4.0 
                    18785 .................... #bit    CCP4IE = PIE4.1 
                    18786 .................... #bit    CCP5IE = PIE4.2 
                    18787 .................... #byte CM1CON0 = 0xF79 
                    18788 .................... #bit    C1CH0 = CM1CON0.0 
                    18789 .................... #bit    C1CH1 = CM1CON0.1 
                    18790 .................... #bit    C1R = CM1CON0.2 
                    18791 .................... #bit    C1SP = CM1CON0.3 
                    18792 .................... #bit    C1POL = CM1CON0.4 
                    18793 .................... #bit    C1OE = CM1CON0.5 
                    18794 .................... //#bit    C1OUT = CM1CON0.6 
                    18795 .................... #bit    C1ON = CM1CON0.7 
                    18796 .................... #byte CM2CON0 = 0xF78 
                    18797 .................... #bit    C2CH0 = CM2CON0.0 
                    18798 .................... #bit    C2CH1 = CM2CON0.1 
                    18799 .................... #bit    C2R = CM2CON0.2 
                    18800 .................... #bit    C2SP = CM2CON0.3 
                    18801 .................... #bit    C2POL = CM2CON0.4 
                    18802 .................... #bit    C2OE = CM2CON0.5 
                    18803 .................... //#bit    C2OUT = CM2CON0.6 
                    18804 .................... #bit    C2ON = CM2CON0.7 
                    18805 .................... #byte CM2CON1 = 0xF77 
                    18806 .................... #bit    C2SYNC = CM2CON1.0 
                    18807 .................... #bit    C1SYNC = CM2CON1.1 
                    18808 .................... #bit    C2HYS = CM2CON1.2 
                    18809 .................... #bit    C1HYS = CM2CON1.3 
                    18810 .................... #bit    C2RSEL = CM2CON1.4 
                    18811 .................... #bit    C1RSEL = CM2CON1.5 
                    18812 .................... #bit    MC2OUT = CM2CON1.6 
                    18813 .................... #bit    MC1OUT = CM2CON1.7 
                    18814 .................... #byte SPBRGH2 = 0xF76 
                    18815 .................... #byte SPBRG2 = 0xF75 
                    18816 .................... #byte RCREG2 = 0xF74 
                    18817 .................... #byte TXREG2 = 0xF73 
                    18818 .................... #byte TXSTA2 = 0xF72 
                    18819 .................... #bit    U2TX9D = TXSTA2.0 
                    18820 .................... #bit    U2TRMT = TXSTA2.1 
                    18821 .................... #bit    U2BRGH = TXSTA2.2 
                    18822 .................... #bit    U2SENDB = TXSTA2.3 
                    18823 .................... #bit    U2SYNC = TXSTA2.4 
                    18824 .................... #bit    U2TXEN = TXSTA2.5 
                    18825 .................... #bit    U2TX9 = TXSTA2.6 
                    18826 .................... #bit    U2CSRC = TXSTA2.7 
                    18827 .................... #byte RCSTA2 = 0xF71 
                    18828 .................... #bit    U1RX9D = RCSTA2.0 
                    18829 .................... #bit    U1OERR = RCSTA2.1 
                    18830 .................... #bit    U1FERR = RCSTA2.2 
                    18831 .................... #bit    U1ADDEN = RCSTA2.3 
                    18832 .................... #bit    U1CREN = RCSTA2.4 
                    18833 .................... #bit    U1SREN = RCSTA2.5 
                    18834 .................... #bit    U1RX9 = RCSTA2.6 
                    18835 .................... #bit    U1SPEN = RCSTA2.7 
                    18836 .................... #byte BAUDCON2 = 0xF70 
                    18837 .................... #bit    U1ABDEN = BAUDCON2.0 
                    18838 .................... #bit    U1WUE = BAUDCON2.1 
                    18839 .................... #bit    U1BRG16 = BAUDCON2.3 
                    18840 .................... #bit    U1CKTXP = BAUDCON2.4 
                    18841 .................... #bit    U1DTRXP = BAUDCON2.5 
                    18842 .................... #bit    U1RCIDL = BAUDCON2.6 
                    18843 .................... #bit    U1ABDOVF = BAUDCON2.7 
                    18844 .................... #byte SSP2BUF = 0xF6F 
                    18845 .................... #byte SSP2ADD = 0xF6E 
                    18846 .................... #byte SSP2STAT = 0xF6D 
                    18847 .................... #bit    SP2BF = SSP2STAT.0 
                    18848 .................... #bit    SP2UA = SSP2STAT.1 
                    18849 .................... #bit    SP2R = SSP2STAT.2 
                    18850 .................... #bit    SP2S = SSP2STAT.3 
                    18851 .................... #bit    SP2P = SSP2STAT.4 
                    18852 .................... #bit    SP2D = SSP2STAT.5 
                    18853 .................... #bit    SP2CKE = SSP2STAT.6 
                    18854 .................... #bit    SP2SMP = SSP2STAT.7 
                    18855 .................... #byte SSP2CON1 = 0xF6C 
                    18856 .................... #bit    SP2SSPM0 = SSP2CON1.0 
                    18857 .................... #bit    SP2SSPM1 = SSP2CON1.1 
                    18858 .................... #bit    SP2SSPM2 = SSP2CON1.2 
                    18859 .................... #bit    SP2SSPM3 = SSP2CON1.3 
                    18860 .................... #bit    SP2CKP = SSP2CON1.4 
                    18861 .................... #bit    SP2SSPEN = SSP2CON1.5 
                    18862 .................... #bit    SP2SSPOV = SSP2CON1.6 
                    18863 .................... #bit    SP2WCOL = SSP2CON1.7 
                    18864 .................... #byte SSP2CON2 = 0xF6B 
                    18865 .................... #bit    SP2SEN = SSP2CON2.0 
                    18866 .................... #bit    SP2RSEN = SSP2CON2.1 
                    18867 .................... #bit    SP2PEN = SSP2CON2.2 
                    18868 .................... #bit    SP2RCEN = SSP2CON2.3 
                    18869 .................... #bit    SP2ACKEN = SSP2CON2.4 
                    18870 .................... #bit    SP2ACKDT = SSP2CON2.5 
                    18871 .................... #bit    SP2ACKSTAT = SSP2CON2.6 
                    18872 .................... #bit    SP2GCEN = SSP2CON2.7 
                    18873 .................... #byte SSP2MSK = 0xF6A 
                    18874 .................... #byte SSP2CON3 = 0xF69 
                    18875 .................... #bit    SP2DHEN = SSP2CON3.0 
                    18876 .................... #bit    SP2AHEN = SSP2CON3.1 
                    18877 .................... #bit    SP2SBCDE = SSP2CON3.2 
                    18878 .................... #bit    SP2SDAHT = SSP2CON3.3 
                    18879 .................... #bit    SP2BOEN = SSP2CON3.4 
                    18880 .................... #bit    SP2SCIE = SSP2CON3.5 
                    18881 .................... #bit    SP2PCIE = SSP2CON3.6 
                    18882 .................... #bit    SP2ACKTIM = SSP2CON3.7 
                    18883 .................... #word CCPR2 = 0xF68 
                    18884 .................... #byte CCP2CON = 0xF66 
                    18885 .................... #bit    CCP2M0 = CCP2CON.0 
                    18886 .................... #bit    CCP2M1 = CCP2CON.1 
                    18887 .................... #bit    CCP2M2 = CCP2CON.2 
                    18888 .................... #bit    CCP2M3 = CCP2CON.3 
                    18889 .................... #bit    CCP2DC2B0 = CCP2CON.4 
                    18890 .................... #bit    CCP2DC2B1 = CCP2CON.5 
                    18891 .................... #bit    CCP2P2M0 = CCP2CON.6 
                    18892 .................... #bit    CCP2P2M1 = CCP2CON.7 
                    18893 .................... #byte PWM2CON = 0xF65 
                    18894 .................... #bit    P2DC0 = PWM2CON.0 
                    18895 .................... #bit    P2DC1 = PWM2CON.1 
                    18896 .................... #bit    P2DC2 = PWM2CON.2 
                    18897 .................... #bit    P2DC3 = PWM2CON.3 
                    18898 .................... #bit    P2DC4 = PWM2CON.4 
                    18899 .................... #bit    P2DC5 = PWM2CON.5 
                    18900 .................... #bit    P2DC6 = PWM2CON.6 
                    18901 .................... #bit    P2RSEN = PWM2CON.7 
                    18902 .................... #byte ECCP2AS = 0xF64 
                    18903 .................... #bit    P2SSBD0 = ECCP2AS.0 
                    18904 .................... #bit    P2SSBD1 = ECCP2AS.1 
                    18905 .................... #bit    P2SSAC0 = ECCP2AS.2 
                    18906 .................... #bit    P2SSAC1 = ECCP2AS.3 
                    18907 .................... #bit    CCP2AS0 = ECCP2AS.4 
                    18908 .................... #bit    CCP2AS1 = ECCP2AS.5 
                    18909 .................... #bit    CCP2AS2 = ECCP2AS.6 
                    18910 .................... #bit    CCP2ASE = ECCP2AS.7 
                    18911 .................... #byte PSTR2CON = 0xF63 
                    18912 .................... #bit    STR2A = PSTR2CON.0 
                    18913 .................... #bit    STR2B = PSTR2CON.1 
                    18914 .................... #bit    STR2C = PSTR2CON.2 
                    18915 .................... #bit    STR2D = PSTR2CON.3 
                    18916 .................... #bit    STR2SYNC = PSTR2CON.4 
                    18917 .................... #byte IOCB = 0xF62 
                    18918 .................... #bit    IOCB4 = IOCB.4 
                    18919 .................... #bit    IOCB5 = IOCB.5 
                    18920 .................... #bit    IOCB6 = IOCB.6 
                    18921 .................... #bit    IOCB7 = IOCB.7 
                    18922 .................... #byte WPUB = 0xF61 
                    18923 .................... #byte SLRCON = 0xF60 
                    18924 .................... #bit    SLRA = SLRCON.0 
                    18925 .................... #bit    SLRB = SLRCON.1 
                    18926 .................... #bit    SLRC = SLRCON.2 
                    18927 .................... #bit    SLRD = SLRCON.3 
                    18928 .................... #bit    SLRE = SLRCON.4 
                    18929 .................... #word CCPR3 = 0xF5F 
                    18930 .................... #byte CCP3CON = 0xF5D 
                    18931 .................... #bit    CCP3M0 = CCP3CON.0 
                    18932 .................... #bit    CCP3M1 = CCP3CON.1 
                    18933 .................... #bit    CCP3M2 = CCP3CON.2 
                    18934 .................... #bit    CCP3M3 = CCP3CON.3 
                    18935 .................... #bit    CCP3DC3B0 = CCP3CON.4 
                    18936 .................... #bit    CCP3DC3B1 = CCP3CON.5 
                    18937 .................... #bit    CCP3P3M0 = CCP3CON.6 
                    18938 .................... #bit    CCP3P3M1 = CCP3CON.7 
                    18939 .................... #byte PWM3CON = 0xF5C 
                    18940 .................... #bit    P3DC0 = PWM3CON.0 
                    18941 .................... #bit    P3DC1 = PWM3CON.1 
                    18942 .................... #bit    P3DC2 = PWM3CON.2 
                    18943 .................... #bit    P3DC3 = PWM3CON.3 
                    18944 .................... #bit    P3DC4 = PWM3CON.4 
                    18945 .................... #bit    P3DC5 = PWM3CON.5 
                    18946 .................... #bit    P3DC6 = PWM3CON.6 
                    18947 .................... #bit    P3RSEN = PWM3CON.7 
                    18948 .................... #byte ECCP3AS = 0xF5B 
                    18949 .................... #bit    P3SSBD0 = ECCP3AS.0 
                    18950 .................... #bit    P3SSBD1 = ECCP3AS.1 
                    18951 .................... #bit    P3SSAC0 = ECCP3AS.2 
                    18952 .................... #bit    P3SSAC1 = ECCP3AS.3 
                    18953 .................... #bit    CCP3AS0 = ECCP3AS.4 
                    18954 .................... #bit    CCP3AS1 = ECCP3AS.5 
                    18955 .................... #bit    CCP3AS2 = ECCP3AS.6 
                    18956 .................... #bit    CCP3ASE = ECCP3AS.7 
                    18957 .................... #byte PSTR3CON = 0xF5A 
                    18958 .................... #bit    STR3A = PSTR3CON.0 
                    18959 .................... #bit    STR3B = PSTR3CON.1 
                    18960 .................... #bit    STR3C = PSTR3CON.2 
                    18961 .................... #bit    STR3D = PSTR3CON.3 
                    18962 .................... #bit    STR3SYNC = PSTR3CON.4 
                    18963 .................... #word CCPR4 = 0xF59 
                    18964 .................... #byte CCP4CON = 0xF57 
                    18965 .................... #bit    CCP4M0 = CCP4CON.0 
                    18966 .................... #bit    CCP4M1 = CCP4CON.1 
                    18967 .................... #bit    CCP4M2 = CCP4CON.2 
                    18968 .................... #bit    CCP4M3 = CCP4CON.3 
                    18969 .................... #bit    CCP4DC4B0 = CCP4CON.4 
                    18970 .................... #bit    CCP4DC4B1 = CCP4CON.5 
                    18971 .................... #word CCPR5 = 0xF56 
                    18972 .................... #byte CCP5CON = 0xF54 
                    18973 .................... #bit    CCP5M0 = CCP5CON.0 
                    18974 .................... #bit    CCP5M1 = CCP5CON.1 
                    18975 .................... #bit    CCP5M2 = CCP5CON.2 
                    18976 .................... #bit    CCP5M3 = CCP5CON.3 
                    18977 .................... #bit    CCP5DC5B0 = CCP5CON.4 
                    18978 .................... #bit    CCP5DC5B1 = CCP5CON.5 
                    18979 .................... #byte TMR4 = 0xF53 
                    18980 .................... #byte PR4 = 0xF52 
                    18981 .................... #byte T4CON = 0xF51 
                    18982 .................... #bit    T4CKPS0 = T4CON.0 
                    18983 .................... #bit    T4CKPS1 = T4CON.1 
                    18984 .................... #bit    TMR4ON = T4CON.2 
                    18985 .................... #bit    T4OUTPS0 = T4CON.3 
                    18986 .................... #bit    T4OUTPS1 = T4CON.4 
                    18987 .................... #bit    T4OUTPS2 = T4CON.5 
                    18988 .................... #bit    T4OUTPS3 = T4CON.6 
                    18989 .................... #word TMR5 = 0xF50 
                    18990 .................... #byte T5CON = 0xF4E 
                    18991 .................... #bit    TMR5ON = T5CON.0 
                    18992 .................... #bit    T5RD16 = T5CON.1 
                    18993 .................... #bit    T5SYNC = T5CON.2 
                    18994 .................... #bit    T5SOSCEN = T5CON.3 
                    18995 .................... #bit    T5CKPS0 = T5CON.4 
                    18996 .................... #bit    T5CKPS1 = T5CON.5 
                    18997 .................... #bit    TMR5CS0 = T5CON.6 
                    18998 .................... #bit    TMR5CS1 = T5CON.7 
                    18999 .................... #byte T5GCON = 0xF4D 
                    19000 .................... #bit    T5GSS0 = T5GCON.0 
                    19001 .................... #bit    T5GSS1 = T5GCON.1 
                    19002 .................... #bit    T5GVAL = T5GCON.2 
                    19003 .................... #bit    T5GGO = T5GCON.3 
                    19004 .................... #bit    T5GSPM = T5GCON.4 
                    19005 .................... #bit    T5GTM = T5GCON.5 
                    19006 .................... #bit    T5GPOL = T5GCON.6 
                    19007 .................... #bit    TMR5GE = T5GCON.7 
                    19008 .................... #byte TMR6 = 0xF4C 
                    19009 .................... #byte PR6 = 0xF4B 
                    19010 .................... #byte T6CON = 0xF4A 
                    19011 .................... #bit    T6CKPS0 = T6CON.0 
                    19012 .................... #bit    T6CKPS1 = T6CON.1 
                    19013 .................... #bit    TMR6ON = T6CON.2 
                    19014 .................... #bit    T6OUTPS0 = T6CON.3 
                    19015 .................... #bit    T6OUTPS1 = T6CON.4 
                    19016 .................... #bit    T6OUTPS2 = T6CON.5 
                    19017 .................... #bit    T6OUTPS3 = T6CON.6 
                    19018 .................... #byte CCPTMRS0 = 0xF49 
                    19019 .................... #bit    C1TSEL0 = CCPTMRS0.0 
                    19020 .................... #bit    C1TSEL1 = CCPTMRS0.1 
                    19021 .................... #bit    C2TSEL0 = CCPTMRS0.3 
                    19022 .................... #bit    C2TSEL1 = CCPTMRS0.4 
                    19023 .................... #bit    C3TSEL0 = CCPTMRS0.6 
                    19024 .................... #bit    C3TSEL1 = CCPTMRS0.7 
                    19025 .................... #byte CCPTMRS1 = 0xF48 
                    19026 .................... #bit    C4TSEL0 = CCPTMRS1.0 
                    19027 .................... #bit    C4TSEL1 = CCPTMRS1.1 
                    19028 .................... #bit    C5TSEL0 = CCPTMRS1.2 
                    19029 .................... #bit    C5TSEL1 = CCPTMRS1.3 
                    19030 .................... #byte SRCON0 = 0xF47 
                    19031 .................... #bit    SRPR = SRCON0.0 
                    19032 .................... #bit    SRPS = SRCON0.1 
                    19033 .................... #bit    SRNQEN = SRCON0.2 
                    19034 .................... #bit    SRQEN = SRCON0.3 
                    19035 .................... #bit    SRCLK0 = SRCON0.4 
                    19036 .................... #bit    SRCLK1 = SRCON0.5 
                    19037 .................... #bit    SRCLK2 = SRCON0.6 
                    19038 .................... #bit    SRLEN = SRCON0.7 
                    19039 .................... #byte SRCON1 = 0xF46 
                    19040 .................... #bit    SRRC1E = SRCON1.0 
                    19041 .................... #bit    SRRC2E = SRCON1.1 
                    19042 .................... #bit    SRRCKE = SRCON1.2 
                    19043 .................... #bit    SRRPE = SRCON1.3 
                    19044 .................... #bit    SRSC1E = SRCON1.4 
                    19045 .................... #bit    SRSC2E = SRCON1.5 
                    19046 .................... #bit    SRSCKE = SRCON1.6 
                    19047 .................... #bit    SRSPE = SRCON1.7 
                    19048 .................... #word CTMUCON = 0xF45 
                    19049 .................... #byte CTMUICON = 0xF43 
                    19050 .................... #bit    IRNG0 = CTMUICON.0 
                    19051 .................... #bit    IRNG1 = CTMUICON.1 
                    19052 .................... #bit    ITRIM0 = CTMUICON.2 
                    19053 .................... #bit    ITRIM1 = CTMUICON.3 
                    19054 .................... #bit    ITRIM2 = CTMUICON.4 
                    19055 .................... #bit    ITRIM3 = CTMUICON.5 
                    19056 .................... #bit    ITRIM4 = CTMUICON.6 
                    19057 .................... #bit    ITRIM5 = CTMUICON.7 
                    19058 .................... #byte VREFCON0 = 0xF42 
                    19059 .................... #bit    FVRS0 = VREFCON0.4 
                    19060 .................... #bit    FVRS1 = VREFCON0.5 
                    19061 .................... #bit    FVRST = VREFCON0.6 
                    19062 .................... #bit    FVREN = VREFCON0.7 
                    19063 .................... #byte VREFCON1 = 0xF41 
                    19064 .................... #bit    DACNSS = VREFCON1.0 
                    19065 .................... #bit    DACPSS0 = VREFCON1.2 
                    19066 .................... #bit    DACPSS1 = VREFCON1.3 
                    19067 .................... #bit    DACOE = VREFCON1.5 
                    19068 .................... #bit    DACLPS = VREFCON1.6 
                    19069 .................... #bit    DACEN = VREFCON1.7 
                    19070 .................... #byte VREFCON2 = 0xF40 
                    19071 .................... #byte PMD0 = 0xF3F 
                    19072 .................... #bit    TMR1MD = PMD0.0 
                    19073 .................... #bit    TMR2MD = PMD0.1 
                    19074 .................... #bit    TMR3MD = PMD0.2 
                    19075 .................... #bit    TMR4MD = PMD0.3 
                    19076 .................... #bit    TMR5MD = PMD0.4 
                    19077 .................... #bit    TMR6MD = PMD0.5 
                    19078 .................... #bit    UART1MD = PMD0.6 
                    19079 .................... #bit    UART2MD = PMD0.7 
                    19080 .................... #byte PMD1 = 0xF3E 
                    19081 .................... #bit    CCP1MD = PMD1.0 
                    19082 .................... #bit    CCP2MD = PMD1.1 
                    19083 .................... #bit    CCP3MD = PMD1.2 
                    19084 .................... #bit    CCP4MD = PMD1.3 
                    19085 .................... #bit    CCP5MD = PMD1.4 
                    19086 .................... #bit    MSSP1MD = PMD1.6 
                    19087 .................... #bit    MSSP2MD = PMD1.7 
                    19088 .................... #byte PMD2 = 0xF3D 
                    19089 .................... #bit    ADCMD = PMD2.0 
                    19090 .................... #bit    CMP1MD = PMD2.1 
                    19091 .................... #bit    CMP2MD = PMD2.2 
                    19092 .................... #bit    CTMUMD = PMD2.3 
                    19093 .................... #byte ANSELE = 0xF3C 
                    19094 .................... #byte ANSELD = 0xF3B 
                    19095 .................... #byte ANSELC = 0xF3A 
                    19096 .................... #bit    ANSC2 = ANSELC.2 
                    19097 .................... #bit    ANSC3 = ANSELC.3 
                    19098 .................... #bit    ANSC4 = ANSELC.4 
                    19099 .................... #bit    ANSC5 = ANSELC.5 
                    19100 .................... #bit    ANSC6 = ANSELC.6 
                    19101 .................... #bit    ANSC7 = ANSELC.7 
                    19102 .................... #byte ANSELB = 0xF39 
                    19103 .................... #byte ANSELA = 0xF38 
                    19104 .................... #bit    ANSA0 = ANSELA.0 
                    19105 .................... #bit    ANSA1 = ANSELA.1 
                    19106 .................... #bit    ANSA2 = ANSELA.2 
                    19107 .................... #bit    ANSA3 = ANSELA.3 
                    19108 .................... #bit    ANSA5 = ANSELA.5 
                    19109 ....................  
                    19110 ....................  
                    19111 .................... #include <stdint.h> 
                    19112 .................... /////////////////////////////////////////////////////////////////////////// 
                    19113 .................... ////                                                                   //// 
                    19114 .................... ////                           stdint.h                                //// 
                    19115 .................... ////                                                                   //// 
                    19116 .................... //// Standard integer definitions.                                     //// 
                    19117 .................... ////                                                                   //// 
                    19118 .................... /////////////////////////////////////////////////////////////////////////// 
                    19119 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    19120 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    19121 .................... //// compiler.  This source code may only be distributed to other      //// 
                    19122 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    19123 .................... //// or distribution is permitted without written permission.          //// 
                    19124 .................... //// Derivative programs created using this software in object code    //// 
                    19125 .................... //// form are not restricted in any way.                               //// 
                    19126 .................... /////////////////////////////////////////////////////////////////////////// 
                    19127 ....................  
                    19128 .................... #ifndef _STDINT 
                    19129 ....................  
                    19130 .................... #define _STDINT 
                    19131 ....................  
                    19132 .................... //////////// exact width 
                    19133 ....................  
                    19134 .................... typedef signed int8 int8_t; 
                    19135 .................... typedef unsigned int8 uint8_t; 
                    19136 .................... typedef signed int16 int16_t; 
                    19137 .................... typedef unsigned int16 uint16_t; 
                    19138 .................... typedef signed int32 int32_t; 
                    19139 .................... typedef unsigned int32 uint32_t; 
                    19140 ....................  
                    19141 .................... #if defined(__PCD__) 
                    19142 .................... //typedef signed int24 int24_t; 
                    19143 .................... //typedef unsigned int24 uint24_t; 
                    19144 .................... typedef signed int64 int64_t; 
                    19145 .................... typedef unsigned int64 uint64_t; 
                    19146 .................... #endif 
                    19147 ....................  
                    19148 .................... #define INT8_MAX  (128) 
                    19149 .................... #define INT8_MIN  (-127) 
                    19150 .................... #define UINT8_MAX (255) 
                    19151 ....................  
                    19152 .................... #define INT16_MAX  (32767) 
                    19153 .................... #define INT16_MIN  (-32768) 
                    19154 .................... #define UINT16_MAX (65535) 
                    19155 ....................  
                    19156 .................... #define INT32_MAX  (2147483647) 
                    19157 .................... #define INT32_MIN  (-2147483648) 
                    19158 .................... #define UINT32_MAX (4294967295) 
                    19159 ....................  
                    19160 .................... #if defined(__PCD__) 
                    19161 .................... //#define INT24_MAX  (8388607) 
                    19162 .................... //#define INT24_MIN  (-8388608) 
                    19163 .................... //#define UINT24_MAX (16777215) 
                    19164 ....................  
                    19165 .................... #define INT64_MAX  (9223372036854775807) 
                    19166 .................... #define INT64_MIN  (-9223372036854775808) 
                    19167 .................... #define UINT64_MAX (18446744073709551615) 
                    19168 .................... #endif 
                    19169 ....................  
                    19170 .................... ///////// minimum width 
                    19171 ....................  
                    19172 .................... typedef signed int8 int_least8_t; 
                    19173 .................... typedef unsigned int8 uint_least8_t; 
                    19174 .................... typedef signed int16 int_least16_t; 
                    19175 .................... typedef unsigned int16 uint_least16_t; 
                    19176 .................... typedef signed int32 int_least32_t; 
                    19177 .................... typedef unsigned int32 uint_least32_t; 
                    19178 ....................  
                    19179 .................... #if defined(__PCD__) 
                    19180 .................... //typedef signed int24 int_least24_t; 
                    19181 .................... //typedef unsigned int24 uint_least24_t; 
                    19182 .................... typedef signed int64 int_least64_t; 
                    19183 .................... typedef unsigned int64 uint_least64_t; 
                    19184 .................... #endif 
                    19185 ....................  
                    19186 .................... #define INT_LEAST8_MAX  (128) 
                    19187 .................... #define INT_LEAST8_MIN  (-127) 
                    19188 .................... #define UINT_LEAST8_MAX (255) 
                    19189 ....................  
                    19190 .................... #define INT_LEAST16_MAX  (32767) 
                    19191 .................... #define INT_LEAST16_MIN  (-32768) 
                    19192 .................... #define UINT_LEAST16_MAX (65535) 
                    19193 ....................  
                    19194 .................... #define INT_LEAST32_MAX  (2147483647) 
                    19195 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    19196 .................... #define UINT_LEAST32_MAX (4294967295) 
                    19197 ....................  
                    19198 .................... #if defined(__PCD__) 
                    19199 .................... //#define INT_LEAST24_MAX  (8388607) 
                    19200 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    19201 .................... //#define UINT_LEAST24_MAX (16777215) 
                    19202 ....................  
                    19203 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    19204 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    19205 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    19206 .................... #endif 
                    19207 ....................  
                    19208 .................... ///////// fastest width 
                    19209 ....................  
                    19210 .................... #if defined(__PCD__) 
                    19211 .................... typedef signed int16 int_fast8_t; 
                    19212 .................... typedef unsigned int16 uint_fast8_t; 
                    19213 .................... #define INT_FAST8_MAX  (32767) 
                    19214 .................... #define INT_FAST8_MIN  (-32768) 
                    19215 .................... #define UINT_FAST8_MAX (65535) 
                    19216 .................... typedef signed int16 int_fast16_t; 
                    19217 .................... typedef unsigned int16 uint_fast16_t; 
                    19218 .................... //typedef signed int24 int_fast24_t; 
                    19219 .................... //typedef unsigned int24 uint_fast24_t; 
                    19220 .................... typedef signed int64 int_fast64_t; 
                    19221 .................... typedef unsigned int64 uint_fast64_t; 
                    19222 .................... #else 
                    19223 .................... typedef signed int8 int_fast8_t; 
                    19224 .................... typedef unsigned int8 uint_fast8_t; 
                    19225 .................... #define INT_FAST8_MAX  (128) 
                    19226 .................... #define INT_FAST8_MIN  (-127) 
                    19227 .................... #define UINT_FAST8_MAX (255) 
                    19228 .................... typedef signed int16 int_fast16_t; 
                    19229 .................... typedef unsigned int16 uint_fast16_t; 
                    19230 .................... #endif 
                    19231 ....................  
                    19232 .................... typedef signed int32 int_fast32_t; 
                    19233 .................... typedef unsigned int32 uint_fast32_t; 
                    19234 ....................  
                    19235 .................... #define INT_FAST16_MAX  (32767) 
                    19236 .................... #define INT_FAST16_MIN  (-32768) 
                    19237 .................... #define UINT_FAST16_MAX (65535) 
                    19238 ....................  
                    19239 .................... #define INT_FAST32_MAX  (2147483647) 
                    19240 .................... #define INT_FAST32_MIN  (-2147483648) 
                    19241 .................... #define UINT_FAST32_MAX (4294967295) 
                    19242 ....................  
                    19243 .................... #if defined(__PCD__) 
                    19244 .................... //#define INT_FAST24_MAX  (8388607) 
                    19245 .................... //#define INT_FAST24_MIN  (-8388608) 
                    19246 .................... //#define UINT_FAST24_MAX (16777215) 
                    19247 ....................  
                    19248 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    19249 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    19250 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    19251 .................... #endif 
                    19252 ....................  
                    19253 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    19254 ....................  
                    19255 .................... /// TODO 
                    19256 ....................  
                    19257 .................... /// intptr_t uintptr_t 
                    19258 ....................  
                    19259 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    19260 ....................  
                    19261 ....................  
                    19262 .................... /////////// greatest width (OPTIONAL) 
                    19263 ....................  
                    19264 .................... /// TODO 
                    19265 ....................  
                    19266 .................... /// intmax_t uintmax_t 
                    19267 ....................  
                    19268 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    19269 ....................  
                    19270 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    19271 ....................  
                    19272 ....................  
                    19273 .................... #endif 
                    19274 ....................  
                    19275 ....................  
                    19276 .................... #define MAX_UART_SIZE 180 
                    19277 ....................  
                    19278 .................... static uint8_t rbuf[MAX_UART_SIZE]; 
                    19279 .................... static uint8_t rbuf_wr_idx; 
                    19280 .................... static uint8_t rbuf_rd_idx; 
                    19281 ....................  
                    19282 .................... static uint8_t wbuf[MAX_UART_SIZE]; 
                    19283 .................... static uint8_t wbuf_wr_idx; 
                    19284 .................... static uint8_t wbuf_rd_idx; 
                    19285 ....................  
                    19286 .................... void uart_clear_errors(); 
                    19287 ....................  
                    19288 .................... void uart_init() { 
                    19289 ....................   rbuf_wr_idx = 0; 
3752 0103           19290 MOVLB  3
3754 6B36           19291 CLRF   x36
                    19292 ....................   rbuf_rd_idx = 0; 
3756 6B37           19293 CLRF   x37
                    19294 ....................   wbuf_wr_idx = 0; 
3758 6BEC           19295 CLRF   xEC
                    19296 ....................   wbuf_rd_idx = 0; 
375A 6BED           19297 CLRF   xED
                    19298 ....................   enable_interrupts(int_RDA); 
375C 8A9D           19299 BSF    F9D.5
                    19300 .................... } 
375E 0100           19301 MOVLB  0
3760 EFB3 F01B      19302 GOTO   3766 (RETURN)
                    19303 ....................  
                    19304 .................... void uart_disable() { 
                    19305 ....................   disable_interrupts(int_RDA); 
                    19306 ....................   disable_interrupts(int_TBE); 
                    19307 .................... } 
                    19308 ....................  
                    19309 .................... static uint8_t get_next_byte() { 
3FBA 0103           19310 MOVLB  3
3FBC 5137           19311 MOVF   x37,W
3FBE 2B37           19312 INCF   x37,F
3FC0 6A03           19313 CLRF   03
3FC2 0F82           19314 ADDLW  82
3FC4 6EE9           19315 MOVWF  FE9
3FC6 0E02           19316 MOVLW  02
3FC8 2003           19317 ADDWFC 03,W
3FCA 6EEA           19318 MOVWF  FEA
3FCC CFEF F3FF      19319 MOVFF  FEF,3FF
                    19320 ....................   uint8_t c = rbuf[rbuf_rd_idx++]; 
                    19321 ....................   if(rbuf_rd_idx >= MAX_UART_SIZE) { 
3FD0 5137           19322 MOVF   x37,W
3FD2 08B3           19323 SUBLW  B3
3FD4 E201           19324 BC    3FD8
                    19325 ....................     rbuf_rd_idx = 0; 
3FD6 6B37           19326 CLRF   x37
                    19327 ....................   } 
                    19328 ....................   return c; 
3FD8 C3FF F001      19329 MOVFF  3FF,01
                    19330 .................... } 
3FDC 0100           19331 MOVLB  0
3FDE EFF9 F028      19332 GOTO   51F2 (RETURN)
                    19333 ....................  
                    19334 .................... /* stupid implementation, overwrite old data... */ 
                    19335 .................... static void push_bytes(uint8_t *src, uint16_t len) { 
55A8 0EB4           19336 MOVLW  B4
55AA 80D8           19337 BSF    FD8.0
55AC 0103           19338 MOVLB  3
55AE 55EC           19339 SUBFWB xEC,W
55B0 0104           19340 MOVLB  4
55B2 6F51           19341 MOVWF  x51
                    19342 ....................     int d = MAX_UART_SIZE - wbuf_wr_idx; 
                    19343 ....................     if(len > d) { 
55B4 5350           19344 MOVF   x50,F
55B6 E103           19345 BNZ   55BE
55B8 514F           19346 MOVF   x4F,W
55BA 5D51           19347 SUBWF  x51,W
55BC E23D           19348 BC    5638
                    19349 ....................       memcpy(wbuf + wbuf_wr_idx, src, d); 
55BE 0E38           19350 MOVLW  38
55C0 0103           19351 MOVLB  3
55C2 25EC           19352 ADDWF  xEC,W
55C4 0104           19353 MOVLB  4
55C6 6F52           19354 MOVWF  x52
55C8 0E03           19355 MOVLW  03
55CA 6F53           19356 MOVWF  x53
55CC B0D8           19357 BTFSC  FD8.0
55CE 2B53           19358 INCF   x53,F
55D0 C453 FFEA      19359 MOVFF  453,FEA
55D4 C452 FFE9      19360 MOVFF  452,FE9
55D8 C44E FFE2      19361 MOVFF  44E,FE2
55DC C44D FFE1      19362 MOVFF  44D,FE1
55E0 5151           19363 MOVF   x51,W
55E2 6E01           19364 MOVWF  01
55E4 E004           19365 BZ    55EE
55E6 CFE6 FFEE      19366 MOVFF  FE6,FEE
55EA 2E01           19367 DECFSZ 01,F
55EC D7FC           19368 BRA    55E6
                    19369 ....................       len -= d; 
55EE 5151           19370 MOVF   x51,W
55F0 5F4F           19371 SUBWF  x4F,F
55F2 0E00           19372 MOVLW  00
55F4 5B50           19373 SUBWFB x50,F
                    19374 ....................       memcpy(wbuf, src + d, len); 
55F6 5151           19375 MOVF   x51,W
55F8 254D           19376 ADDWF  x4D,W
55FA 6F52           19377 MOVWF  x52
55FC 0E00           19378 MOVLW  00
55FE 214E           19379 ADDWFC x4E,W
5600 6F53           19380 MOVWF  x53
5602 0E03           19381 MOVLW  03
5604 6EEA           19382 MOVWF  FEA
5606 0E38           19383 MOVLW  38
5608 6EE9           19384 MOVWF  FE9
560A C453 FFE2      19385 MOVFF  453,FE2
560E C452 FFE1      19386 MOVFF  452,FE1
5612 C450 F002      19387 MOVFF  450,02
5616 C44F F001      19388 MOVFF  44F,01
561A 5201           19389 MOVF   01,F
561C E002           19390 BZ    5622
561E 2A02           19391 INCF   02,F
5620 D002           19392 BRA    5626
5622 5202           19393 MOVF   02,F
5624 E006           19394 BZ    5632
5626 CFE6 FFEE      19395 MOVFF  FE6,FEE
562A 2E01           19396 DECFSZ 01,F
562C D7FC           19397 BRA    5626
562E 2E02           19398 DECFSZ 02,F
5630 D7FA           19399 BRA    5626
                    19400 ....................       wbuf_wr_idx = len; 
5632 C44F F3EC      19401 MOVFF  44F,3EC
                    19402 ....................     } else { 
5636 D024           19403 BRA    5680
                    19404 ....................       memcpy(wbuf + wbuf_wr_idx, src, len); 
5638 0E38           19405 MOVLW  38
563A 0103           19406 MOVLB  3
563C 25EC           19407 ADDWF  xEC,W
563E 0104           19408 MOVLB  4
5640 6F52           19409 MOVWF  x52
5642 0E03           19410 MOVLW  03
5644 6F53           19411 MOVWF  x53
5646 B0D8           19412 BTFSC  FD8.0
5648 2B53           19413 INCF   x53,F
564A C453 FFEA      19414 MOVFF  453,FEA
564E C452 FFE9      19415 MOVFF  452,FE9
5652 C44E FFE2      19416 MOVFF  44E,FE2
5656 C44D FFE1      19417 MOVFF  44D,FE1
565A C450 F002      19418 MOVFF  450,02
565E C44F F001      19419 MOVFF  44F,01
5662 5201           19420 MOVF   01,F
5664 E002           19421 BZ    566A
5666 2A02           19422 INCF   02,F
5668 D002           19423 BRA    566E
566A 5202           19424 MOVF   02,F
566C E006           19425 BZ    567A
566E CFE6 FFEE      19426 MOVFF  FE6,FEE
5672 2E01           19427 DECFSZ 01,F
5674 D7FC           19428 BRA    566E
5676 2E02           19429 DECFSZ 02,F
5678 D7FA           19430 BRA    566E
                    19431 ....................       wbuf_wr_idx += len; 
567A 514F           19432 MOVF   x4F,W
567C 0103           19433 MOVLB  3
567E 27EC           19434 ADDWF  xEC,F
                    19435 ....................     } 
                    19436 ....................     if(wbuf_wr_idx == MAX_UART_SIZE) { 
5680 0103           19437 MOVLB  3
5682 51EC           19438 MOVF   xEC,W
5684 08B4           19439 SUBLW  B4
5686 E101           19440 BNZ   568A
                    19441 .................... 		  wbuf_wr_idx = 0;     
5688 6BEC           19442 CLRF   xEC
                    19443 .................... 	  }  
                    19444 .................... } 
568A 0100           19445 MOVLB  0
568C EFFC F01F      19446 GOTO   3FF8 (RETURN)
                    19447 ....................  
                    19448 .................... uint8_t uart_get_byte_blocking() { 
                    19449 ....................   while(rbuf_wr_idx == rbuf_rd_idx) { 
                    19450 .................... enable_interrupts(INT_EXT);  
                    19451 .................... }; 
                    19452 ....................   return get_next_byte(); 
                    19453 .................... } 
                    19454 ....................  
                    19455 .................... uint8_t uart_get_byte_nonblocking(uint8_t *dst) { 
                    19456 ....................   if(rbuf_wr_idx == rbuf_rd_idx) { 
51D2 0103           19457 MOVLB  3
51D4 5137           19458 MOVF   x37,W
51D6 5D36           19459 SUBWF  x36,W
51D8 E103           19460 BNZ   51E0
                    19461 ....................     return 0; 
51DA 0E00           19462 MOVLW  00
51DC 6E01           19463 MOVWF  01
51DE D012           19464 BRA    5204
                    19465 ....................   } 
                    19466 ....................   *dst = get_next_byte(); 
51E0 C3FC F003      19467 MOVFF  3FC,03
51E4 C3FB F3FD      19468 MOVFF  3FB,3FD
51E8 C3FC F3FE      19469 MOVFF  3FC,3FE
51EC 0100           19470 MOVLB  0
51EE EFDD F01F      19471 GOTO   3FBA
51F2 C3FE FFEA      19472 MOVFF  3FE,FEA
51F6 C3FD FFE9      19473 MOVFF  3FD,FE9
51FA C001 FFEF      19474 MOVFF  01,FEF
                    19475 ....................   return 1; 
51FE 0E01           19476 MOVLW  01
5200 6E01           19477 MOVWF  01
5202 0103           19478 MOVLB  3
                    19479 .................... } 
5204 0100           19480 MOVLB  0
5206 EFCD F029      19481 GOTO   539A (RETURN)
                    19482 ....................  
                    19483 .................... void uart_send(void* buffer, uint8_t size) { 
                    19484 ....................   push_bytes(buffer, size); 
3FE2 C44B F44E      19485 MOVFF  44B,44E
3FE6 C44A F44D      19486 MOVFF  44A,44D
3FEA 0104           19487 MOVLB  4
3FEC 6B50           19488 CLRF   x50
3FEE C44C F44F      19489 MOVFF  44C,44F
3FF2 0100           19490 MOVLB  0
3FF4 EFD4 F02A      19491 GOTO   55A8
                    19492 ....................   enable_interrupts(int_TBE); 
3FF8 889D           19493 BSF    F9D.4
                    19494 ....................  
                    19495 ....................   /* wait here until done */ 
                    19496 ....................   //while(wbuf_rd_idx != wbuf_wr_idx) {}; 
                    19497 .................... } 
3FFA EF60 F02B      19498 GOTO   56C0 (RETURN)
                    19499 ....................  
                    19500 .................... /* UART IRQs */ 
                    19501 ....................  
                    19502 .................... #int_RDA 
                    19503 .................... void RDA_isr(void) 
                    19504 .................... { 
                    19505 ....................   /* uart rx buffer can hold 2.x input bytes */ 
                    19506 ....................   do {  
                    19507 ....................     rbuf[rbuf_wr_idx++] = RCREG1; 
352E 0103           19508 MOVLB  3
3530 5136           19509 MOVF   x36,W
3532 2B36           19510 INCF   x36,F
3534 6A03           19511 CLRF   03
3536 0F82           19512 ADDLW  82
3538 6EE9           19513 MOVWF  FE9
353A 0E02           19514 MOVLW  02
353C 2003           19515 ADDWFC 03,W
353E 6EEA           19516 MOVWF  FEA
3540 CFAE FFEF      19517 MOVFF  FAE,FEF
                    19518 ....................     if (rbuf_wr_idx == MAX_UART_SIZE) { 
3544 5136           19519 MOVF   x36,W
3546 08B4           19520 SUBLW  B4
3548 E101           19521 BNZ   354C
                    19522 ....................       rbuf_wr_idx = 0; 
354A 6B36           19523 CLRF   x36
                    19524 ....................     } 
                    19525 ....................     uart_clear_errors(); 
354C 0100           19526 MOVLB  0
354E EF68 F013      19527 GOTO   26D0
                    19528 ....................   } while (kbhit()); 
3552 BA9E           19529 BTFSC  F9E.5
3554 D7EC           19530 BRA    352E
                    19531 ....................   enable_interrupts(int_RDA); 
3556 8A9D           19532 BSF    F9D.5
                    19533 .................... } 
                    19534 ....................  
3558 9A9E           19535 BCF    F9E.5
355A EF3C F010      19536 GOTO   2078
                    19537 .................... #int_TBE 
                    19538 .................... void TBE_isr(void) 
                    19539 .................... { 
                    19540 ....................   if (wbuf_rd_idx != wbuf_wr_idx){ 
355E 0103           19541 MOVLB  3
3560 51EC           19542 MOVF   xEC,W
3562 5DED           19543 SUBWF  xED,W
3564 E00F           19544 BZ    3584
                    19545 ....................     TXREG1 = wbuf[wbuf_rd_idx++]; 
3566 51ED           19546 MOVF   xED,W
3568 2BED           19547 INCF   xED,F
356A 6A03           19548 CLRF   03
356C 0F38           19549 ADDLW  38
356E 6EE9           19550 MOVWF  FE9
3570 0E03           19551 MOVLW  03
3572 2003           19552 ADDWFC 03,W
3574 6EEA           19553 MOVWF  FEA
3576 CFEF FFAD      19554 MOVFF  FEF,FAD
                    19555 ....................     if(wbuf_rd_idx == MAX_UART_SIZE) { 
357A 51ED           19556 MOVF   xED,W
357C 08B4           19557 SUBLW  B4
357E E101           19558 BNZ   3582
                    19559 ....................       wbuf_rd_idx = 0; 
3580 6BED           19560 CLRF   xED
                    19561 ....................     } 
                    19562 ....................   } else { 
3582 D001           19563 BRA    3586
                    19564 ....................     disable_interrupts(int_TBE); 
3584 989D           19565 BCF    F9D.4
                    19566 ....................   } 
                    19567 .................... } 
                    19568 ....................  
3586 989E           19569 BCF    F9E.4
3588 0100           19570 MOVLB  0
358A EF3C F010      19571 GOTO   2078
                    19572 .................... #bit CREN=getenv("BIT:CREN")  
                    19573 .................... #BIT OERR = getenv("BIT:OERR") 
                    19574 .................... void uart_clear_errors() 
                    19575 .................... { 
                    19576 ....................   if (OERR) { 
26D0 A2AB           19577 BTFSS  FAB.1
26D2 D002           19578 BRA    26D8
                    19579 ....................     CREN = 0; 
26D4 98AB           19580 BCF    FAB.4
                    19581 ....................     CREN = 1; 
26D6 88AB           19582 BSF    FAB.4
                    19583 ....................   } 
                    19584 .................... } 
26D8 EFA9 F01A      19585 GOTO   3552 (RETURN)
                    19586 ....................  
                    19587 .................... /* 
                    19588 ....................  * ad5312.c 
                    19589 ....................  * 
                    19590 ....................  *  Created on: Oct 13, 2016 
                    19591 ....................  *      Author: asaf 
                    19592 ....................  */ 
                    19593 ....................  
                    19594 .................... #include "BA1474.h" 
                    19595 .................... #include <18F45K22.h> 
                    19596 .................... //////// Standard Header file for the PIC18F45K22 device //////////////// 
                    19597 .................... #device PIC18F45K22 
                    20369 .................... #list 
                    20370 ....................  
                    20371 .................... #device adc=10 
                    20372 .................... #device pass_strings=in_ram 
                    20373 ....................  
                    20374 .................... #define LOADER_END 0x1FFF 
                    20375 .................... #include <boot.h> 
                    20376 .................... #undef LOADER_END 
                    20377 .................... #define FLASH_SIZE getenv("FLASH_ERASE_SIZE") 
                    20378 .................... #define LOADER_END   0x1FFF 
                    20379 .................... #define LOADER_SIZE  0x3FF 
                    20380 ....................  
                    20381 .................... #ifndef _bootloader 
                    20382 .................... #build(reset=LOADER_END+1, interrupt=LOADER_END+9) 
                    20383 ....................  
                    20384 .................... /* when in operational software, keep out of the bootloader sections */ 
                    20385 .................... #org 0, 0xfff {} 
                    20386 .................... #org 0x1000, 0x1ffe {} 
                    20387 ....................  
                    20388 .................... #else 
                    20389 ....................  
                    20390 .................... /* when in the bootloader, keep out of the operational sections */ 
                    20391 .................... #org 0x2000, 0x7ffe {} 
                    20392 ....................  
                    20393 .................... #endif 
                    20394 ....................  
                    20395 ....................  
                    20396 .................... #FUSES NOWDT                   //No Watch Dog Timer 
                    20397 .................... #FUSES WDT128                  //Watch Dog Timer uses 1:128 Postscale 
                    20398 .................... #FUSES INTRC_IO                //Internal RC Osc, no CLKOUT 
                    20399 .................... #FUSES NOBROWNOUT              //No brownout reset 
                    20400 .................... #FUSES WDT_SW                  //No Watch Dog Timer, enabled in Software 
                    20401 .................... #FUSES NOLVP                   //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
                    20402 .................... #FUSES NOPUT 
                    20403 .................... #FUSES NOXINST                 //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
                    20404 ....................  
                    20405 .................... #use delay(clock=64000000) 
                    20406 .................... #use rs232(baud=921600,xmit=PIN_C6,rcv=PIN_C7,ERRORS) 
                    20407 .................... #USE TIMER(TIMER=1,TICK=1us,BITS=32,NOISR) 
                    20408 .................... #use spi(DO=PIN_A4, CLK=PIN_A3, ENABLE=PIN_A2, ENABLE_ACTIVE=0, DATA_HOLD=20, BITS=16) 
                    20409 ....................  
                    20410 .................... #opt 9 
                    20411 ....................  
                    20412 .................... #use fast_io(a) 
                    20413 .................... #use fast_io(b) 
                    20414 .................... #use fast_io(c) 
                    20415 .................... #use fast_io(d) 
                    20416 .................... #use fast_io(e) 
                    20417 ....................  
                    20418 .................... #define safe_write_program_memory(address, pointer, size) \ 
                    20419 ....................   do { disable_interrupts(GLOBAL); write_program_memory(address, pointer, size); enable_interrupts(GLOBAL); delay_us(1000); } while (0) 
                    20420 ....................  
                    20421 ....................  
                    20422 ....................  
                    20423 .................... #include <stdint.h> 
                    20424 .................... /////////////////////////////////////////////////////////////////////////// 
                    20425 .................... ////                                                                   //// 
                    20426 .................... ////                           stdint.h                                //// 
                    20427 .................... ////                                                                   //// 
                    20428 .................... //// Standard integer definitions.                                     //// 
                    20429 .................... ////                                                                   //// 
                    20430 .................... /////////////////////////////////////////////////////////////////////////// 
                    20431 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    20432 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    20433 .................... //// compiler.  This source code may only be distributed to other      //// 
                    20434 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    20435 .................... //// or distribution is permitted without written permission.          //// 
                    20436 .................... //// Derivative programs created using this software in object code    //// 
                    20437 .................... //// form are not restricted in any way.                               //// 
                    20438 .................... /////////////////////////////////////////////////////////////////////////// 
                    20439 ....................  
                    20440 .................... #ifndef _STDINT 
                    20441 ....................  
                    20442 .................... #define _STDINT 
                    20443 ....................  
                    20444 .................... //////////// exact width 
                    20445 ....................  
                    20446 .................... typedef signed int8 int8_t; 
                    20447 .................... typedef unsigned int8 uint8_t; 
                    20448 .................... typedef signed int16 int16_t; 
                    20449 .................... typedef unsigned int16 uint16_t; 
                    20450 .................... typedef signed int32 int32_t; 
                    20451 .................... typedef unsigned int32 uint32_t; 
                    20452 ....................  
                    20453 .................... #if defined(__PCD__) 
                    20454 .................... //typedef signed int24 int24_t; 
                    20455 .................... //typedef unsigned int24 uint24_t; 
                    20456 .................... typedef signed int64 int64_t; 
                    20457 .................... typedef unsigned int64 uint64_t; 
                    20458 .................... #endif 
                    20459 ....................  
                    20460 .................... #define INT8_MAX  (128) 
                    20461 .................... #define INT8_MIN  (-127) 
                    20462 .................... #define UINT8_MAX (255) 
                    20463 ....................  
                    20464 .................... #define INT16_MAX  (32767) 
                    20465 .................... #define INT16_MIN  (-32768) 
                    20466 .................... #define UINT16_MAX (65535) 
                    20467 ....................  
                    20468 .................... #define INT32_MAX  (2147483647) 
                    20469 .................... #define INT32_MIN  (-2147483648) 
                    20470 .................... #define UINT32_MAX (4294967295) 
                    20471 ....................  
                    20472 .................... #if defined(__PCD__) 
                    20473 .................... //#define INT24_MAX  (8388607) 
                    20474 .................... //#define INT24_MIN  (-8388608) 
                    20475 .................... //#define UINT24_MAX (16777215) 
                    20476 ....................  
                    20477 .................... #define INT64_MAX  (9223372036854775807) 
                    20478 .................... #define INT64_MIN  (-9223372036854775808) 
                    20479 .................... #define UINT64_MAX (18446744073709551615) 
                    20480 .................... #endif 
                    20481 ....................  
                    20482 .................... ///////// minimum width 
                    20483 ....................  
                    20484 .................... typedef signed int8 int_least8_t; 
                    20485 .................... typedef unsigned int8 uint_least8_t; 
                    20486 .................... typedef signed int16 int_least16_t; 
                    20487 .................... typedef unsigned int16 uint_least16_t; 
                    20488 .................... typedef signed int32 int_least32_t; 
                    20489 .................... typedef unsigned int32 uint_least32_t; 
                    20490 ....................  
                    20491 .................... #if defined(__PCD__) 
                    20492 .................... //typedef signed int24 int_least24_t; 
                    20493 .................... //typedef unsigned int24 uint_least24_t; 
                    20494 .................... typedef signed int64 int_least64_t; 
                    20495 .................... typedef unsigned int64 uint_least64_t; 
                    20496 .................... #endif 
                    20497 ....................  
                    20498 .................... #define INT_LEAST8_MAX  (128) 
                    20499 .................... #define INT_LEAST8_MIN  (-127) 
                    20500 .................... #define UINT_LEAST8_MAX (255) 
                    20501 ....................  
                    20502 .................... #define INT_LEAST16_MAX  (32767) 
                    20503 .................... #define INT_LEAST16_MIN  (-32768) 
                    20504 .................... #define UINT_LEAST16_MAX (65535) 
                    20505 ....................  
                    20506 .................... #define INT_LEAST32_MAX  (2147483647) 
                    20507 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    20508 .................... #define UINT_LEAST32_MAX (4294967295) 
                    20509 ....................  
                    20510 .................... #if defined(__PCD__) 
                    20511 .................... //#define INT_LEAST24_MAX  (8388607) 
                    20512 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    20513 .................... //#define UINT_LEAST24_MAX (16777215) 
                    20514 ....................  
                    20515 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    20516 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    20517 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    20518 .................... #endif 
                    20519 ....................  
                    20520 .................... ///////// fastest width 
                    20521 ....................  
                    20522 .................... #if defined(__PCD__) 
                    20523 .................... typedef signed int16 int_fast8_t; 
                    20524 .................... typedef unsigned int16 uint_fast8_t; 
                    20525 .................... #define INT_FAST8_MAX  (32767) 
                    20526 .................... #define INT_FAST8_MIN  (-32768) 
                    20527 .................... #define UINT_FAST8_MAX (65535) 
                    20528 .................... typedef signed int16 int_fast16_t; 
                    20529 .................... typedef unsigned int16 uint_fast16_t; 
                    20530 .................... //typedef signed int24 int_fast24_t; 
                    20531 .................... //typedef unsigned int24 uint_fast24_t; 
                    20532 .................... typedef signed int64 int_fast64_t; 
                    20533 .................... typedef unsigned int64 uint_fast64_t; 
                    20534 .................... #else 
                    20535 .................... typedef signed int8 int_fast8_t; 
                    20536 .................... typedef unsigned int8 uint_fast8_t; 
                    20537 .................... #define INT_FAST8_MAX  (128) 
                    20538 .................... #define INT_FAST8_MIN  (-127) 
                    20539 .................... #define UINT_FAST8_MAX (255) 
                    20540 .................... typedef signed int16 int_fast16_t; 
                    20541 .................... typedef unsigned int16 uint_fast16_t; 
                    20542 .................... #endif 
                    20543 ....................  
                    20544 .................... typedef signed int32 int_fast32_t; 
                    20545 .................... typedef unsigned int32 uint_fast32_t; 
                    20546 ....................  
                    20547 .................... #define INT_FAST16_MAX  (32767) 
                    20548 .................... #define INT_FAST16_MIN  (-32768) 
                    20549 .................... #define UINT_FAST16_MAX (65535) 
                    20550 ....................  
                    20551 .................... #define INT_FAST32_MAX  (2147483647) 
                    20552 .................... #define INT_FAST32_MIN  (-2147483648) 
                    20553 .................... #define UINT_FAST32_MAX (4294967295) 
                    20554 ....................  
                    20555 .................... #if defined(__PCD__) 
                    20556 .................... //#define INT_FAST24_MAX  (8388607) 
                    20557 .................... //#define INT_FAST24_MIN  (-8388608) 
                    20558 .................... //#define UINT_FAST24_MAX (16777215) 
                    20559 ....................  
                    20560 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    20561 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    20562 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    20563 .................... #endif 
                    20564 ....................  
                    20565 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    20566 ....................  
                    20567 .................... /// TODO 
                    20568 ....................  
                    20569 .................... /// intptr_t uintptr_t 
                    20570 ....................  
                    20571 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    20572 ....................  
                    20573 ....................  
                    20574 .................... /////////// greatest width (OPTIONAL) 
                    20575 ....................  
                    20576 .................... /// TODO 
                    20577 ....................  
                    20578 .................... /// intmax_t uintmax_t 
                    20579 ....................  
                    20580 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    20581 ....................  
                    20582 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    20583 ....................  
                    20584 ....................  
                    20585 .................... #endif 
                    20586 ....................  
                    20587 ....................  
                    20588 .................... #include "ad5312.h" 
                    20589 .................... /* 
                    20590 ....................  * ad5312.h 
                    20591 ....................  * 
                    20592 ....................  *  Created on: Oct 13, 2016 
                    20593 ....................  *      Author: asaf 
                    20594 ....................  */ 
                    20595 ....................  
                    20596 .................... #ifndef AD5312_H_ 
                    20597 .................... #define AD5312_H_ 
                    20598 ....................  
                    20599 .................... enum { 
                    20600 .................... 	DAC_SELECT_BIT = 15, 
                    20601 .................... 	REF_BUF_BIT = 14, 
                    20602 .................... 	PD1_BIT = 13, 
                    20603 .................... 	PD2_BIT = 12, 
                    20604 .................... 	PD_ARR_START_BIT = PD2_BIT, 
                    20605 .................... }; 
                    20606 ....................  
                    20607 .................... enum { 
                    20608 .................... 	DAC_A = 0, 
                    20609 .................... 	DAC_B = 1, 
                    20610 .................... }; 
                    20611 ....................  
                    20612 .................... enum { 
                    20613 .................... 	REF_UNBUFFERED = 0, 
                    20614 .................... 	REF_BUFFERED = 1, 
                    20615 .................... }; 
                    20616 ....................  
                    20617 .................... /* Power Down Modes */ 
                    20618 .................... enum { 
                    20619 .................... 	PD_NORMAL = 0, 
                    20620 .................... 	PD_1K_TO_GND = 1, 
                    20621 .................... 	PD_100K_TO_GND = 2, 
                    20622 .................... 	PD_HIGH_IMPEDANCE_OUTPUT = 3, 
                    20623 .................... }; 
                    20624 ....................  
                    20625 .................... enum { 
                    20626 .................... 	VREF_FULL_SCALE = 5000, /* mV */ 
                    20627 .................... 	DAC_PRECISION = 1024 , /* bits */ 
                    20628 .................... }; 
                    20629 ....................  
                    20630 .................... #INLINE 
                    20631 .................... void ad5312_setVout(int dac, uint16_t mV); 
                    20632 .................... void ad5312_init(); 
                    20633 .................... #INLINE 
                    20634 .................... void ad5312_latch(); 
                    20635 ....................  
                    20636 .................... #endif /* AD5312_H_ */ 
                    20637 ....................  
                    20638 .................... #include "gpio.h" 
                    20639 .................... /* 
                    20640 ....................  * gpio.h 
                    20641 ....................  * 
                    20642 ....................  *  Created on: Mar 8, 2017 
                    20643 ....................  *      Author: asafe 
                    20644 ....................  */ 
                    20645 ....................  
                    20646 .................... #ifndef INCLUDE_GPIO_H_ 
                    20647 .................... #define INCLUDE_GPIO_H_ 
                    20648 ....................  
                    20649 .................... #include <stdint.h> 
                    20650 .................... /////////////////////////////////////////////////////////////////////////// 
                    20651 .................... ////                                                                   //// 
                    20652 .................... ////                           stdint.h                                //// 
                    20653 .................... ////                                                                   //// 
                    20654 .................... //// Standard integer definitions.                                     //// 
                    20655 .................... ////                                                                   //// 
                    20656 .................... /////////////////////////////////////////////////////////////////////////// 
                    20657 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    20658 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    20659 .................... //// compiler.  This source code may only be distributed to other      //// 
                    20660 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    20661 .................... //// or distribution is permitted without written permission.          //// 
                    20662 .................... //// Derivative programs created using this software in object code    //// 
                    20663 .................... //// form are not restricted in any way.                               //// 
                    20664 .................... /////////////////////////////////////////////////////////////////////////// 
                    20665 ....................  
                    20666 .................... #ifndef _STDINT 
                    20667 ....................  
                    20668 .................... #define _STDINT 
                    20669 ....................  
                    20670 .................... //////////// exact width 
                    20671 ....................  
                    20672 .................... typedef signed int8 int8_t; 
                    20673 .................... typedef unsigned int8 uint8_t; 
                    20674 .................... typedef signed int16 int16_t; 
                    20675 .................... typedef unsigned int16 uint16_t; 
                    20676 .................... typedef signed int32 int32_t; 
                    20677 .................... typedef unsigned int32 uint32_t; 
                    20678 ....................  
                    20679 .................... #if defined(__PCD__) 
                    20680 .................... //typedef signed int24 int24_t; 
                    20681 .................... //typedef unsigned int24 uint24_t; 
                    20682 .................... typedef signed int64 int64_t; 
                    20683 .................... typedef unsigned int64 uint64_t; 
                    20684 .................... #endif 
                    20685 ....................  
                    20686 .................... #define INT8_MAX  (128) 
                    20687 .................... #define INT8_MIN  (-127) 
                    20688 .................... #define UINT8_MAX (255) 
                    20689 ....................  
                    20690 .................... #define INT16_MAX  (32767) 
                    20691 .................... #define INT16_MIN  (-32768) 
                    20692 .................... #define UINT16_MAX (65535) 
                    20693 ....................  
                    20694 .................... #define INT32_MAX  (2147483647) 
                    20695 .................... #define INT32_MIN  (-2147483648) 
                    20696 .................... #define UINT32_MAX (4294967295) 
                    20697 ....................  
                    20698 .................... #if defined(__PCD__) 
                    20699 .................... //#define INT24_MAX  (8388607) 
                    20700 .................... //#define INT24_MIN  (-8388608) 
                    20701 .................... //#define UINT24_MAX (16777215) 
                    20702 ....................  
                    20703 .................... #define INT64_MAX  (9223372036854775807) 
                    20704 .................... #define INT64_MIN  (-9223372036854775808) 
                    20705 .................... #define UINT64_MAX (18446744073709551615) 
                    20706 .................... #endif 
                    20707 ....................  
                    20708 .................... ///////// minimum width 
                    20709 ....................  
                    20710 .................... typedef signed int8 int_least8_t; 
                    20711 .................... typedef unsigned int8 uint_least8_t; 
                    20712 .................... typedef signed int16 int_least16_t; 
                    20713 .................... typedef unsigned int16 uint_least16_t; 
                    20714 .................... typedef signed int32 int_least32_t; 
                    20715 .................... typedef unsigned int32 uint_least32_t; 
                    20716 ....................  
                    20717 .................... #if defined(__PCD__) 
                    20718 .................... //typedef signed int24 int_least24_t; 
                    20719 .................... //typedef unsigned int24 uint_least24_t; 
                    20720 .................... typedef signed int64 int_least64_t; 
                    20721 .................... typedef unsigned int64 uint_least64_t; 
                    20722 .................... #endif 
                    20723 ....................  
                    20724 .................... #define INT_LEAST8_MAX  (128) 
                    20725 .................... #define INT_LEAST8_MIN  (-127) 
                    20726 .................... #define UINT_LEAST8_MAX (255) 
                    20727 ....................  
                    20728 .................... #define INT_LEAST16_MAX  (32767) 
                    20729 .................... #define INT_LEAST16_MIN  (-32768) 
                    20730 .................... #define UINT_LEAST16_MAX (65535) 
                    20731 ....................  
                    20732 .................... #define INT_LEAST32_MAX  (2147483647) 
                    20733 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    20734 .................... #define UINT_LEAST32_MAX (4294967295) 
                    20735 ....................  
                    20736 .................... #if defined(__PCD__) 
                    20737 .................... //#define INT_LEAST24_MAX  (8388607) 
                    20738 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    20739 .................... //#define UINT_LEAST24_MAX (16777215) 
                    20740 ....................  
                    20741 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    20742 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    20743 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    20744 .................... #endif 
                    20745 ....................  
                    20746 .................... ///////// fastest width 
                    20747 ....................  
                    20748 .................... #if defined(__PCD__) 
                    20749 .................... typedef signed int16 int_fast8_t; 
                    20750 .................... typedef unsigned int16 uint_fast8_t; 
                    20751 .................... #define INT_FAST8_MAX  (32767) 
                    20752 .................... #define INT_FAST8_MIN  (-32768) 
                    20753 .................... #define UINT_FAST8_MAX (65535) 
                    20754 .................... typedef signed int16 int_fast16_t; 
                    20755 .................... typedef unsigned int16 uint_fast16_t; 
                    20756 .................... //typedef signed int24 int_fast24_t; 
                    20757 .................... //typedef unsigned int24 uint_fast24_t; 
                    20758 .................... typedef signed int64 int_fast64_t; 
                    20759 .................... typedef unsigned int64 uint_fast64_t; 
                    20760 .................... #else 
                    20761 .................... typedef signed int8 int_fast8_t; 
                    20762 .................... typedef unsigned int8 uint_fast8_t; 
                    20763 .................... #define INT_FAST8_MAX  (128) 
                    20764 .................... #define INT_FAST8_MIN  (-127) 
                    20765 .................... #define UINT_FAST8_MAX (255) 
                    20766 .................... typedef signed int16 int_fast16_t; 
                    20767 .................... typedef unsigned int16 uint_fast16_t; 
                    20768 .................... #endif 
                    20769 ....................  
                    20770 .................... typedef signed int32 int_fast32_t; 
                    20771 .................... typedef unsigned int32 uint_fast32_t; 
                    20772 ....................  
                    20773 .................... #define INT_FAST16_MAX  (32767) 
                    20774 .................... #define INT_FAST16_MIN  (-32768) 
                    20775 .................... #define UINT_FAST16_MAX (65535) 
                    20776 ....................  
                    20777 .................... #define INT_FAST32_MAX  (2147483647) 
                    20778 .................... #define INT_FAST32_MIN  (-2147483648) 
                    20779 .................... #define UINT_FAST32_MAX (4294967295) 
                    20780 ....................  
                    20781 .................... #if defined(__PCD__) 
                    20782 .................... //#define INT_FAST24_MAX  (8388607) 
                    20783 .................... //#define INT_FAST24_MIN  (-8388608) 
                    20784 .................... //#define UINT_FAST24_MAX (16777215) 
                    20785 ....................  
                    20786 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    20787 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    20788 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    20789 .................... #endif 
                    20790 ....................  
                    20791 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    20792 ....................  
                    20793 .................... /// TODO 
                    20794 ....................  
                    20795 .................... /// intptr_t uintptr_t 
                    20796 ....................  
                    20797 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    20798 ....................  
                    20799 ....................  
                    20800 .................... /////////// greatest width (OPTIONAL) 
                    20801 ....................  
                    20802 .................... /// TODO 
                    20803 ....................  
                    20804 .................... /// intmax_t uintmax_t 
                    20805 ....................  
                    20806 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    20807 ....................  
                    20808 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    20809 ....................  
                    20810 ....................  
                    20811 .................... #endif 
                    20812 ....................  
                    20813 .................... #include "gpio.h" 
                    20814 .................... /* 
                    20815 ....................  * gpio.h 
                    20816 ....................  * 
                    20817 ....................  *  Created on: Mar 8, 2017 
                    20818 ....................  *      Author: asafe 
                    20819 ....................  */ 
                    20820 ....................  
                    20821 .................... #ifndef INCLUDE_GPIO_H_ 
                    20822 .................... #define INCLUDE_GPIO_H_ 
                    20823 ....................  
                    20824 .................... #include <stdint.h> 
                    20825 .................... #include "gpio.h" 
                    20826 ....................  
                    20827 .................... enum { 
                    20828 ....................     GPIO_DIR_IN     = 0, 
                    20829 ....................     GPIO_DIR_OUT    = 1, 
                    20830 ....................     GPIO_ANALOG     = 2, 
                    20831 ....................  
                    20832 ....................     GPIO_VALUE_LOW = 0, 
                    20833 ....................     GPIO_VALUE_HIGH = 1, 
                    20834 .................... }; 
                    20835 ....................  
                    20836 .................... typedef struct gpio_st { 
                    20837 ....................     uint32_t pin; 
                    20838 ....................     int dir; 
                    20839 ....................     char *gpio_name; 
                    20840 .................... } st_gpio; 
                    20841 ....................  
                    20842 .................... /* this is the deceleration that a developer will use to access a specific GPIO */ 
                    20843 .................... /* this list should be identical in order to the <Bold> st_gpio gpios [] </Bold> list in gpio.c */ 
                    20844 ....................  
                    20845 .................... enum { 
                    20846 ....................     GPIO_DAC_CLK        = 0, 
                    20847 ....................     GPIO_DAC_CS         = 1, 
                    20848 ....................     GPIO_DAC_DATA_OUT   = 2, 
                    20849 ....................     GPIO_DAC_LDAC       = 3, 
                    20850 ....................  
                    20851 ....................     GPIO_LED            = 4, 
                    20852 ....................  
                    20853 ....................     GPIO_PA1_ISENSE     = 5, 
                    20854 ....................     GPIO_PA2_ISENSE     = 6, 
                    20855 ....................     GPIO_FFWR           = 7, 
                    20856 ....................     GPIO_RREV           = 8, 
                    20857 ....................     GPIO_RF_INDET       = 9, 
                    20858 ....................     GPIO_TMP            = 10, 
                    20859 ....................     GPIO_PREAMP_DET     = 11, 
                    20860 ....................  
                    20861 ....................     GPIO_ANT_SEL        = 12, 
                    20862 ....................     GPIO_ANT_SELN       = 13, 
                    20863 ....................     GPIO_TX_RX_SEL      = 14, 
                    20864 ....................     GPIO_TX_RX_ENV      = 15, 
                    20865 ....................     GPIO_TX_RX_ENVM     = 16, 
                    20866 ....................  
                    20867 ....................     GPIO_5V_EN          = 17, 
                    20868 ....................  
                    20869 .................... }; 
                    20870 ....................  
                    20871 .................... /* Inputs */ 
                    20872 .................... enum { 
                    20873 ....................  
                    20874 .................... }; 
                    20875 ....................  
                    20876 ....................  
                    20877 .................... void gpio_init(); 
                    20878 .................... int gpio_toggle(int gpio); 
                    20879 .................... #INLINE 
                    20880 .................... void gpio_set(int gpio); 
                    20881 .................... void gpio_clear(int gpio); 
                    20882 .................... #INLINE 
                    20883 .................... void gpio_set_value(int gpio, int value); 
                    20884 .................... int gpio_get(int gpio); 
                    20885 .................... #INLINE 
                    20886 .................... uint32_t gpio_get_analog(int gpio); 
                    20887 ....................  
                    20888 .................... #endif /* INCLUDE_GPIO_H_ */ 
                    20889 ....................  
                    20890 ....................  
                    20891 .................... enum { 
                    20892 ....................     GPIO_DIR_IN     = 0, 
                    20893 ....................     GPIO_DIR_OUT    = 1, 
                    20894 ....................     GPIO_ANALOG     = 2, 
                    20895 ....................  
                    20896 ....................     GPIO_VALUE_LOW = 0, 
                    20897 ....................     GPIO_VALUE_HIGH = 1, 
                    20898 .................... }; 
                    20899 ....................  
                    20900 .................... typedef struct gpio_st { 
                    20901 ....................     uint32_t pin; 
                    20902 ....................     int dir; 
                    20903 ....................     char *gpio_name; 
                    20904 .................... } st_gpio; 
                    20905 ....................  
                    20906 .................... /* this is the deceleration that a developer will use to access a specific GPIO */ 
                    20907 .................... /* this list should be identical in order to the <Bold> st_gpio gpios [] </Bold> list in gpio.c */ 
                    20908 ....................  
                    20909 .................... enum { 
                    20910 ....................     GPIO_DAC_CLK        = 0, 
                    20911 ....................     GPIO_DAC_CS         = 1, 
                    20912 ....................     GPIO_DAC_DATA_OUT   = 2, 
                    20913 ....................     GPIO_DAC_LDAC       = 3, 
                    20914 ....................  
                    20915 ....................     GPIO_LED            = 4, 
                    20916 ....................  
                    20917 ....................     GPIO_PA1_ISENSE     = 5, 
                    20918 ....................     GPIO_PA2_ISENSE     = 6, 
                    20919 ....................     GPIO_FFWR           = 7, 
                    20920 ....................     GPIO_RREV           = 8, 
                    20921 ....................     GPIO_RF_INDET       = 9, 
                    20922 ....................     GPIO_TMP            = 10, 
                    20923 ....................     GPIO_PREAMP_DET     = 11, 
                    20924 ....................  
                    20925 ....................     GPIO_ANT_SEL        = 12, 
                    20926 ....................     GPIO_ANT_SELN       = 13, 
                    20927 ....................     GPIO_TX_RX_SEL      = 14, 
                    20928 ....................     GPIO_TX_RX_ENV      = 15, 
                    20929 ....................     GPIO_TX_RX_ENVM     = 16, 
                    20930 ....................  
                    20931 ....................     GPIO_5V_EN          = 17, 
                    20932 ....................  
                    20933 .................... }; 
                    20934 ....................  
                    20935 .................... /* Inputs */ 
                    20936 .................... enum { 
                    20937 ....................  
                    20938 .................... }; 
                    20939 ....................  
                    20940 ....................  
                    20941 .................... void gpio_init(); 
                    20942 .................... int gpio_toggle(int gpio); 
                    20943 .................... #INLINE 
                    20944 .................... void gpio_set(int gpio); 
                    20945 .................... void gpio_clear(int gpio); 
                    20946 .................... #INLINE 
                    20947 .................... void gpio_set_value(int gpio, int value); 
                    20948 .................... int gpio_get(int gpio); 
                    20949 .................... #INLINE 
                    20950 .................... uint32_t gpio_get_analog(int gpio); 
                    20951 ....................  
                    20952 .................... #endif /* INCLUDE_GPIO_H_ */ 
                    20953 ....................  
                    20954 ....................  
                    20955 .................... #define DAC_MV_PER_BIT          ((float)DAC_PRECISION / VREF_FULL_SCALE) 
                    20956 .................... #define DEFAULT_REF_BUF_MODE    ((int)REF_UNBUFFERED) 
                    20957 .................... #define DEFAULT_POWER_MODE      ((int)PD_NORMAL) 
                    20958 .................... #define DEFAULT_POWER_UP_OUTPUT 0 
                    20959 ....................  
                    20960 .................... uint16_t ad5312_default_conf_word; 
                    20961 ....................  
                    20962 .................... /* SPI parameters */ 
                    20963 .................... enum { 
                    20964 ....................   AD5312_LATCH_GPIO = GPIO_DAC_LDAC, 
                    20965 .................... }; 
                    20966 ....................  
                    20967 .................... static void writeData(int device, uint16_t value) { 
3F66 0104           20968 MOVLB  4
3F68 6B3E           20969 CLRF   x3E
3F6A 6A02           20970 CLRF   02
3F6C 6A03           20971 CLRF   03
3F6E B138           20972 BTFSC  x38.0
3F70 8E03           20973 BSF    03.7
3F72 5002           20974 MOVF   02,W
3F74 0103           20975 MOVLB  3
3F76 25EE           20976 ADDWF  xEE,W
3F78 0104           20977 MOVLB  4
3F7A 6F3D           20978 MOVWF  x3D
3F7C 5003           20979 MOVF   03,W
3F7E 0103           20980 MOVLB  3
3F80 21EF           20981 ADDWFC xEF,W
3F82 0104           20982 MOVLB  4
3F84 6F3E           20983 MOVWF  x3E
3F86 513A           20984 MOVF   x3A,W
3F88 0B03           20985 ANDLW  03
3F8A 6F40           20986 MOVWF  x40
3F8C 3539           20987 RLCF   x39,W
3F8E 6E02           20988 MOVWF  02
3F90 3540           20989 RLCF   x40,W
3F92 6E03           20990 MOVWF  03
3F94 3602           20991 RLCF   02,F
3F96 3603           20992 RLCF   03,F
3F98 0EFC           20993 MOVLW  FC
3F9A 1602           20994 ANDWF  02,F
3F9C 5002           20995 MOVF   02,W
3F9E 253D           20996 ADDWF  x3D,W
3FA0 6F3B           20997 MOVWF  x3B
3FA2 5003           20998 MOVF   03,W
3FA4 213E           20999 ADDWFC x3E,W
3FA6 6F3C           21000 MOVWF  x3C
                    21001 .................... 	uint16_t data = ad5312_default_conf_word + 
                    21002 .................... 					((uint16_t)device << DAC_SELECT_BIT) + 
                    21003 .................... 					((value & 0x3ff) << 2); 
                    21004 ....................   spi_xfer(data);   
3FA8 C43C F43E      21005 MOVFF  43C,43E
3FAC C43B F43D      21006 MOVFF  43B,43D
3FB0 0E10           21007 MOVLW  10
3FB2 6F3F           21008 MOVWF  x3F
3FB4 0100           21009 MOVLB  0
3FB6 D7AD           21010 BRA    3F12
                    21011 .................... } 
3FB8 0012           21012 RETURN 0
                    21013 ....................  
                    21014 .................... #INLINE 
                    21015 .................... void ad5312_latch() { 
                    21016 ....................   int i; 
                    21017 .................... 	/*  Active Low, transfers the contents of the input registers to their respective DAC registers. */ 
                    21018 ....................   gpio_clear(AD5312_LATCH_GPIO); 
30F8 0E03           21019 MOVLW  03
30FA 6F69           21020 MOVWF  x69
30FC 0100           21021 MOVLB  0
30FE EC5C F011      21022 CALL   22B8
3976 0E03           21023 MOVLW  03
3978 6F69           21024 MOVWF  x69
397A 0100           21025 MOVLB  0
397C EC5C F011      21026 CALL   22B8
515A 0E03           21027 MOVLW  03
515C 0104           21028 MOVLB  4
515E 6F69           21029 MOVWF  x69
5160 0100           21030 MOVLB  0
5162 EC5C F011      21031 CALL   22B8
5C5A 0E03           21032 MOVLW  03
5C5C 6F69           21033 MOVWF  x69
5C5E 0100           21034 MOVLB  0
5C60 EC5C F011      21035 CALL   22B8
60FA 0E03           21036 MOVLW  03
60FC 0104           21037 MOVLB  4
60FE 6F69           21038 MOVWF  x69
6100 0100           21039 MOVLB  0
6102 EC5C F011      21040 CALL   22B8
                    21041 ....................   for(i=0;i<10;i++) {} 
3102 0104           21042 MOVLB  4
3104 6B64           21043 CLRF   x64
3106 5164           21044 MOVF   x64,W
3108 0809           21045 SUBLW  09
310A E302           21046 BNC   3110
310C 2B64           21047 INCF   x64,F
310E D7FB           21048 BRA    3106
3980 0104           21049 MOVLB  4
3982 6B64           21050 CLRF   x64
3984 5164           21051 MOVF   x64,W
3986 0809           21052 SUBLW  09
3988 E302           21053 BNC   398E
398A 2B64           21054 INCF   x64,F
398C D7FB           21055 BRA    3984
5166 0104           21056 MOVLB  4
5168 6B64           21057 CLRF   x64
516A 5164           21058 MOVF   x64,W
516C 0809           21059 SUBLW  09
516E E302           21060 BNC   5174
5170 2B64           21061 INCF   x64,F
5172 D7FB           21062 BRA    516A
5C64 0104           21063 MOVLB  4
5C66 6B64           21064 CLRF   x64
5C68 5164           21065 MOVF   x64,W
5C6A 0809           21066 SUBLW  09
5C6C E302           21067 BNC   5C72
5C6E 2B64           21068 INCF   x64,F
5C70 D7FB           21069 BRA    5C68
6106 0104           21070 MOVLB  4
6108 6B64           21071 CLRF   x64
610A 5164           21072 MOVF   x64,W
610C 0809           21073 SUBLW  09
610E E302           21074 BNC   6114
6110 2B64           21075 INCF   x64,F
6112 D7FB           21076 BRA    610A
                    21077 ....................   gpio_set(AD5312_LATCH_GPIO); 
3110 0E03           21078 MOVLW  03
3112 6F69           21079 MOVWF  x69
3168 0000           21080 NOP   
398E 0E03           21081 MOVLW  03
3990 6F69           21082 MOVWF  x69
39E6 0000           21083 NOP   
5174 0E03           21084 MOVLW  03
5176 6F69           21085 MOVWF  x69
51CC 0000           21086 NOP   
5C72 0E03           21087 MOVLW  03
5C74 6F69           21088 MOVWF  x69
5CCA 0000           21089 NOP   
6114 0E03           21090 MOVLW  03
6116 6F69           21091 MOVWF  x69
616C 0000           21092 NOP   
616E 0101           21093 MOVLB  1
6170 0104           21094 MOVLB  4
                    21095 .................... } 
                    21096 ....................  
                    21097 .................... #INLINE 
                    21098 .................... void ad5312_setVout(int dac, uint16_t mV) { 
5068 C435 F439      21099 MOVFF  435,439
506C C434 F438      21100 MOVFF  434,438
5070 0100           21101 MOVLB  0
5072 ECD5 F01E      21102 CALL   3DAA
5076 C003 F43B      21103 MOVFF  03,43B
507A C002 F43A      21104 MOVFF  02,43A
507E C001 F439      21105 MOVFF  01,439
5082 C000 F438      21106 MOVFF  00,438
5086 0E17           21107 MOVLW  17
5088 0104           21108 MOVLB  4
508A 6F3F           21109 MOVWF  x3F
508C 0EB7           21110 MOVLW  B7
508E 6F3E           21111 MOVWF  x3E
5090 0E51           21112 MOVLW  51
5092 6F3D           21113 MOVWF  x3D
5094 0E7C           21114 MOVLW  7C
5096 6F3C           21115 MOVWF  x3C
5098 0100           21116 MOVLB  0
509A ECF0 F01E      21117 CALL   3DE0
509E C003 F43B      21118 MOVFF  03,43B
50A2 C002 F43A      21119 MOVFF  02,43A
50A6 C001 F439      21120 MOVFF  01,439
50AA C000 F438      21121 MOVFF  00,438
50AE EC6B F01F      21122 CALL   3ED6
50B2 C002 F437      21123 MOVFF  02,437
50B6 C001 F436      21124 MOVFF  01,436
50E6 C435 F439      21125 MOVFF  435,439
50EA C434 F438      21126 MOVFF  434,438
50EE 0100           21127 MOVLB  0
50F0 ECD5 F01E      21128 CALL   3DAA
50F4 C003 F43B      21129 MOVFF  03,43B
50F8 C002 F43A      21130 MOVFF  02,43A
50FC C001 F439      21131 MOVFF  01,439
5100 C000 F438      21132 MOVFF  00,438
5104 0E17           21133 MOVLW  17
5106 0104           21134 MOVLB  4
5108 6F3F           21135 MOVWF  x3F
510A 0EB7           21136 MOVLW  B7
510C 6F3E           21137 MOVWF  x3E
510E 0E51           21138 MOVLW  51
5110 6F3D           21139 MOVWF  x3D
5112 0E7C           21140 MOVLW  7C
5114 6F3C           21141 MOVWF  x3C
5116 0100           21142 MOVLB  0
5118 ECF0 F01E      21143 CALL   3DE0
511C C003 F43B      21144 MOVFF  03,43B
5120 C002 F43A      21145 MOVFF  02,43A
5124 C001 F439      21146 MOVFF  01,439
5128 C000 F438      21147 MOVFF  00,438
512C EC6B F01F      21148 CALL   3ED6
5130 C002 F437      21149 MOVFF  02,437
5134 C001 F436      21150 MOVFF  01,436
574A C435 F439      21151 MOVFF  435,439
574E C434 F438      21152 MOVFF  434,438
5752 0100           21153 MOVLB  0
5754 ECD5 F01E      21154 CALL   3DAA
5758 C003 F43B      21155 MOVFF  03,43B
575C C002 F43A      21156 MOVFF  02,43A
5760 C001 F439      21157 MOVFF  01,439
5764 C000 F438      21158 MOVFF  00,438
5768 0E17           21159 MOVLW  17
576A 0104           21160 MOVLB  4
576C 6F3F           21161 MOVWF  x3F
576E 0EB7           21162 MOVLW  B7
5770 6F3E           21163 MOVWF  x3E
5772 0E51           21164 MOVLW  51
5774 6F3D           21165 MOVWF  x3D
5776 0E7C           21166 MOVLW  7C
5778 6F3C           21167 MOVWF  x3C
577A 0100           21168 MOVLB  0
577C ECF0 F01E      21169 CALL   3DE0
5780 C003 F43B      21170 MOVFF  03,43B
5784 C002 F43A      21171 MOVFF  02,43A
5788 C001 F439      21172 MOVFF  01,439
578C C000 F438      21173 MOVFF  00,438
5790 EC6B F01F      21174 CALL   3ED6
5794 C002 F437      21175 MOVFF  02,437
5798 C001 F436      21176 MOVFF  01,436
584E C435 F439      21177 MOVFF  435,439
5852 C434 F438      21178 MOVFF  434,438
5856 0100           21179 MOVLB  0
5858 ECD5 F01E      21180 CALL   3DAA
585C C003 F43B      21181 MOVFF  03,43B
5860 C002 F43A      21182 MOVFF  02,43A
5864 C001 F439      21183 MOVFF  01,439
5868 C000 F438      21184 MOVFF  00,438
586C 0E17           21185 MOVLW  17
586E 0104           21186 MOVLB  4
5870 6F3F           21187 MOVWF  x3F
5872 0EB7           21188 MOVLW  B7
5874 6F3E           21189 MOVWF  x3E
5876 0E51           21190 MOVLW  51
5878 6F3D           21191 MOVWF  x3D
587A 0E7C           21192 MOVLW  7C
587C 6F3C           21193 MOVWF  x3C
587E 0100           21194 MOVLB  0
5880 ECF0 F01E      21195 CALL   3DE0
5884 C003 F43B      21196 MOVFF  03,43B
5888 C002 F43A      21197 MOVFF  02,43A
588C C001 F439      21198 MOVFF  01,439
5890 C000 F438      21199 MOVFF  00,438
5894 EC6B F01F      21200 CALL   3ED6
5898 C002 F437      21201 MOVFF  02,437
589C C001 F436      21202 MOVFF  01,436
                    21203 .................... 	uint16_t vout = (uint16_t)(mV * DAC_MV_PER_BIT); 
                    21204 .................... 	if(vout >= DAC_PRECISION) { 
50BA 0104           21205 MOVLB  4
50BC 5137           21206 MOVF   x37,W
50BE 0803           21207 SUBLW  03
50C0 E203           21208 BC    50C8
5138 0104           21209 MOVLB  4
513A 5137           21210 MOVF   x37,W
513C 0803           21211 SUBLW  03
513E E203           21212 BC    5146
579C 0104           21213 MOVLB  4
579E 5137           21214 MOVF   x37,W
57A0 0803           21215 SUBLW  03
57A2 E203           21216 BC    57AA
58A0 0104           21217 MOVLB  4
58A2 5137           21218 MOVF   x37,W
58A4 0803           21219 SUBLW  03
58A6 E203           21220 BC    58AE
                    21221 .................... 		vout = DAC_PRECISION-1; /* cap output to maximum value */ 
50C2 0E03           21222 MOVLW  03
50C4 6F37           21223 MOVWF  x37
50C6 6936           21224 SETF   x36
5140 0E03           21225 MOVLW  03
5142 6F37           21226 MOVWF  x37
5144 6936           21227 SETF   x36
57A4 0E03           21228 MOVLW  03
57A6 6F37           21229 MOVWF  x37
57A8 6936           21230 SETF   x36
58A8 0E03           21231 MOVLW  03
58AA 6F37           21232 MOVWF  x37
58AC 6936           21233 SETF   x36
                    21234 .................... 	} 
                    21235 .................... 	writeData(dac, vout); 
50C8 C433 F438      21236 MOVFF  433,438
50CC C437 F43A      21237 MOVFF  437,43A
50D0 C436 F439      21238 MOVFF  436,439
50D4 0100           21239 MOVLB  0
50D6 ECB3 F01F      21240 CALL   3F66
50DA 0000           21241 NOP   
5146 C433 F438      21242 MOVFF  433,438
514A C437 F43A      21243 MOVFF  437,43A
514E C436 F439      21244 MOVFF  436,439
5152 0100           21245 MOVLB  0
5154 ECB3 F01F      21246 CALL   3F66
5158 0000           21247 NOP   
57AA C433 F438      21248 MOVFF  433,438
57AE C437 F43A      21249 MOVFF  437,43A
57B2 C436 F439      21250 MOVFF  436,439
57B6 0100           21251 MOVLB  0
57B8 ECB3 F01F      21252 CALL   3F66
57BC 0000           21253 NOP   
58AE C433 F438      21254 MOVFF  433,438
58B2 C437 F43A      21255 MOVFF  437,43A
58B6 C436 F439      21256 MOVFF  436,439
58BA 0100           21257 MOVLB  0
58BC ECB3 F01F      21258 CALL   3F66
58C0 0000           21259 NOP   
                    21260 .................... } 
                    21261 ....................  
                    21262 .................... void ad5312_init() { 
                    21263 .................... 	/* set the default configuration word */ 
                    21264 .................... 	ad5312_default_conf_word = (DEFAULT_REF_BUF_MODE << REF_BUF_BIT) + 
                    21265 .................... 									(DEFAULT_POWER_MODE << PD_ARR_START_BIT); 
5000 0103           21266 MOVLB  3
5002 6BEF           21267 CLRF   xEF
5004 6BEE           21268 CLRF   xEE
                    21269 ....................  
                    21270 .................... 	/* set the latch gpio to '1' */ 
                    21271 .................... 	gpio_set(AD5312_LATCH_GPIO); 
5006 0E03           21272 MOVLW  03
5008 0104           21273 MOVLB  4
500A 6F69           21274 MOVWF  x69
                    21275 ....................  
                    21276 .................... 	/* set the AD5312 to DEFAULT_POWER_UP_OUTPUT */ 
                    21277 ....................   ad5312_setVout(DAC_A, DEFAULT_POWER_UP_OUTPUT); 
5060 0104           21278 MOVLB  4
5062 6B33           21279 CLRF   x33
5064 6B35           21280 CLRF   x35
5066 6B34           21281 CLRF   x34
                    21282 ....................   ad5312_setVout(DAC_B, DEFAULT_POWER_UP_OUTPUT); 
50DC 0E01           21283 MOVLW  01
50DE 0104           21284 MOVLB  4
50E0 6F33           21285 MOVWF  x33
50E2 6B35           21286 CLRF   x35
50E4 6B34           21287 CLRF   x34
                    21288 .................... 	ad5312_latch(); 
                    21289 .................... } 
51CE EF23 F017      21290 GOTO   2E46 (RETURN)
                    21291 ....................  
                    21292 .................... #include "BA1474.h" 
                    21293 .................... #include <18F45K22.h> 
                    21294 .................... //////// Standard Header file for the PIC18F45K22 device //////////////// 
                    21295 .................... #device PIC18F45K22 
                    21896 .................... #list 
                    21897 ....................  
                    21898 .................... #device adc=10 
                    21899 .................... #device pass_strings=in_ram 
                    21900 ....................  
                    21901 .................... #define LOADER_END 0x1FFF 
                    21902 .................... #include <boot.h> 
                    21903 .................... #undef LOADER_END 
                    21904 .................... #define FLASH_SIZE getenv("FLASH_ERASE_SIZE") 
                    21905 .................... #define LOADER_END   0x1FFF 
                    21906 .................... #define LOADER_SIZE  0x3FF 
                    21907 ....................  
                    21908 .................... #ifndef _bootloader 
                    21909 .................... #build(reset=LOADER_END+1, interrupt=LOADER_END+9) 
                    21910 ....................  
                    21911 .................... /* when in operational software, keep out of the bootloader sections */ 
                    21912 .................... #org 0, 0xfff {} 
                    21913 .................... #org 0x1000, 0x1ffe {} 
                    21914 ....................  
                    21915 .................... #else 
                    21916 ....................  
                    21917 .................... /* when in the bootloader, keep out of the operational sections */ 
                    21918 .................... #org 0x2000, 0x7ffe {} 
                    21919 ....................  
                    21920 .................... #endif 
                    21921 ....................  
                    21922 ....................  
                    21923 .................... #FUSES NOWDT                   //No Watch Dog Timer 
                    21924 .................... #FUSES WDT128                  //Watch Dog Timer uses 1:128 Postscale 
                    21925 .................... #FUSES INTRC_IO                //Internal RC Osc, no CLKOUT 
                    21926 .................... #FUSES NOBROWNOUT              //No brownout reset 
                    21927 .................... #FUSES WDT_SW                  //No Watch Dog Timer, enabled in Software 
                    21928 .................... #FUSES NOLVP                   //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
                    21929 .................... #FUSES NOPUT 
                    21930 .................... #FUSES NOXINST                 //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
                    21931 ....................  
                    21932 .................... #use delay(clock=64000000) 
                    21933 .................... #use rs232(baud=921600,xmit=PIN_C6,rcv=PIN_C7,ERRORS) 
                    21934 .................... #USE TIMER(TIMER=1,TICK=1us,BITS=32,NOISR) 
                    21935 .................... #use spi(DO=PIN_A4, CLK=PIN_A3, ENABLE=PIN_A2, ENABLE_ACTIVE=0, DATA_HOLD=20, BITS=16) 
                    21936 ....................  
                    21937 .................... #opt 9 
                    21938 ....................  
                    21939 .................... #use fast_io(a) 
                    21940 .................... #use fast_io(b) 
                    21941 .................... #use fast_io(c) 
                    21942 .................... #use fast_io(d) 
                    21943 .................... #use fast_io(e) 
                    21944 ....................  
                    21945 .................... #define safe_write_program_memory(address, pointer, size) \ 
                    21946 ....................   do { disable_interrupts(GLOBAL); write_program_memory(address, pointer, size); enable_interrupts(GLOBAL); delay_us(1000); } while (0) 
                    21947 ....................  
                    21948 ....................  
                    21949 ....................  
                    21950 .................... #include "calibration.h" 
                    21951 .................... #ifndef CALIBRATION_H_ 
                    21952 .................... #define CALIBRATION_H_ 
                    21953 ....................  
                    21954 .................... #include <stdint.h> 
                    21955 .................... /////////////////////////////////////////////////////////////////////////// 
                    21956 .................... ////                                                                   //// 
                    21957 .................... ////                           stdint.h                                //// 
                    21958 .................... ////                                                                   //// 
                    21959 .................... //// Standard integer definitions.                                     //// 
                    21960 .................... ////                                                                   //// 
                    21961 .................... /////////////////////////////////////////////////////////////////////////// 
                    21962 .................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
                    21963 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    21964 .................... //// compiler.  This source code may only be distributed to other      //// 
                    21965 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    21966 .................... //// or distribution is permitted without written permission.          //// 
                    21967 .................... //// Derivative programs created using this software in object code    //// 
                    21968 .................... //// form are not restricted in any way.                               //// 
                    21969 .................... /////////////////////////////////////////////////////////////////////////// 
                    21970 ....................  
                    21971 .................... #ifndef _STDINT 
                    21972 ....................  
                    21973 .................... #define _STDINT 
                    21974 ....................  
                    21975 .................... //////////// exact width 
                    21976 ....................  
                    21977 .................... typedef signed int8 int8_t; 
                    21978 .................... typedef unsigned int8 uint8_t; 
                    21979 .................... typedef signed int16 int16_t; 
                    21980 .................... typedef unsigned int16 uint16_t; 
                    21981 .................... typedef signed int32 int32_t; 
                    21982 .................... typedef unsigned int32 uint32_t; 
                    21983 ....................  
                    21984 .................... #if defined(__PCD__) 
                    21985 .................... //typedef signed int24 int24_t; 
                    21986 .................... //typedef unsigned int24 uint24_t; 
                    21987 .................... typedef signed int64 int64_t; 
                    21988 .................... typedef unsigned int64 uint64_t; 
                    21989 .................... #endif 
                    21990 ....................  
                    21991 .................... #define INT8_MAX  (128) 
                    21992 .................... #define INT8_MIN  (-127) 
                    21993 .................... #define UINT8_MAX (255) 
                    21994 ....................  
                    21995 .................... #define INT16_MAX  (32767) 
                    21996 .................... #define INT16_MIN  (-32768) 
                    21997 .................... #define UINT16_MAX (65535) 
                    21998 ....................  
                    21999 .................... #define INT32_MAX  (2147483647) 
                    22000 .................... #define INT32_MIN  (-2147483648) 
                    22001 .................... #define UINT32_MAX (4294967295) 
                    22002 ....................  
                    22003 .................... #if defined(__PCD__) 
                    22004 .................... //#define INT24_MAX  (8388607) 
                    22005 .................... //#define INT24_MIN  (-8388608) 
                    22006 .................... //#define UINT24_MAX (16777215) 
                    22007 ....................  
                    22008 .................... #define INT64_MAX  (9223372036854775807) 
                    22009 .................... #define INT64_MIN  (-9223372036854775808) 
                    22010 .................... #define UINT64_MAX (18446744073709551615) 
                    22011 .................... #endif 
                    22012 ....................  
                    22013 .................... ///////// minimum width 
                    22014 ....................  
                    22015 .................... typedef signed int8 int_least8_t; 
                    22016 .................... typedef unsigned int8 uint_least8_t; 
                    22017 .................... typedef signed int16 int_least16_t; 
                    22018 .................... typedef unsigned int16 uint_least16_t; 
                    22019 .................... typedef signed int32 int_least32_t; 
                    22020 .................... typedef unsigned int32 uint_least32_t; 
                    22021 ....................  
                    22022 .................... #if defined(__PCD__) 
                    22023 .................... //typedef signed int24 int_least24_t; 
                    22024 .................... //typedef unsigned int24 uint_least24_t; 
                    22025 .................... typedef signed int64 int_least64_t; 
                    22026 .................... typedef unsigned int64 uint_least64_t; 
                    22027 .................... #endif 
                    22028 ....................  
                    22029 .................... #define INT_LEAST8_MAX  (128) 
                    22030 .................... #define INT_LEAST8_MIN  (-127) 
                    22031 .................... #define UINT_LEAST8_MAX (255) 
                    22032 ....................  
                    22033 .................... #define INT_LEAST16_MAX  (32767) 
                    22034 .................... #define INT_LEAST16_MIN  (-32768) 
                    22035 .................... #define UINT_LEAST16_MAX (65535) 
                    22036 ....................  
                    22037 .................... #define INT_LEAST32_MAX  (2147483647) 
                    22038 .................... #define INT_LEAST32_MIN  (-2147483648) 
                    22039 .................... #define UINT_LEAST32_MAX (4294967295) 
                    22040 ....................  
                    22041 .................... #if defined(__PCD__) 
                    22042 .................... //#define INT_LEAST24_MAX  (8388607) 
                    22043 .................... //#define INT_LEAST24_MIN  (-8388608) 
                    22044 .................... //#define UINT_LEAST24_MAX (16777215) 
                    22045 ....................  
                    22046 .................... #define INT_LEAST64_MAX  (9223372036854775807) 
                    22047 .................... #define INT_LEAST64_MIN  (-9223372036854775808) 
                    22048 .................... #define UINT_LEAST64_MAX (18446744073709551615) 
                    22049 .................... #endif 
                    22050 ....................  
                    22051 .................... ///////// fastest width 
                    22052 ....................  
                    22053 .................... #if defined(__PCD__) 
                    22054 .................... typedef signed int16 int_fast8_t; 
                    22055 .................... typedef unsigned int16 uint_fast8_t; 
                    22056 .................... #define INT_FAST8_MAX  (32767) 
                    22057 .................... #define INT_FAST8_MIN  (-32768) 
                    22058 .................... #define UINT_FAST8_MAX (65535) 
                    22059 .................... typedef signed int16 int_fast16_t; 
                    22060 .................... typedef unsigned int16 uint_fast16_t; 
                    22061 .................... //typedef signed int24 int_fast24_t; 
                    22062 .................... //typedef unsigned int24 uint_fast24_t; 
                    22063 .................... typedef signed int64 int_fast64_t; 
                    22064 .................... typedef unsigned int64 uint_fast64_t; 
                    22065 .................... #else 
                    22066 .................... typedef signed int8 int_fast8_t; 
                    22067 .................... typedef unsigned int8 uint_fast8_t; 
                    22068 .................... #define INT_FAST8_MAX  (128) 
                    22069 .................... #define INT_FAST8_MIN  (-127) 
                    22070 .................... #define UINT_FAST8_MAX (255) 
                    22071 .................... typedef signed int16 int_fast16_t; 
                    22072 .................... typedef unsigned int16 uint_fast16_t; 
                    22073 .................... #endif 
                    22074 ....................  
                    22075 .................... typedef signed int32 int_fast32_t; 
                    22076 .................... typedef unsigned int32 uint_fast32_t; 
                    22077 ....................  
                    22078 .................... #define INT_FAST16_MAX  (32767) 
                    22079 .................... #define INT_FAST16_MIN  (-32768) 
                    22080 .................... #define UINT_FAST16_MAX (65535) 
                    22081 ....................  
                    22082 .................... #define INT_FAST32_MAX  (2147483647) 
                    22083 .................... #define INT_FAST32_MIN  (-2147483648) 
                    22084 .................... #define UINT_FAST32_MAX (4294967295) 
                    22085 ....................  
                    22086 .................... #if defined(__PCD__) 
                    22087 .................... //#define INT_FAST24_MAX  (8388607) 
                    22088 .................... //#define INT_FAST24_MIN  (-8388608) 
                    22089 .................... //#define UINT_FAST24_MAX (16777215) 
                    22090 ....................  
                    22091 .................... #define INT_FAST64_MAX  (9223372036854775807) 
                    22092 .................... #define INT_FAST64_MIN  (-9223372036854775808) 
                    22093 .................... #define UINT_FAST64_MAX (18446744073709551615) 
                    22094 .................... #endif 
                    22095 ....................  
                    22096 .................... //////////// big enough to hold pointers (OPTIONAL) 
                    22097 ....................  
                    22098 .................... /// TODO 
                    22099 ....................  
                    22100 .................... /// intptr_t uintptr_t 
                    22101 ....................  
                    22102 .................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
                    22103 ....................  
                    22104 ....................  
                    22105 .................... /////////// greatest width (OPTIONAL) 
                    22106 ....................  
                    22107 .................... /// TODO 
                    22108 ....................  
                    22109 .................... /// intmax_t uintmax_t 
                    22110 ....................  
                    22111 .................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
                    22112 ....................  
                    22113 .................... /// INTMAX_C(value) UINTMAX_C(value) 
                    22114 ....................  
                    22115 ....................  
                    22116 .................... #endif 
                    22117 ....................  
                    22118 .................... #include <stdbool.h> 
                    22119 .................... /////////////////////////////////////////////////////////////////////////// 
                    22120 .................... ////                                                                   //// 
                    22121 .................... ////                          stdbool.h                                //// 
                    22122 .................... ////                                                                   //// 
                    22123 .................... //// Standard boolean definitions                                      //// 
                    22124 .................... ////                                                                   //// 
                    22125 .................... /////////////////////////////////////////////////////////////////////////// 
                    22126 .................... ////        (C) Copyright 1996,2012 Custom Computer Services           //// 
                    22127 .................... //// This source code may only be used by licensed users of the CCS C  //// 
                    22128 .................... //// compiler.  This source code may only be distributed to other      //// 
                    22129 .................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
                    22130 .................... //// or distribution is permitted without written permission.          //// 
                    22131 .................... //// Derivative programs created using this software in object code    //// 
                    22132 .................... //// form are not restricted in any way.                               //// 
                    22133 .................... /////////////////////////////////////////////////////////////////////////// 
                    22134 ....................  
                    22135 .................... #ifndef __STDBOOL_H__ 
                    22136 .................... #define __STDBOOL_H__ 
                    22137 ....................  
                    22138 .................... //remove TRUE and FALSE added by CCS's device .h file 
                    22139 .................... #if defined(TRUE) 
                    22140 .................... #undef TRUE 
                    22141 .................... #endif 
                    22142 .................... #if defined(FALSE) 
                    22143 .................... #undef FALSE 
                    22144 .................... #endif 
                    22145 ....................  
                    22146 .................... typedef int1   bool; 
                    22147 .................... #define true   1 
                    22148 .................... #define false  0 
                    22149 .................... #define __bool_true_false_are_defined  1 
                    22150 ....................  
                    22151 .................... #endif 
                    22152 ....................  
                    22153 ....................  
                    22154 .................... #define CALIBRATION_AREA_START 0x4000 
                    22155 .................... #define CALIBRATION_AREA_END 0x4FFF 
                    22156 ....................  
                    22157 .................... typedef enum { 
                    22158 ....................   CALIBRATION_TABLE_PARAMS = 0, 
                    22159 ....................   CALIBRATION_TABLE_PA_GAINS_1 = 1, 
                    22160 ....................   CALIBRATION_TABLE_PA_GAINS_2 = 2, 
                    22161 ....................   CALIBRATION_TABLE_MAX = 3 
                    22162 .................... } calibration_table_id_t; 
                    22163 ....................  
                    22164 .................... typedef enum { 
                    22165 ....................   PARAM_CAL_TBL_VERSION = 0, 
                    22166 ....................   PARAM_SERIAL_NUM = 1, 
                    22167 ....................   PARAM_TEMP_MULT = 2, 
                    22168 ....................   PARAM_FWD_MULT = 3, 
                    22169 ....................   PARAM_REV_MULT = 4, 
                    22170 ....................   PARAM_INP_PWR_MULT = 5, 
                    22171 ....................   PARAM_PWR_CURRENT_MULT = 6, 
                    22172 ....................   PARAM_PRE_AMP_MULT = 7, 
                    22173 ....................   PARAM_ISENSE_PA1_MULT = 8, 
                    22174 ....................   PARAM_ISENSE_PA2_MULT = 9, 
                    22175 ....................   PARAM_BOOT_WAIT_TIME_USEC = 10, 
                    22176 ....................   PARAM_TX_ON_TIMING_USEC = 11, 
                    22177 ....................   PARAM_TX_OFF_TIMING_USEC = 12, 
                    22178 ....................   PARAM_PA_ON_TIMING_USEC = 13, 
                    22179 ....................   PARAM_PA_OFF_TIMING_USEC = 14, 
                    22180 ....................   PARAM_ANT_SEL_TIMING_USEC = 15, 
                    22181 ....................   PARAM_FWD_SAMP_TIMING_USEC = 16, 
                    22182 ....................   PARAM_REV_SAMP_TIMING_USEC = 17, 
                    22183 ....................   PARAM_INP_PWR_SAMP_TIMING_USEC = 18, 
                    22184 .................... } calibration_param_t; 
                    22185 ....................  
                    22186 .................... #define CALIBRATION_TABLE_INDEX_MAX 32 
                    22187 ....................  
                    22188 .................... void get_calibration_table_data(calibration_table_id_t table_id, void* table_data); 
                    22189 .................... void set_calibration_table_data(calibration_table_id_t table_id, void* table_data); 
                    22190 .................... #INLINE 
                    22191 .................... uint16_t get_calibration_param(calibration_table_id_t table, uint8_t index); 
                    22192 .................... void set_calibration_param(calibration_table_id_t table, uint8_t index, uint16_t value); 
                    22193 ....................  
                    22194 .................... #endif /* CALIBRATION_H_ */ 
                    22195 ....................  
                    22196 ....................  
                    22197 .................... typedef struct calibration_table_t { 
                    22198 ....................   uint16_t values[CALIBRATION_TABLE_INDEX_MAX]; 
                    22199 .................... } calibration_table_t; 
                    22200 ....................  
                    22201 .................... typedef struct calibration_area_t { 
                    22202 ....................   calibration_table_t tables[CALIBRATION_TABLE_MAX]; 
                    22203 .................... } calibration_area_t; 
                    22204 ....................  
                    22205 .................... #ORG CALIBRATION_AREA_START, CALIBRATION_AREA_END 
                    22206 .................... ROM calibration_area_t calibration_area = {}; 
                    22207 ....................  
                    22208 .................... void get_calibration_table_data(calibration_table_id_t table_id, void* table_data) 
                    22209 .................... { 
                    22210 ....................   read_program_memory(CALIBRATION_AREA_START + table_id * sizeof(calibration_table_t), table_data, sizeof(calibration_table_t)); 
6388 0104           22211 MOVLB  4
638A 5144           22212 MOVF   x44,W
638C 0D40           22213 MULLW  40
638E CFF3 F447      22214 MOVFF  FF3,447
6392 0E40           22215 MOVLW  40
6394 6F48           22216 MOVWF  x48
6396 6A19           22217 CLRF   19
6398 BEF2           22218 BTFSC  FF2.7
639A 8E19           22219 BSF    19.7
639C 9EF2           22220 BCF    FF2.7
639E 6AF8           22221 CLRF   FF8
63A0 6EF7           22222 MOVWF  FF7
63A2 C447 FFF6      22223 MOVFF  447,FF6
63A6 C446 FFEA      22224 MOVFF  446,FEA
63AA C445 FFE9      22225 MOVFF  445,FE9
63AE 6B6C           22226 CLRF   x6C
63B0 0E40           22227 MOVLW  40
63B2 6F6B           22228 MOVWF  x6B
63B4 0100           22229 MOVLB  0
63B6 EC42 F012      22230 CALL   2484
63BA BE19           22231 BTFSC  19.7
63BC 8EF2           22232 BSF    FF2.7
                    22233 .................... } 
63BE EF48 F032      22234 GOTO   6490 (RETURN)
                    22235 ....................  
                    22236 .................... void set_calibration_table_data(calibration_table_id_t table_id, void* table_data) 
                    22237 .................... { 
                    22238 ....................   safe_write_program_memory(CALIBRATION_AREA_START + table_id * sizeof(calibration_table_t), table_data, sizeof(calibration_table_t)); 
62E8 9CF2           22239 BCF    FF2.6
62EA 9EF2           22240 BCF    FF2.7
62EC BEF2           22241 BTFSC  FF2.7
62EE D7FD           22242 BRA    62EA
62F0 0104           22243 MOVLB  4
62F2 5104           22244 MOVF   x04,W
62F4 0D40           22245 MULLW  40
62F6 50F3           22246 MOVF   FF3,W
62F8 6F07           22247 MOVWF  x07
62FA 0E40           22248 MOVLW  40
62FC 6F08           22249 MOVWF  x08
62FE 6AF8           22250 CLRF   FF8
6300 C408 FFF7      22251 MOVFF  408,FF7
6304 C407 FFF6      22252 MOVFF  407,FF6
6308 C406 FFEA      22253 MOVFF  406,FEA
630C C405 FFE9      22254 MOVFF  405,FE9
6310 6F40           22255 MOVWF  x40
6312 0100           22256 MOVLB  0
6314 EC09 F01B      22257 CALL   3612
6318 0EC0           22258 MOVLW  C0
631A 12F2           22259 IORWF  FF2,F
631C 0E01           22260 MOVLW  01
631E 0104           22261 MOVLB  4
6320 6F07           22262 MOVWF  x07
6322 0100           22263 MOVLB  0
6324 D7CB           22264 BRA    62BC
                    22265 .................... } 
6326 EFC0 F031      22266 GOTO   6380 (RETURN)
                    22267 ....................  
                    22268 .................... #INLINE 
                    22269 .................... uint16_t get_calibration_param(calibration_table_id_t table_id, uint8_t index) { 
31A4 6B68           22270 CLRF   x68
31A6 6B67           22271 CLRF   x67
3232 6B68           22272 CLRF   x68
3234 6B67           22273 CLRF   x67
32C0 6B68           22274 CLRF   x68
32C2 6B67           22275 CLRF   x67
3A22 6B68           22276 CLRF   x68
3A24 6B67           22277 CLRF   x67
3AB0 6B68           22278 CLRF   x68
3AB2 6B67           22279 CLRF   x67
3B3E 6B68           22280 CLRF   x68
3B40 6B67           22281 CLRF   x67
56D8 6B68           22282 CLRF   x68
56DA 6B67           22283 CLRF   x67
57DA 6B68           22284 CLRF   x68
57DC 6B67           22285 CLRF   x67
5938 6B68           22286 CLRF   x68
593A 6B67           22287 CLRF   x67
59A0 6B68           22288 CLRF   x68
59A2 6B67           22289 CLRF   x67
5A44 6B68           22290 CLRF   x68
5A46 6B67           22291 CLRF   x67
5AA8 6B68           22292 CLRF   x68
5AAA 6B67           22293 CLRF   x67
5D06 6B68           22294 CLRF   x68
5D08 6B67           22295 CLRF   x67
5D94 6B68           22296 CLRF   x68
5D96 6B67           22297 CLRF   x67
5E22 6B68           22298 CLRF   x68
5E24 6B67           22299 CLRF   x67
61EC 6B68           22300 CLRF   x68
61EE 6B67           22301 CLRF   x67
                    22302 ....................   uint16_t value = 0; 
                    22303 ....................   read_program_memory(CALIBRATION_AREA_START + table_id * sizeof(calibration_table_t) + index * sizeof(uint16_t), &value, sizeof(uint16_t)); 
31A8 5165           22304 MOVF   x65,W
31AA 0D40           22305 MULLW  40
31AC CFF3 F469      22306 MOVFF  FF3,469
31B0 0E40           22307 MOVLW  40
31B2 6F6A           22308 MOVWF  x6A
31B4 90D8           22309 BCF    FD8.0
31B6 3566           22310 RLCF   x66,W
31B8 2769           22311 ADDWF  x69,F
31BA 0E00           22312 MOVLW  00
31BC 236A           22313 ADDWFC x6A,F
31BE 6AF8           22314 CLRF   FF8
31C0 C46A FFF7      22315 MOVFF  46A,FF7
31C4 C469 FFF6      22316 MOVFF  469,FF6
31C8 0E04           22317 MOVLW  04
31CA 6EEA           22318 MOVWF  FEA
31CC 0E67           22319 MOVLW  67
31CE 6EE9           22320 MOVWF  FE9
31D0 6B6C           22321 CLRF   x6C
31D2 0E02           22322 MOVLW  02
31D4 6F6B           22323 MOVWF  x6B
31D6 0100           22324 MOVLB  0
31D8 EC42 F012      22325 CALL   2484
3236 5165           22326 MOVF   x65,W
3238 0D40           22327 MULLW  40
323A CFF3 F469      22328 MOVFF  FF3,469
323E 0E40           22329 MOVLW  40
3240 6F6A           22330 MOVWF  x6A
3242 90D8           22331 BCF    FD8.0
3244 3566           22332 RLCF   x66,W
3246 2769           22333 ADDWF  x69,F
3248 0E00           22334 MOVLW  00
324A 236A           22335 ADDWFC x6A,F
324C 6AF8           22336 CLRF   FF8
324E C46A FFF7      22337 MOVFF  46A,FF7
3252 C469 FFF6      22338 MOVFF  469,FF6
3256 0E04           22339 MOVLW  04
3258 6EEA           22340 MOVWF  FEA
325A 0E67           22341 MOVLW  67
325C 6EE9           22342 MOVWF  FE9
325E 6B6C           22343 CLRF   x6C
3260 0E02           22344 MOVLW  02
3262 6F6B           22345 MOVWF  x6B
3264 0100           22346 MOVLB  0
3266 EC42 F012      22347 CALL   2484
32C4 5165           22348 MOVF   x65,W
32C6 0D40           22349 MULLW  40
32C8 CFF3 F469      22350 MOVFF  FF3,469
32CC 0E40           22351 MOVLW  40
32CE 6F6A           22352 MOVWF  x6A
32D0 90D8           22353 BCF    FD8.0
32D2 3566           22354 RLCF   x66,W
32D4 2769           22355 ADDWF  x69,F
32D6 0E00           22356 MOVLW  00
32D8 236A           22357 ADDWFC x6A,F
32DA 6AF8           22358 CLRF   FF8
32DC C46A FFF7      22359 MOVFF  46A,FF7
32E0 C469 FFF6      22360 MOVFF  469,FF6
32E4 0E04           22361 MOVLW  04
32E6 6EEA           22362 MOVWF  FEA
32E8 0E67           22363 MOVLW  67
32EA 6EE9           22364 MOVWF  FE9
32EC 6B6C           22365 CLRF   x6C
32EE 0E02           22366 MOVLW  02
32F0 6F6B           22367 MOVWF  x6B
32F2 0100           22368 MOVLB  0
32F4 EC42 F012      22369 CALL   2484
3A26 5165           22370 MOVF   x65,W
3A28 0D40           22371 MULLW  40
3A2A CFF3 F469      22372 MOVFF  FF3,469
3A2E 0E40           22373 MOVLW  40
3A30 6F6A           22374 MOVWF  x6A
3A32 90D8           22375 BCF    FD8.0
3A34 3566           22376 RLCF   x66,W
3A36 2769           22377 ADDWF  x69,F
3A38 0E00           22378 MOVLW  00
3A3A 236A           22379 ADDWFC x6A,F
3A3C 6AF8           22380 CLRF   FF8
3A3E C46A FFF7      22381 MOVFF  46A,FF7
3A42 C469 FFF6      22382 MOVFF  469,FF6
3A46 0E04           22383 MOVLW  04
3A48 6EEA           22384 MOVWF  FEA
3A4A 0E67           22385 MOVLW  67
3A4C 6EE9           22386 MOVWF  FE9
3A4E 6B6C           22387 CLRF   x6C
3A50 0E02           22388 MOVLW  02
3A52 6F6B           22389 MOVWF  x6B
3A54 0100           22390 MOVLB  0
3A56 EC42 F012      22391 CALL   2484
3AB4 5165           22392 MOVF   x65,W
3AB6 0D40           22393 MULLW  40
3AB8 CFF3 F469      22394 MOVFF  FF3,469
3ABC 0E40           22395 MOVLW  40
3ABE 6F6A           22396 MOVWF  x6A
3AC0 90D8           22397 BCF    FD8.0
3AC2 3566           22398 RLCF   x66,W
3AC4 2769           22399 ADDWF  x69,F
3AC6 0E00           22400 MOVLW  00
3AC8 236A           22401 ADDWFC x6A,F
3ACA 6AF8           22402 CLRF   FF8
3ACC C46A FFF7      22403 MOVFF  46A,FF7
3AD0 C469 FFF6      22404 MOVFF  469,FF6
3AD4 0E04           22405 MOVLW  04
3AD6 6EEA           22406 MOVWF  FEA
3AD8 0E67           22407 MOVLW  67
3ADA 6EE9           22408 MOVWF  FE9
3ADC 6B6C           22409 CLRF   x6C
3ADE 0E02           22410 MOVLW  02
3AE0 6F6B           22411 MOVWF  x6B
3AE2 0100           22412 MOVLB  0
3AE4 EC42 F012      22413 CALL   2484
3B42 5165           22414 MOVF   x65,W
3B44 0D40           22415 MULLW  40
3B46 CFF3 F469      22416 MOVFF  FF3,469
3B4A 0E40           22417 MOVLW  40
3B4C 6F6A           22418 MOVWF  x6A
3B4E 90D8           22419 BCF    FD8.0
3B50 3566           22420 RLCF   x66,W
3B52 2769           22421 ADDWF  x69,F
3B54 0E00           22422 MOVLW  00
3B56 236A           22423 ADDWFC x6A,F
3B58 6AF8           22424 CLRF   FF8
3B5A C46A FFF7      22425 MOVFF  46A,FF7
3B5E C469 FFF6      22426 MOVFF  469,FF6
3B62 0E04           22427 MOVLW  04
3B64 6EEA           22428 MOVWF  FEA
3B66 0E67           22429 MOVLW  67
3B68 6EE9           22430 MOVWF  FE9
3B6A 6B6C           22431 CLRF   x6C
3B6C 0E02           22432 MOVLW  02
3B6E 6F6B           22433 MOVWF  x6B
3B70 0100           22434 MOVLB  0
3B72 EC42 F012      22435 CALL   2484
56DC 5165           22436 MOVF   x65,W
56DE 0D40           22437 MULLW  40
56E0 CFF3 F469      22438 MOVFF  FF3,469
56E4 0E40           22439 MOVLW  40
56E6 6F6A           22440 MOVWF  x6A
56E8 90D8           22441 BCF    FD8.0
56EA 3566           22442 RLCF   x66,W
56EC 2769           22443 ADDWF  x69,F
56EE 0E00           22444 MOVLW  00
56F0 236A           22445 ADDWFC x6A,F
56F2 6AF8           22446 CLRF   FF8
56F4 C46A FFF7      22447 MOVFF  46A,FF7
56F8 C469 FFF6      22448 MOVFF  469,FF6
56FC 0E04           22449 MOVLW  04
56FE 6EEA           22450 MOVWF  FEA
5700 0E67           22451 MOVLW  67
5702 6EE9           22452 MOVWF  FE9
5704 6B6C           22453 CLRF   x6C
5706 0E02           22454 MOVLW  02
5708 6F6B           22455 MOVWF  x6B
570A 0100           22456 MOVLB  0
570C EC42 F012      22457 CALL   2484
57DE 5165           22458 MOVF   x65,W
57E0 0D40           22459 MULLW  40
57E2 CFF3 F469      22460 MOVFF  FF3,469
57E6 0E40           22461 MOVLW  40
57E8 6F6A           22462 MOVWF  x6A
57EA 90D8           22463 BCF    FD8.0
57EC 3566           22464 RLCF   x66,W
57EE 2769           22465 ADDWF  x69,F
57F0 0E00           22466 MOVLW  00
57F2 236A           22467 ADDWFC x6A,F
57F4 6AF8           22468 CLRF   FF8
57F6 C46A FFF7      22469 MOVFF  46A,FF7
57FA C469 FFF6      22470 MOVFF  469,FF6
57FE 0E04           22471 MOVLW  04
5800 6EEA           22472 MOVWF  FEA
5802 0E67           22473 MOVLW  67
5804 6EE9           22474 MOVWF  FE9
5806 6B6C           22475 CLRF   x6C
5808 0E02           22476 MOVLW  02
580A 6F6B           22477 MOVWF  x6B
580C 0100           22478 MOVLB  0
580E EC42 F012      22479 CALL   2484
593C 5165           22480 MOVF   x65,W
593E 0D40           22481 MULLW  40
5940 CFF3 F469      22482 MOVFF  FF3,469
5944 0E40           22483 MOVLW  40
5946 6F6A           22484 MOVWF  x6A
5948 90D8           22485 BCF    FD8.0
594A 3566           22486 RLCF   x66,W
594C 2769           22487 ADDWF  x69,F
594E 0E00           22488 MOVLW  00
5950 236A           22489 ADDWFC x6A,F
5952 6AF8           22490 CLRF   FF8
5954 C46A FFF7      22491 MOVFF  46A,FF7
5958 C469 FFF6      22492 MOVFF  469,FF6
595C 0E04           22493 MOVLW  04
595E 6EEA           22494 MOVWF  FEA
5960 0E67           22495 MOVLW  67
5962 6EE9           22496 MOVWF  FE9
5964 6B6C           22497 CLRF   x6C
5966 0E02           22498 MOVLW  02
5968 6F6B           22499 MOVWF  x6B
596A 0100           22500 MOVLB  0
596C EC42 F012      22501 CALL   2484
59A4 5165           22502 MOVF   x65,W
59A6 0D40           22503 MULLW  40
59A8 CFF3 F469      22504 MOVFF  FF3,469
59AC 0E40           22505 MOVLW  40
59AE 6F6A           22506 MOVWF  x6A
59B0 90D8           22507 BCF    FD8.0
59B2 3566           22508 RLCF   x66,W
59B4 2769           22509 ADDWF  x69,F
59B6 0E00           22510 MOVLW  00
59B8 236A           22511 ADDWFC x6A,F
59BA 6AF8           22512 CLRF   FF8
59BC C46A FFF7      22513 MOVFF  46A,FF7
59C0 C469 FFF6      22514 MOVFF  469,FF6
59C4 0E04           22515 MOVLW  04
59C6 6EEA           22516 MOVWF  FEA
59C8 0E67           22517 MOVLW  67
59CA 6EE9           22518 MOVWF  FE9
59CC 6B6C           22519 CLRF   x6C
59CE 0E02           22520 MOVLW  02
59D0 6F6B           22521 MOVWF  x6B
59D2 0100           22522 MOVLB  0
59D4 EC42 F012      22523 CALL   2484
5A48 5165           22524 MOVF   x65,W
5A4A 0D40           22525 MULLW  40
5A4C CFF3 F469      22526 MOVFF  FF3,469
5A50 0E40           22527 MOVLW  40
5A52 6F6A           22528 MOVWF  x6A
5A54 90D8           22529 BCF    FD8.0
5A56 3566           22530 RLCF   x66,W
5A58 2769           22531 ADDWF  x69,F
5A5A 0E00           22532 MOVLW  00
5A5C 236A           22533 ADDWFC x6A,F
5A5E 6AF8           22534 CLRF   FF8
5A60 C46A FFF7      22535 MOVFF  46A,FF7
5A64 C469 FFF6      22536 MOVFF  469,FF6
5A68 0E04           22537 MOVLW  04
5A6A 6EEA           22538 MOVWF  FEA
5A6C 0E67           22539 MOVLW  67
5A6E 6EE9           22540 MOVWF  FE9
5A70 6B6C           22541 CLRF   x6C
5A72 0E02           22542 MOVLW  02
5A74 6F6B           22543 MOVWF  x6B
5A76 0100           22544 MOVLB  0
5A78 EC42 F012      22545 CALL   2484
5AAC 5165           22546 MOVF   x65,W
5AAE 0D40           22547 MULLW  40
5AB0 CFF3 F469      22548 MOVFF  FF3,469
5AB4 0E40           22549 MOVLW  40
5AB6 6F6A           22550 MOVWF  x6A
5AB8 90D8           22551 BCF    FD8.0
5ABA 3566           22552 RLCF   x66,W
5ABC 2769           22553 ADDWF  x69,F
5ABE 0E00           22554 MOVLW  00
5AC0 236A           22555 ADDWFC x6A,F
5AC2 6AF8           22556 CLRF   FF8
5AC4 C46A FFF7      22557 MOVFF  46A,FF7
5AC8 C469 FFF6      22558 MOVFF  469,FF6
5ACC 0E04           22559 MOVLW  04
5ACE 6EEA           22560 MOVWF  FEA
5AD0 0E67           22561 MOVLW  67
5AD2 6EE9           22562 MOVWF  FE9
5AD4 6B6C           22563 CLRF   x6C
5AD6 0E02           22564 MOVLW  02
5AD8 6F6B           22565 MOVWF  x6B
5ADA 0100           22566 MOVLB  0
5ADC EC42 F012      22567 CALL   2484
5D0A 5165           22568 MOVF   x65,W
5D0C 0D40           22569 MULLW  40
5D0E CFF3 F469      22570 MOVFF  FF3,469
5D12 0E40           22571 MOVLW  40
5D14 6F6A           22572 MOVWF  x6A
5D16 90D8           22573 BCF    FD8.0
5D18 3566           22574 RLCF   x66,W
5D1A 2769           22575 ADDWF  x69,F
5D1C 0E00           22576 MOVLW  00
5D1E 236A           22577 ADDWFC x6A,F
5D20 6AF8           22578 CLRF   FF8
5D22 C46A FFF7      22579 MOVFF  46A,FF7
5D26 C469 FFF6      22580 MOVFF  469,FF6
5D2A 0E04           22581 MOVLW  04
5D2C 6EEA           22582 MOVWF  FEA
5D2E 0E67           22583 MOVLW  67
5D30 6EE9           22584 MOVWF  FE9
5D32 6B6C           22585 CLRF   x6C
5D34 0E02           22586 MOVLW  02
5D36 6F6B           22587 MOVWF  x6B
5D38 0100           22588 MOVLB  0
5D3A EC42 F012      22589 CALL   2484
5D98 5165           22590 MOVF   x65,W
5D9A 0D40           22591 MULLW  40
5D9C CFF3 F469      22592 MOVFF  FF3,469
5DA0 0E40           22593 MOVLW  40
5DA2 6F6A           22594 MOVWF  x6A
5DA4 90D8           22595 BCF    FD8.0
5DA6 3566           22596 RLCF   x66,W
5DA8 2769           22597 ADDWF  x69,F
5DAA 0E00           22598 MOVLW  00
5DAC 236A           22599 ADDWFC x6A,F
5DAE 6AF8           22600 CLRF   FF8
5DB0 C46A FFF7      22601 MOVFF  46A,FF7
5DB4 C469 FFF6      22602 MOVFF  469,FF6
5DB8 0E04           22603 MOVLW  04
5DBA 6EEA           22604 MOVWF  FEA
5DBC 0E67           22605 MOVLW  67
5DBE 6EE9           22606 MOVWF  FE9
5DC0 6B6C           22607 CLRF   x6C
5DC2 0E02           22608 MOVLW  02
5DC4 6F6B           22609 MOVWF  x6B
5DC6 0100           22610 MOVLB  0
5DC8 EC42 F012      22611 CALL   2484
5E26 5165           22612 MOVF   x65,W
5E28 0D40           22613 MULLW  40
5E2A CFF3 F469      22614 MOVFF  FF3,469
5E2E 0E40           22615 MOVLW  40
5E30 6F6A           22616 MOVWF  x6A
5E32 90D8           22617 BCF    FD8.0
5E34 3566           22618 RLCF   x66,W
5E36 2769           22619 ADDWF  x69,F
5E38 0E00           22620 MOVLW  00
5E3A 236A           22621 ADDWFC x6A,F
5E3C 6AF8           22622 CLRF   FF8
5E3E C46A FFF7      22623 MOVFF  46A,FF7
5E42 C469 FFF6      22624 MOVFF  469,FF6
5E46 0E04           22625 MOVLW  04
5E48 6EEA           22626 MOVWF  FEA
5E4A 0E67           22627 MOVLW  67
5E4C 6EE9           22628 MOVWF  FE9
5E4E 6B6C           22629 CLRF   x6C
5E50 0E02           22630 MOVLW  02
5E52 6F6B           22631 MOVWF  x6B
5E54 0100           22632 MOVLB  0
5E56 EC42 F012      22633 CALL   2484
61F0 5165           22634 MOVF   x65,W
61F2 0D40           22635 MULLW  40
61F4 CFF3 F469      22636 MOVFF  FF3,469
61F8 0E40           22637 MOVLW  40
61FA 6F6A           22638 MOVWF  x6A
61FC 90D8           22639 BCF    FD8.0
61FE 3566           22640 RLCF   x66,W
6200 2769           22641 ADDWF  x69,F
6202 0E00           22642 MOVLW  00
6204 236A           22643 ADDWFC x6A,F
6206 6AF8           22644 CLRF   FF8
6208 C46A FFF7      22645 MOVFF  46A,FF7
620C C469 FFF6      22646 MOVFF  469,FF6
6210 0E04           22647 MOVLW  04
6212 6EEA           22648 MOVWF  FEA
6214 0E67           22649 MOVLW  67
6216 6EE9           22650 MOVWF  FE9
6218 6B6C           22651 CLRF   x6C
621A 0E02           22652 MOVLW  02
621C 6F6B           22653 MOVWF  x6B
621E 0100           22654 MOVLB  0
6220 EC42 F012      22655 CALL   2484
                    22656 ....................   return (value == 0xffff) ? 0 : value; 
31DC 0104           22657 MOVLB  4
31DE 3D67           22658 INCFSZ x67,W
31E0 D005           22659 BRA    31EC
31E2 3D68           22660 INCFSZ x68,W
31E4 D003           22661 BRA    31EC
31E6 6A03           22662 CLRF   03
31E8 0E00           22663 MOVLW  00
31EA D003           22664 BRA    31F2
31EC C468 F003      22665 MOVFF  468,03
31F0 5167           22666 MOVF   x67,W
31F2 6E01           22667 MOVWF  01
31F4 C003 F002      22668 MOVFF  03,02
326A 0104           22669 MOVLB  4
326C 3D67           22670 INCFSZ x67,W
326E D005           22671 BRA    327A
3270 3D68           22672 INCFSZ x68,W
3272 D003           22673 BRA    327A
3274 6A03           22674 CLRF   03
3276 0E00           22675 MOVLW  00
3278 D003           22676 BRA    3280
327A C468 F003      22677 MOVFF  468,03
327E 5167           22678 MOVF   x67,W
3280 6E01           22679 MOVWF  01
3282 C003 F002      22680 MOVFF  03,02
32F8 0104           22681 MOVLB  4
32FA 3D67           22682 INCFSZ x67,W
32FC D005           22683 BRA    3308
32FE 3D68           22684 INCFSZ x68,W
3300 D003           22685 BRA    3308
3302 6A03           22686 CLRF   03
3304 0E00           22687 MOVLW  00
3306 D003           22688 BRA    330E
3308 C468 F003      22689 MOVFF  468,03
330C 5167           22690 MOVF   x67,W
330E 6E01           22691 MOVWF  01
3310 C003 F002      22692 MOVFF  03,02
3A5A 0104           22693 MOVLB  4
3A5C 3D67           22694 INCFSZ x67,W
3A5E D005           22695 BRA    3A6A
3A60 3D68           22696 INCFSZ x68,W
3A62 D003           22697 BRA    3A6A
3A64 6A03           22698 CLRF   03
3A66 0E00           22699 MOVLW  00
3A68 D003           22700 BRA    3A70
3A6A C468 F003      22701 MOVFF  468,03
3A6E 5167           22702 MOVF   x67,W
3A70 6E01           22703 MOVWF  01
3A72 C003 F002      22704 MOVFF  03,02
3AE8 0104           22705 MOVLB  4
3AEA 3D67           22706 INCFSZ x67,W
3AEC D005           22707 BRA    3AF8
3AEE 3D68           22708 INCFSZ x68,W
3AF0 D003           22709 BRA    3AF8
3AF2 6A03           22710 CLRF   03
3AF4 0E00           22711 MOVLW  00
3AF6 D003           22712 BRA    3AFE
3AF8 C468 F003      22713 MOVFF  468,03
3AFC 5167           22714 MOVF   x67,W
3AFE 6E01           22715 MOVWF  01
3B00 C003 F002      22716 MOVFF  03,02
3B76 0104           22717 MOVLB  4
3B78 3D67           22718 INCFSZ x67,W
3B7A D005           22719 BRA    3B86
3B7C 3D68           22720 INCFSZ x68,W
3B7E D003           22721 BRA    3B86
3B80 6A03           22722 CLRF   03
3B82 0E00           22723 MOVLW  00
3B84 D003           22724 BRA    3B8C
3B86 C468 F003      22725 MOVFF  468,03
3B8A 5167           22726 MOVF   x67,W
3B8C 6E01           22727 MOVWF  01
3B8E C003 F002      22728 MOVFF  03,02
5710 0104           22729 MOVLB  4
5712 3D67           22730 INCFSZ x67,W
5714 D005           22731 BRA    5720
5716 3D68           22732 INCFSZ x68,W
5718 D003           22733 BRA    5720
571A 6A03           22734 CLRF   03
571C 0E00           22735 MOVLW  00
571E D003           22736 BRA    5726
5720 C468 F003      22737 MOVFF  468,03
5724 5167           22738 MOVF   x67,W
5726 6E01           22739 MOVWF  01
5728 C003 F002      22740 MOVFF  03,02
5812 0104           22741 MOVLB  4
5814 3D67           22742 INCFSZ x67,W
5816 D005           22743 BRA    5822
5818 3D68           22744 INCFSZ x68,W
581A D003           22745 BRA    5822
581C 6A03           22746 CLRF   03
581E 0E00           22747 MOVLW  00
5820 D003           22748 BRA    5828
5822 C468 F003      22749 MOVFF  468,03
5826 5167           22750 MOVF   x67,W
5828 6E01           22751 MOVWF  01
582A C003 F002      22752 MOVFF  03,02
5970 0104           22753 MOVLB  4
5972 3D67           22754 INCFSZ x67,W
5974 D005           22755 BRA    5980
5976 3D68           22756 INCFSZ x68,W
5978 D003           22757 BRA    5980
597A 6A03           22758 CLRF   03
597C 0E00           22759 MOVLW  00
597E D003           22760 BRA    5986
5980 C468 F003      22761 MOVFF  468,03
5984 5167           22762 MOVF   x67,W
5986 6E01           22763 MOVWF  01
5988 C003 F002      22764 MOVFF  03,02
59D8 0104           22765 MOVLB  4
59DA 3D67           22766 INCFSZ x67,W
59DC D005           22767 BRA    59E8
59DE 3D68           22768 INCFSZ x68,W
59E0 D003           22769 BRA    59E8
59E2 6A03           22770 CLRF   03
59E4 0E00           22771 MOVLW  00
59E6 D003           22772 BRA    59EE
59E8 C468 F003      22773 MOVFF  468,03
59EC 5167           22774 MOVF   x67,W
59EE 6E01           22775 MOVWF  01
59F0 C003 F002      22776 MOVFF  03,02
5A7C 0104           22777 MOVLB  4
5A7E 3D67           22778 INCFSZ x67,W
5A80 D005           22779 BRA    5A8C
5A82 3D68           22780 INCFSZ x68,W
5A84 D003           22781 BRA    5A8C
5A86 6A03           22782 CLRF   03
5A88 0E00           22783 MOVLW  00
5A8A D003           22784 BRA    5A92
5A8C C468 F003      22785 MOVFF  468,03
5A90 5167           22786 MOVF   x67,W
5A92 6E01           22787 MOVWF  01
5A94 C003 F002      22788 MOVFF  03,02
5AE0 0104           22789 MOVLB  4
5AE2 3D67           22790 INCFSZ x67,W
5AE4 D005           22791 BRA    5AF0
5AE6 3D68           22792 INCFSZ x68,W
5AE8 D003           22793 BRA    5AF0
5AEA 6A03           22794 CLRF   03
5AEC 0E00           22795 MOVLW  00
5AEE D003           22796 BRA    5AF6
5AF0 C468 F003      22797 MOVFF  468,03
5AF4 5167           22798 MOVF   x67,W
5AF6 6E01           22799 MOVWF  01
5AF8 C003 F002      22800 MOVFF  03,02
5D3E 0104           22801 MOVLB  4
5D40 3D67           22802 INCFSZ x67,W
5D42 D005           22803 BRA    5D4E
5D44 3D68           22804 INCFSZ x68,W
5D46 D003           22805 BRA    5D4E
5D48 6A03           22806 CLRF   03
5D4A 0E00           22807 MOVLW  00
5D4C D003           22808 BRA    5D54
5D4E C468 F003      22809 MOVFF  468,03
5D52 5167           22810 MOVF   x67,W
5D54 6E01           22811 MOVWF  01
5D56 C003 F002      22812 MOVFF  03,02
5DCC 0104           22813 MOVLB  4
5DCE 3D67           22814 INCFSZ x67,W
5DD0 D005           22815 BRA    5DDC
5DD2 3D68           22816 INCFSZ x68,W
5DD4 D003           22817 BRA    5DDC
5DD6 6A03           22818 CLRF   03
5DD8 0E00           22819 MOVLW  00
5DDA D003           22820 BRA    5DE2
5DDC C468 F003      22821 MOVFF  468,03
5DE0 5167           22822 MOVF   x67,W
5DE2 6E01           22823 MOVWF  01
5DE4 C003 F002      22824 MOVFF  03,02
5E5A 0104           22825 MOVLB  4
5E5C 3D67           22826 INCFSZ x67,W
5E5E D005           22827 BRA    5E6A
5E60 3D68           22828 INCFSZ x68,W
5E62 D003           22829 BRA    5E6A
5E64 6A03           22830 CLRF   03
5E66 0E00           22831 MOVLW  00
5E68 D003           22832 BRA    5E70
5E6A C468 F003      22833 MOVFF  468,03
5E6E 5167           22834 MOVF   x67,W
5E70 6E01           22835 MOVWF  01
5E72 C003 F002      22836 MOVFF  03,02
6224 0104           22837 MOVLB  4
6226 3D67           22838 INCFSZ x67,W
6228 D005           22839 BRA    6234
622A 3D68           22840 INCFSZ x68,W
622C D003           22841 BRA    6234
622E 6A03           22842 CLRF   03
6230 0E00           22843 MOVLW  00
6232 D003           22844 BRA    623A
6234 C468 F003      22845 MOVFF  468,03
6238 5167           22846 MOVF   x67,W
623A 6E01           22847 MOVWF  01
623C C003 F002      22848 MOVFF  03,02
                    22849 .................... } 
                    22850 ....................  
                    22851 .................... void set_calibration_param(calibration_table_id_t table, uint8_t index, uint16_t value) { 
                    22852 ....................   calibration_table_t temp_table; 
                    22853 ....................   memcpy(&temp_table, &calibration_area.tables[table], sizeof(temp_table)); 
                    22854 ....................   temp_table.values[index] = value; 
                    22855 ....................  
                    22856 ....................   safe_write_program_memory(&calibration_area.tables[table], &temp_table, sizeof(temp_table)); 
                    22857 .................... } 

Configuration Fuses:
   Word  1: F800   INTRC_IO PLLEN PRIMARY_ON FCMEN IESO
   Word  2: 1C19   NOPUT NOBROWNOUT BORV19 NOWDT WDT128
   Word  3: BF00   CCP2C1 PBADEN CCP3B5 HFOFST TIMER3C0 CCP2D2 MCLR
   Word  4: 0000   NOSTVREN NOLVP NOXINST DEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB

   Some fuses have been forced to be compatible with the ICD debugger.

SYMBOL TABLE
  LABEL                             VALUE

_RETURN_                          00000001
rs232_errors                      0000001A
UPPER_TICKS_1                     0000001B
strtok.save                       0000001F
message_buffer                    00000021
rfcBuff                           00000071
tti_counter                       00000113
software_mode                     00000115
prev_control_message              00000116
last_control_message              00000119
final_sf_status_response          0000011C
in_progress_sf_status_response    00000146
ant_delay                         00000170
pa_delay                          00000172
delay_tx_time                     00000174
commands                          00000176
timerTasks                        0000018E
timerTriggered                    0000027E
rbuf                              00000282
rbuf_wr_idx                       00000336
rbuf_rd_idx                       00000337
wbuf                              00000338
wbuf_wr_idx                       000003EC
wbuf_rd_idx                       000003ED
ad5312_default_conf_word          000003EE
MAIN.size                         000003F0
MAIN.res                          000003F2
comm_receive_message.buffer       000003F3
fix_boot.should_write             000003F3
process_message.message_buffer    000003F3
fix_boot.start_bytes              000003F4
comm_receive_message.size         000003F5
process_message.length            000003F5
comm_receive_message.handleMessag 000003F7
process_message.message           000003F7
comm_receive_message.buffIdx      000003F8
process_message.i                 000003F9
comm_receive_message.c            000003F9
comm_receive_message.len          000003FA
rfc1662_unpack.data               000003FB
uart_get_byte_nonblocking.dst     000003FB
handle_control_message.payload_bu 000003FD
handle_change_mode_message.payloa 000003FD
h_test_get_data.payload_buffer    000003FD
handle_get_calibration_table_mess 000003FD
h_test_set_data.payload_buffer    000003FD
rfc1662_unpack.len                000003FD
handle_bit_status_request_message 000003FD
handle_set_calibration_table_mess 000003FD
handle_version_request_message.pa 000003FD
rfc1662_unpack.dest               000003FE
h_test_get_data.response          000003FF
handle_change_mode_message.payloa 000003FF
handle_get_calibration_table_mess 000003FF
handle_control_message.i          000003FF
handle_bit_status_request_message 000003FF
get_next_byte.c                   000003FF
handle_set_calibration_table_mess 000003FF
handle_version_request_message.re 000003FF
rfc1662_unpack.restored_data_size 00000400
handle_control_message.is_pa_gain 00000400
handle_control_message.is_pa_gain 00000400
handle_control_message.response   00000401
handle_get_calibration_table_mess 00000401
rfc1662_unpack.calculated_crc     00000401
send_ack.response                 00000401
rfc1662_unpack.message_crc        00000402
restoreFlagAndEscape.data         00000403
set_calibration_table_data.table_ 00000404
set_calibration_table_data.table_ 00000405
restoreFlagAndEscape.dest         00000405
restoreFlagAndEscape.dataLen      00000407
restoreFlagAndEscape.datai        00000408
restoreFlagAndEscape.desti        00000409
handle_control_message.payload    0000042B
set_pa_gain.amplifier_operation_f 0000042F
set_pa_gain.gain                  00000430
set_pa_gain.value                 00000431
ad5312_setVout.dac                00000433
fix_boot.clear_flash              00000434
ad5312_setVout.mV                 00000434
ad5312_setVout.vout               00000436
writeData.device                  00000438
fix_boot.jump_to_0x2700           00000438
writeData.value                   00000439
writeData.data                    0000043B
fix_boot.jump_to_0x2008           0000043C
memcmp.s1                         00000440
memcmp.s2                         00000442
comm_send_message.buffer          00000444
memcmp.n                          00000444
get_calibration_table_data.table_ 00000444
get_calibration_table_data.table_ 00000445
memcmp.su1                        00000446
comm_send_message.size            00000446
comm_send_message.rfc_len         00000448
memcmp.su2                        00000448
uart_send.buffer                  0000044A
rfc1662_pack.data                 0000044A
uart_send.size                    0000044C
rfc1662_pack.dataLen              0000044C
rfc1662_pack.dest                 0000044D
push_bytes.src                    0000044D
rfc1662_pack.changed_data_size    0000044F
push_bytes.len                    0000044F
rfc1662_pack.changed_crc_size     00000450
push_bytes.D                      00000451
rfc1662_pack.crc                  00000451
crc8.buffer                       00000452
replaceFlagAndEscape.data         00000454
crc8.size                         00000454
replaceFlagAndEscape.dest         00000456
crc8.crc                          00000456
crc8.pos                          00000457
replaceFlagAndEscape.dataLen      00000458
replaceFlagAndEscape.datai        00000459
replaceFlagAndEscape.desti        0000045A
perform_last_control_message.i    0000045E
perform_last_control_message.is_p 0000045F
perform_last_control_message.pa1_ 00000460
perform_last_control_message.pa2_ 00000462
ad5312_latch.i                    00000464
sample_adc_inputs.n               00000464
sample_rev_power.n                00000465
sample_pre_amp_power.n            00000465
sample_fwd_power.n                00000465
select_antenna.antenna            00000465
set_tx_state.on                   00000465
sample_input_power.n              00000465
get_calibration_param.table_id    00000465
get_calibration_param.index       00000466
gpio_set_value.gpio               00000467
get_calibration_param.value       00000467
gpio_set_value.value              00000468
gpio_get_analog.gpio              00000468
gpio_get_analog.done              00000469
gpio_clear.gpio                   00000469
gpio_set.gpio                     00000469
ANSELA                            00000F38
ANSA0                             00000F38
ANSA1                             00000F38
ANSA2                             00000F38
ANSA3                             00000F38
ANSA5                             00000F38
ANSELB                            00000F39
ANSELC                            00000F3A
ANSC2                             00000F3A
ANSC3                             00000F3A
ANSC4                             00000F3A
ANSC5                             00000F3A
ANSC6                             00000F3A
ANSC7                             00000F3A
ANSELD                            00000F3B
ANSELE                            00000F3C
ADCMD                             00000F3D
PMD2                              00000F3D
CMP1MD                            00000F3D
CMP2MD                            00000F3D
CTMUMD                            00000F3D
CCP1MD                            00000F3E
PMD1                              00000F3E
CCP2MD                            00000F3E
CCP3MD                            00000F3E
CCP4MD                            00000F3E
CCP5MD                            00000F3E
MSSP1MD                           00000F3E
MSSP2MD                           00000F3E
TMR1MD                            00000F3F
PMD0                              00000F3F
TMR2MD                            00000F3F
TMR3MD                            00000F3F
TMR4MD                            00000F3F
TMR5MD                            00000F3F
TMR6MD                            00000F3F
UART1MD                           00000F3F
UART2MD                           00000F3F
VREFCON2                          00000F40
DACNSS                            00000F41
VREFCON1                          00000F41
DACPSS0                           00000F41
DACPSS1                           00000F41
DACOE                             00000F41
DACLPS                            00000F41
DACEN                             00000F41
VREFCON0                          00000F42
FVRS0                             00000F42
FVRS1                             00000F42
FVRST                             00000F42
FVREN                             00000F42
CTMUICON                          00000F43
IRNG0                             00000F43
IRNG1                             00000F43
ITRIM0                            00000F43
ITRIM1                            00000F43
ITRIM2                            00000F43
ITRIM3                            00000F43
ITRIM4                            00000F43
ITRIM5                            00000F43
CTMUCON                           00000F45
SRRC1E                            00000F46
SRCON1                            00000F46
SRRC2E                            00000F46
SRRCKE                            00000F46
SRRPE                             00000F46
SRSC1E                            00000F46
SRSC2E                            00000F46
SRSCKE                            00000F46
SRSPE                             00000F46
SRCON0                            00000F47
SRPR                              00000F47
SRPS                              00000F47
SRNQEN                            00000F47
SRQEN                             00000F47
SRCLK0                            00000F47
SRCLK1                            00000F47
SRCLK2                            00000F47
SRLEN                             00000F47
CCPTMRS1                          00000F48
C4TSEL0                           00000F48
C4TSEL1                           00000F48
C5TSEL0                           00000F48
C5TSEL1                           00000F48
CCPTMRS0                          00000F49
C1TSEL0                           00000F49
C1TSEL1                           00000F49
C2TSEL0                           00000F49
C2TSEL1                           00000F49
C3TSEL0                           00000F49
C3TSEL1                           00000F49
T6CON                             00000F4A
T6CKPS0                           00000F4A
T6CKPS1                           00000F4A
TMR6ON                            00000F4A
T6OUTPS0                          00000F4A
T6OUTPS1                          00000F4A
T6OUTPS2                          00000F4A
T6OUTPS3                          00000F4A
PR6                               00000F4B
TMR6                              00000F4C
T5GSS0                            00000F4D
T5GCON                            00000F4D
T5GSS1                            00000F4D
T5GVAL                            00000F4D
T5GGO                             00000F4D
T5GSPM                            00000F4D
T5GTM                             00000F4D
T5GPOL                            00000F4D
TMR5GE                            00000F4D
T5CON                             00000F4E
TMR5ON                            00000F4E
T5RD16                            00000F4E
T5SYNC                            00000F4E
T5SOSCEN                          00000F4E
T5CKPS0                           00000F4E
T5CKPS1                           00000F4E
TMR5CS0                           00000F4E
TMR5CS1                           00000F4E
TMR5                              00000F50
T4CKPS0                           00000F51
T4CON                             00000F51
T4CKPS1                           00000F51
TMR4ON                            00000F51
T4OUTPS0                          00000F51
T4OUTPS1                          00000F51
T4OUTPS2                          00000F51
T4OUTPS3                          00000F51
PR4                               00000F52
TMR4                              00000F53
CCP5M0                            00000F54
CCP5CON                           00000F54
CCP5M1                            00000F54
CCP5M2                            00000F54
CCP5M3                            00000F54
CCP5DC5B0                         00000F54
CCP5DC5B1                         00000F54
CCP_5_LOW                         00000F55
CCP_5                             00000F55
CCP_5_HIGH                        00000F56
CCPR5                             00000F56
CCP4M0                            00000F57
CCP4CON                           00000F57
CCP4M1                            00000F57
CCP4M2                            00000F57
CCP4M3                            00000F57
CCP4DC4B0                         00000F57
CCP4DC4B1                         00000F57
CCP_4_LOW                         00000F58
CCP_4                             00000F58
CCP_4_HIGH                        00000F59
CCPR4                             00000F59
STR3A                             00000F5A
PSTR3CON                          00000F5A
STR3B                             00000F5A
STR3C                             00000F5A
STR3D                             00000F5A
STR3SYNC                          00000F5A
P3SSBD0                           00000F5B
ECCP3AS                           00000F5B
P3SSBD1                           00000F5B
P3SSAC0                           00000F5B
P3SSAC1                           00000F5B
CCP3AS0                           00000F5B
CCP3AS1                           00000F5B
CCP3AS2                           00000F5B
CCP3ASE                           00000F5B
P3DC0                             00000F5C
PWM3CON                           00000F5C
P3DC1                             00000F5C
P3DC2                             00000F5C
P3DC3                             00000F5C
P3DC4                             00000F5C
P3DC5                             00000F5C
P3DC6                             00000F5C
P3RSEN                            00000F5C
CCP3M0                            00000F5D
CCP3CON                           00000F5D
CCP3M1                            00000F5D
CCP3M2                            00000F5D
CCP3M3                            00000F5D
CCP3DC3B0                         00000F5D
CCP3DC3B1                         00000F5D
CCP3P3M0                          00000F5D
CCP3P3M1                          00000F5D
CCP_3_LOW                         00000F5E
CCP_3                             00000F5E
CCPR3                             00000F5F
CCP_3_HIGH                        00000F5F
SLRA                              00000F60
SLRCON                            00000F60
SLRB                              00000F60
SLRC                              00000F60
SLRD                              00000F60
SLRE                              00000F60
WPUB                              00000F61
IOCB                              00000F62
IOCB4                             00000F62
IOCB5                             00000F62
IOCB6                             00000F62
IOCB7                             00000F62
STR2A                             00000F63
PSTR2CON                          00000F63
STR2B                             00000F63
STR2C                             00000F63
STR2D                             00000F63
STR2SYNC                          00000F63
ECCP2AS                           00000F64
P2SSBD0                           00000F64
P2SSBD1                           00000F64
P2SSAC0                           00000F64
P2SSAC1                           00000F64
CCP2AS0                           00000F64
CCP2AS1                           00000F64
CCP2AS2                           00000F64
CCP2ASE                           00000F64
PWM2CON                           00000F65
P2DC0                             00000F65
P2DC1                             00000F65
P2DC2                             00000F65
P2DC3                             00000F65
P2DC4                             00000F65
P2DC5                             00000F65
P2DC6                             00000F65
P2RSEN                            00000F65
CCP2CON                           00000F66
CCP2M0                            00000F66
CCP2M1                            00000F66
CCP2M2                            00000F66
CCP2M3                            00000F66
CCP2DC2B0                         00000F66
CCP2DC2B1                         00000F66
CCP2P2M0                          00000F66
CCP2P2M1                          00000F66
CCP_2_LOW                         00000F67
CCP_2                             00000F67
CCP_2_HIGH                        00000F68
CCPR2                             00000F68
SP2DHEN                           00000F69
SSP2CON3                          00000F69
SP2AHEN                           00000F69
SP2SBCDE                          00000F69
SP2SDAHT                          00000F69
SP2BOEN                           00000F69
SP2SCIE                           00000F69
SP2PCIE                           00000F69
SP2ACKTIM                         00000F69
SSP2MSK                           00000F6A
SSP2CON2                          00000F6B
SP2SEN                            00000F6B
SP2RSEN                           00000F6B
SP2PEN                            00000F6B
SP2RCEN                           00000F6B
SP2ACKEN                          00000F6B
SP2ACKDT                          00000F6B
SP2ACKSTAT                        00000F6B
SP2GCEN                           00000F6B
SP2SSPM0                          00000F6C
SSP2CON1                          00000F6C
SP2SSPM1                          00000F6C
SP2SSPM2                          00000F6C
SP2SSPM3                          00000F6C
SP2CKP                            00000F6C
SP2SSPEN                          00000F6C
SP2SSPOV                          00000F6C
SP2WCOL                           00000F6C
SP2BF                             00000F6D
SSP2STAT                          00000F6D
SP2UA                             00000F6D
SP2R                              00000F6D
SP2S                              00000F6D
SP2P                              00000F6D
SP2D                              00000F6D
SP2CKE                            00000F6D
SP2SMP                            00000F6D
SSP2ADD                           00000F6E
SSP2BUF                           00000F6F
BAUDCON2                          00000F70
U1ABDEN                           00000F70
U1WUE                             00000F70
U1BRG16                           00000F70
U1CKTXP                           00000F70
U1DTRXP                           00000F70
U1RCIDL                           00000F70
U1ABDOVF                          00000F70
U1RX9D                            00000F71
RCSTA2                            00000F71
U1OERR                            00000F71
U1FERR                            00000F71
U1ADDEN                           00000F71
U1CREN                            00000F71
U1SREN                            00000F71
U1RX9                             00000F71
U1SPEN                            00000F71
U2TX9D                            00000F72
TXSTA2                            00000F72
U2TRMT                            00000F72
U2BRGH                            00000F72
U2SENDB                           00000F72
U2SYNC                            00000F72
U2TXEN                            00000F72
U2TX9                             00000F72
U2CSRC                            00000F72
TXREG2                            00000F73
RCREG2                            00000F74
SPBRG2                            00000F75
SPBRGH2                           00000F76
C2SYNC                            00000F77
CM2CON1                           00000F77
C1SYNC                            00000F77
C2HYS                             00000F77
C1HYS                             00000F77
C2RSEL                            00000F77
C1RSEL                            00000F77
MC2OUT                            00000F77
MC1OUT                            00000F77
CM2CON0                           00000F78
C2CH0                             00000F78
C2CH1                             00000F78
C2R                               00000F78
C2SP                              00000F78
C2POL                             00000F78
C2OE                              00000F78
C2OUT                             00000F78
C2ON                              00000F78
C1CH0                             00000F79
CM1CON0                           00000F79
C1CH1                             00000F79
C1R                               00000F79
C1SP                              00000F79
C1POL                             00000F79
C1OE                              00000F79
C1OUT                             00000F79
C1ON                              00000F79
PIE4                              00000F7A
CCP3IE                            00000F7A
CCP4IE                            00000F7A
CCP5IE                            00000F7A
CCP3IF                            00000F7B
PIR4                              00000F7B
CCP4IF                            00000F7B
CCP5IF                            00000F7B
IPR4                              00000F7C
CCP3IP                            00000F7C
CCP4IP                            00000F7C
CCP5IP                            00000F7C
PIE5                              00000F7D
TMR4IE                            00000F7D
TMR5IE                            00000F7D
TMR6IE                            00000F7D
TMR4IF                            00000F7E
PIR5                              00000F7E
TMR5IF                            00000F7E
TMR6IF                            00000F7E
TMR4IP                            00000F7F
IPR5                              00000F7F
TMR5IP                            00000F7F
TMR6IP                            00000F7F
PORTA                             00000F80
PORTB                             00000F81
PORTC                             00000F82
PORTD                             00000F83
PORTE                             00000F84
LATA                              00000F89
LATB                              00000F8A
LATC                              00000F8B
LATD                              00000F8C
LATE                              00000F8D
TRISA                             00000F92
TRISB                             00000F93
TRISC                             00000F94
TRISD                             00000F95
TRISE                             00000F96
TRISE0                            00000F96
TRISE1                            00000F96
TRISE2                            00000F96
WPUE3                             00000F96
OSCTUNE                           00000F9B
TUN0                              00000F9B
TUN1                              00000F9B
TUN2                              00000F9B
TUN3                              00000F9B
TUN4                              00000F9B
TUN5                              00000F9B
PLLEN                             00000F9B
INTSRC                            00000F9B
HLVDL0                            00000F9C
HLVDCON                           00000F9C
HLVDL1                            00000F9C
HLVDL2                            00000F9C
HLVDL3                            00000F9C
HLVDEN                            00000F9C
IRVST                             00000F9C
BGVST                             00000F9C
VDIRMAG                           00000F9C
TMR1IE                            00000F9D
PIE1                              00000F9D
TMR2IE                            00000F9D
CCP1IE                            00000F9D
SSP1IE                            00000F9D
TX1IE                             00000F9D
RC1IE                             00000F9D
ADIE                              00000F9D
TMR1IF                            00000F9E
PIR1                              00000F9E
TMR2IF                            00000F9E
CCP1IF                            00000F9E
SSP1IF                            00000F9E
TX1IF                             00000F9E
RC1IF                             00000F9E
ADIF                              00000F9E
IPR1                              00000F9F
TMR1IP                            00000F9F
TMR2IP                            00000F9F
CCP1IP                            00000F9F
SSP1IP                            00000F9F
TX1IP                             00000F9F
RC1IP                             00000F9F
ADIP                              00000F9F
CCP2IE                            00000FA0
PIE2                              00000FA0
TMR3IE                            00000FA0
HLVDIE                            00000FA0
BCL1IE                            00000FA0
EEIE                              00000FA0
C2IE                              00000FA0
C1IE                              00000FA0
OSCFIE                            00000FA0
PIR2                              00000FA1
CCP2IF                            00000FA1
TMR3IF                            00000FA1
HLVDIF                            00000FA1
BCL1IF                            00000FA1
EEIF                              00000FA1
C2IF                              00000FA1
C1IF                              00000FA1
OSCFIF                            00000FA1
IPR2                              00000FA2
CCP2IP                            00000FA2
TMR3IP                            00000FA2
HLVDIP                            00000FA2
BCL1IP                            00000FA2
EEIP                              00000FA2
C2IP                              00000FA2
C1IP                              00000FA2
OSCFIP                            00000FA2
PIE3                              00000FA3
TMR1GIE                           00000FA3
TMR3GIE                           00000FA3
TMR5GIE                           00000FA3
CTMUIE                            00000FA3
TX2IE                             00000FA3
RC2IE                             00000FA3
BCL2IE                            00000FA3
SSP2IE                            00000FA3
PIR3                              00000FA4
TMR1GIF                           00000FA4
TMR3GIF                           00000FA4
TMR5GIF                           00000FA4
CTMUIF                            00000FA4
TX2IF                             00000FA4
RC2IF                             00000FA4
BCL2IF                            00000FA4
SSP2IF                            00000FA4
IPR3                              00000FA5
TMR1GIP                           00000FA5
TMR3GIP                           00000FA5
TMR5GIP                           00000FA5
CTMUIP                            00000FA5
TX2IP                             00000FA5
RC2IP                             00000FA5
BCL2IP                            00000FA5
SSP2IP                            00000FA5
EECON1                            00000FA6
RD                                00000FA6
WR                                00000FA6
WREN                              00000FA6
WRERR                             00000FA6
FREE                              00000FA6
CFGS                              00000FA6
EEPGD                             00000FA6
EECON2                            00000FA7
EEDATA                            00000FA8
EEADR                             00000FA9
RX9D                              00000FAB
RCSTA1                            00000FAB
OERR                              00000FAB
FERR                              00000FAB
ADDEN                             00000FAB
CREN                              00000FAB
SREN                              00000FAB
RX9                               00000FAB
SPEN                              00000FAB
TX9D                              00000FAC
TXSTA1                            00000FAC
TRMT                              00000FAC
BRGH                              00000FAC
SENDB                             00000FAC
SYNC                              00000FAC
TXEN                              00000FAC
TX9                               00000FAC
CSRC                              00000FAC
TXREG1                            00000FAD
RCREG1                            00000FAE
SPBRG1                            00000FAF
SPBRGH1                           00000FB0
T3CON                             00000FB1
TMR3ON                            00000FB1
T3RD16                            00000FB1
T3SYNC                            00000FB1
T3SOSCEN                          00000FB1
T3CKPS0                           00000FB1
T3CKPS1                           00000FB1
TMR3CS0                           00000FB1
TMR3CS1                           00000FB1
TMR3                              00000FB3
T3GSS0                            00000FB4
T3GCON                            00000FB4
T3GSS1                            00000FB4
T3GVAL                            00000FB4
T3GGO                             00000FB4
T3GSPM                            00000FB4
T3GTM                             00000FB4
T3GPOL                            00000FB4
TMR3GE                            00000FB4
P1SSBD0                           00000FB6
ECCP1AS                           00000FB6
P1SSBD1                           00000FB6
P1SSAC0                           00000FB6
P1SSAC1                           00000FB6
CCP1AS0                           00000FB6
CCP1AS1                           00000FB6
CCP1AS2                           00000FB6
CCP1ASE                           00000FB6
P1DC0                             00000FB7
PWM1CON                           00000FB7
P1DC1                             00000FB7
P1DC2                             00000FB7
P1DC3                             00000FB7
P1DC4                             00000FB7
P1DC5                             00000FB7
P1DC6                             00000FB7
P1RSEN                            00000FB7
ABDEN                             00000FB8
BAUDCON1                          00000FB8
WUE                               00000FB8
BRG16                             00000FB8
CKTXP                             00000FB8
DTRXP                             00000FB8
RCIDL                             00000FB8
ABDOVF                            00000FB8
STR1A                             00000FB9
PSTR1CON                          00000FB9
STR1B                             00000FB9
STR1C                             00000FB9
STR1D                             00000FB9
STR1SYNC                          00000FB9
T2CON                             00000FBA
T2CKPS0                           00000FBA
T2CKPS1                           00000FBA
TMR2ON                            00000FBA
T2OUTPS0                          00000FBA
T2OUTPS1                          00000FBA
T2OUTPS2                          00000FBA
T2OUTPS3                          00000FBA
PR2                               00000FBB
TMR2                              00000FBC
CCP1M0                            00000FBD
CCP1CON                           00000FBD
CCP1M1                            00000FBD
CCP1M2                            00000FBD
CCP1M3                            00000FBD
DC1B0                             00000FBD
DC1B1                             00000FBD
P1M0                              00000FBD
P1M1                              00000FBD
CCP_1_LOW                         00000FBE
CCP_1                             00000FBE
CCP_1_HIGH                        00000FBF
CCPR1                             00000FBF
ADCS0                             00000FC0
ADCON2                            00000FC0
ADCS1                             00000FC0
ADCS2                             00000FC0
ACQT0                             00000FC0
ACQT1                             00000FC0
ACQT2                             00000FC0
ADFM                              00000FC0
NVCFG0                            00000FC1
ADCON1                            00000FC1
NVCFG1                            00000FC1
PVCFG0                            00000FC1
PVCFG1                            00000FC1
TRIGSEL                           00000FC1
ADON                              00000FC2
ADCON0                            00000FC2
GO                                00000FC2
CHS0                              00000FC2
CHS1                              00000FC2
CHS2                              00000FC2
CHS3                              00000FC2
CHS4                              00000FC2
ADRES                             00000FC4
SEN                               00000FC5
SSP1CON2                          00000FC5
RSEN                              00000FC5
PEN                               00000FC5
RCEN                              00000FC5
ACKEN                             00000FC5
ACKDT                             00000FC5
ACKSTAT                           00000FC5
GCEN                              00000FC5
SSPM0                             00000FC6
SSP1CON1                          00000FC6
SSPM1                             00000FC6
SSPM2                             00000FC6
SSPM3                             00000FC6
CKP                               00000FC6
SSPEN                             00000FC6
SSPOV                             00000FC6
WCOL                              00000FC6
BF                                00000FC7
SSP1STAT                          00000FC7
UA                                00000FC7
R                                 00000FC7
s                                 00000FC7
p                                 00000FC7
D                                 00000FC7
CKE                               00000FC7
SMP                               00000FC7
SSP1ADD                           00000FC8
SSP1BUF                           00000FC9
SSP1MSK                           00000FCA
DHEN                              00000FCB
SSP1CON3                          00000FCB
AHEN                              00000FCB
SBCDE                             00000FCB
SDAHT                             00000FCB
BOEN                              00000FCB
SCIE                              00000FCB
PCIE                              00000FCB
ACKTIM                            00000FCB
T1GSS0                            00000FCC
T1GCON                            00000FCC
T1GSS1                            00000FCC
T1GVAL                            00000FCC
T1GGO                             00000FCC
T1GSPM                            00000FCC
T1GTM                             00000FCC
T1GPOL                            00000FCC
TMR1GE                            00000FCC
TMR1ON                            00000FCD
T1CON                             00000FCD
T1RD16                            00000FCD
T1SYNC                            00000FCD
T1SOSCEN                          00000FCD
T1CKPS0                           00000FCD
T1CKPS1                           00000FCD
TMR1CS0                           00000FCD
TMR1CS1                           00000FCD
TMR1                              00000FCF
BOR                               00000FD0
RCON                              00000FD0
POR                               00000FD0
PD                                00000FD0
TO                                00000FD0
RI                                00000FD0
SBOREN                            00000FD0
IPEN                              00000FD0
WDTCON                            00000FD1
SWDTEN                            00000FD1
LFIOFS                            00000FD2
OSCCON2                           00000FD2
MFIOFS                            00000FD2
PRISD                             00000FD2
SOSCGO                            00000FD2
MFIOSEL                           00000FD2
SOSCRUN                           00000FD2
PLLRDY                            00000FD2
SCS0                              00000FD3
OSCCON                            00000FD3
SCS1                              00000FD3
HFIOFS                            00000FD3
OSTS                              00000FD3
IRCF0                             00000FD3
IRCF1                             00000FD3
IRCF2                             00000FD3
IDLEN                             00000FD3
T0PS0                             00000FD5
T0CON                             00000FD5
T0PS1                             00000FD5
T0PS2                             00000FD5
PSA                               00000FD5
T0SE                              00000FD5
T0CS                              00000FD5
T08BIT                            00000FD5
TMR0ON                            00000FD5
TMR0                              00000FD7
status                            00000FD8
c                                 00000FD8
DC                                00000FD8
Z                                 00000FD8
OV                                00000FD8
n                                 00000FD8
FSR2                              00000FDA
PLUSW2                            00000FDB
PREINC2                           00000FDC
POSTDEC2                          00000FDD
POSTINC2                          00000FDE
INDF2                             00000FDF
BSR                               00000FE0
FSR1                              00000FE2
PLUSW1                            00000FE3
PREINC1                           00000FE4
POSTDEC1                          00000FE5
POSTINC1                          00000FE6
INDF1                             00000FE7
WREG                              00000FE8
FSR0                              00000FEA
PLUSW0                            00000FEB
PREINC0                           00000FEC
POSTDEC0                          00000FED
POSTINC0                          00000FEE
INDF0                             00000FEF
INTCON3                           00000FF0
INT1IF                            00000FF0
INT2IF                            00000FF0
INT1IE                            00000FF0
INT2IE                            00000FF0
INT1IP                            00000FF0
INT2IP                            00000FF0
INTCON2                           00000FF1
RBIP                              00000FF1
TMR0IP                            00000FF1
INTEDG2                           00000FF1
INTEDG1                           00000FF1
INTEDG0                           00000FF1
RBPU                              00000FF1
RBIF                              00000FF2
INTCON                            00000FF2
INT0IF                            00000FF2
TMR0IF                            00000FF2
RBIE                              00000FF2
INT0IE                            00000FF2
TMR0IE                            00000FF2
PEIE_GIEL                         00000FF2
GIE_GIEH                          00000FF2
PROD                              00000FF4
TABLAT                            00000FF5
TBLPTR                            00000FF7
TBLPTRU                           00000FF8
PCL                               00000FF9
PCLATH                            00000FFA
PCLATU                            00000FFB
STKPTR0                           00000FFC
STKPTR                            00000FFC
STKPTR1                           00000FFC
STKPTR2                           00000FFC
STKPTR3                           00000FFC
STKPTR4                           00000FFC
STKUNF                            00000FFC
STKFUL                            00000FFC
TOS                               00000FFE
TOSU                              00000FFF
Allocation:                       0000EEEF
memcmp                            00000035
fix_boot                          00000036
MAIN                              00000027
crc8_table                        00000020
crc8                              00000052
gpios                             00000021
gpio_init                         00000037
gpio_set                          0000002D
gpio_clear                        00000022
gpio_set_value                    0000005B
gpio_get_analog                   0000005F
comm_init                         00000037
comm_receive_message              00000053
comm_send_message                 00000056
send_ack                          00000062
set_tx_state                      00000023
set_pa_gain                       00000056
select_antenna                    0000005B
sample_fwd_power                  00000024
sample_rev_power                  00000025
sample_input_power                00000026
sample_pre_amp_power              0000002F
finalize_sf_status_request_respon 00000024
sample_adc_inputs                 0000005D
perform_last_control_message      0000005B
handle_control_message            00000058
handle_bit_status_request_message 00000061
handle_version_request_message    00000061
handle_change_mode_message        00000062
handle_set_calibration_table_mess 00000063
handle_get_calibration_table_mess 00000063
h_test_set_data                   00000064
h_test_get_data                   00000064
process_message                   00000065
init_message_handlers             00000037
ext_isr                           0000002F
replaceFlagAndEscape              00000054
restoreFlagAndEscape              00000052
rfc1662_pack                      00000054
rfc1662_unpack                    00000053
uart_init                         00000037
get_next_byte                     0000003F
push_bytes                        00000055
uart_get_byte_nonblocking         00000051
uart_send                         0000003F
RDA_isr                           00000035
TBE_isr                           00000035
uart_clear_errors                 00000026
writeData                         0000003F
ad5312_latch                      00000060
ad5312_setVout                    00000058
ad5312_init                       00000050
get_calibration_table_data        00000063
set_calibration_table_data        00000062
get_calibration_param             00000061
Memory space:                     0000EEEF

MEMORY USAGE
